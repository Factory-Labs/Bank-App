{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "a",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "b",
          "type": "bytes32"
        }
      ],
      "name": "parentHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "contracts/MerkleLib.sol"
  },
  "ast": {
    "absolutePath": "contracts/MerkleLib.sol",
    "exportedSymbols": {
      "MerkleLib": [
        1264
      ]
    },
    "id": 1265,
    "license": "GPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1184,
        "literals": [
          "solidity",
          "0.8",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "42:22:1"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "MerkleLib",
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 1185,
          "nodeType": "StructuredDocumentation",
          "src": "66:189:1",
          "text": "@title A library for merkle trees\n @author metapriest\n @notice This library is used to check merkle proofs very efficiently.\n @dev Each additional proof element adds ~1000 gas"
        },
        "fullyImplemented": true,
        "id": 1264,
        "linearizedBaseContracts": [
          1264
        ],
        "name": "MerkleLib",
        "nameLocation": "263:9:1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1229,
              "nodeType": "Block",
              "src": "904:562:1",
              "statements": [
                {
                  "assignments": [
                    1199
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1199,
                      "mutability": "mutable",
                      "name": "currentHash",
                      "nameLocation": "922:11:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1229,
                      "src": "914:19:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1198,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "914:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1201,
                  "initialValue": {
                    "id": 1200,
                    "name": "leaf",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1190,
                    "src": "936:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "914:26:1"
                },
                {
                  "body": {
                    "id": 1223,
                    "nodeType": "Block",
                    "src": "1184:72:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 1221,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1214,
                            "name": "currentHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1199,
                            "src": "1198:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1216,
                                "name": "currentHash",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1199,
                                "src": "1223:11:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "baseExpression": {
                                  "id": 1217,
                                  "name": "proof",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1193,
                                  "src": "1236:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                    "typeString": "bytes32[] memory"
                                  }
                                },
                                "id": 1219,
                                "indexExpression": {
                                  "id": 1218,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1203,
                                  "src": "1242:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1236:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "id": 1215,
                              "name": "parentHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1263,
                              "src": "1212:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
                                "typeString": "function (bytes32,bytes32) pure returns (bytes32)"
                              }
                            },
                            "id": 1220,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1212:33:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "1198:47:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 1222,
                        "nodeType": "ExpressionStatement",
                        "src": "1198:47:1"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1209,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1206,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1203,
                      "src": "1158:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 1207,
                        "name": "proof",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1193,
                        "src": "1162:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                          "typeString": "bytes32[] memory"
                        }
                      },
                      "id": 1208,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1162:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1158:16:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1224,
                  "initializationExpression": {
                    "assignments": [
                      1203
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 1203,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "1151:1:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1224,
                        "src": "1146:6:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1202,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1146:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 1205,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 1204,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1155:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1146:10:1"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 1212,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftHandSide": {
                        "id": 1210,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1203,
                        "src": "1176:1:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "Assignment",
                      "operator": "+=",
                      "rightHandSide": {
                        "hexValue": "31",
                        "id": 1211,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1181:1:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "src": "1176:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1213,
                    "nodeType": "ExpressionStatement",
                    "src": "1176:6:1"
                  },
                  "nodeType": "ForStatement",
                  "src": "1141:115:1"
                },
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "id": 1227,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1225,
                      "name": "currentHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1199,
                      "src": "1440:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 1226,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1188,
                      "src": "1455:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1440:19:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1197,
                  "id": 1228,
                  "nodeType": "Return",
                  "src": "1433:26:1"
                }
              ]
            },
            "documentation": {
              "id": 1186,
              "nodeType": "StructuredDocumentation",
              "src": "280:519:1",
              "text": "@notice Check the merkle proof to determine whether leaf data was included in dataset represented by merkle root\n @dev Leaf is pre-hashed to allow calling contract to implement whatever hashing scheme they want\n @param root root hash of merkle tree that is the destination of the hash chain\n @param leaf the pre-hashed leaf data, the starting point of the proof\n @param proof the array of hashes forming a hash chain from leaf to root\n @return true if proof is correct, else false"
            },
            "functionSelector": "9da7347c",
            "id": 1230,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyProof",
            "nameLocation": "813:11:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1194,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1188,
                  "mutability": "mutable",
                  "name": "root",
                  "nameLocation": "833:4:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1230,
                  "src": "825:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1187,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "825:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1190,
                  "mutability": "mutable",
                  "name": "leaf",
                  "nameLocation": "847:4:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1230,
                  "src": "839:12:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1189,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "839:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1193,
                  "mutability": "mutable",
                  "name": "proof",
                  "nameLocation": "870:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1230,
                  "src": "853:22:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1191,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "853:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 1192,
                    "nodeType": "ArrayTypeName",
                    "src": "853:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "824:52:1"
            },
            "returnParameters": {
              "id": 1197,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1196,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1230,
                  "src": "898:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1195,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "898:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "897:6:1"
            },
            "scope": 1264,
            "src": "804:662:1",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1262,
              "nodeType": "Block",
              "src": "1819:151:1",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "id": 1242,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1240,
                      "name": "a",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1233,
                      "src": "1833:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 1241,
                      "name": "b",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1235,
                      "src": "1837:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1833:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 1260,
                    "nodeType": "Block",
                    "src": "1905:59:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1255,
                                  "name": "b",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1235,
                                  "src": "1947:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                {
                                  "id": 1256,
                                  "name": "a",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1233,
                                  "src": "1950:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                ],
                                "expression": {
                                  "id": 1253,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "1936:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 1254,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encode",
                                "nodeType": "MemberAccess",
                                "src": "1936:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 1257,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1936:16:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 1252,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -8,
                            "src": "1926:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              "typeString": "function (bytes memory) pure returns (bytes32)"
                            }
                          },
                          "id": 1258,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1926:27:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "functionReturnParameters": 1239,
                        "id": 1259,
                        "nodeType": "Return",
                        "src": "1919:34:1"
                      }
                    ]
                  },
                  "id": 1261,
                  "nodeType": "IfStatement",
                  "src": "1829:135:1",
                  "trueBody": {
                    "id": 1251,
                    "nodeType": "Block",
                    "src": "1840:59:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 1246,
                                  "name": "a",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1233,
                                  "src": "1882:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                {
                                  "id": 1247,
                                  "name": "b",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1235,
                                  "src": "1885:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                ],
                                "expression": {
                                  "id": 1244,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "1871:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 1245,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encode",
                                "nodeType": "MemberAccess",
                                "src": "1871:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 1248,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1871:16:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 1243,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -8,
                            "src": "1861:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                              "typeString": "function (bytes memory) pure returns (bytes32)"
                            }
                          },
                          "id": 1249,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1861:27:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "functionReturnParameters": 1239,
                        "id": 1250,
                        "nodeType": "Return",
                        "src": "1854:34:1"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 1231,
              "nodeType": "StructuredDocumentation",
              "src": "1472:270:1",
              "text": "@notice Compute the hash of the parent node in the merkle tree\n @dev The arguments are sorted to remove ambiguity about tree definition\n @param a hash of left child node\n @param b hash of right child node\n @return hash of sorted arguments"
            },
            "functionSelector": "9580f1f2",
            "id": 1263,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "parentHash",
            "nameLocation": "1756:10:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1236,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1233,
                  "mutability": "mutable",
                  "name": "a",
                  "nameLocation": "1775:1:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1263,
                  "src": "1767:9:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1232,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1767:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1235,
                  "mutability": "mutable",
                  "name": "b",
                  "nameLocation": "1786:1:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1263,
                  "src": "1778:9:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1234,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1778:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1766:22:1"
            },
            "returnParameters": {
              "id": 1239,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1238,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1263,
                  "src": "1810:7:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1237,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1810:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1809:9:1"
            },
            "scope": 1264,
            "src": "1747:223:1",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 1265,
        "src": "255:1718:1",
        "usedErrors": []
      }
    ],
    "src": "42:1932:1"
  },
  "bytecode": "6102b661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80639580f1f2146100455780639da7347c1461006b575b600080fd5b610058610053366004610139565b61008e565b6040519081526020015b60405180910390f35b61007e610079366004610171565b6100e9565b6040519015158152602001610062565b6000818310156100ca5760408051602081018590529081018390526060015b6040516020818303038152906040528051906020012090506100e3565b60408051602081018490529081018490526060016100ad565b92915050565b600082815b835181101561012e5761011a8285838151811061010d5761010d610244565b602002602001015161008e565b915061012760018261025a565b90506100ee565b509093149392505050565b6000806040838503121561014c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561018657600080fd5b833592506020808501359250604085013567ffffffffffffffff808211156101ad57600080fd5b818701915087601f8301126101c157600080fd5b8135818111156101d3576101d361015b565b8060051b604051601f19603f830116810181811085821117156101f8576101f861015b565b60405291825284820192508381018501918a83111561021657600080fd5b938501935b828510156102345784358452938501939285019261021b565b8096505050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b6000821982111561027b57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212209ea161693e4a9e0c619e9952295cd8d5283c1eb07cb6ca83bce9db6c99b9da2964736f6c63430008090033",
  "bytecodeSha1": "b0fcc8318be382416cfe44051098f86acef935ac",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.9+commit.e5eed63a"
  },
  "contractName": "MerkleLib",
  "coverageMap": {
    "branches": {
      "1": {
        "MerkleLib.parentHash": {
          "5": [
            1833,
            1838,
            false
          ]
        }
      }
    },
    "statements": {
      "1": {
        "MerkleLib.parentHash": {
          "0": [
            1854,
            1888
          ],
          "1": [
            1919,
            1953
          ]
        },
        "MerkleLib.verifyProof": {
          "2": [
            1198,
            1245
          ],
          "3": [
            1176,
            1182
          ],
          "4": [
            1433,
            1459
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80639580f1f2146100455780639da7347c1461006b575b600080fd5b610058610053366004610139565b61008e565b6040519081526020015b60405180910390f35b61007e610079366004610171565b6100e9565b6040519015158152602001610062565b6000818310156100ca5760408051602081018590529081018390526060015b6040516020818303038152906040528051906020012090506100e3565b60408051602081018490529081018490526060016100ad565b92915050565b600082815b835181101561012e5761011a8285838151811061010d5761010d610244565b602002602001015161008e565b915061012760018261025a565b90506100ee565b509093149392505050565b6000806040838503121561014c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561018657600080fd5b833592506020808501359250604085013567ffffffffffffffff808211156101ad57600080fd5b818701915087601f8301126101c157600080fd5b8135818111156101d3576101d361015b565b8060051b604051601f19603f830116810181811085821117156101f8576101f861015b565b60405291825284820192508381018501918a83111561021657600080fd5b938501935b828510156102345784358452938501939285019261021b565b8096505050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b6000821982111561027b57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212209ea161693e4a9e0c619e9952295cd8d5283c1eb07cb6ca83bce9db6c99b9da2964736f6c63430008090033",
  "deployedSourceMap": "255:1718:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1747:223;;;;;;:::i;:::-;;:::i;:::-;;;421:25:5;;;409:2;394:18;1747:223:1;;;;;;;;804:662;;;;;;:::i;:::-;;:::i;:::-;;;2018:14:5;;2011:22;1993:41;;1981:2;1966:18;804:662:1;1845:195:5;1747:223:1;1810:7;1837:1;1833;:5;1829:135;;;1871:16;;;;;;2219:25:5;;;2260:18;;;2253:34;;;2192:18;;1871:16:1;;;;;;;;;;;;;1861:27;;;;;;1854:34;;;;1829:135;1936:16;;;;;;2219:25:5;;;2260:18;;;2253:34;;;2192:18;;1936:16:1;2045:248:5;1829:135:1;1747:223;;;;:::o;804:662::-;898:4;936;898;1141:115;1162:5;:12;1158:1;:16;1141:115;;;1212:33;1223:11;1236:5;1242:1;1236:8;;;;;;;;:::i;:::-;;;;;;;1212:10;:33::i;:::-;1198:47;-1:-1:-1;1176:6:1;1181:1;1176:6;;:::i;:::-;;;1141:115;;;-1:-1:-1;1440:19:1;;;;804:662;-1:-1:-1;;;804:662:1:o;14:248:5:-;82:6;90;143:2;131:9;122:7;118:23;114:32;111:52;;;159:1;156;149:12;111:52;-1:-1:-1;;182:23:5;;;252:2;237:18;;;224:32;;-1:-1:-1;14:248:5:o;457:127::-;518:10;513:3;509:20;506:1;499:31;549:4;546:1;539:15;573:4;570:1;563:15;589:1251;691:6;699;707;760:2;748:9;739:7;735:23;731:32;728:52;;;776:1;773;766:12;728:52;812:9;799:23;789:33;;841:2;890;879:9;875:18;862:32;852:42;;945:2;934:9;930:18;917:32;968:18;1009:2;1001:6;998:14;995:34;;;1025:1;1022;1015:12;995:34;1063:6;1052:9;1048:22;1038:32;;1108:7;1101:4;1097:2;1093:13;1089:27;1079:55;;1130:1;1127;1120:12;1079:55;1166:2;1153:16;1188:2;1184;1181:10;1178:36;;;1194:18;;:::i;:::-;1240:2;1237:1;1233:10;1272:2;1266:9;1335:2;1331:7;1326:2;1322;1318:11;1314:25;1306:6;1302:38;1390:6;1378:10;1375:22;1370:2;1358:10;1355:18;1352:46;1349:72;;;1401:18;;:::i;:::-;1437:2;1430:22;1487:18;;;1521:15;;;;-1:-1:-1;1563:11:5;;;1559:20;;;1591:19;;;1588:39;;;1623:1;1620;1613:12;1588:39;1647:11;;;;1667:142;1683:6;1678:3;1675:15;1667:142;;;1749:17;;1737:30;;1700:12;;;;1787;;;;1667:142;;;1828:6;1818:16;;;;;;;;589:1251;;;;;:::o;2298:127::-;2359:10;2354:3;2350:20;2347:1;2340:31;2390:4;2387:1;2380:15;2414:4;2411:1;2404:15;2430:225;2470:3;2501:1;2497:6;2494:1;2491:13;2488:136;;;2546:10;2541:3;2537:20;2534:1;2527:31;2581:4;2578:1;2571:15;2609:4;2606:1;2599:15;2488:136;-1:-1:-1;2640:9:5;;2430:225::o",
  "language": "Solidity",
  "natspec": {
    "author": "metapriest",
    "details": "Each additional proof element adds ~1000 gas",
    "kind": "dev",
    "methods": {
      "parentHash(bytes32,bytes32)": {
        "details": "The arguments are sorted to remove ambiguity about tree definition",
        "notice": "Compute the hash of the parent node in the merkle tree",
        "params": {
          "a": "hash of left child node",
          "b": "hash of right child node"
        },
        "returns": {
          "_0": "hash of sorted arguments"
        }
      },
      "verifyProof(bytes32,bytes32,bytes32[])": {
        "details": "Leaf is pre-hashed to allow calling contract to implement whatever hashing scheme they want",
        "notice": "Check the merkle proof to determine whether leaf data was included in dataset represented by merkle root",
        "params": {
          "leaf": "the pre-hashed leaf data, the starting point of the proof",
          "proof": "the array of hashes forming a hash chain from leaf to root",
          "root": "root hash of merkle tree that is the destination of the hash chain"
        },
        "returns": {
          "_0": "true if proof is correct, else false"
        }
      }
    },
    "notice": "This library is used to check merkle proofs very efficiently.",
    "title": "A library for merkle trees",
    "version": 1
  },
  "offset": [
    255,
    1973
  ],
  "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9580F1F2 EQ PUSH2 0x45 JUMPI DUP1 PUSH4 0x9DA7347C EQ PUSH2 0x6B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x58 PUSH2 0x53 CALLDATASIZE PUSH1 0x4 PUSH2 0x139 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7E PUSH2 0x79 CALLDATASIZE PUSH1 0x4 PUSH2 0x171 JUMP JUMPDEST PUSH2 0xE9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x62 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT ISZERO PUSH2 0xCA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0xE3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 ADD PUSH2 0xAD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x12E JUMPI PUSH2 0x11A DUP3 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x10D JUMPI PUSH2 0x10D PUSH2 0x244 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x8E JUMP JUMPDEST SWAP2 POP PUSH2 0x127 PUSH1 0x1 DUP3 PUSH2 0x25A JUMP JUMPDEST SWAP1 POP PUSH2 0xEE JUMP JUMPDEST POP SWAP1 SWAP4 EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP1 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1D3 JUMPI PUSH2 0x1D3 PUSH2 0x15B JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x1F8 JUMPI PUSH2 0x1F8 PUSH2 0x15B JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP11 DUP4 GT ISZERO PUSH2 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x234 JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x21B JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x27B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 LOG1 PUSH2 0x693E 0x4A SWAP15 0xC PUSH2 0x9E99 MSTORE 0x29 0x5C 0xD8 0xD5 0x28 EXTCODECOPY 0x1E 0xB0 PUSH29 0xB6CA83BCE9DB6C99B9DA2964736F6C6343000809003300000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        255,
        1973
      ],
      "op": "PUSH20",
      "path": "1",
      "value": "0x0"
    },
    "21": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "ADDRESS",
      "path": "1"
    },
    "22": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "EQ",
      "path": "1"
    },
    "23": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "25": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "27": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "28": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "30": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "31": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "LT",
      "path": "1"
    },
    "32": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x40"
    },
    "35": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "36": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "38": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "39": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "41": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "SHR",
      "path": "1"
    },
    "42": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "DUP1",
      "path": "1"
    },
    "43": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x9580F1F2"
    },
    "48": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "EQ",
      "path": "1"
    },
    "49": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x45"
    },
    "52": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "53": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "DUP1",
      "path": "1"
    },
    "54": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x9DA7347C"
    },
    "59": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "EQ",
      "path": "1"
    },
    "60": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6B"
    },
    "63": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "64": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "65": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "67": {
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "DUP1",
      "path": "1"
    },
    "68": {
      "first_revert": true,
      "fn": null,
      "offset": [
        255,
        1973
      ],
      "op": "REVERT",
      "path": "1"
    },
    "69": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "70": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x58"
    },
    "73": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x53"
    },
    "76": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "77": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "79": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x139"
    },
    "82": {
      "fn": "MerkleLib.parentHash",
      "jump": "i",
      "offset": [
        1747,
        1970
      ],
      "op": "JUMP",
      "path": "1"
    },
    "83": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "84": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8E"
    },
    "87": {
      "fn": "MerkleLib.parentHash",
      "jump": "i",
      "offset": [
        1747,
        1970
      ],
      "op": "JUMP",
      "path": "1"
    },
    "88": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "89": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "91": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "92": {
      "op": "SWAP1"
    },
    "93": {
      "op": "DUP2"
    },
    "94": {
      "op": "MSTORE"
    },
    "95": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "97": {
      "op": "ADD"
    },
    "98": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "99": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "101": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "102": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "DUP1",
      "path": "1"
    },
    "103": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "104": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "SUB",
      "path": "1"
    },
    "105": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "106": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "RETURN",
      "path": "1"
    },
    "107": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        804,
        1466
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "108": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        804,
        1466
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7E"
    },
    "111": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        804,
        1466
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x79"
    },
    "114": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        804,
        1466
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "115": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        804,
        1466
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "117": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        804,
        1466
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x171"
    },
    "120": {
      "fn": "MerkleLib.verifyProof",
      "jump": "i",
      "offset": [
        804,
        1466
      ],
      "op": "JUMP",
      "path": "1"
    },
    "121": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        804,
        1466
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "122": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        804,
        1466
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE9"
    },
    "125": {
      "fn": "MerkleLib.verifyProof",
      "jump": "i",
      "offset": [
        804,
        1466
      ],
      "op": "JUMP",
      "path": "1"
    },
    "126": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        804,
        1466
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "127": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        804,
        1466
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "129": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        804,
        1466
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "130": {
      "op": "SWAP1"
    },
    "131": {
      "op": "ISZERO"
    },
    "132": {
      "op": "ISZERO"
    },
    "133": {
      "op": "DUP2"
    },
    "134": {
      "op": "MSTORE"
    },
    "135": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "137": {
      "op": "ADD"
    },
    "138": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        804,
        1466
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x62"
    },
    "141": {
      "op": "JUMP"
    },
    "142": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "143": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1810,
        1817
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "145": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1837,
        1838
      ],
      "op": "DUP2",
      "path": "1"
    },
    "146": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1833,
        1834
      ],
      "op": "DUP4",
      "path": "1"
    },
    "147": {
      "branch": 5,
      "fn": "MerkleLib.parentHash",
      "offset": [
        1833,
        1838
      ],
      "op": "LT",
      "path": "1"
    },
    "148": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1829,
        1964
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "149": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1829,
        1964
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCA"
    },
    "152": {
      "branch": 5,
      "fn": "MerkleLib.parentHash",
      "offset": [
        1829,
        1964
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "153": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 0,
      "value": "0x40"
    },
    "155": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "DUP1",
      "path": "1"
    },
    "156": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "157": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "159": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "DUP2",
      "path": "1"
    },
    "160": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "ADD",
      "path": "1"
    },
    "161": {
      "op": "DUP6"
    },
    "162": {
      "op": "SWAP1"
    },
    "163": {
      "op": "MSTORE"
    },
    "164": {
      "op": "SWAP1"
    },
    "165": {
      "op": "DUP2"
    },
    "166": {
      "op": "ADD"
    },
    "167": {
      "op": "DUP4"
    },
    "168": {
      "op": "SWAP1"
    },
    "169": {
      "op": "MSTORE"
    },
    "170": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "172": {
      "op": "ADD"
    },
    "173": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "174": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "176": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "177": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "179": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "DUP2",
      "path": "1"
    },
    "180": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "DUP4",
      "path": "1"
    },
    "181": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "SUB",
      "path": "1"
    },
    "182": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "SUB",
      "path": "1"
    },
    "183": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "DUP2",
      "path": "1"
    },
    "184": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "185": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "186": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "188": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1871,
        1887
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "189": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1861,
        1888
      ],
      "op": "DUP1",
      "path": "1"
    },
    "190": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1861,
        1888
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "191": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1861,
        1888
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "192": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1861,
        1888
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "194": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1861,
        1888
      ],
      "op": "ADD",
      "path": "1"
    },
    "195": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1861,
        1888
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "196": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1854,
        1888
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "197": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1854,
        1888
      ],
      "op": "POP",
      "path": "1"
    },
    "198": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1854,
        1888
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE3"
    },
    "201": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1854,
        1888
      ],
      "op": "JUMP",
      "path": "1"
    },
    "202": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1829,
        1964
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "203": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1936,
        1952
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 1,
      "value": "0x40"
    },
    "205": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1936,
        1952
      ],
      "op": "DUP1",
      "path": "1"
    },
    "206": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1936,
        1952
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "207": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1936,
        1952
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "209": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1936,
        1952
      ],
      "op": "DUP2",
      "path": "1"
    },
    "210": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1936,
        1952
      ],
      "op": "ADD",
      "path": "1"
    },
    "211": {
      "op": "DUP5"
    },
    "212": {
      "op": "SWAP1"
    },
    "213": {
      "op": "MSTORE"
    },
    "214": {
      "op": "SWAP1"
    },
    "215": {
      "op": "DUP2"
    },
    "216": {
      "op": "ADD"
    },
    "217": {
      "op": "DUP5"
    },
    "218": {
      "op": "SWAP1"
    },
    "219": {
      "op": "MSTORE"
    },
    "220": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "222": {
      "op": "ADD"
    },
    "223": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1936,
        1952
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xAD"
    },
    "226": {
      "op": "JUMP"
    },
    "227": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1829,
        1964
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "228": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "229": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "230": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "POP",
      "path": "1"
    },
    "231": {
      "fn": "MerkleLib.parentHash",
      "offset": [
        1747,
        1970
      ],
      "op": "POP",
      "path": "1"
    },
    "232": {
      "fn": "MerkleLib.parentHash",
      "jump": "o",
      "offset": [
        1747,
        1970
      ],
      "op": "JUMP",
      "path": "1"
    },
    "233": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        804,
        1466
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "234": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        898,
        902
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "236": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        936,
        940
      ],
      "op": "DUP3",
      "path": "1"
    },
    "237": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        898,
        902
      ],
      "op": "DUP2",
      "path": "1"
    },
    "238": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1141,
        1256
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "239": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1162,
        1167
      ],
      "op": "DUP4",
      "path": "1"
    },
    "240": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1162,
        1174
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "241": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1158,
        1159
      ],
      "op": "DUP2",
      "path": "1"
    },
    "242": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1158,
        1174
      ],
      "op": "LT",
      "path": "1"
    },
    "243": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1141,
        1256
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "244": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1141,
        1256
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12E"
    },
    "247": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1141,
        1256
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "248": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1212,
        1245
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 2,
      "value": "0x11A"
    },
    "251": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1223,
        1234
      ],
      "op": "DUP3",
      "path": "1"
    },
    "252": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1241
      ],
      "op": "DUP6",
      "path": "1"
    },
    "253": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1242,
        1243
      ],
      "op": "DUP4",
      "path": "1"
    },
    "254": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "DUP2",
      "path": "1"
    },
    "255": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "256": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "DUP2",
      "path": "1"
    },
    "257": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "LT",
      "path": "1"
    },
    "258": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10D"
    },
    "261": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "262": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10D"
    },
    "265": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x244"
    },
    "268": {
      "fn": "MerkleLib.verifyProof",
      "jump": "i",
      "offset": [
        1236,
        1244
      ],
      "op": "JUMP",
      "path": "1"
    },
    "269": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "270": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "272": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "MUL",
      "path": "1"
    },
    "273": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "275": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "ADD",
      "path": "1"
    },
    "276": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "ADD",
      "path": "1"
    },
    "277": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1236,
        1244
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "278": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1212,
        1222
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8E"
    },
    "281": {
      "fn": "MerkleLib.verifyProof",
      "jump": "i",
      "offset": [
        1212,
        1245
      ],
      "op": "JUMP",
      "path": "1"
    },
    "282": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1212,
        1245
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "283": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1198,
        1245
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "284": {
      "op": "POP"
    },
    "285": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1176,
        1182
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 3,
      "value": "0x127"
    },
    "288": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1181,
        1182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "290": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1176,
        1182
      ],
      "op": "DUP3",
      "path": "1"
    },
    "291": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1176,
        1182
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x25A"
    },
    "294": {
      "fn": "MerkleLib.verifyProof",
      "jump": "i",
      "offset": [
        1176,
        1182
      ],
      "op": "JUMP",
      "path": "1"
    },
    "295": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1176,
        1182
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "296": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1176,
        1182
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "297": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1176,
        1182
      ],
      "op": "POP",
      "path": "1"
    },
    "298": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1141,
        1256
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xEE"
    },
    "301": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1141,
        1256
      ],
      "op": "JUMP",
      "path": "1"
    },
    "302": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1141,
        1256
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "303": {
      "op": "POP"
    },
    "304": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1440,
        1459
      ],
      "op": "SWAP1",
      "path": "1",
      "statement": 4
    },
    "305": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1440,
        1459
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "306": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1440,
        1459
      ],
      "op": "EQ",
      "path": "1"
    },
    "307": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        1440,
        1459
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "308": {
      "fn": "MerkleLib.verifyProof",
      "offset": [
        804,
        1466
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "309": {
      "op": "POP"
    },
    "310": {
      "op": "POP"
    },
    "311": {
      "op": "POP"
    },
    "312": {
      "fn": "MerkleLib.verifyProof",
      "jump": "o",
      "offset": [
        804,
        1466
      ],
      "op": "JUMP",
      "path": "1"
    },
    "313": {
      "op": "JUMPDEST"
    },
    "314": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "316": {
      "op": "DUP1"
    },
    "317": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "319": {
      "op": "DUP4"
    },
    "320": {
      "op": "DUP6"
    },
    "321": {
      "op": "SUB"
    },
    "322": {
      "op": "SLT"
    },
    "323": {
      "op": "ISZERO"
    },
    "324": {
      "op": "PUSH2",
      "value": "0x14C"
    },
    "327": {
      "op": "JUMPI"
    },
    "328": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "330": {
      "op": "DUP1"
    },
    "331": {
      "op": "REVERT"
    },
    "332": {
      "op": "JUMPDEST"
    },
    "333": {
      "op": "POP"
    },
    "334": {
      "op": "POP"
    },
    "335": {
      "op": "DUP1"
    },
    "336": {
      "op": "CALLDATALOAD"
    },
    "337": {
      "op": "SWAP3"
    },
    "338": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "340": {
      "op": "SWAP1"
    },
    "341": {
      "op": "SWAP2"
    },
    "342": {
      "op": "ADD"
    },
    "343": {
      "op": "CALLDATALOAD"
    },
    "344": {
      "op": "SWAP2"
    },
    "345": {
      "op": "POP"
    },
    "346": {
      "jump": "o",
      "op": "JUMP"
    },
    "347": {
      "op": "JUMPDEST"
    },
    "348": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "353": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "355": {
      "op": "SHL"
    },
    "356": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "358": {
      "op": "MSTORE"
    },
    "359": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "361": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "363": {
      "op": "MSTORE"
    },
    "364": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "366": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "368": {
      "op": "REVERT"
    },
    "369": {
      "op": "JUMPDEST"
    },
    "370": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "372": {
      "op": "DUP1"
    },
    "373": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "375": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "377": {
      "op": "DUP5"
    },
    "378": {
      "op": "DUP7"
    },
    "379": {
      "op": "SUB"
    },
    "380": {
      "op": "SLT"
    },
    "381": {
      "op": "ISZERO"
    },
    "382": {
      "op": "PUSH2",
      "value": "0x186"
    },
    "385": {
      "op": "JUMPI"
    },
    "386": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "388": {
      "op": "DUP1"
    },
    "389": {
      "op": "REVERT"
    },
    "390": {
      "op": "JUMPDEST"
    },
    "391": {
      "op": "DUP4"
    },
    "392": {
      "op": "CALLDATALOAD"
    },
    "393": {
      "op": "SWAP3"
    },
    "394": {
      "op": "POP"
    },
    "395": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "397": {
      "op": "DUP1"
    },
    "398": {
      "op": "DUP6"
    },
    "399": {
      "op": "ADD"
    },
    "400": {
      "op": "CALLDATALOAD"
    },
    "401": {
      "op": "SWAP3"
    },
    "402": {
      "op": "POP"
    },
    "403": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "405": {
      "op": "DUP6"
    },
    "406": {
      "op": "ADD"
    },
    "407": {
      "op": "CALLDATALOAD"
    },
    "408": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "417": {
      "op": "DUP1"
    },
    "418": {
      "op": "DUP3"
    },
    "419": {
      "op": "GT"
    },
    "420": {
      "op": "ISZERO"
    },
    "421": {
      "op": "PUSH2",
      "value": "0x1AD"
    },
    "424": {
      "op": "JUMPI"
    },
    "425": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "427": {
      "op": "DUP1"
    },
    "428": {
      "op": "REVERT"
    },
    "429": {
      "op": "JUMPDEST"
    },
    "430": {
      "op": "DUP2"
    },
    "431": {
      "op": "DUP8"
    },
    "432": {
      "op": "ADD"
    },
    "433": {
      "op": "SWAP2"
    },
    "434": {
      "op": "POP"
    },
    "435": {
      "op": "DUP8"
    },
    "436": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "438": {
      "op": "DUP4"
    },
    "439": {
      "op": "ADD"
    },
    "440": {
      "op": "SLT"
    },
    "441": {
      "op": "PUSH2",
      "value": "0x1C1"
    },
    "444": {
      "op": "JUMPI"
    },
    "445": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "447": {
      "op": "DUP1"
    },
    "448": {
      "op": "REVERT"
    },
    "449": {
      "op": "JUMPDEST"
    },
    "450": {
      "op": "DUP2"
    },
    "451": {
      "op": "CALLDATALOAD"
    },
    "452": {
      "op": "DUP2"
    },
    "453": {
      "op": "DUP2"
    },
    "454": {
      "op": "GT"
    },
    "455": {
      "op": "ISZERO"
    },
    "456": {
      "op": "PUSH2",
      "value": "0x1D3"
    },
    "459": {
      "op": "JUMPI"
    },
    "460": {
      "op": "PUSH2",
      "value": "0x1D3"
    },
    "463": {
      "op": "PUSH2",
      "value": "0x15B"
    },
    "466": {
      "jump": "i",
      "op": "JUMP"
    },
    "467": {
      "op": "JUMPDEST"
    },
    "468": {
      "op": "DUP1"
    },
    "469": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "471": {
      "op": "SHL"
    },
    "472": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "474": {
      "op": "MLOAD"
    },
    "475": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "477": {
      "op": "NOT"
    },
    "478": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "480": {
      "op": "DUP4"
    },
    "481": {
      "op": "ADD"
    },
    "482": {
      "op": "AND"
    },
    "483": {
      "op": "DUP2"
    },
    "484": {
      "op": "ADD"
    },
    "485": {
      "op": "DUP2"
    },
    "486": {
      "op": "DUP2"
    },
    "487": {
      "op": "LT"
    },
    "488": {
      "op": "DUP6"
    },
    "489": {
      "op": "DUP3"
    },
    "490": {
      "op": "GT"
    },
    "491": {
      "op": "OR"
    },
    "492": {
      "op": "ISZERO"
    },
    "493": {
      "op": "PUSH2",
      "value": "0x1F8"
    },
    "496": {
      "op": "JUMPI"
    },
    "497": {
      "op": "PUSH2",
      "value": "0x1F8"
    },
    "500": {
      "op": "PUSH2",
      "value": "0x15B"
    },
    "503": {
      "jump": "i",
      "op": "JUMP"
    },
    "504": {
      "op": "JUMPDEST"
    },
    "505": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "507": {
      "op": "MSTORE"
    },
    "508": {
      "op": "SWAP2"
    },
    "509": {
      "op": "DUP3"
    },
    "510": {
      "op": "MSTORE"
    },
    "511": {
      "op": "DUP5"
    },
    "512": {
      "op": "DUP3"
    },
    "513": {
      "op": "ADD"
    },
    "514": {
      "op": "SWAP3"
    },
    "515": {
      "op": "POP"
    },
    "516": {
      "op": "DUP4"
    },
    "517": {
      "op": "DUP2"
    },
    "518": {
      "op": "ADD"
    },
    "519": {
      "op": "DUP6"
    },
    "520": {
      "op": "ADD"
    },
    "521": {
      "op": "SWAP2"
    },
    "522": {
      "op": "DUP11"
    },
    "523": {
      "op": "DUP4"
    },
    "524": {
      "op": "GT"
    },
    "525": {
      "op": "ISZERO"
    },
    "526": {
      "op": "PUSH2",
      "value": "0x216"
    },
    "529": {
      "op": "JUMPI"
    },
    "530": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "532": {
      "op": "DUP1"
    },
    "533": {
      "op": "REVERT"
    },
    "534": {
      "op": "JUMPDEST"
    },
    "535": {
      "op": "SWAP4"
    },
    "536": {
      "op": "DUP6"
    },
    "537": {
      "op": "ADD"
    },
    "538": {
      "op": "SWAP4"
    },
    "539": {
      "op": "JUMPDEST"
    },
    "540": {
      "op": "DUP3"
    },
    "541": {
      "op": "DUP6"
    },
    "542": {
      "op": "LT"
    },
    "543": {
      "op": "ISZERO"
    },
    "544": {
      "op": "PUSH2",
      "value": "0x234"
    },
    "547": {
      "op": "JUMPI"
    },
    "548": {
      "op": "DUP5"
    },
    "549": {
      "op": "CALLDATALOAD"
    },
    "550": {
      "op": "DUP5"
    },
    "551": {
      "op": "MSTORE"
    },
    "552": {
      "op": "SWAP4"
    },
    "553": {
      "op": "DUP6"
    },
    "554": {
      "op": "ADD"
    },
    "555": {
      "op": "SWAP4"
    },
    "556": {
      "op": "SWAP3"
    },
    "557": {
      "op": "DUP6"
    },
    "558": {
      "op": "ADD"
    },
    "559": {
      "op": "SWAP3"
    },
    "560": {
      "op": "PUSH2",
      "value": "0x21B"
    },
    "563": {
      "op": "JUMP"
    },
    "564": {
      "op": "JUMPDEST"
    },
    "565": {
      "op": "DUP1"
    },
    "566": {
      "op": "SWAP7"
    },
    "567": {
      "op": "POP"
    },
    "568": {
      "op": "POP"
    },
    "569": {
      "op": "POP"
    },
    "570": {
      "op": "POP"
    },
    "571": {
      "op": "POP"
    },
    "572": {
      "op": "POP"
    },
    "573": {
      "op": "POP"
    },
    "574": {
      "op": "SWAP3"
    },
    "575": {
      "op": "POP"
    },
    "576": {
      "op": "SWAP3"
    },
    "577": {
      "op": "POP"
    },
    "578": {
      "op": "SWAP3"
    },
    "579": {
      "jump": "o",
      "op": "JUMP"
    },
    "580": {
      "op": "JUMPDEST"
    },
    "581": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "586": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "588": {
      "op": "SHL"
    },
    "589": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "591": {
      "op": "MSTORE"
    },
    "592": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "594": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "596": {
      "op": "MSTORE"
    },
    "597": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "599": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "601": {
      "op": "REVERT"
    },
    "602": {
      "op": "JUMPDEST"
    },
    "603": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "605": {
      "op": "DUP3"
    },
    "606": {
      "op": "NOT"
    },
    "607": {
      "op": "DUP3"
    },
    "608": {
      "op": "GT"
    },
    "609": {
      "op": "ISZERO"
    },
    "610": {
      "op": "PUSH2",
      "value": "0x27B"
    },
    "613": {
      "op": "JUMPI"
    },
    "614": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "619": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "621": {
      "op": "SHL"
    },
    "622": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "624": {
      "op": "MSTORE"
    },
    "625": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "627": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "629": {
      "op": "MSTORE"
    },
    "630": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "632": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "634": {
      "op": "REVERT"
    },
    "635": {
      "op": "JUMPDEST"
    },
    "636": {
      "op": "POP"
    },
    "637": {
      "op": "ADD"
    },
    "638": {
      "op": "SWAP1"
    },
    "639": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "6f7b4df35119ca5c9181206cb4ec690df2c5e5b2",
  "source": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\n/// @title A library for merkle trees\n/// @author metapriest\n/// @notice This library is used to check merkle proofs very efficiently.\n/// @dev Each additional proof element adds ~1000 gas\nlibrary MerkleLib {\n\n    /// @notice Check the merkle proof to determine whether leaf data was included in dataset represented by merkle root\n    /// @dev Leaf is pre-hashed to allow calling contract to implement whatever hashing scheme they want\n    /// @param root root hash of merkle tree that is the destination of the hash chain\n    /// @param leaf the pre-hashed leaf data, the starting point of the proof\n    /// @param proof the array of hashes forming a hash chain from leaf to root\n    /// @return true if proof is correct, else false\n    function verifyProof(bytes32 root, bytes32 leaf, bytes32[] memory proof) public pure returns (bool) {\n        bytes32 currentHash = leaf;\n\n        // the proof is all siblings of the ancestors of the leaf (including the sibling of the leaf itself)\n        // each iteration of this loop steps one layer higher in the merkle tree\n        for (uint i = 0; i < proof.length; i += 1) {\n            currentHash = parentHash(currentHash, proof[i]);\n        }\n\n        // does the result match the expected root? if so this leaf was committed to when the root was posted\n        // else we must assume the data was not included\n        return currentHash == root;\n    }\n\n    /// @notice Compute the hash of the parent node in the merkle tree\n    /// @dev The arguments are sorted to remove ambiguity about tree definition\n    /// @param a hash of left child node\n    /// @param b hash of right child node\n    /// @return hash of sorted arguments\n    function parentHash(bytes32 a, bytes32 b) public pure returns (bytes32) {\n        if (a < b) {\n            return keccak256(abi.encode(a, b));\n        } else {\n            return keccak256(abi.encode(b, a));\n        }\n    }\n\n}\n",
  "sourceMap": "255:1718:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;255:1718:1;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/MerkleLib.sol",
  "type": "library"
}