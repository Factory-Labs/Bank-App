{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        }
      ],
      "name": "MerkleRootAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensLeft",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalOccurred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "name": "addMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "depositTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockPeriodEndTime",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleTrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "rootHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTrees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tranches",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coinsPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastWithdrawalTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockPeriodEndTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "contracts/MerkleLib.sol",
    "3": "contracts/MerkleVesting.sol",
    "4": "interfaces/IERC20.sol"
  },
  "ast": {
    "absolutePath": "contracts/MerkleVesting.sol",
    "exportedSymbols": {
      "IERC20": [
        1342
      ],
      "MerkleLib": [
        1264
      ],
      "MerkleVesting": [
        1182
      ]
    },
    "id": 1183,
    "license": "GPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 799,
        "literals": [
          "solidity",
          "0.8",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "42:22:3"
      },
      {
        "absolutePath": "interfaces/IERC20.sol",
        "file": "../interfaces/IERC20.sol",
        "id": 800,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1183,
        "sourceUnit": 1343,
        "src": "66:34:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/MerkleLib.sol",
        "file": "./MerkleLib.sol",
        "id": 801,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1183,
        "sourceUnit": 1265,
        "src": "101:25:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "MerkleVesting",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 802,
          "nodeType": "StructuredDocumentation",
          "src": "128:429:3",
          "text": "@title A factory pattern for merkle-vesting, that is, a time release schedule for tokens, using merkle proofs to scale\n @author metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki\n @notice This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.\n @dev The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof"
        },
        "fullyImplemented": true,
        "id": 1182,
        "linearizedBaseContracts": [
          1182
        ],
        "name": "MerkleVesting",
        "nameLocation": "566:13:3",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 805,
            "libraryName": {
              "id": 803,
              "name": "MerkleLib",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1264,
              "src": "592:9:3"
            },
            "nodeType": "UsingForDirective",
            "src": "586:28:3",
            "typeName": {
              "id": 804,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "606:7:3",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "390b7c66",
            "id": 808,
            "mutability": "mutable",
            "name": "numTrees",
            "nameLocation": "688:8:3",
            "nodeType": "VariableDeclaration",
            "scope": 1182,
            "src": "676:24:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 806,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "676:4:3",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 807,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "699:1:3",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "canonicalName": "MerkleVesting.Tranche",
            "id": 823,
            "members": [
              {
                "constant": false,
                "id": 810,
                "mutability": "mutable",
                "name": "totalCoins",
                "nameLocation": "813:10:3",
                "nodeType": "VariableDeclaration",
                "scope": 823,
                "src": "808:15:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 809,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "808:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 812,
                "mutability": "mutable",
                "name": "currentCoins",
                "nameLocation": "914:12:3",
                "nodeType": "VariableDeclaration",
                "scope": 823,
                "src": "909:17:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 811,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "909:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 814,
                "mutability": "mutable",
                "name": "startTime",
                "nameLocation": "1014:9:3",
                "nodeType": "VariableDeclaration",
                "scope": 823,
                "src": "1009:14:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 813,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1009:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 816,
                "mutability": "mutable",
                "name": "endTime",
                "nameLocation": "1105:7:3",
                "nodeType": "VariableDeclaration",
                "scope": 823,
                "src": "1100:12:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 815,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1100:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 818,
                "mutability": "mutable",
                "name": "coinsPerSecond",
                "nameLocation": "1186:14:3",
                "nodeType": "VariableDeclaration",
                "scope": 823,
                "src": "1181:19:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 817,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1181:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 820,
                "mutability": "mutable",
                "name": "lastWithdrawalTime",
                "nameLocation": "1305:18:3",
                "nodeType": "VariableDeclaration",
                "scope": 823,
                "src": "1300:23:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 819,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1300:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 822,
                "mutability": "mutable",
                "name": "lockPeriodEndTime",
                "nameLocation": "1409:17:3",
                "nodeType": "VariableDeclaration",
                "scope": 823,
                "src": "1404:22:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 821,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1404:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Tranche",
            "nameLocation": "790:7:3",
            "nodeType": "StructDefinition",
            "scope": 1182,
            "src": "783:700:3",
            "visibility": "public"
          },
          {
            "canonicalName": "MerkleVesting.MerkleTree",
            "id": 832,
            "members": [
              {
                "constant": false,
                "id": 825,
                "mutability": "mutable",
                "name": "rootHash",
                "nameLocation": "1597:8:3",
                "nodeType": "VariableDeclaration",
                "scope": 832,
                "src": "1589:16:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 824,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1589:7:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 827,
                "mutability": "mutable",
                "name": "ipfsHash",
                "nameLocation": "1724:8:3",
                "nodeType": "VariableDeclaration",
                "scope": 832,
                "src": "1716:16:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 826,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1716:7:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 829,
                "mutability": "mutable",
                "name": "tokenAddress",
                "nameLocation": "1839:12:3",
                "nodeType": "VariableDeclaration",
                "scope": 832,
                "src": "1831:20:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 828,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1831:7:3",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 831,
                "mutability": "mutable",
                "name": "tokenBalance",
                "nameLocation": "1925:12:3",
                "nodeType": "VariableDeclaration",
                "scope": 832,
                "src": "1920:17:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 830,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1920:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "MerkleTree",
            "nameLocation": "1568:10:3",
            "nodeType": "StructDefinition",
            "scope": 1182,
            "src": "1561:478:3",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "86bb8249",
            "id": 838,
            "mutability": "mutable",
            "name": "initialized",
            "nameLocation": "2157:11:3",
            "nodeType": "VariableDeclaration",
            "scope": 1182,
            "src": "2106:62:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
              "typeString": "mapping(address => mapping(uint256 => bool))"
            },
            "typeName": {
              "id": 837,
              "keyType": {
                "id": 833,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2115:7:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "2106:43:3",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                "typeString": "mapping(address => mapping(uint256 => bool))"
              },
              "valueType": {
                "id": 836,
                "keyType": {
                  "id": 834,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2135:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "2126:22:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                  "typeString": "mapping(uint256 => bool)"
                },
                "valueType": {
                  "id": 835,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "2143:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "85d88cb1",
            "id": 843,
            "mutability": "mutable",
            "name": "merkleTrees",
            "nameLocation": "2274:11:3",
            "nodeType": "VariableDeclaration",
            "scope": 1182,
            "src": "2238:47:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$832_storage_$",
              "typeString": "mapping(uint256 => struct MerkleVesting.MerkleTree)"
            },
            "typeName": {
              "id": 842,
              "keyType": {
                "id": 839,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "2247:4:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "2238:28:3",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$832_storage_$",
                "typeString": "mapping(uint256 => struct MerkleVesting.MerkleTree)"
              },
              "valueType": {
                "id": 841,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 840,
                  "name": "MerkleTree",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 832,
                  "src": "2255:10:3"
                },
                "referencedDeclaration": 832,
                "src": "2255:10:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_MerkleTree_$832_storage_ptr",
                  "typeString": "struct MerkleVesting.MerkleTree"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "c26cb54f",
            "id": 850,
            "mutability": "mutable",
            "name": "tranches",
            "nameLocation": "2413:8:3",
            "nodeType": "VariableDeclaration",
            "scope": 1182,
            "src": "2359:62:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$823_storage_$_$",
              "typeString": "mapping(address => mapping(uint256 => struct MerkleVesting.Tranche))"
            },
            "typeName": {
              "id": 849,
              "keyType": {
                "id": 844,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2368:7:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "2359:46:3",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$823_storage_$_$",
                "typeString": "mapping(address => mapping(uint256 => struct MerkleVesting.Tranche))"
              },
              "valueType": {
                "id": 848,
                "keyType": {
                  "id": 845,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2388:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "2379:25:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$823_storage_$",
                  "typeString": "mapping(uint256 => struct MerkleVesting.Tranche)"
                },
                "valueType": {
                  "id": 847,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 846,
                    "name": "Tranche",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 823,
                    "src": "2396:7:3"
                  },
                  "referencedDeclaration": 823,
                  "src": "2396:7:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Tranche_$823_storage_ptr",
                    "typeString": "struct MerkleVesting.Tranche"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 860,
            "name": "WithdrawalOccurred",
            "nameLocation": "2473:18:3",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 859,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 852,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "2505:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 860,
                  "src": "2492:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 851,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2492:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 854,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "2532:11:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 860,
                  "src": "2516:27:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 853,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2516:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 856,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "numTokens",
                  "nameLocation": "2550:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 860,
                  "src": "2545:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 855,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2545:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 858,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokensLeft",
                  "nameLocation": "2566:10:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 860,
                  "src": "2561:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 857,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2561:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2491:86:3"
            },
            "src": "2467:111:3"
          },
          {
            "anonymous": false,
            "id": 870,
            "name": "MerkleRootAdded",
            "nameLocation": "2624:15:3",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 869,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 862,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "2653:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 870,
                  "src": "2640:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 861,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2640:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 864,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "2680:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 870,
                  "src": "2664:28:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 863,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2664:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 866,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "2702:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 870,
                  "src": "2694:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 865,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2694:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 868,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "2719:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 870,
                  "src": "2711:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 867,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2711:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2639:89:3"
            },
            "src": "2618:111:3"
          },
          {
            "anonymous": false,
            "id": 878,
            "name": "TokensDeposited",
            "nameLocation": "2779:15:3",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 877,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 872,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "2808:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 878,
                  "src": "2795:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 871,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2795:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 874,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "2835:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 878,
                  "src": "2819:28:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 873,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2819:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 876,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2854:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 878,
                  "src": "2849:11:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 875,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2849:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2794:67:3"
            },
            "src": "2773:89:3"
          },
          {
            "body": {
              "id": 914,
              "nodeType": "Block",
              "src": "3713:403:3",
              "statements": [
                {
                  "expression": {
                    "id": 900,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 890,
                        "name": "merkleTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 843,
                        "src": "3779:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$832_storage_$",
                          "typeString": "mapping(uint256 => struct MerkleVesting.MerkleTree storage ref)"
                        }
                      },
                      "id": 893,
                      "indexExpression": {
                        "id": 892,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "++",
                        "prefix": true,
                        "src": "3791:10:3",
                        "subExpression": {
                          "id": 891,
                          "name": "numTrees",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 808,
                          "src": "3793:8:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3779:23:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$832_storage",
                        "typeString": "struct MerkleVesting.MerkleTree storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 895,
                          "name": "newRoot",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 881,
                          "src": "3829:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 896,
                          "name": "ipfsHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 883,
                          "src": "3850:8:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 897,
                          "name": "tokenAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 885,
                          "src": "3872:12:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "hexValue": "30",
                          "id": 898,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3898:1:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 894,
                        "name": "MerkleTree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 832,
                        "src": "3805:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_MerkleTree_$832_storage_ptr_$",
                          "typeString": "type(struct MerkleVesting.MerkleTree storage pointer)"
                        }
                      },
                      "id": 899,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3805:155:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$832_memory_ptr",
                        "typeString": "struct MerkleVesting.MerkleTree memory"
                      }
                    },
                    "src": "3779:181:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$832_storage",
                      "typeString": "struct MerkleVesting.MerkleTree storage ref"
                    }
                  },
                  "id": 901,
                  "nodeType": "ExpressionStatement",
                  "src": "3779:181:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 903,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 808,
                        "src": "4013:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 904,
                        "name": "tokenBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 887,
                        "src": "4023:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 902,
                      "name": "depositTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 961,
                      "src": "3999:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 905,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3999:37:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 906,
                  "nodeType": "ExpressionStatement",
                  "src": "3999:37:3"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 908,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 808,
                        "src": "4067:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 909,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 885,
                        "src": "4077:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 910,
                        "name": "newRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 881,
                        "src": "4091:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 911,
                        "name": "ipfsHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 883,
                        "src": "4100:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 907,
                      "name": "MerkleRootAdded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 870,
                      "src": "4051:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_bytes32_$_t_bytes32_$returns$__$",
                        "typeString": "function (uint256,address,bytes32,bytes32)"
                      }
                    },
                    "id": 912,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4051:58:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 913,
                  "nodeType": "EmitStatement",
                  "src": "4046:63:3"
                }
              ]
            },
            "documentation": {
              "id": 879,
              "nodeType": "StructuredDocumentation",
              "src": "2868:734:3",
              "text": "@notice Add a new merkle tree to the contract, creating a new merkle-vesting-schedule\n @dev Anyone may call this function, therefore we must make sure trees cannot affect each other\n @dev Root hash should be built from (destination, totalCoins, startTime, endTime, lockPeriodEndTime)\n @param newRoot root hash of merkle tree representing vesting schedules\n @param ipfsHash the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable\n @param tokenAddress the address of the token contract that is being distributed\n @param tokenBalance the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
            },
            "functionSelector": "9e18a054",
            "id": 915,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addMerkleRoot",
            "nameLocation": "3616:13:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 888,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 881,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "3638:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 915,
                  "src": "3630:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 880,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3630:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 883,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "3655:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 915,
                  "src": "3647:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 882,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3647:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 885,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "3673:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 915,
                  "src": "3665:20:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 884,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3665:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 887,
                  "mutability": "mutable",
                  "name": "tokenBalance",
                  "nameLocation": "3692:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 915,
                  "src": "3687:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 886,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3687:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3629:76:3"
            },
            "returnParameters": {
              "id": 889,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3713:0:3"
            },
            "scope": 1182,
            "src": "3607:509:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 960,
              "nodeType": "Block",
              "src": "4670:553:3",
              "statements": [
                {
                  "assignments": [
                    925
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 925,
                      "mutability": "mutable",
                      "name": "merkleTree",
                      "nameLocation": "4739:10:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 960,
                      "src": "4720:29:3",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$832_storage_ptr",
                        "typeString": "struct MerkleVesting.MerkleTree"
                      },
                      "typeName": {
                        "id": 924,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 923,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 832,
                          "src": "4720:10:3"
                        },
                        "referencedDeclaration": 832,
                        "src": "4720:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$832_storage_ptr",
                          "typeString": "struct MerkleVesting.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 929,
                  "initialValue": {
                    "baseExpression": {
                      "id": 926,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 843,
                      "src": "4752:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$832_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleVesting.MerkleTree storage ref)"
                      }
                    },
                    "id": 928,
                    "indexExpression": {
                      "id": 927,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 918,
                      "src": "4764:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4752:22:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$832_storage",
                      "typeString": "struct MerkleVesting.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4720:54:3"
                },
                {
                  "expression": {
                    "id": 934,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 930,
                        "name": "merkleTree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 925,
                        "src": "4846:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$832_storage_ptr",
                          "typeString": "struct MerkleVesting.MerkleTree storage pointer"
                        }
                      },
                      "id": 932,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 831,
                      "src": "4846:23:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 933,
                      "name": "value",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 920,
                      "src": "4873:5:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4846:32:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 935,
                  "nodeType": "ExpressionStatement",
                  "src": "4846:32:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 942,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "5084:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 943,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "5084:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 946,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "5104:4:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_MerkleVesting_$1182",
                                  "typeString": "contract MerkleVesting"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_MerkleVesting_$1182",
                                  "typeString": "contract MerkleVesting"
                                }
                              ],
                              "id": 945,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "5096:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 944,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "5096:7:3",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 947,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5096:13:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 948,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 920,
                            "src": "5111:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 938,
                                  "name": "merkleTree",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 925,
                                  "src": "5046:10:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_MerkleTree_$832_storage_ptr",
                                    "typeString": "struct MerkleVesting.MerkleTree storage pointer"
                                  }
                                },
                                "id": 939,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "tokenAddress",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 829,
                                "src": "5046:23:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 937,
                              "name": "IERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1342,
                              "src": "5039:6:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC20_$1342_$",
                                "typeString": "type(contract IERC20)"
                              }
                            },
                            "id": 940,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "5039:31:3",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$1342",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 941,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1323,
                          "src": "5039:44:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) external returns (bool)"
                          }
                        },
                        "id": 949,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5039:78:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433230207472616e73666572206661696c6564",
                        "id": 950,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5119:23:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff",
                          "typeString": "literal_string \"ERC20 transfer failed\""
                        },
                        "value": "ERC20 transfer failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff",
                          "typeString": "literal_string \"ERC20 transfer failed\""
                        }
                      ],
                      "id": 936,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5031:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 951,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5031:112:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 952,
                  "nodeType": "ExpressionStatement",
                  "src": "5031:112:3"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 954,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 918,
                        "src": "5174:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 955,
                          "name": "merkleTree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 925,
                          "src": "5185:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$832_storage_ptr",
                            "typeString": "struct MerkleVesting.MerkleTree storage pointer"
                          }
                        },
                        "id": 956,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "tokenAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 829,
                        "src": "5185:23:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 957,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 920,
                        "src": "5210:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 953,
                      "name": "TokensDeposited",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 878,
                      "src": "5158:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,address,uint256)"
                      }
                    },
                    "id": 958,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5158:58:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 959,
                  "nodeType": "EmitStatement",
                  "src": "5153:63:3"
                }
              ]
            },
            "documentation": {
              "id": 916,
              "nodeType": "StructuredDocumentation",
              "src": "4122:485:3",
              "text": "@notice Add funds to an existing merkle-vesting-schedule\n @dev Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious\n @dev If the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs\n @param treeIndex index into array-like map of merkleTrees\n @param value the amount of tokens user wishes to use to fund the airdrop, note trees can be underfunded"
            },
            "functionSelector": "f16ad51e",
            "id": 961,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "depositTokens",
            "nameLocation": "4621:13:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 921,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 918,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4640:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 961,
                  "src": "4635:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 917,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4635:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 920,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "4656:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 961,
                  "src": "4651:10:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 919,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4651:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4634:28:3"
            },
            "returnParameters": {
              "id": 922,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4670:0:3"
            },
            "scope": 1182,
            "src": "4612:611:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1064,
              "nodeType": "Block",
              "src": "6441:1499:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 986,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "6505:36:3",
                        "subExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 981,
                              "name": "initialized",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 838,
                              "src": "6506:11:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                                "typeString": "mapping(address => mapping(uint256 => bool))"
                              }
                            },
                            "id": 983,
                            "indexExpression": {
                              "id": 982,
                              "name": "destination",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 966,
                              "src": "6518:11:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6506:24:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                              "typeString": "mapping(uint256 => bool)"
                            }
                          },
                          "id": 985,
                          "indexExpression": {
                            "id": 984,
                            "name": "treeIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 964,
                            "src": "6531:9:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6506:35:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "416c726561647920696e697469616c697a6564",
                        "id": 987,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6543:21:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0",
                          "typeString": "literal_string \"Already initialized\""
                        },
                        "value": "Already initialized"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0",
                          "typeString": "literal_string \"Already initialized\""
                        }
                      ],
                      "id": 980,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6497:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 988,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6497:68:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 989,
                  "nodeType": "ExpressionStatement",
                  "src": "6497:68:3"
                },
                {
                  "assignments": [
                    991
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 991,
                      "mutability": "mutable",
                      "name": "leaf",
                      "nameLocation": "6758:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1064,
                      "src": "6750:12:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 990,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "6750:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1002,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 995,
                            "name": "destination",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 966,
                            "src": "6786:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 996,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 968,
                            "src": "6799:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 997,
                            "name": "startTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 970,
                            "src": "6811:9:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 998,
                            "name": "endTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 972,
                            "src": "6822:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 999,
                            "name": "lockPeriodEndTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 974,
                            "src": "6831:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 993,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "6775:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 994,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "6775:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 1000,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6775:74:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 992,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "6765:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 1001,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6765:85:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6750:100:3"
                },
                {
                  "assignments": [
                    1005
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1005,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "6917:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1064,
                      "src": "6899:22:3",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$832_memory_ptr",
                        "typeString": "struct MerkleVesting.MerkleTree"
                      },
                      "typeName": {
                        "id": 1004,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1003,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 832,
                          "src": "6899:10:3"
                        },
                        "referencedDeclaration": 832,
                        "src": "6899:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$832_storage_ptr",
                          "typeString": "struct MerkleVesting.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1009,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1006,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 843,
                      "src": "6924:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$832_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleVesting.MerkleTree storage ref)"
                      }
                    },
                    "id": 1008,
                    "indexExpression": {
                      "id": 1007,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 964,
                      "src": "6936:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6924:22:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$832_storage",
                      "typeString": "struct MerkleVesting.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6899:47:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1014,
                            "name": "leaf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 991,
                            "src": "7061:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 1015,
                            "name": "proof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 977,
                            "src": "7067:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          ],
                          "expression": {
                            "expression": {
                              "id": 1011,
                              "name": "tree",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1005,
                              "src": "7035:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MerkleTree_$832_memory_ptr",
                                "typeString": "struct MerkleVesting.MerkleTree memory"
                              }
                            },
                            "id": 1012,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "rootHash",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 825,
                            "src": "7035:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "id": 1013,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "verifyProof",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1230,
                          "src": "7035:25:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_delegatecall_pure$_t_bytes32_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes32_$",
                            "typeString": "function (bytes32,bytes32,bytes32[] memory) pure returns (bool)"
                          }
                        },
                        "id": 1016,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7035:38:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5468652070726f6f6620636f756c64206e6f742062652076657269666965642e",
                        "id": 1017,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7075:34:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6befa95a15378f3fa320a9fc597710e04d31854374b1378d40ad4268234fd91c",
                          "typeString": "literal_string \"The proof could not be verified.\""
                        },
                        "value": "The proof could not be verified."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6befa95a15378f3fa320a9fc597710e04d31854374b1378d40ad4268234fd91c",
                          "typeString": "literal_string \"The proof could not be verified.\""
                        }
                      ],
                      "id": 1010,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7027:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1018,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7027:83:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1019,
                  "nodeType": "ExpressionStatement",
                  "src": "7027:83:3"
                },
                {
                  "expression": {
                    "id": 1026,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 1020,
                          "name": "initialized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 838,
                          "src": "7181:11:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                            "typeString": "mapping(address => mapping(uint256 => bool))"
                          }
                        },
                        "id": 1023,
                        "indexExpression": {
                          "id": 1021,
                          "name": "destination",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 966,
                          "src": "7193:11:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7181:24:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                          "typeString": "mapping(uint256 => bool)"
                        }
                      },
                      "id": 1024,
                      "indexExpression": {
                        "id": 1022,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 964,
                        "src": "7206:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7181:35:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1025,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7219:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "7181:42:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1027,
                  "nodeType": "ExpressionStatement",
                  "src": "7181:42:3"
                },
                {
                  "assignments": [
                    1029
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1029,
                      "mutability": "mutable",
                      "name": "coinsPerSecond",
                      "nameLocation": "7299:14:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1064,
                      "src": "7294:19:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1028,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "7294:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1036,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1035,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1030,
                      "name": "totalCoins",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 968,
                      "src": "7316:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1033,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1031,
                            "name": "endTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 972,
                            "src": "7330:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 1032,
                            "name": "startTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 970,
                            "src": "7340:9:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "7330:19:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1034,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "7329:21:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7316:34:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7294:56:3"
                },
                {
                  "expression": {
                    "id": 1051,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 1037,
                          "name": "tranches",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 850,
                          "src": "7411:8:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$823_storage_$_$",
                            "typeString": "mapping(address => mapping(uint256 => struct MerkleVesting.Tranche storage ref))"
                          }
                        },
                        "id": 1040,
                        "indexExpression": {
                          "id": 1038,
                          "name": "destination",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 966,
                          "src": "7420:11:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7411:21:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$823_storage_$",
                          "typeString": "mapping(uint256 => struct MerkleVesting.Tranche storage ref)"
                        }
                      },
                      "id": 1041,
                      "indexExpression": {
                        "id": 1039,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 964,
                        "src": "7433:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7411:32:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$823_storage",
                        "typeString": "struct MerkleVesting.Tranche storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1043,
                          "name": "totalCoins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 968,
                          "src": "7467:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1044,
                          "name": "totalCoins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 968,
                          "src": "7522:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1045,
                          "name": "startTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 970,
                          "src": "7584:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1046,
                          "name": "endTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 972,
                          "src": "7607:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1047,
                          "name": "coinsPerSecond",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1029,
                          "src": "7628:14:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1048,
                          "name": "startTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 970,
                          "src": "7656:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1049,
                          "name": "lockPeriodEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 974,
                          "src": "7720:17:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 1042,
                        "name": "Tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 823,
                        "src": "7446:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Tranche_$823_storage_ptr_$",
                          "typeString": "type(struct MerkleVesting.Tranche storage pointer)"
                        }
                      },
                      "id": 1050,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7446:301:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$823_memory_ptr",
                        "typeString": "struct MerkleVesting.Tranche memory"
                      }
                    },
                    "src": "7411:336:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$823_storage",
                      "typeString": "struct MerkleVesting.Tranche storage ref"
                    }
                  },
                  "id": 1052,
                  "nodeType": "ExpressionStatement",
                  "src": "7411:336:3"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1056,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1053,
                      "name": "lockPeriodEndTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 974,
                      "src": "7840:17:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 1054,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "7860:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 1055,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "7860:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7840:35:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1063,
                  "nodeType": "IfStatement",
                  "src": "7836:98:3",
                  "trueBody": {
                    "id": 1062,
                    "nodeType": "Block",
                    "src": "7877:57:3",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1058,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 964,
                              "src": "7900:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1059,
                              "name": "destination",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 966,
                              "src": "7911:11:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1057,
                            "name": "withdraw",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1181,
                            "src": "7891:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function (uint256,address)"
                            }
                          },
                          "id": 1060,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7891:32:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1061,
                        "nodeType": "ExpressionStatement",
                        "src": "7891:32:3"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 962,
              "nodeType": "StructuredDocumentation",
              "src": "5229:1046:3",
              "text": "@notice Called once per recipient of a vesting schedule to initialize the vesting schedule\n @dev Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious\n @dev If the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree stats\n @dev The contract has no knowledge of the vesting schedules until this function is called\n @param treeIndex index into array-like map of merkleTrees\n @param destination address that will receive tokens\n @param totalCoins amount of tokens to be released after vesting completes\n @param startTime time that vesting schedule starts, can be past or future\n @param endTime time vesting schedule completes, can be past or future\n @param lockPeriodEndTime time that coins become unlocked, can be after endTime\n @param proof array of hashes linking leaf hash of (destination, totalCoins, startTime, endTime, lockPeriodEndTime) to root"
            },
            "functionSelector": "a8efa9ba",
            "id": 1065,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "6289:10:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 978,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 964,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "6305:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1065,
                  "src": "6300:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 963,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "6300:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 966,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "6324:11:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1065,
                  "src": "6316:19:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 965,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6316:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 968,
                  "mutability": "mutable",
                  "name": "totalCoins",
                  "nameLocation": "6342:10:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1065,
                  "src": "6337:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 967,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "6337:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 970,
                  "mutability": "mutable",
                  "name": "startTime",
                  "nameLocation": "6359:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1065,
                  "src": "6354:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 969,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "6354:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 972,
                  "mutability": "mutable",
                  "name": "endTime",
                  "nameLocation": "6375:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1065,
                  "src": "6370:12:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 971,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "6370:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 974,
                  "mutability": "mutable",
                  "name": "lockPeriodEndTime",
                  "nameLocation": "6389:17:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1065,
                  "src": "6384:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 973,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "6384:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 977,
                  "mutability": "mutable",
                  "name": "proof",
                  "nameLocation": "6425:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1065,
                  "src": "6408:22:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 975,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "6408:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 976,
                    "nodeType": "ArrayTypeName",
                    "src": "6408:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6299:132:3"
            },
            "returnParameters": {
              "id": 979,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6441:0:3"
            },
            "scope": 1182,
            "src": "6280:1660:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1180,
              "nodeType": "Block",
              "src": "8439:1913:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "baseExpression": {
                            "id": 1074,
                            "name": "initialized",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 838,
                            "src": "8523:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                              "typeString": "mapping(address => mapping(uint256 => bool))"
                            }
                          },
                          "id": 1076,
                          "indexExpression": {
                            "id": 1075,
                            "name": "destination",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1070,
                            "src": "8535:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8523:24:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                            "typeString": "mapping(uint256 => bool)"
                          }
                        },
                        "id": 1078,
                        "indexExpression": {
                          "id": 1077,
                          "name": "treeIndex",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1068,
                          "src": "8548:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "8523:35:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f75206d75737420696e697469616c697a6520796f7572206163636f756e742066697273742e",
                        "id": 1079,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8560:41:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4abd8331dd14b306cce990886a8c58b8be69cac04657ffd8c84a7e7c5940d2d1",
                          "typeString": "literal_string \"You must initialize your account first.\""
                        },
                        "value": "You must initialize your account first."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4abd8331dd14b306cce990886a8c58b8be69cac04657ffd8c84a7e7c5940d2d1",
                          "typeString": "literal_string \"You must initialize your account first.\""
                        }
                      ],
                      "id": 1073,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8515:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1080,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8515:87:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1081,
                  "nodeType": "ExpressionStatement",
                  "src": "8515:87:3"
                },
                {
                  "assignments": [
                    1084
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1084,
                      "mutability": "mutable",
                      "name": "tranche",
                      "nameLocation": "8673:7:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1180,
                      "src": "8657:23:3",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$823_storage_ptr",
                        "typeString": "struct MerkleVesting.Tranche"
                      },
                      "typeName": {
                        "id": 1083,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1082,
                          "name": "Tranche",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 823,
                          "src": "8657:7:3"
                        },
                        "referencedDeclaration": 823,
                        "src": "8657:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$823_storage_ptr",
                          "typeString": "struct MerkleVesting.Tranche"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1090,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 1085,
                        "name": "tranches",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 850,
                        "src": "8683:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$823_storage_$_$",
                          "typeString": "mapping(address => mapping(uint256 => struct MerkleVesting.Tranche storage ref))"
                        }
                      },
                      "id": 1087,
                      "indexExpression": {
                        "id": 1086,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1070,
                        "src": "8692:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "8683:21:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$823_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleVesting.Tranche storage ref)"
                      }
                    },
                    "id": 1089,
                    "indexExpression": {
                      "id": 1088,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1068,
                      "src": "8705:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "8683:32:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$823_storage",
                      "typeString": "struct MerkleVesting.Tranche storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8657:58:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1096,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1092,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -4,
                            "src": "8781:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 1093,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "timestamp",
                          "nodeType": "MemberAccess",
                          "src": "8781:15:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "expression": {
                            "id": 1094,
                            "name": "tranche",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1084,
                            "src": "8799:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Tranche_$823_storage_ptr",
                              "typeString": "struct MerkleVesting.Tranche storage pointer"
                            }
                          },
                          "id": 1095,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "lockPeriodEndTime",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 822,
                          "src": "8799:25:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8781:43:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4d757374207761697420756e74696c206166746572206c6f636b20706572696f64",
                        "id": 1097,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8826:35:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b4851ffb49a226462a329d7b437f6651b8678ae005e405cdc9b1624e4b41fca3",
                          "typeString": "literal_string \"Must wait until after lock period\""
                        },
                        "value": "Must wait until after lock period"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b4851ffb49a226462a329d7b437f6651b8678ae005e405cdc9b1624e4b41fca3",
                          "typeString": "literal_string \"Must wait until after lock period\""
                        }
                      ],
                      "id": 1091,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8773:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1098,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8773:89:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1099,
                  "nodeType": "ExpressionStatement",
                  "src": "8773:89:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1104,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1101,
                            "name": "tranche",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1084,
                            "src": "8922:7:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Tranche_$823_storage_ptr",
                              "typeString": "struct MerkleVesting.Tranche storage pointer"
                            }
                          },
                          "id": 1102,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "currentCoins",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 812,
                          "src": "8922:20:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8946:1:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "8922:25:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f20636f696e73206c65667420746f207769746864726177",
                        "id": 1105,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8949:27:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f5408369ba8a5a8ab8865a5c8cf9d54818bf598d281aa43e2647b1ce4add273e",
                          "typeString": "literal_string \"No coins left to withdraw\""
                        },
                        "value": "No coins left to withdraw"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f5408369ba8a5a8ab8865a5c8cf9d54818bf598d281aa43e2647b1ce4add273e",
                          "typeString": "literal_string \"No coins left to withdraw\""
                        }
                      ],
                      "id": 1100,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "8914:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1106,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8914:63:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1107,
                  "nodeType": "ExpressionStatement",
                  "src": "8914:63:3"
                },
                {
                  "assignments": [
                    1109
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1109,
                      "mutability": "mutable",
                      "name": "currentWithdrawal",
                      "nameLocation": "9040:17:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1180,
                      "src": "9035:22:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1108,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "9035:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1111,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 1110,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "9060:1:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9035:26:3"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1116,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 1112,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "9147:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 1113,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "9147:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "expression": {
                        "id": 1114,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1084,
                        "src": "9166:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$823_storage_ptr",
                          "typeString": "struct MerkleVesting.Tranche storage pointer"
                        }
                      },
                      "id": 1115,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "endTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 816,
                      "src": "9166:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9147:34:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 1135,
                    "nodeType": "Block",
                    "src": "9254:158:3",
                    "statements": [
                      {
                        "expression": {
                          "id": 1133,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1123,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1109,
                            "src": "9310:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1132,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1128,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 1124,
                                      "name": "block",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -4,
                                      "src": "9331:5:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_block",
                                        "typeString": "block"
                                      }
                                    },
                                    "id": 1125,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "timestamp",
                                    "nodeType": "MemberAccess",
                                    "src": "9331:15:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 1126,
                                      "name": "tranche",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1084,
                                      "src": "9349:7:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Tranche_$823_storage_ptr",
                                        "typeString": "struct MerkleVesting.Tranche storage pointer"
                                      }
                                    },
                                    "id": 1127,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lastWithdrawalTime",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 820,
                                    "src": "9349:26:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "9331:44:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 1129,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "9330:46:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "expression": {
                                "id": 1130,
                                "name": "tranche",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1084,
                                "src": "9379:7:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Tranche_$823_storage_ptr",
                                  "typeString": "struct MerkleVesting.Tranche storage pointer"
                                }
                              },
                              "id": 1131,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "coinsPerSecond",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 818,
                              "src": "9379:22:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "9330:71:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9310:91:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1134,
                        "nodeType": "ExpressionStatement",
                        "src": "9310:91:3"
                      }
                    ]
                  },
                  "id": 1136,
                  "nodeType": "IfStatement",
                  "src": "9143:269:3",
                  "trueBody": {
                    "id": 1122,
                    "nodeType": "Block",
                    "src": "9183:65:3",
                    "statements": [
                      {
                        "expression": {
                          "id": 1120,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1117,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1109,
                            "src": "9197:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1118,
                              "name": "tranche",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1084,
                              "src": "9217:7:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Tranche_$823_storage_ptr",
                                "typeString": "struct MerkleVesting.Tranche storage pointer"
                              }
                            },
                            "id": 1119,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "currentCoins",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 812,
                            "src": "9217:20:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9197:40:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1121,
                        "nodeType": "ExpressionStatement",
                        "src": "9197:40:3"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 1141,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1137,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1084,
                        "src": "9462:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$823_storage_ptr",
                          "typeString": "struct MerkleVesting.Tranche storage pointer"
                        }
                      },
                      "id": 1139,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "currentCoins",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 812,
                      "src": "9462:20:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 1140,
                      "name": "currentWithdrawal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1109,
                      "src": "9486:17:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9462:41:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1142,
                  "nodeType": "ExpressionStatement",
                  "src": "9462:41:3"
                },
                {
                  "expression": {
                    "id": 1148,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1143,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1084,
                        "src": "9573:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$823_storage_ptr",
                          "typeString": "struct MerkleVesting.Tranche storage pointer"
                        }
                      },
                      "id": 1145,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "lastWithdrawalTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 820,
                      "src": "9573:26:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 1146,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "9602:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 1147,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "9602:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9573:44:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1149,
                  "nodeType": "ExpressionStatement",
                  "src": "9573:44:3"
                },
                {
                  "assignments": [
                    1152
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1152,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "9722:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1180,
                      "src": "9703:23:3",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$832_storage_ptr",
                        "typeString": "struct MerkleVesting.MerkleTree"
                      },
                      "typeName": {
                        "id": 1151,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1150,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 832,
                          "src": "9703:10:3"
                        },
                        "referencedDeclaration": 832,
                        "src": "9703:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$832_storage_ptr",
                          "typeString": "struct MerkleVesting.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1156,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1153,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 843,
                      "src": "9729:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$832_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleVesting.MerkleTree storage ref)"
                      }
                    },
                    "id": 1155,
                    "indexExpression": {
                      "id": 1154,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1068,
                      "src": "9741:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "9729:22:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$832_storage",
                      "typeString": "struct MerkleVesting.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9703:48:3"
                },
                {
                  "expression": {
                    "id": 1161,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1157,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1152,
                        "src": "9761:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$832_storage_ptr",
                          "typeString": "struct MerkleVesting.MerkleTree storage pointer"
                        }
                      },
                      "id": 1159,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 831,
                      "src": "9761:17:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 1160,
                      "name": "currentWithdrawal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1109,
                      "src": "9782:17:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9761:38:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1162,
                  "nodeType": "ExpressionStatement",
                  "src": "9761:38:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1168,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1070,
                        "src": "10216:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1169,
                        "name": "currentWithdrawal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1109,
                        "src": "10229:17:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 1164,
                              "name": "tree",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1152,
                              "src": "10188:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MerkleTree_$832_storage_ptr",
                                "typeString": "struct MerkleVesting.MerkleTree storage pointer"
                              }
                            },
                            "id": 1165,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "tokenAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 829,
                            "src": "10188:17:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1163,
                          "name": "IERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1342,
                          "src": "10181:6:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IERC20_$1342_$",
                            "typeString": "type(contract IERC20)"
                          }
                        },
                        "id": 1166,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10181:25:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1342",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 1167,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1291,
                      "src": "10181:34:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 1170,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10181:66:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1171,
                  "nodeType": "ExpressionStatement",
                  "src": "10181:66:3"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 1173,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1068,
                        "src": "10281:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1174,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1070,
                        "src": "10292:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1175,
                        "name": "currentWithdrawal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1109,
                        "src": "10305:17:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1176,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1084,
                          "src": "10324:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$823_storage_ptr",
                            "typeString": "struct MerkleVesting.Tranche storage pointer"
                          }
                        },
                        "id": 1177,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "currentCoins",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 812,
                        "src": "10324:20:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1172,
                      "name": "WithdrawalOccurred",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 860,
                      "src": "10262:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,address,uint256,uint256)"
                      }
                    },
                    "id": 1178,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10262:83:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1179,
                  "nodeType": "EmitStatement",
                  "src": "10257:88:3"
                }
              ]
            },
            "documentation": {
              "id": 1066,
              "nodeType": "StructuredDocumentation",
              "src": "7946:426:3",
              "text": "@notice Claim funds as a recipient in the merkle-drop\n @dev Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of\n @dev who provides the proof and pays the gas, msg.sender is not used in this function\n @param treeIndex index into array-like map of merkleTrees, which tree should we apply the proof to?\n @param destination recipient of tokens"
            },
            "functionSelector": "00f714ce",
            "id": 1181,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "8386:8:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1071,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1068,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "8400:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1181,
                  "src": "8395:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1067,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "8395:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1070,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "8419:11:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1181,
                  "src": "8411:19:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1069,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8411:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8394:37:3"
            },
            "returnParameters": {
              "id": 1072,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8439:0:3"
            },
            "scope": 1182,
            "src": "8377:1975:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 1183,
        "src": "557:9798:3",
        "usedErrors": []
      }
    ],
    "src": "42:10313:3"
  },
  "bytecode": "60806040526000805534801561001457600080fd5b50610d50806100246000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c80639e18a0541161005b5780639e18a0541461016a578063a8efa9ba1461017d578063c26cb54f14610190578063f16ad51e1461021957600080fd5b8062f714ce1461008c578063390b7c66146100a157806385d88cb1146100bd57806386bb82491461012c575b600080fd5b61009f61009a366004610a16565b61022c565b005b6100aa60005481565b6040519081526020015b60405180910390f35b6100fd6100cb366004610a42565b600260208190526000918252604090912080546001820154928201546003909201549092916001600160a01b03169084565b6040516100b4949392919093845260208401929092526001600160a01b03166040830152606082015260800190565b61015a61013a366004610a5b565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100b4565b61009f610178366004610a85565b6104e9565b61009f61018b366004610ad8565b6105d7565b6101e461019e366004610a5b565b6003602081815260009384526040808520909152918352912080546001820154600283015493830154600484015460058501546006909501549395929492939192909187565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016100b4565b61009f610227366004610bd9565b6108b7565b6001600160a01b038116600090815260016020908152604080832085845290915290205460ff166102b45760405162461bcd60e51b815260206004820152602760248201527f596f75206d75737420696e697469616c697a6520796f7572206163636f756e74604482015266103334b939ba1760c91b60648201526084015b60405180910390fd5b6001600160a01b03811660009081526003602090815260408083208584529091529020600681015442116103345760405162461bcd60e51b815260206004820152602160248201527f4d757374207761697420756e74696c206166746572206c6f636b20706572696f6044820152601960fa1b60648201526084016102ab565b60008160010154116103885760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f696e73206c65667420746f2077697468647261770000000000000060448201526064016102ab565b6000816003015442106103a0575060018101546103c1565b600482015460058301546103b49042610c11565b6103be9190610c28565b90505b808260010160008282546103d59190610c11565b9091555050426005830155600084815260026020526040812060038101805491928492610403908490610c11565b9091555050600281015460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561045857600080fd5b505af115801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190610c47565b50836001600160a01b0316857f1680e4cfe90468085407ef2b599dbe94b0aa30ff9f180f0e41d22eb71c8728728486600101546040516104da929190918252602082015260400190565b60405180910390a35050505050565b6040518060800160405280858152602001848152602001836001600160a01b03168152602001600081525060026000806000815461052690610c70565b918290555081526020808201929092526040908101600090812084518155928401516001840155908301516002830180546001600160a01b0319166001600160a01b039092169190911790556060909201516003909101555461058990826108b7565b60005460408051868152602081018690526001600160a01b03851692917fb72ea3ed46a7513251023946d5d35916f3e1d76d748bb144e641d1162dee222f910160405180910390a350505050565b6001600160a01b03861660009081526001602090815260408083208a845290915290205460ff16156106415760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016102ab565b604080516001600160a01b0388166020820152908101869052606081018590526080810184905260a0810183905260009060c00160408051601f19818403018152828252805160209182012060008c81526002808452908490206080860185528054808752600182015494870194909452908101546001600160a01b0316858501526003015460608501529151632769cd1f60e21b815291935073__MerkleLib_____________________________91639da7347c916107079186908890600401610c8b565b60206040518083038186803b15801561071f57600080fd5b505af4158015610733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107579190610c47565b6107a35760405162461bcd60e51b815260206004820181905260248201527f5468652070726f6f6620636f756c64206e6f742062652076657269666965642e60448201526064016102ab565b6001600160a01b03881660009081526001602081815260408084208d85529091528220805460ff191690911790556107db8787610c11565b6107e59089610ce0565b90506040518060e0016040528089815260200189815260200188815260200187815260200182815260200188815260200186815250600360008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008c8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155905050428510156108ab576108ab8a8a61022c565b50505050505050505050565b6000828152600260205260408120600381018054919284926108da908490610d02565b909155505060028101546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561093357600080fd5b505af1158015610947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b9190610c47565b6109af5760405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b60448201526064016102ab565b60028101546040518381526001600160a01b039091169084907fb162210da7d23d82c18cff5af46d3562661d26b42a6848fa28d64a6bdc70386a9060200160405180910390a3505050565b80356001600160a01b0381168114610a1157600080fd5b919050565b60008060408385031215610a2957600080fd5b82359150610a39602084016109fa565b90509250929050565b600060208284031215610a5457600080fd5b5035919050565b60008060408385031215610a6e57600080fd5b610a77836109fa565b946020939093013593505050565b60008060008060808587031215610a9b57600080fd5b8435935060208501359250610ab2604086016109fa565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600060e0888a031215610af357600080fd5b873596506020610b04818a016109fa565b965060408901359550606089013594506080890135935060a0890135925060c089013567ffffffffffffffff80821115610b3d57600080fd5b818b0191508b601f830112610b5157600080fd5b813581811115610b6357610b63610ac2565b8060051b604051601f19603f83011681018181108582111715610b8857610b88610ac2565b60405291825284820192508381018501918e831115610ba657600080fd5b938501935b82851015610bc457843584529385019392850192610bab565b80965050505050505092959891949750929550565b60008060408385031215610bec57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b600082821015610c2357610c23610bfb565b500390565b6000816000190483118215151615610c4257610c42610bfb565b500290565b600060208284031215610c5957600080fd5b81518015158114610c6957600080fd5b9392505050565b6000600019821415610c8457610c84610bfb565b5060010190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b81811015610cd257845183529383019391830191600101610cb6565b509098975050505050505050565b600082610cfd57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610d1557610d15610bfb565b50019056fea26469706673582212201a035218a8531477f2b1f489abb4c8c89febb6c55615cc9a782853e204c93a7b64736f6c63430008090033",
  "bytecodeSha1": "3087bdb4b8a63c25e1d89a5099f5cd94f399def8",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.9+commit.e5eed63a"
  },
  "contractName": "MerkleVesting",
  "coverageMap": {
    "branches": {
      "1": {},
      "3": {
        "MerkleVesting.depositTokens": {
          "28": [
            5039,
            5117,
            true
          ]
        },
        "MerkleVesting.initialize": {
          "25": [
            6505,
            6541,
            true
          ],
          "26": [
            7035,
            7073,
            true
          ],
          "27": [
            7840,
            7875,
            false
          ]
        },
        "MerkleVesting.withdraw": {
          "21": [
            8523,
            8558,
            true
          ],
          "22": [
            8781,
            8824,
            true
          ],
          "23": [
            8922,
            8947,
            true
          ],
          "24": [
            9147,
            9181,
            false
          ]
        }
      },
      "4": {}
    },
    "statements": {
      "1": {},
      "3": {
        "MerkleVesting.addMerkleRoot": {
          "10": [
            3779,
            3960
          ],
          "11": [
            3999,
            4036
          ],
          "12": [
            4046,
            4109
          ]
        },
        "MerkleVesting.depositTokens": {
          "18": [
            4846,
            4878
          ],
          "19": [
            5031,
            5143
          ],
          "20": [
            5153,
            5216
          ]
        },
        "MerkleVesting.initialize": {
          "13": [
            6497,
            6565
          ],
          "14": [
            7027,
            7110
          ],
          "15": [
            7181,
            7223
          ],
          "16": [
            7411,
            7747
          ],
          "17": [
            7891,
            7923
          ]
        },
        "MerkleVesting.withdraw": {
          "0": [
            8515,
            8602
          ],
          "1": [
            8773,
            8862
          ],
          "2": [
            8914,
            8977
          ],
          "3": [
            9197,
            9237
          ],
          "4": [
            9310,
            9401
          ],
          "5": [
            9462,
            9503
          ],
          "6": [
            9573,
            9617
          ],
          "7": [
            9761,
            9799
          ],
          "8": [
            10181,
            10247
          ],
          "9": [
            10257,
            10345
          ]
        }
      },
      "4": {}
    }
  },
  "dependencies": [
    "IERC20",
    "MerkleLib"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100875760003560e01c80639e18a0541161005b5780639e18a0541461016a578063a8efa9ba1461017d578063c26cb54f14610190578063f16ad51e1461021957600080fd5b8062f714ce1461008c578063390b7c66146100a157806385d88cb1146100bd57806386bb82491461012c575b600080fd5b61009f61009a366004610a16565b61022c565b005b6100aa60005481565b6040519081526020015b60405180910390f35b6100fd6100cb366004610a42565b600260208190526000918252604090912080546001820154928201546003909201549092916001600160a01b03169084565b6040516100b4949392919093845260208401929092526001600160a01b03166040830152606082015260800190565b61015a61013a366004610a5b565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100b4565b61009f610178366004610a85565b6104e9565b61009f61018b366004610ad8565b6105d7565b6101e461019e366004610a5b565b6003602081815260009384526040808520909152918352912080546001820154600283015493830154600484015460058501546006909501549395929492939192909187565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0016100b4565b61009f610227366004610bd9565b6108b7565b6001600160a01b038116600090815260016020908152604080832085845290915290205460ff166102b45760405162461bcd60e51b815260206004820152602760248201527f596f75206d75737420696e697469616c697a6520796f7572206163636f756e74604482015266103334b939ba1760c91b60648201526084015b60405180910390fd5b6001600160a01b03811660009081526003602090815260408083208584529091529020600681015442116103345760405162461bcd60e51b815260206004820152602160248201527f4d757374207761697420756e74696c206166746572206c6f636b20706572696f6044820152601960fa1b60648201526084016102ab565b60008160010154116103885760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f696e73206c65667420746f2077697468647261770000000000000060448201526064016102ab565b6000816003015442106103a0575060018101546103c1565b600482015460058301546103b49042610c11565b6103be9190610c28565b90505b808260010160008282546103d59190610c11565b9091555050426005830155600084815260026020526040812060038101805491928492610403908490610c11565b9091555050600281015460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561045857600080fd5b505af115801561046c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104909190610c47565b50836001600160a01b0316857f1680e4cfe90468085407ef2b599dbe94b0aa30ff9f180f0e41d22eb71c8728728486600101546040516104da929190918252602082015260400190565b60405180910390a35050505050565b6040518060800160405280858152602001848152602001836001600160a01b03168152602001600081525060026000806000815461052690610c70565b918290555081526020808201929092526040908101600090812084518155928401516001840155908301516002830180546001600160a01b0319166001600160a01b039092169190911790556060909201516003909101555461058990826108b7565b60005460408051868152602081018690526001600160a01b03851692917fb72ea3ed46a7513251023946d5d35916f3e1d76d748bb144e641d1162dee222f910160405180910390a350505050565b6001600160a01b03861660009081526001602090815260408083208a845290915290205460ff16156106415760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016102ab565b604080516001600160a01b0388166020820152908101869052606081018590526080810184905260a0810183905260009060c00160408051601f19818403018152828252805160209182012060008c81526002808452908490206080860185528054808752600182015494870194909452908101546001600160a01b0316858501526003015460608501529151632769cd1f60e21b815291935073__$61dd25696c02d5bd2863c8d2c1a2324a87$__91639da7347c916107079186908890600401610c8b565b60206040518083038186803b15801561071f57600080fd5b505af4158015610733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107579190610c47565b6107a35760405162461bcd60e51b815260206004820181905260248201527f5468652070726f6f6620636f756c64206e6f742062652076657269666965642e60448201526064016102ab565b6001600160a01b03881660009081526001602081815260408084208d85529091528220805460ff191690911790556107db8787610c11565b6107e59089610ce0565b90506040518060e0016040528089815260200189815260200188815260200187815260200182815260200188815260200186815250600360008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008c8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060155905050428510156108ab576108ab8a8a61022c565b50505050505050505050565b6000828152600260205260408120600381018054919284926108da908490610d02565b909155505060028101546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561093357600080fd5b505af1158015610947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b9190610c47565b6109af5760405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b60448201526064016102ab565b60028101546040518381526001600160a01b039091169084907fb162210da7d23d82c18cff5af46d3562661d26b42a6848fa28d64a6bdc70386a9060200160405180910390a3505050565b80356001600160a01b0381168114610a1157600080fd5b919050565b60008060408385031215610a2957600080fd5b82359150610a39602084016109fa565b90509250929050565b600060208284031215610a5457600080fd5b5035919050565b60008060408385031215610a6e57600080fd5b610a77836109fa565b946020939093013593505050565b60008060008060808587031215610a9b57600080fd5b8435935060208501359250610ab2604086016109fa565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600060e0888a031215610af357600080fd5b873596506020610b04818a016109fa565b965060408901359550606089013594506080890135935060a0890135925060c089013567ffffffffffffffff80821115610b3d57600080fd5b818b0191508b601f830112610b5157600080fd5b813581811115610b6357610b63610ac2565b8060051b604051601f19603f83011681018181108582111715610b8857610b88610ac2565b60405291825284820192508381018501918e831115610ba657600080fd5b938501935b82851015610bc457843584529385019392850192610bab565b80965050505050505092959891949750929550565b60008060408385031215610bec57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b600082821015610c2357610c23610bfb565b500390565b6000816000190483118215151615610c4257610c42610bfb565b500290565b600060208284031215610c5957600080fd5b81518015158114610c6957600080fd5b9392505050565b6000600019821415610c8457610c84610bfb565b5060010190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b81811015610cd257845183529383019391830191600101610cb6565b509098975050505050505050565b600082610cfd57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610d1557610d15610bfb565b50019056fea26469706673582212201a035218a8531477f2b1f489abb4c8c89febb6c55615cc9a782853e204c93a7b64736f6c63430008090033",
  "deployedSourceMap": "557:9798:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8377:1975;;;;;;:::i;:::-;;:::i;:::-;;676:24;;;;;;;;;597:25:5;;;585:2;570:18;676:24:3;;;;;;;;2238:47;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2238:47:3;;;;;;;;;;;;;1049:25:5;;;1105:2;1090:18;;1083:34;;;;-1:-1:-1;;;;;1153:32:5;1148:2;1133:18;;1126:60;1217:2;1202:18;;1195:34;1036:3;1021:19;;818:417;2106:62:3;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1664:14:5;;1657:22;1639:41;;1627:2;1612:18;2106:62:3;1499:187:5;3607:509:3;;;;;;:::i;:::-;;:::i;6280:1660::-;;;;;;:::i;:::-;;:::i;2359:62::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4072:25:5;;;4128:2;4113:18;;4106:34;;;;4156:18;;;4149:34;;;;4214:2;4199:18;;4192:34;;;;4257:3;4242:19;;4235:35;4301:3;4286:19;;4279:35;4345:3;4330:19;;4323:35;4059:3;4044:19;2359:62:3;3757:607:5;4612:611:3;;;;;;:::i;:::-;;:::i;8377:1975::-;-1:-1:-1;;;;;8523:24:3;;;;;;:11;:24;;;;;;;;:35;;;;;;;;;;;8515:87;;;;-1:-1:-1;;;8515:87:3;;4824:2:5;8515:87:3;;;4806:21:5;4863:2;4843:18;;;4836:30;4902:34;4882:18;;;4875:62;-1:-1:-1;;;4953:18:5;;;4946:37;5000:19;;8515:87:3;;;;;;;;;-1:-1:-1;;;;;8683:21:3;;8657:23;8683:21;;;:8;:21;;;;;;;;:32;;;;;;;;8799:25;;;;8781:15;:43;8773:89;;;;-1:-1:-1;;;8773:89:3;;5232:2:5;8773:89:3;;;5214:21:5;5271:2;5251:18;;;5244:30;5310:34;5290:18;;;5283:62;-1:-1:-1;;;5361:18:5;;;5354:31;5402:19;;8773:89:3;5030:397:5;8773:89:3;8946:1;8922:7;:20;;;:25;8914:63;;;;-1:-1:-1;;;8914:63:3;;5634:2:5;8914:63:3;;;5616:21:5;5673:2;5653:18;;;5646:30;5712:27;5692:18;;;5685:55;5757:18;;8914:63:3;5432:349:5;8914:63:3;9035:22;9166:7;:15;;;9147;:34;9143:269;;-1:-1:-1;9217:20:3;;;;9143:269;;;9379:22;;;;9349:26;;;;9331:44;;:15;:44;:::i;:::-;9330:71;;;;:::i;:::-;9310:91;;9143:269;9486:17;9462:7;:20;;;:41;;;;;;;:::i;:::-;;;;-1:-1:-1;;9602:15:3;9573:26;;;:44;9703:23;9729:22;;;:11;:22;;;;;9761:17;;;:38;;9729:22;;9782:17;;9761:38;;9782:17;;9761:38;:::i;:::-;;;;-1:-1:-1;;10188:17:3;;;;10181:66;;-1:-1:-1;;;10181:66:3;;-1:-1:-1;;;;;6413:32:5;;;10181:66:3;;;6395:51:5;6462:18;;;6455:34;;;10188:17:3;;;;10181:34;;6368:18:5;;10181:66:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;10292:11;-1:-1:-1;;;;;10262:83:3;10281:9;10262:83;10305:17;10324:7;:20;;;10262:83;;;;;;6956:25:5;;;7012:2;6997:18;;6990:34;6944:2;6929:18;;6782:248;10262:83:3;;;;;;;;8439:1913;;;8377:1975;;:::o;3607:509::-;3805:155;;;;;;;;3829:7;3805:155;;;;3850:8;3805:155;;;;3872:12;-1:-1:-1;;;;;3805:155:3;;;;;3898:1;3805:155;;;3779:11;:23;3793:8;;3791:10;;;;;:::i;:::-;;;;;-1:-1:-1;3779:23:3;;;;;;;;;;;;;;-1:-1:-1;3779:23:3;;;:181;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3779:181:3;-1:-1:-1;;;;;3779:181:3;;;;;;;;;;;;;;;;;;;4013:8;3999:37;;4023:12;3999:13;:37::i;:::-;4067:8;;4051:58;;;6956:25:5;;;7012:2;6997:18;;6990:34;;;-1:-1:-1;;;;;4051:58:3;;;4067:8;4051:58;;6929:18:5;4051:58:3;;;;;;;3607:509;;;;:::o;6280:1660::-;-1:-1:-1;;;;;6506:24:3;;;;;;:11;:24;;;;;;;;:35;;;;;;;;;;;6505:36;6497:68;;;;-1:-1:-1;;;6497:68:3;;7630:2:5;6497:68:3;;;7612:21:5;7669:2;7649:18;;;7642:30;-1:-1:-1;;;7688:18:5;;;7681:49;7747:18;;6497:68:3;7428:343:5;6497:68:3;6775:74;;;-1:-1:-1;;;;;8053:32:5;;6775:74:3;;;8035:51:5;8102:18;;;8095:34;;;8145:18;;;8138:34;;;8188:18;;;8181:34;;;8231:19;;;8224:35;;;6750:12:3;;8007:19:5;;6775:74:3;;;-1:-1:-1;;6775:74:3;;;;;;;;;6765:85;;6775:74;6765:85;;;;6899:22;6924;;;:11;:22;;;;;;;6899:47;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6899:47:3;;;;;;;;;;;;7035:38;;-1:-1:-1;;;7035:38:3;;6765:85;;-1:-1:-1;7035:25:3;;;;:38;;6765:85;;7067:5;;7035:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7027:83;;;;-1:-1:-1;;;7027:83:3;;9260:2:5;7027:83:3;;;9242:21:5;;;9279:18;;;9272:30;9338:34;9318:18;;;9311:62;9390:18;;7027:83:3;9058:356:5;7027:83:3;-1:-1:-1;;;;;7181:24:3;;;;;;7219:4;7181:24;;;;;;;;:35;;;;;;;;:42;;-1:-1:-1;;7181:42:3;;;;;;7330:19;7340:9;7330:7;:19;:::i;:::-;7316:34;;:10;:34;:::i;:::-;7294:56;;7446:301;;;;;;;;7467:10;7446:301;;;;7522:10;7446:301;;;;7584:9;7446:301;;;;7607:7;7446:301;;;;7628:14;7446:301;;;;7656:9;7446:301;;;;7720:17;7446:301;;;7411:8;:21;7420:11;-1:-1:-1;;;;;7411:21:3;-1:-1:-1;;;;;7411:21:3;;;;;;;;;;;;:32;7433:9;7411:32;;;;;;;;;;;:336;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7860:15;7840:17;:35;7836:98;;;7891:32;7900:9;7911:11;7891:8;:32::i;:::-;6441:1499;;;6280:1660;;;;;;;:::o;4612:611::-;4720:29;4752:22;;;:11;:22;;;;;4846:23;;;:32;;4752:22;;4873:5;;4846:32;;4873:5;;4846:32;:::i;:::-;;;;-1:-1:-1;;5046:23:3;;;;5039:78;;-1:-1:-1;;;5039:78:3;;5084:10;5039:78;;;10014:34:5;5104:4:3;10064:18:5;;;10057:43;10116:18;;;10109:34;;;-1:-1:-1;;;;;5046:23:3;;;;5039:44;;9949:18:5;;5039:78:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5031:112;;;;-1:-1:-1;;;5031:112:3;;10356:2:5;5031:112:3;;;10338:21:5;10395:2;10375:18;;;10368:30;-1:-1:-1;;;10414:18:5;;;10407:51;10475:18;;5031:112:3;10154:345:5;5031:112:3;5185:23;;;;5158:58;;597:25:5;;;-1:-1:-1;;;;;5185:23:3;;;;5174:9;;5158:58;;585:2:5;570:18;5158:58:3;;;;;;;4670:553;4612:611;;:::o;14:173:5:-;82:20;;-1:-1:-1;;;;;131:31:5;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;373:9;360:23;350:33;;402:38;436:2;425:9;421:18;402:38;:::i;:::-;392:48;;192:254;;;;;:::o;633:180::-;692:6;745:2;733:9;724:7;720:23;716:32;713:52;;;761:1;758;751:12;713:52;-1:-1:-1;784:23:5;;633:180;-1:-1:-1;633:180:5:o;1240:254::-;1308:6;1316;1369:2;1357:9;1348:7;1344:23;1340:32;1337:52;;;1385:1;1382;1375:12;1337:52;1408:29;1427:9;1408:29;:::i;:::-;1398:39;1484:2;1469:18;;;;1456:32;;-1:-1:-1;;;1240:254:5:o;1691:391::-;1777:6;1785;1793;1801;1854:3;1842:9;1833:7;1829:23;1825:33;1822:53;;;1871:1;1868;1861:12;1822:53;1907:9;1894:23;1884:33;;1964:2;1953:9;1949:18;1936:32;1926:42;;1987:38;2021:2;2010:9;2006:18;1987:38;:::i;:::-;1691:391;;;;-1:-1:-1;1977:48:5;;2072:2;2057:18;2044:32;;-1:-1:-1;;1691:391:5:o;2087:127::-;2148:10;2143:3;2139:20;2136:1;2129:31;2179:4;2176:1;2169:15;2203:4;2200:1;2193:15;2219:1533;2357:6;2365;2373;2381;2389;2397;2405;2458:3;2446:9;2437:7;2433:23;2429:33;2426:53;;;2475:1;2472;2465:12;2426:53;2511:9;2498:23;2488:33;;2540:2;2561:38;2595:2;2584:9;2580:18;2561:38;:::i;:::-;2551:48;;2646:2;2635:9;2631:18;2618:32;2608:42;;2697:2;2686:9;2682:18;2669:32;2659:42;;2748:3;2737:9;2733:19;2720:33;2710:43;;2800:3;2789:9;2785:19;2772:33;2762:43;;2856:3;2845:9;2841:19;2828:33;2880:18;2921:2;2913:6;2910:14;2907:34;;;2937:1;2934;2927:12;2907:34;2975:6;2964:9;2960:22;2950:32;;3020:7;3013:4;3009:2;3005:13;3001:27;2991:55;;3042:1;3039;3032:12;2991:55;3078:2;3065:16;3100:2;3096;3093:10;3090:36;;;3106:18;;:::i;:::-;3152:2;3149:1;3145:10;3184:2;3178:9;3247:2;3243:7;3238:2;3234;3230:11;3226:25;3218:6;3214:38;3302:6;3290:10;3287:22;3282:2;3270:10;3267:18;3264:46;3261:72;;;3313:18;;:::i;:::-;3349:2;3342:22;3399:18;;;3433:15;;;;-1:-1:-1;3475:11:5;;;3471:20;;;3503:19;;;3500:39;;;3535:1;3532;3525:12;3500:39;3559:11;;;;3579:142;3595:6;3590:3;3587:15;3579:142;;;3661:17;;3649:30;;3612:12;;;;3699;;;;3579:142;;;3740:6;3730:16;;;;;;;;2219:1533;;;;;;;;;;:::o;4369:248::-;4437:6;4445;4498:2;4486:9;4477:7;4473:23;4469:32;4466:52;;;4514:1;4511;4504:12;4466:52;-1:-1:-1;;4537:23:5;;;4607:2;4592:18;;;4579:32;;-1:-1:-1;4369:248:5:o;5786:127::-;5847:10;5842:3;5838:20;5835:1;5828:31;5878:4;5875:1;5868:15;5902:4;5899:1;5892:15;5918:125;5958:4;5986:1;5983;5980:8;5977:34;;;5991:18;;:::i;:::-;-1:-1:-1;6028:9:5;;5918:125::o;6048:168::-;6088:7;6154:1;6150;6146:6;6142:14;6139:1;6136:21;6131:1;6124:9;6117:17;6113:45;6110:71;;;6161:18;;:::i;:::-;-1:-1:-1;6201:9:5;;6048:168::o;6500:277::-;6567:6;6620:2;6608:9;6599:7;6595:23;6591:32;6588:52;;;6636:1;6633;6626:12;6588:52;6668:9;6662:16;6721:5;6714:13;6707:21;6700:5;6697:32;6687:60;;6743:1;6740;6733:12;6687:60;6766:5;6500:277;-1:-1:-1;;;6500:277:5:o;7035:135::-;7074:3;-1:-1:-1;;7095:17:5;;7092:43;;;7115:18;;:::i;:::-;-1:-1:-1;7162:1:5;7151:13;;7035:135::o;8270:783::-;8476:4;8524:2;8513:9;8509:18;8554:6;8543:9;8536:25;8580:2;8618:6;8613:2;8602:9;8598:18;8591:34;8661:2;8656;8645:9;8641:18;8634:30;8684:6;8719;8713:13;8750:6;8742;8735:22;8788:3;8777:9;8773:19;8766:26;;8827:2;8819:6;8815:15;8801:29;;8848:1;8858:169;8872:6;8869:1;8866:13;8858:169;;;8933:13;;8921:26;;9002:15;;;;8967:12;;;;8894:1;8887:9;8858:169;;;-1:-1:-1;9044:3:5;;8270:783;-1:-1:-1;;;;;;;;8270:783:5:o;9419:217::-;9459:1;9485;9475:132;;9529:10;9524:3;9520:20;9517:1;9510:31;9564:4;9561:1;9554:15;9592:4;9589:1;9582:15;9475:132;-1:-1:-1;9621:9:5;;9419:217::o;9641:128::-;9681:3;9712:1;9708:6;9705:1;9702:13;9699:39;;;9718:18;;:::i;:::-;-1:-1:-1;9754:9:5;;9641:128::o",
  "language": "Solidity",
  "natspec": {
    "author": "metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki",
    "details": "The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof",
    "kind": "dev",
    "methods": {
      "addMerkleRoot(bytes32,bytes32,address,uint256)": {
        "details": "Anyone may call this function, therefore we must make sure trees cannot affect each otherRoot hash should be built from (destination, totalCoins, startTime, endTime, lockPeriodEndTime)",
        "notice": "Add a new merkle tree to the contract, creating a new merkle-vesting-schedule",
        "params": {
          "ipfsHash": "the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable",
          "newRoot": "root hash of merkle tree representing vesting schedules",
          "tokenAddress": "the address of the token contract that is being distributed",
          "tokenBalance": "the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
        }
      },
      "depositTokens(uint256,uint256)": {
        "details": "Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree maliciousIf the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs",
        "notice": "Add funds to an existing merkle-vesting-schedule",
        "params": {
          "treeIndex": "index into array-like map of merkleTrees",
          "value": "the amount of tokens user wishes to use to fund the airdrop, note trees can be underfunded"
        }
      },
      "initialize(uint256,address,uint256,uint256,uint256,uint256,bytes32[])": {
        "details": "Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree maliciousIf the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree statsThe contract has no knowledge of the vesting schedules until this function is called",
        "notice": "Called once per recipient of a vesting schedule to initialize the vesting schedule",
        "params": {
          "destination": "address that will receive tokens",
          "endTime": "time vesting schedule completes, can be past or future",
          "lockPeriodEndTime": "time that coins become unlocked, can be after endTime",
          "proof": "array of hashes linking leaf hash of (destination, totalCoins, startTime, endTime, lockPeriodEndTime) to root",
          "startTime": "time that vesting schedule starts, can be past or future",
          "totalCoins": "amount of tokens to be released after vesting completes",
          "treeIndex": "index into array-like map of merkleTrees"
        }
      },
      "withdraw(uint256,address)": {
        "details": "Anyone may call this function for anyone else, funds go to destination regardless, it's just a question ofwho provides the proof and pays the gas, msg.sender is not used in this function",
        "notice": "Claim funds as a recipient in the merkle-drop",
        "params": {
          "destination": "recipient of tokens",
          "treeIndex": "index into array-like map of merkleTrees, which tree should we apply the proof to?"
        }
      }
    },
    "notice": "This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.",
    "title": "A factory pattern for merkle-vesting, that is, a time release schedule for tokens, using merkle proofs to scale",
    "version": 1
  },
  "offset": [
    557,
    10355
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9E18A054 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x9E18A054 EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xA8EFA9BA EQ PUSH2 0x17D JUMPI DUP1 PUSH4 0xC26CB54F EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0xF16AD51E EQ PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xF714CE EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x390B7C66 EQ PUSH2 0xA1 JUMPI DUP1 PUSH4 0x85D88CB1 EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x86BB8249 EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9F PUSH2 0x9A CALLDATASIZE PUSH1 0x4 PUSH2 0xA16 JUMP JUMPDEST PUSH2 0x22C JUMP JUMPDEST STOP JUMPDEST PUSH2 0xAA PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFD PUSH2 0xCB CALLDATASIZE PUSH1 0x4 PUSH2 0xA42 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0xA5B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB4 JUMP JUMPDEST PUSH2 0x9F PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0xA85 JUMP JUMPDEST PUSH2 0x4E9 JUMP JUMPDEST PUSH2 0x9F PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0xAD8 JUMP JUMPDEST PUSH2 0x5D7 JUMP JUMPDEST PUSH2 0x1E4 PUSH2 0x19E CALLDATASIZE PUSH1 0x4 PUSH2 0xA5B JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD SWAP4 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 SWAP1 SWAP6 ADD SLOAD SWAP4 SWAP6 SWAP3 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP5 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0xB4 JUMP JUMPDEST PUSH2 0x9F PUSH2 0x227 CALLDATASIZE PUSH1 0x4 PUSH2 0xBD9 JUMP JUMPDEST PUSH2 0x8B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75206D75737420696E697469616C697A6520796F7572206163636F756E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x103334B939BA17 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x6 DUP2 ADD SLOAD TIMESTAMP GT PUSH2 0x334 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D757374207761697420756E74696C206166746572206C6F636B20706572696F PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0xFA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2AB JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 ADD SLOAD GT PUSH2 0x388 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F20636F696E73206C65667420746F20776974686472617700000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2AB JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x3A0 JUMPI POP PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x5 DUP4 ADD SLOAD PUSH2 0x3B4 SWAP1 TIMESTAMP PUSH2 0xC11 JUMP JUMPDEST PUSH2 0x3BE SWAP2 SWAP1 PUSH2 0xC28 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP3 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3D5 SWAP2 SWAP1 PUSH2 0xC11 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP TIMESTAMP PUSH1 0x5 DUP4 ADD SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 DUP2 ADD DUP1 SLOAD SWAP2 SWAP3 DUP5 SWAP3 PUSH2 0x403 SWAP1 DUP5 SWAP1 PUSH2 0xC11 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x46C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x490 SWAP2 SWAP1 PUSH2 0xC47 JUMP JUMPDEST POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x1680E4CFE90468085407EF2B599DBE94B0AA30FF9F180F0E41D22EB71C872872 DUP5 DUP7 PUSH1 0x1 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x4DA SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x526 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP2 DUP3 SWAP1 SSTORE POP DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP5 MLOAD DUP2 SSTORE SWAP3 DUP5 ADD MLOAD PUSH1 0x1 DUP5 ADD SSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x2 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x60 SWAP1 SWAP3 ADD MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE SLOAD PUSH2 0x589 SWAP1 DUP3 PUSH2 0x8B7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP3 SWAP2 PUSH32 0xB72EA3ED46A7513251023946D5D35916F3E1D76D748BB144E641D1162DEE222F SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x641 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x105B1C9958591E481A5B9A5D1A585B1A5E9959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2AB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x2 DUP1 DUP5 MSTORE SWAP1 DUP5 SWAP1 KECCAK256 PUSH1 0x80 DUP7 ADD DUP6 MSTORE DUP1 SLOAD DUP1 DUP8 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP5 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 DUP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP6 ADD MSTORE PUSH1 0x3 ADD SLOAD PUSH1 0x60 DUP6 ADD MSTORE SWAP2 MLOAD PUSH4 0x2769CD1F PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH20 0x0 SWAP2 PUSH4 0x9DA7347C SWAP2 PUSH2 0x707 SWAP2 DUP7 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xC8B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x71F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x733 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x757 SWAP2 SWAP1 PUSH2 0xC47 JUMP JUMPDEST PUSH2 0x7A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652070726F6F6620636F756C64206E6F742062652076657269666965642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP14 DUP6 MSTORE SWAP1 SWAP2 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x7DB DUP8 DUP8 PUSH2 0xC11 JUMP JUMPDEST PUSH2 0x7E5 SWAP1 DUP10 PUSH2 0xCE0 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE POP PUSH1 0x3 PUSH1 0x0 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP13 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD DUP2 PUSH1 0x6 ADD SSTORE SWAP1 POP POP TIMESTAMP DUP6 LT ISZERO PUSH2 0x8AB JUMPI PUSH2 0x8AB DUP11 DUP11 PUSH2 0x22C JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x3 DUP2 ADD DUP1 SLOAD SWAP2 SWAP3 DUP5 SWAP3 PUSH2 0x8DA SWAP1 DUP5 SWAP1 PUSH2 0xD02 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x933 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x947 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x96B SWAP2 SWAP1 PUSH2 0xC47 JUMP JUMPDEST PUSH2 0x9AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x115490CC8C081D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x2AB JUMP JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP5 SWAP1 PUSH32 0xB162210DA7D23D82C18CFF5AF46D3562661D26B42A6848FA28D64A6BDC70386A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xA39 PUSH1 0x20 DUP5 ADD PUSH2 0x9FA JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA77 DUP4 PUSH2 0x9FA JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH2 0xAB2 PUSH1 0x40 DUP7 ADD PUSH2 0x9FA JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xAF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 PUSH2 0xB04 DUP2 DUP11 ADD PUSH2 0x9FA JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP4 POP PUSH1 0xA0 DUP10 ADD CALLDATALOAD SWAP3 POP PUSH1 0xC0 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xB3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP12 ADD SWAP2 POP DUP12 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xB63 JUMPI PUSH2 0xB63 PUSH2 0xAC2 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xB88 JUMPI PUSH2 0xB88 PUSH2 0xAC2 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP15 DUP4 GT ISZERO PUSH2 0xBA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xBC4 JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xBAB JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xC23 JUMPI PUSH2 0xC23 PUSH2 0xBFB JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xC42 JUMPI PUSH2 0xC42 PUSH2 0xBFB JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0xC84 JUMPI PUSH2 0xC84 PUSH2 0xBFB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP6 DUP4 MSTORE PUSH1 0x20 DUP6 DUP2 DUP6 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 POP DUP3 DUP8 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xCD2 JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xCB6 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xCFD JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xD15 JUMPI PUSH2 0xD15 PUSH2 0xBFB JUMP JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BYTE SUB MSTORE XOR 0xA8 MSTORE8 EQ PUSH24 0xF2B1F489ABB4C8C89FEBB6C55615CC9A782853E204C93A7B PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        557,
        10355
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "5": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "CALLVALUE",
      "path": "3"
    },
    "6": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "DUP1",
      "path": "3"
    },
    "7": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "8": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "12": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "DUP1",
      "path": "3"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "REVERT",
      "path": "3"
    },
    "16": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "17": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "POP",
      "path": "3"
    },
    "18": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "21": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "LT",
      "path": "3"
    },
    "22": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x87"
    },
    "25": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "26": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "29": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "SHR",
      "path": "3"
    },
    "32": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "DUP1",
      "path": "3"
    },
    "33": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x9E18A054"
    },
    "38": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "GT",
      "path": "3"
    },
    "39": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x5B"
    },
    "42": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "43": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "DUP1",
      "path": "3"
    },
    "44": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x9E18A054"
    },
    "49": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "EQ",
      "path": "3"
    },
    "50": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x16A"
    },
    "53": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "54": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "DUP1",
      "path": "3"
    },
    "55": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xA8EFA9BA"
    },
    "60": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "EQ",
      "path": "3"
    },
    "61": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x17D"
    },
    "64": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "65": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "DUP1",
      "path": "3"
    },
    "66": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xC26CB54F"
    },
    "71": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "EQ",
      "path": "3"
    },
    "72": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x190"
    },
    "75": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "76": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "DUP1",
      "path": "3"
    },
    "77": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xF16AD51E"
    },
    "82": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "EQ",
      "path": "3"
    },
    "83": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x219"
    },
    "86": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "87": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "89": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "DUP1",
      "path": "3"
    },
    "90": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "REVERT",
      "path": "3"
    },
    "91": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "92": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "DUP1",
      "path": "3"
    },
    "93": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH3",
      "path": "3",
      "value": "0xF714CE"
    },
    "97": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "EQ",
      "path": "3"
    },
    "98": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8C"
    },
    "101": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "102": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "DUP1",
      "path": "3"
    },
    "103": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x390B7C66"
    },
    "108": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "EQ",
      "path": "3"
    },
    "109": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xA1"
    },
    "112": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "113": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "DUP1",
      "path": "3"
    },
    "114": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x85D88CB1"
    },
    "119": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "EQ",
      "path": "3"
    },
    "120": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xBD"
    },
    "123": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "124": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "DUP1",
      "path": "3"
    },
    "125": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x86BB8249"
    },
    "130": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "EQ",
      "path": "3"
    },
    "131": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x12C"
    },
    "134": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "135": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "136": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "138": {
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "DUP1",
      "path": "3"
    },
    "139": {
      "first_revert": true,
      "fn": null,
      "offset": [
        557,
        10355
      ],
      "op": "REVERT",
      "path": "3"
    },
    "140": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8377,
        10352
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "141": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8377,
        10352
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x9F"
    },
    "144": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8377,
        10352
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x9A"
    },
    "147": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8377,
        10352
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "148": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8377,
        10352
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "150": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8377,
        10352
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xA16"
    },
    "153": {
      "fn": "MerkleVesting.withdraw",
      "jump": "i",
      "offset": [
        8377,
        10352
      ],
      "op": "JUMP",
      "path": "3"
    },
    "154": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8377,
        10352
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "155": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8377,
        10352
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x22C"
    },
    "158": {
      "fn": "MerkleVesting.withdraw",
      "jump": "i",
      "offset": [
        8377,
        10352
      ],
      "op": "JUMP",
      "path": "3"
    },
    "159": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8377,
        10352
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "160": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8377,
        10352
      ],
      "op": "STOP",
      "path": "3"
    },
    "161": {
      "offset": [
        676,
        700
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "162": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xAA"
    },
    "165": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "167": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "168": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "DUP2",
      "path": "3"
    },
    "169": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "JUMP",
      "path": "3"
    },
    "170": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "171": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "173": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "174": {
      "op": "SWAP1"
    },
    "175": {
      "op": "DUP2"
    },
    "176": {
      "op": "MSTORE"
    },
    "177": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "179": {
      "op": "ADD"
    },
    "180": {
      "offset": [
        676,
        700
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "181": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "183": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "184": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "DUP1",
      "path": "3"
    },
    "185": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "186": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "SUB",
      "path": "3"
    },
    "187": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "188": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        676,
        700
      ],
      "op": "RETURN",
      "path": "3"
    },
    "189": {
      "offset": [
        2238,
        2285
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "190": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xFD"
    },
    "193": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xCB"
    },
    "196": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "197": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "199": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xA42"
    },
    "202": {
      "fn": "MerkleVesting.withdraw",
      "jump": "i",
      "offset": [
        2238,
        2285
      ],
      "op": "JUMP",
      "path": "3"
    },
    "203": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "204": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "206": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "208": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "DUP2",
      "path": "3"
    },
    "209": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "210": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "211": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "213": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "214": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "DUP3",
      "path": "3"
    },
    "215": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "216": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "218": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "219": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "220": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "221": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "DUP1",
      "path": "3"
    },
    "222": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "223": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "225": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "DUP3",
      "path": "3"
    },
    "226": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "ADD",
      "path": "3"
    },
    "227": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "228": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "229": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "DUP3",
      "path": "3"
    },
    "230": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "ADD",
      "path": "3"
    },
    "231": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "232": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "234": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "235": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "236": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "ADD",
      "path": "3"
    },
    "237": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "238": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "239": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "240": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "241": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "243": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "245": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "247": {
      "op": "SHL"
    },
    "248": {
      "op": "SUB"
    },
    "249": {
      "offset": [
        2238,
        2285
      ],
      "op": "AND",
      "path": "3"
    },
    "250": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "251": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "DUP5",
      "path": "3"
    },
    "252": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "JUMP",
      "path": "3"
    },
    "253": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "254": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "256": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "257": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB4"
    },
    "260": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP5",
      "path": "3"
    },
    "261": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "262": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "263": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "264": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2238,
        2285
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "265": {
      "op": "SWAP4"
    },
    "266": {
      "op": "DUP5"
    },
    "267": {
      "op": "MSTORE"
    },
    "268": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "270": {
      "op": "DUP5"
    },
    "271": {
      "op": "ADD"
    },
    "272": {
      "op": "SWAP3"
    },
    "273": {
      "op": "SWAP1"
    },
    "274": {
      "op": "SWAP3"
    },
    "275": {
      "op": "MSTORE"
    },
    "276": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "278": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "280": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "282": {
      "op": "SHL"
    },
    "283": {
      "op": "SUB"
    },
    "284": {
      "op": "AND"
    },
    "285": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "287": {
      "op": "DUP4"
    },
    "288": {
      "op": "ADD"
    },
    "289": {
      "op": "MSTORE"
    },
    "290": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "292": {
      "op": "DUP3"
    },
    "293": {
      "op": "ADD"
    },
    "294": {
      "op": "MSTORE"
    },
    "295": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "297": {
      "op": "ADD"
    },
    "298": {
      "op": "SWAP1"
    },
    "299": {
      "op": "JUMP"
    },
    "300": {
      "offset": [
        2106,
        2168
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "301": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x15A"
    },
    "304": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x13A"
    },
    "307": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "308": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "310": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xA5B"
    },
    "313": {
      "fn": "MerkleVesting.withdraw",
      "jump": "i",
      "offset": [
        2106,
        2168
      ],
      "op": "JUMP",
      "path": "3"
    },
    "314": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "315": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "317": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "319": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "320": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "DUP2",
      "path": "3"
    },
    "321": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "322": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "324": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "325": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "DUP4",
      "path": "3"
    },
    "326": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "327": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "329": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "DUP1",
      "path": "3"
    },
    "330": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "DUP5",
      "path": "3"
    },
    "331": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "332": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "333": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "334": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "335": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "336": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "DUP3",
      "path": "3"
    },
    "337": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "338": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "339": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "340": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "341": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xFF"
    },
    "343": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "AND",
      "path": "3"
    },
    "344": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "DUP2",
      "path": "3"
    },
    "345": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "JUMP",
      "path": "3"
    },
    "346": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "347": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "349": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        2106,
        2168
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "350": {
      "op": "SWAP1"
    },
    "351": {
      "op": "ISZERO"
    },
    "352": {
      "op": "ISZERO"
    },
    "353": {
      "op": "DUP2"
    },
    "354": {
      "op": "MSTORE"
    },
    "355": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "357": {
      "op": "ADD"
    },
    "358": {
      "offset": [
        2106,
        2168
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB4"
    },
    "361": {
      "op": "JUMP"
    },
    "362": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3607,
        4116
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "363": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3607,
        4116
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x9F"
    },
    "366": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3607,
        4116
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x178"
    },
    "369": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3607,
        4116
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "370": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3607,
        4116
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "372": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3607,
        4116
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xA85"
    },
    "375": {
      "fn": "MerkleVesting.addMerkleRoot",
      "jump": "i",
      "offset": [
        3607,
        4116
      ],
      "op": "JUMP",
      "path": "3"
    },
    "376": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3607,
        4116
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "377": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3607,
        4116
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4E9"
    },
    "380": {
      "fn": "MerkleVesting.addMerkleRoot",
      "jump": "i",
      "offset": [
        3607,
        4116
      ],
      "op": "JUMP",
      "path": "3"
    },
    "381": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "382": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x9F"
    },
    "385": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x18B"
    },
    "388": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "389": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "391": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xAD8"
    },
    "394": {
      "fn": "MerkleVesting.initialize",
      "jump": "i",
      "offset": [
        6280,
        7940
      ],
      "op": "JUMP",
      "path": "3"
    },
    "395": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "396": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x5D7"
    },
    "399": {
      "fn": "MerkleVesting.initialize",
      "jump": "i",
      "offset": [
        6280,
        7940
      ],
      "op": "JUMP",
      "path": "3"
    },
    "400": {
      "offset": [
        2359,
        2421
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "401": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1E4"
    },
    "404": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x19E"
    },
    "407": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "408": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "410": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xA5B"
    },
    "413": {
      "fn": "MerkleVesting.initialize",
      "jump": "i",
      "offset": [
        2359,
        2421
      ],
      "op": "JUMP",
      "path": "3"
    },
    "414": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "415": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "417": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "419": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "DUP2",
      "path": "3"
    },
    "420": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "DUP2",
      "path": "3"
    },
    "421": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "422": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "424": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "425": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "DUP5",
      "path": "3"
    },
    "426": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "427": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "429": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "DUP1",
      "path": "3"
    },
    "430": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "DUP6",
      "path": "3"
    },
    "431": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "432": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "433": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "434": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "435": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "436": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "DUP4",
      "path": "3"
    },
    "437": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "438": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "439": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "440": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "DUP1",
      "path": "3"
    },
    "441": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "442": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "444": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "DUP3",
      "path": "3"
    },
    "445": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "ADD",
      "path": "3"
    },
    "446": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "447": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "449": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "DUP4",
      "path": "3"
    },
    "450": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "ADD",
      "path": "3"
    },
    "451": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "452": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "453": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "DUP4",
      "path": "3"
    },
    "454": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "ADD",
      "path": "3"
    },
    "455": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "456": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "458": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "DUP5",
      "path": "3"
    },
    "459": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "ADD",
      "path": "3"
    },
    "460": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "461": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x5"
    },
    "463": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "DUP6",
      "path": "3"
    },
    "464": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "ADD",
      "path": "3"
    },
    "465": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "466": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x6"
    },
    "468": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "469": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP6",
      "path": "3"
    },
    "470": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "ADD",
      "path": "3"
    },
    "471": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "472": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "473": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP6",
      "path": "3"
    },
    "474": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "475": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP5",
      "path": "3"
    },
    "476": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "477": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "478": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "479": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "480": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "481": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "482": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "DUP8",
      "path": "3"
    },
    "483": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "JUMP",
      "path": "3"
    },
    "484": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "485": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "487": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "DUP1",
      "path": "3"
    },
    "488": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        2359,
        2421
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "489": {
      "op": "SWAP8"
    },
    "490": {
      "op": "DUP9"
    },
    "491": {
      "op": "MSTORE"
    },
    "492": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "494": {
      "op": "DUP9"
    },
    "495": {
      "op": "ADD"
    },
    "496": {
      "op": "SWAP7"
    },
    "497": {
      "op": "SWAP1"
    },
    "498": {
      "op": "SWAP7"
    },
    "499": {
      "op": "MSTORE"
    },
    "500": {
      "op": "SWAP5"
    },
    "501": {
      "op": "DUP7"
    },
    "502": {
      "op": "ADD"
    },
    "503": {
      "op": "SWAP4"
    },
    "504": {
      "op": "SWAP1"
    },
    "505": {
      "op": "SWAP4"
    },
    "506": {
      "op": "MSTORE"
    },
    "507": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "509": {
      "op": "DUP6"
    },
    "510": {
      "op": "ADD"
    },
    "511": {
      "op": "SWAP2"
    },
    "512": {
      "op": "SWAP1"
    },
    "513": {
      "op": "SWAP2"
    },
    "514": {
      "op": "MSTORE"
    },
    "515": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "517": {
      "op": "DUP5"
    },
    "518": {
      "op": "ADD"
    },
    "519": {
      "op": "MSTORE"
    },
    "520": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "522": {
      "op": "DUP4"
    },
    "523": {
      "op": "ADD"
    },
    "524": {
      "op": "MSTORE"
    },
    "525": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "527": {
      "op": "DUP3"
    },
    "528": {
      "op": "ADD"
    },
    "529": {
      "op": "MSTORE"
    },
    "530": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "532": {
      "op": "ADD"
    },
    "533": {
      "offset": [
        2359,
        2421
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB4"
    },
    "536": {
      "op": "JUMP"
    },
    "537": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4612,
        5223
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "538": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4612,
        5223
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x9F"
    },
    "541": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4612,
        5223
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x227"
    },
    "544": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4612,
        5223
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "545": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4612,
        5223
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "547": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4612,
        5223
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xBD9"
    },
    "550": {
      "fn": "MerkleVesting.depositTokens",
      "jump": "i",
      "offset": [
        4612,
        5223
      ],
      "op": "JUMP",
      "path": "3"
    },
    "551": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4612,
        5223
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "552": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4612,
        5223
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8B7"
    },
    "555": {
      "fn": "MerkleVesting.depositTokens",
      "jump": "i",
      "offset": [
        4612,
        5223
      ],
      "op": "JUMP",
      "path": "3"
    },
    "556": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8377,
        10352
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "557": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "559": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "561": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "563": {
      "op": "SHL"
    },
    "564": {
      "op": "SUB"
    },
    "565": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8547
      ],
      "op": "DUP2",
      "path": "3",
      "statement": 0
    },
    "566": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8547
      ],
      "op": "AND",
      "path": "3"
    },
    "567": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8547
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "569": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8547
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "570": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8547
      ],
      "op": "DUP2",
      "path": "3"
    },
    "571": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8547
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "572": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8534
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "574": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8547
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "576": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8547
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "577": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8547
      ],
      "op": "DUP2",
      "path": "3"
    },
    "578": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8547
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "579": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8547
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "581": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8547
      ],
      "op": "DUP1",
      "path": "3"
    },
    "582": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8547
      ],
      "op": "DUP4",
      "path": "3"
    },
    "583": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8547
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "584": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8558
      ],
      "op": "DUP6",
      "path": "3"
    },
    "585": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8558
      ],
      "op": "DUP5",
      "path": "3"
    },
    "586": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8558
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "587": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8558
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "588": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8558
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "589": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8558
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "590": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8558
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "591": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8558
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "592": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8558
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "593": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8558
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xFF"
    },
    "595": {
      "branch": 21,
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8523,
        8558
      ],
      "op": "AND",
      "path": "3"
    },
    "596": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2B4"
    },
    "599": {
      "branch": 21,
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "600": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "602": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "603": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "607": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "609": {
      "op": "SHL"
    },
    "610": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "DUP2",
      "path": "3"
    },
    "611": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "612": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "614": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "616": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "DUP3",
      "path": "3"
    },
    "617": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "ADD",
      "path": "3"
    },
    "618": {
      "op": "MSTORE"
    },
    "619": {
      "op": "PUSH1",
      "value": "0x27"
    },
    "621": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "623": {
      "op": "DUP3"
    },
    "624": {
      "op": "ADD"
    },
    "625": {
      "op": "MSTORE"
    },
    "626": {
      "op": "PUSH32",
      "value": "0x596F75206D75737420696E697469616C697A6520796F7572206163636F756E74"
    },
    "659": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "661": {
      "op": "DUP3"
    },
    "662": {
      "op": "ADD"
    },
    "663": {
      "op": "MSTORE"
    },
    "664": {
      "op": "PUSH7",
      "value": "0x103334B939BA17"
    },
    "672": {
      "op": "PUSH1",
      "value": "0xC9"
    },
    "674": {
      "op": "SHL"
    },
    "675": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "677": {
      "op": "DUP3"
    },
    "678": {
      "op": "ADD"
    },
    "679": {
      "op": "MSTORE"
    },
    "680": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "682": {
      "op": "ADD"
    },
    "683": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "684": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "686": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "687": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "DUP1",
      "path": "3"
    },
    "688": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "689": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "SUB",
      "path": "3"
    },
    "690": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "691": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "3"
    },
    "692": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8515,
        8602
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "693": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "695": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "697": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "699": {
      "op": "SHL"
    },
    "700": {
      "op": "SUB"
    },
    "701": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8704
      ],
      "op": "DUP2",
      "path": "3"
    },
    "702": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8704
      ],
      "op": "AND",
      "path": "3"
    },
    "703": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8657,
        8680
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "705": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8704
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "706": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8704
      ],
      "op": "DUP2",
      "path": "3"
    },
    "707": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8704
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "708": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8691
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "710": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8704
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "712": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8704
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "713": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8704
      ],
      "op": "DUP2",
      "path": "3"
    },
    "714": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8704
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "715": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8704
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "717": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8704
      ],
      "op": "DUP1",
      "path": "3"
    },
    "718": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8704
      ],
      "op": "DUP4",
      "path": "3"
    },
    "719": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8704
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "720": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8715
      ],
      "op": "DUP6",
      "path": "3"
    },
    "721": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8715
      ],
      "op": "DUP5",
      "path": "3"
    },
    "722": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8715
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "723": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8715
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "724": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8715
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "725": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8715
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "726": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8715
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "727": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8683,
        8715
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "728": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8799,
        8824
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 1,
      "value": "0x6"
    },
    "730": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8799,
        8824
      ],
      "op": "DUP2",
      "path": "3"
    },
    "731": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8799,
        8824
      ],
      "op": "ADD",
      "path": "3"
    },
    "732": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8799,
        8824
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "733": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8781,
        8796
      ],
      "op": "TIMESTAMP",
      "path": "3"
    },
    "734": {
      "branch": 22,
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8781,
        8824
      ],
      "op": "GT",
      "path": "3"
    },
    "735": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8773,
        8862
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x334"
    },
    "738": {
      "branch": 22,
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8773,
        8862
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "739": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8773,
        8862
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "741": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8773,
        8862
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "742": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "746": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "748": {
      "op": "SHL"
    },
    "749": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8773,
        8862
      ],
      "op": "DUP2",
      "path": "3"
    },
    "750": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8773,
        8862
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "751": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "753": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8773,
        8862
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "755": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8773,
        8862
      ],
      "op": "DUP3",
      "path": "3"
    },
    "756": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8773,
        8862
      ],
      "op": "ADD",
      "path": "3"
    },
    "757": {
      "op": "MSTORE"
    },
    "758": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "760": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "762": {
      "op": "DUP3"
    },
    "763": {
      "op": "ADD"
    },
    "764": {
      "op": "MSTORE"
    },
    "765": {
      "op": "PUSH32",
      "value": "0x4D757374207761697420756E74696C206166746572206C6F636B20706572696F"
    },
    "798": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "800": {
      "op": "DUP3"
    },
    "801": {
      "op": "ADD"
    },
    "802": {
      "op": "MSTORE"
    },
    "803": {
      "op": "PUSH1",
      "value": "0x19"
    },
    "805": {
      "op": "PUSH1",
      "value": "0xFA"
    },
    "807": {
      "op": "SHL"
    },
    "808": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "810": {
      "op": "DUP3"
    },
    "811": {
      "op": "ADD"
    },
    "812": {
      "op": "MSTORE"
    },
    "813": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "815": {
      "op": "ADD"
    },
    "816": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8773,
        8862
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2AB"
    },
    "819": {
      "op": "JUMP"
    },
    "820": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8773,
        8862
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "821": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8946,
        8947
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 2,
      "value": "0x0"
    },
    "823": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8922,
        8929
      ],
      "op": "DUP2",
      "path": "3"
    },
    "824": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8922,
        8942
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "826": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8922,
        8942
      ],
      "op": "ADD",
      "path": "3"
    },
    "827": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8922,
        8942
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "828": {
      "branch": 23,
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8922,
        8947
      ],
      "op": "GT",
      "path": "3"
    },
    "829": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8914,
        8977
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x388"
    },
    "832": {
      "branch": 23,
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8914,
        8977
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "833": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8914,
        8977
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "835": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8914,
        8977
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "836": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "840": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "842": {
      "op": "SHL"
    },
    "843": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8914,
        8977
      ],
      "op": "DUP2",
      "path": "3"
    },
    "844": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8914,
        8977
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "845": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "847": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8914,
        8977
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "849": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8914,
        8977
      ],
      "op": "DUP3",
      "path": "3"
    },
    "850": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8914,
        8977
      ],
      "op": "ADD",
      "path": "3"
    },
    "851": {
      "op": "MSTORE"
    },
    "852": {
      "op": "PUSH1",
      "value": "0x19"
    },
    "854": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "856": {
      "op": "DUP3"
    },
    "857": {
      "op": "ADD"
    },
    "858": {
      "op": "MSTORE"
    },
    "859": {
      "op": "PUSH32",
      "value": "0x4E6F20636F696E73206C65667420746F20776974686472617700000000000000"
    },
    "892": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "894": {
      "op": "DUP3"
    },
    "895": {
      "op": "ADD"
    },
    "896": {
      "op": "MSTORE"
    },
    "897": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "899": {
      "op": "ADD"
    },
    "900": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8914,
        8977
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2AB"
    },
    "903": {
      "op": "JUMP"
    },
    "904": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8914,
        8977
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "905": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9035,
        9057
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "907": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9166,
        9173
      ],
      "op": "DUP2",
      "path": "3"
    },
    "908": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9166,
        9181
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "910": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9166,
        9181
      ],
      "op": "ADD",
      "path": "3"
    },
    "911": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9166,
        9181
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "912": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9147,
        9162
      ],
      "op": "TIMESTAMP",
      "path": "3"
    },
    "913": {
      "branch": 24,
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9147,
        9181
      ],
      "op": "LT",
      "path": "3"
    },
    "914": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9143,
        9412
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3A0"
    },
    "917": {
      "branch": 24,
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9143,
        9412
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "918": {
      "op": "POP"
    },
    "919": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9217,
        9237
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 3,
      "value": "0x1"
    },
    "921": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9217,
        9237
      ],
      "op": "DUP2",
      "path": "3"
    },
    "922": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9217,
        9237
      ],
      "op": "ADD",
      "path": "3"
    },
    "923": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9217,
        9237
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "924": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9143,
        9412
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3C1"
    },
    "927": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9143,
        9412
      ],
      "op": "JUMP",
      "path": "3"
    },
    "928": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9143,
        9412
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "929": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9379,
        9401
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 4,
      "value": "0x4"
    },
    "931": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9379,
        9401
      ],
      "op": "DUP3",
      "path": "3"
    },
    "932": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9379,
        9401
      ],
      "op": "ADD",
      "path": "3"
    },
    "933": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9379,
        9401
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "934": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9349,
        9375
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x5"
    },
    "936": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9349,
        9375
      ],
      "op": "DUP4",
      "path": "3"
    },
    "937": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9349,
        9375
      ],
      "op": "ADD",
      "path": "3"
    },
    "938": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9349,
        9375
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "939": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9331,
        9375
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3B4"
    },
    "942": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9331,
        9375
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "943": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9331,
        9346
      ],
      "op": "TIMESTAMP",
      "path": "3"
    },
    "944": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9331,
        9375
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC11"
    },
    "947": {
      "fn": "MerkleVesting.withdraw",
      "jump": "i",
      "offset": [
        9331,
        9375
      ],
      "op": "JUMP",
      "path": "3"
    },
    "948": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9331,
        9375
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "949": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9330,
        9401
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3BE"
    },
    "952": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9330,
        9401
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "953": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9330,
        9401
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "954": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9330,
        9401
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC28"
    },
    "957": {
      "fn": "MerkleVesting.withdraw",
      "jump": "i",
      "offset": [
        9330,
        9401
      ],
      "op": "JUMP",
      "path": "3"
    },
    "958": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9330,
        9401
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "959": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9310,
        9401
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "960": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9310,
        9401
      ],
      "op": "POP",
      "path": "3"
    },
    "961": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9143,
        9412
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "962": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9486,
        9503
      ],
      "op": "DUP1",
      "path": "3",
      "statement": 5
    },
    "963": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9469
      ],
      "op": "DUP3",
      "path": "3"
    },
    "964": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9482
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "966": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9482
      ],
      "op": "ADD",
      "path": "3"
    },
    "967": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9482
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "969": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9503
      ],
      "op": "DUP3",
      "path": "3"
    },
    "970": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9503
      ],
      "op": "DUP3",
      "path": "3"
    },
    "971": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9503
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "972": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9503
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3D5"
    },
    "975": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9503
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "976": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9503
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "977": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9503
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC11"
    },
    "980": {
      "fn": "MerkleVesting.withdraw",
      "jump": "i",
      "offset": [
        9462,
        9503
      ],
      "op": "JUMP",
      "path": "3"
    },
    "981": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9503
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "982": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9503
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "983": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9503
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "984": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9462,
        9503
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "985": {
      "op": "POP"
    },
    "986": {
      "op": "POP"
    },
    "987": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9602,
        9617
      ],
      "op": "TIMESTAMP",
      "path": "3",
      "statement": 6
    },
    "988": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9573,
        9599
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x5"
    },
    "990": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9573,
        9599
      ],
      "op": "DUP4",
      "path": "3"
    },
    "991": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9573,
        9599
      ],
      "op": "ADD",
      "path": "3"
    },
    "992": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9573,
        9617
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "993": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9703,
        9726
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "995": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9729,
        9751
      ],
      "op": "DUP5",
      "path": "3"
    },
    "996": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9729,
        9751
      ],
      "op": "DUP2",
      "path": "3"
    },
    "997": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9729,
        9751
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "998": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9729,
        9740
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1000": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9729,
        9751
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1002": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9729,
        9751
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1003": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9729,
        9751
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1005": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9729,
        9751
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1006": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9729,
        9751
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1007": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9761,
        9778
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 7,
      "value": "0x3"
    },
    "1009": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9761,
        9778
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1010": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9761,
        9778
      ],
      "op": "ADD",
      "path": "3"
    },
    "1011": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9761,
        9799
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1012": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9761,
        9799
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1013": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9729,
        9751
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1014": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9729,
        9751
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1015": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9782,
        9799
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1016": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9782,
        9799
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1017": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9761,
        9799
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x403"
    },
    "1020": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9761,
        9799
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1021": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9782,
        9799
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1022": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9782,
        9799
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1023": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9761,
        9799
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC11"
    },
    "1026": {
      "fn": "MerkleVesting.withdraw",
      "jump": "i",
      "offset": [
        9761,
        9799
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1027": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9761,
        9799
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1028": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9761,
        9799
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1029": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9761,
        9799
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1030": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        9761,
        9799
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1031": {
      "op": "POP"
    },
    "1032": {
      "op": "POP"
    },
    "1033": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10188,
        10205
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 8,
      "value": "0x2"
    },
    "1035": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10188,
        10205
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1036": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10188,
        10205
      ],
      "op": "ADD",
      "path": "3"
    },
    "1037": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10188,
        10205
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1038": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1040": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1041": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "1046": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1048": {
      "op": "SHL"
    },
    "1049": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1050": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1051": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1053": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1055": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1057": {
      "op": "SHL"
    },
    "1058": {
      "op": "SUB"
    },
    "1059": {
      "op": "DUP7"
    },
    "1060": {
      "op": "DUP2"
    },
    "1061": {
      "op": "AND"
    },
    "1062": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1064": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1065": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "ADD",
      "path": "3"
    },
    "1066": {
      "op": "MSTORE"
    },
    "1067": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1069": {
      "op": "DUP3"
    },
    "1070": {
      "op": "ADD"
    },
    "1071": {
      "op": "DUP6"
    },
    "1072": {
      "op": "SWAP1"
    },
    "1073": {
      "op": "MSTORE"
    },
    "1074": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10188,
        10205
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1075": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10188,
        10205
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1076": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10188,
        10205
      ],
      "op": "AND",
      "path": "3"
    },
    "1077": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10188,
        10205
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1078": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10215
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xA9059CBB"
    },
    "1083": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10215
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1084": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1086": {
      "op": "ADD"
    },
    "1087": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1089": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1091": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1092": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1093": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1094": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "SUB",
      "path": "3"
    },
    "1095": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1096": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1098": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP8",
      "path": "3"
    },
    "1099": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1100": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "EXTCODESIZE",
      "path": "3"
    },
    "1101": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1102": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1103": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1104": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x458"
    },
    "1107": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1108": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1110": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1111": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "REVERT",
      "path": "3"
    },
    "1112": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1113": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "POP",
      "path": "3"
    },
    "1114": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "GAS",
      "path": "3"
    },
    "1115": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "CALL",
      "path": "3"
    },
    "1116": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1117": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1118": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1119": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x46C"
    },
    "1122": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1123": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1124": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1126": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1127": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "RETURNDATACOPY",
      "path": "3"
    },
    "1128": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1129": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1131": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "REVERT",
      "path": "3"
    },
    "1132": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1133": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "POP",
      "path": "3"
    },
    "1134": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "POP",
      "path": "3"
    },
    "1135": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "POP",
      "path": "3"
    },
    "1136": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "POP",
      "path": "3"
    },
    "1137": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1139": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1140": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1141": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1143": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "NOT",
      "path": "3"
    },
    "1144": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1146": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1147": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "ADD",
      "path": "3"
    },
    "1148": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "AND",
      "path": "3"
    },
    "1149": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1150": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "ADD",
      "path": "3"
    },
    "1151": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1152": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1154": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1155": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "POP",
      "path": "3"
    },
    "1156": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1157": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "ADD",
      "path": "3"
    },
    "1158": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1159": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x490"
    },
    "1162": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1163": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1164": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC47"
    },
    "1167": {
      "fn": "MerkleVesting.withdraw",
      "jump": "i",
      "offset": [
        10181,
        10247
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1168": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1169": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10181,
        10247
      ],
      "op": "POP",
      "path": "3"
    },
    "1170": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10292,
        10303
      ],
      "op": "DUP4",
      "path": "3",
      "statement": 9
    },
    "1171": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1173": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1175": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1177": {
      "op": "SHL"
    },
    "1178": {
      "op": "SUB"
    },
    "1179": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "AND",
      "path": "3"
    },
    "1180": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10281,
        10290
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1181": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0x1680E4CFE90468085407EF2B599DBE94B0AA30FF9F180F0E41D22EB71C872872"
    },
    "1214": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10305,
        10322
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1215": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10324,
        10331
      ],
      "op": "DUP7",
      "path": "3"
    },
    "1216": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10324,
        10344
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1218": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10324,
        10344
      ],
      "op": "ADD",
      "path": "3"
    },
    "1219": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10324,
        10344
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1220": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1222": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1223": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4DA"
    },
    "1226": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1227": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1228": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1229": {
      "op": "SWAP2"
    },
    "1230": {
      "op": "DUP3"
    },
    "1231": {
      "op": "MSTORE"
    },
    "1232": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1234": {
      "op": "DUP3"
    },
    "1235": {
      "op": "ADD"
    },
    "1236": {
      "op": "MSTORE"
    },
    "1237": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1239": {
      "op": "ADD"
    },
    "1240": {
      "op": "SWAP1"
    },
    "1241": {
      "op": "JUMP"
    },
    "1242": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1243": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1245": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1246": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1247": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1248": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "SUB",
      "path": "3"
    },
    "1249": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1250": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        10262,
        10345
      ],
      "op": "LOG3",
      "path": "3"
    },
    "1251": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8439,
        10352
      ],
      "op": "POP",
      "path": "3"
    },
    "1252": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8439,
        10352
      ],
      "op": "POP",
      "path": "3"
    },
    "1253": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8439,
        10352
      ],
      "op": "POP",
      "path": "3"
    },
    "1254": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8377,
        10352
      ],
      "op": "POP",
      "path": "3"
    },
    "1255": {
      "fn": "MerkleVesting.withdraw",
      "offset": [
        8377,
        10352
      ],
      "op": "POP",
      "path": "3"
    },
    "1256": {
      "fn": "MerkleVesting.withdraw",
      "jump": "o",
      "offset": [
        8377,
        10352
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1257": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3607,
        4116
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1258": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 10,
      "value": "0x40"
    },
    "1260": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1261": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1262": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x80"
    },
    "1264": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "ADD",
      "path": "3"
    },
    "1265": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1267": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1268": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1269": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3829,
        3836
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1270": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1271": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1272": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1274": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "ADD",
      "path": "3"
    },
    "1275": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3850,
        3858
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1276": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1277": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1278": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1280": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "ADD",
      "path": "3"
    },
    "1281": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3872,
        3884
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1282": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1284": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1286": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1288": {
      "op": "SHL"
    },
    "1289": {
      "op": "SUB"
    },
    "1290": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "AND",
      "path": "3"
    },
    "1291": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1292": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1293": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1295": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "ADD",
      "path": "3"
    },
    "1296": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3898,
        3899
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1298": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1299": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1300": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3805,
        3960
      ],
      "op": "POP",
      "path": "3"
    },
    "1301": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3790
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1303": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1305": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3793,
        3801
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1306": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3793,
        3801
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1308": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3791,
        3801
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1309": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3791,
        3801
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1310": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3791,
        3801
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x526"
    },
    "1313": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3791,
        3801
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1314": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3791,
        3801
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC70"
    },
    "1317": {
      "fn": "MerkleVesting.addMerkleRoot",
      "jump": "i",
      "offset": [
        3791,
        3801
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1318": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3791,
        3801
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1319": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3791,
        3801
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1320": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3791,
        3801
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1321": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3791,
        3801
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1322": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3791,
        3801
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1323": {
      "op": "POP"
    },
    "1324": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1325": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1326": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1328": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1329": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1330": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "ADD",
      "path": "3"
    },
    "1331": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1332": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1333": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1334": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1335": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1337": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1338": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1339": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "ADD",
      "path": "3"
    },
    "1340": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1342": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1343": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1344": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3802
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1345": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1346": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1347": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1348": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1349": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1350": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1351": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "ADD",
      "path": "3"
    },
    "1352": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1353": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1355": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1356": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "ADD",
      "path": "3"
    },
    "1357": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1358": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1359": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1360": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "ADD",
      "path": "3"
    },
    "1361": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1362": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1364": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1365": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "ADD",
      "path": "3"
    },
    "1366": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1367": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1368": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1370": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1372": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1374": {
      "op": "SHL"
    },
    "1375": {
      "op": "SUB"
    },
    "1376": {
      "op": "NOT"
    },
    "1377": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "AND",
      "path": "3"
    },
    "1378": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1380": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1382": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1384": {
      "op": "SHL"
    },
    "1385": {
      "op": "SUB"
    },
    "1386": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1387": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1388": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "AND",
      "path": "3"
    },
    "1389": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1390": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1391": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1392": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "OR",
      "path": "3"
    },
    "1393": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1394": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1395": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "1397": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1398": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1399": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "ADD",
      "path": "3"
    },
    "1400": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1401": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "1403": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1404": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1405": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "ADD",
      "path": "3"
    },
    "1406": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3779,
        3960
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1407": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4013,
        4021
      ],
      "op": "SLOAD",
      "path": "3",
      "statement": 11
    },
    "1408": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3999,
        4036
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x589"
    },
    "1411": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3999,
        4036
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1412": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4023,
        4035
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1413": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3999,
        4012
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8B7"
    },
    "1416": {
      "fn": "MerkleVesting.addMerkleRoot",
      "jump": "i",
      "offset": [
        3999,
        4036
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1417": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3999,
        4036
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1418": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4067,
        4075
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 12,
      "value": "0x0"
    },
    "1420": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4067,
        4075
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1421": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1423": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1424": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1425": {
      "op": "DUP7"
    },
    "1426": {
      "op": "DUP2"
    },
    "1427": {
      "op": "MSTORE"
    },
    "1428": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1430": {
      "op": "DUP2"
    },
    "1431": {
      "op": "ADD"
    },
    "1432": {
      "op": "DUP7"
    },
    "1433": {
      "op": "SWAP1"
    },
    "1434": {
      "op": "MSTORE"
    },
    "1435": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1437": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1439": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1441": {
      "op": "SHL"
    },
    "1442": {
      "op": "SUB"
    },
    "1443": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1444": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "AND",
      "path": "3"
    },
    "1445": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1446": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4067,
        4075
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1447": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0xB72EA3ED46A7513251023946D5D35916F3E1D76D748BB144E641D1162DEE222F"
    },
    "1480": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1481": {
      "op": "ADD"
    },
    "1482": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1484": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1485": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1486": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1487": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "SUB",
      "path": "3"
    },
    "1488": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1489": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        4051,
        4109
      ],
      "op": "LOG3",
      "path": "3"
    },
    "1490": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3607,
        4116
      ],
      "op": "POP",
      "path": "3"
    },
    "1491": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3607,
        4116
      ],
      "op": "POP",
      "path": "3"
    },
    "1492": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3607,
        4116
      ],
      "op": "POP",
      "path": "3"
    },
    "1493": {
      "fn": "MerkleVesting.addMerkleRoot",
      "offset": [
        3607,
        4116
      ],
      "op": "POP",
      "path": "3"
    },
    "1494": {
      "fn": "MerkleVesting.addMerkleRoot",
      "jump": "o",
      "offset": [
        3607,
        4116
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1495": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1496": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1498": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1500": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1502": {
      "op": "SHL"
    },
    "1503": {
      "op": "SUB"
    },
    "1504": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6530
      ],
      "op": "DUP7",
      "path": "3",
      "statement": 13
    },
    "1505": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6530
      ],
      "op": "AND",
      "path": "3"
    },
    "1506": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6530
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1508": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6530
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1509": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6530
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1510": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6530
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1511": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6517
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1513": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6530
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1515": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6530
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1516": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6530
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1517": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6530
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1518": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6530
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1520": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6530
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1521": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6530
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1522": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6530
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1523": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6541
      ],
      "op": "DUP11",
      "path": "3"
    },
    "1524": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6541
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1525": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6541
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1526": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6541
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1527": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6541
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1528": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6541
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1529": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6541
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1530": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6541
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1531": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6541
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1532": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6541
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xFF"
    },
    "1534": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6506,
        6541
      ],
      "op": "AND",
      "path": "3"
    },
    "1535": {
      "branch": 25,
      "fn": "MerkleVesting.initialize",
      "offset": [
        6505,
        6541
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1536": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6497,
        6565
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x641"
    },
    "1539": {
      "branch": 25,
      "fn": "MerkleVesting.initialize",
      "offset": [
        6497,
        6565
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1540": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6497,
        6565
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1542": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6497,
        6565
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1543": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1547": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1549": {
      "op": "SHL"
    },
    "1550": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6497,
        6565
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1551": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6497,
        6565
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1552": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1554": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6497,
        6565
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1556": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6497,
        6565
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1557": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6497,
        6565
      ],
      "op": "ADD",
      "path": "3"
    },
    "1558": {
      "op": "MSTORE"
    },
    "1559": {
      "op": "PUSH1",
      "value": "0x13"
    },
    "1561": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1563": {
      "op": "DUP3"
    },
    "1564": {
      "op": "ADD"
    },
    "1565": {
      "op": "MSTORE"
    },
    "1566": {
      "op": "PUSH19",
      "value": "0x105B1C9958591E481A5B9A5D1A585B1A5E9959"
    },
    "1586": {
      "op": "PUSH1",
      "value": "0x6A"
    },
    "1588": {
      "op": "SHL"
    },
    "1589": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1591": {
      "op": "DUP3"
    },
    "1592": {
      "op": "ADD"
    },
    "1593": {
      "op": "MSTORE"
    },
    "1594": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1596": {
      "op": "ADD"
    },
    "1597": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6497,
        6565
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2AB"
    },
    "1600": {
      "op": "JUMP"
    },
    "1601": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6497,
        6565
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1602": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1604": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1605": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1606": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1608": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1610": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1612": {
      "op": "SHL"
    },
    "1613": {
      "op": "SUB"
    },
    "1614": {
      "op": "DUP9"
    },
    "1615": {
      "op": "AND"
    },
    "1616": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1618": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1619": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "ADD",
      "path": "3"
    },
    "1620": {
      "op": "MSTORE"
    },
    "1621": {
      "op": "SWAP1"
    },
    "1622": {
      "op": "DUP2"
    },
    "1623": {
      "op": "ADD"
    },
    "1624": {
      "op": "DUP7"
    },
    "1625": {
      "op": "SWAP1"
    },
    "1626": {
      "op": "MSTORE"
    },
    "1627": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1629": {
      "op": "DUP2"
    },
    "1630": {
      "op": "ADD"
    },
    "1631": {
      "op": "DUP6"
    },
    "1632": {
      "op": "SWAP1"
    },
    "1633": {
      "op": "MSTORE"
    },
    "1634": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1636": {
      "op": "DUP2"
    },
    "1637": {
      "op": "ADD"
    },
    "1638": {
      "op": "DUP5"
    },
    "1639": {
      "op": "SWAP1"
    },
    "1640": {
      "op": "MSTORE"
    },
    "1641": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1643": {
      "op": "DUP2"
    },
    "1644": {
      "op": "ADD"
    },
    "1645": {
      "op": "DUP4"
    },
    "1646": {
      "op": "SWAP1"
    },
    "1647": {
      "op": "MSTORE"
    },
    "1648": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6750,
        6762
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1650": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6750,
        6762
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1651": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "1653": {
      "op": "ADD"
    },
    "1654": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1656": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1657": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1658": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1660": {
      "op": "NOT"
    },
    "1661": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1662": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1663": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "SUB",
      "path": "3"
    },
    "1664": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "ADD",
      "path": "3"
    },
    "1665": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1666": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1667": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1668": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1669": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1670": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6765,
        6850
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1671": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6765,
        6850
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1672": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6775,
        6849
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1674": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6765,
        6850
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1675": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6765,
        6850
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1676": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6765,
        6850
      ],
      "op": "ADD",
      "path": "3"
    },
    "1677": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6765,
        6850
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1678": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6921
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1680": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6924,
        6946
      ],
      "op": "DUP13",
      "path": "3"
    },
    "1681": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6924,
        6946
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1682": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6924,
        6946
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1683": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6924,
        6935
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1685": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6924,
        6946
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1686": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6924,
        6946
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1687": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6924,
        6946
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1688": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6924,
        6946
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1689": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6924,
        6946
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1690": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6924,
        6946
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1691": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6924,
        6946
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1692": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x80"
    },
    "1694": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "DUP7",
      "path": "3"
    },
    "1695": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "ADD",
      "path": "3"
    },
    "1696": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1697": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1698": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1699": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1700": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1701": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "DUP8",
      "path": "3"
    },
    "1702": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1703": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1705": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1706": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "ADD",
      "path": "3"
    },
    "1707": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1708": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "SWAP5",
      "path": "3"
    },
    "1709": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "DUP8",
      "path": "3"
    },
    "1710": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "ADD",
      "path": "3"
    },
    "1711": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "SWAP5",
      "path": "3"
    },
    "1712": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1713": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "SWAP5",
      "path": "3"
    },
    "1714": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1715": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1716": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1717": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "ADD",
      "path": "3"
    },
    "1718": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1719": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1721": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1723": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1725": {
      "op": "SHL"
    },
    "1726": {
      "op": "SUB"
    },
    "1727": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "AND",
      "path": "3"
    },
    "1728": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1729": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1730": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "ADD",
      "path": "3"
    },
    "1731": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1732": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "1734": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "ADD",
      "path": "3"
    },
    "1735": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1736": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "1738": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1739": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "ADD",
      "path": "3"
    },
    "1740": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6899,
        6946
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1741": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "SWAP2",
      "path": "3",
      "statement": 14
    },
    "1742": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1743": {
      "op": "PUSH4",
      "value": "0x2769CD1F"
    },
    "1748": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "1750": {
      "op": "SHL"
    },
    "1751": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1752": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1753": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6765,
        6850
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1754": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6765,
        6850
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "1755": {
      "op": "POP"
    },
    "1756": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7060
      ],
      "op": "PUSH20",
      "path": "3",
      "value": "0x0"
    },
    "1777": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7060
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1778": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7060
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x9DA7347C"
    },
    "1783": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7060
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1784": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x707"
    },
    "1787": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1788": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6765,
        6850
      ],
      "op": "DUP7",
      "path": "3"
    },
    "1789": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6765,
        6850
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1790": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7067,
        7072
      ],
      "op": "DUP9",
      "path": "3"
    },
    "1791": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7067,
        7072
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1792": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1794": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "ADD",
      "path": "3"
    },
    "1795": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC8B"
    },
    "1798": {
      "fn": "MerkleVesting.initialize",
      "jump": "i",
      "offset": [
        7035,
        7073
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1799": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1800": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1802": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1804": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1805": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1806": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1807": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "SUB",
      "path": "3"
    },
    "1808": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1809": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DUP7",
      "path": "3"
    },
    "1810": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1811": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "EXTCODESIZE",
      "path": "3"
    },
    "1812": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1813": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1814": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1815": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x71F"
    },
    "1818": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1819": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1821": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1822": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "REVERT",
      "path": "3"
    },
    "1823": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1824": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "POP",
      "path": "3"
    },
    "1825": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "GAS",
      "path": "3"
    },
    "1826": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DELEGATECALL",
      "path": "3"
    },
    "1827": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1828": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1829": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1830": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x733"
    },
    "1833": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1834": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1835": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1837": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1838": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "RETURNDATACOPY",
      "path": "3"
    },
    "1839": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1840": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1842": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "REVERT",
      "path": "3"
    },
    "1843": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1844": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "POP",
      "path": "3"
    },
    "1845": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "POP",
      "path": "3"
    },
    "1846": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "POP",
      "path": "3"
    },
    "1847": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "POP",
      "path": "3"
    },
    "1848": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1850": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1851": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1852": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1854": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "NOT",
      "path": "3"
    },
    "1855": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1857": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1858": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "ADD",
      "path": "3"
    },
    "1859": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "AND",
      "path": "3"
    },
    "1860": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1861": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "ADD",
      "path": "3"
    },
    "1862": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1863": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1865": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1866": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "POP",
      "path": "3"
    },
    "1867": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1868": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "ADD",
      "path": "3"
    },
    "1869": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1870": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x757"
    },
    "1873": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1874": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1875": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC47"
    },
    "1878": {
      "fn": "MerkleVesting.initialize",
      "jump": "i",
      "offset": [
        7035,
        7073
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1879": {
      "branch": 26,
      "fn": "MerkleVesting.initialize",
      "offset": [
        7035,
        7073
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1880": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7027,
        7110
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x7A3"
    },
    "1883": {
      "branch": 26,
      "fn": "MerkleVesting.initialize",
      "offset": [
        7027,
        7110
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1884": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7027,
        7110
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1886": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7027,
        7110
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1887": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1891": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1893": {
      "op": "SHL"
    },
    "1894": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7027,
        7110
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1895": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7027,
        7110
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1896": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1898": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7027,
        7110
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1900": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7027,
        7110
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1901": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7027,
        7110
      ],
      "op": "ADD",
      "path": "3"
    },
    "1902": {
      "op": "DUP2"
    },
    "1903": {
      "op": "SWAP1"
    },
    "1904": {
      "op": "MSTORE"
    },
    "1905": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1907": {
      "op": "DUP3"
    },
    "1908": {
      "op": "ADD"
    },
    "1909": {
      "op": "MSTORE"
    },
    "1910": {
      "op": "PUSH32",
      "value": "0x5468652070726F6F6620636F756C64206E6F742062652076657269666965642E"
    },
    "1943": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1945": {
      "op": "DUP3"
    },
    "1946": {
      "op": "ADD"
    },
    "1947": {
      "op": "MSTORE"
    },
    "1948": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1950": {
      "op": "ADD"
    },
    "1951": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7027,
        7110
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2AB"
    },
    "1954": {
      "op": "JUMP"
    },
    "1955": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7027,
        7110
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1956": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1958": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1960": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1962": {
      "op": "SHL"
    },
    "1963": {
      "op": "SUB"
    },
    "1964": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7205
      ],
      "op": "DUP9",
      "path": "3",
      "statement": 15
    },
    "1965": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7205
      ],
      "op": "AND",
      "path": "3"
    },
    "1966": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7205
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1968": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7205
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1969": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7205
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1970": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7205
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1971": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7219,
        7223
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1973": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7205
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1975": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7205
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1976": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7205
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1977": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7205
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1978": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7205
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1980": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7205
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1981": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7205
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1982": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7205
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1983": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7216
      ],
      "op": "DUP14",
      "path": "3"
    },
    "1984": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7216
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1985": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7216
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1986": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7216
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1987": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7216
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1988": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7216
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1989": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7216
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1990": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7216
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1991": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7223
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1992": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7223
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1993": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1995": {
      "op": "NOT"
    },
    "1996": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7223
      ],
      "op": "AND",
      "path": "3"
    },
    "1997": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7223
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1998": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7223
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1999": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7223
      ],
      "op": "OR",
      "path": "3"
    },
    "2000": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7223
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2001": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7181,
        7223
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "2002": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7330,
        7349
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x7DB"
    },
    "2005": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7340,
        7349
      ],
      "op": "DUP8",
      "path": "3"
    },
    "2006": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7330,
        7337
      ],
      "op": "DUP8",
      "path": "3"
    },
    "2007": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7330,
        7349
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC11"
    },
    "2010": {
      "fn": "MerkleVesting.initialize",
      "jump": "i",
      "offset": [
        7330,
        7349
      ],
      "op": "JUMP",
      "path": "3"
    },
    "2011": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7330,
        7349
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2012": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7316,
        7350
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x7E5"
    },
    "2015": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7316,
        7350
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2016": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7316,
        7326
      ],
      "op": "DUP10",
      "path": "3"
    },
    "2017": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7316,
        7350
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xCE0"
    },
    "2020": {
      "fn": "MerkleVesting.initialize",
      "jump": "i",
      "offset": [
        7316,
        7350
      ],
      "op": "JUMP",
      "path": "3"
    },
    "2021": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7316,
        7350
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2022": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7294,
        7350
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2023": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7294,
        7350
      ],
      "op": "POP",
      "path": "3"
    },
    "2024": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 16,
      "value": "0x40"
    },
    "2026": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2027": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "DUP1",
      "path": "3"
    },
    "2028": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xE0"
    },
    "2030": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2031": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2033": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2034": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "DUP1",
      "path": "3"
    },
    "2035": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7467,
        7477
      ],
      "op": "DUP10",
      "path": "3"
    },
    "2036": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2037": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2038": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2040": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2041": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7522,
        7532
      ],
      "op": "DUP10",
      "path": "3"
    },
    "2042": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2043": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2044": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2046": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2047": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7584,
        7593
      ],
      "op": "DUP9",
      "path": "3"
    },
    "2048": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2049": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2050": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2052": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2053": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7607,
        7614
      ],
      "op": "DUP8",
      "path": "3"
    },
    "2054": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2055": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2056": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2058": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2059": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7628,
        7642
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2060": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2061": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2062": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2064": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2065": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7656,
        7665
      ],
      "op": "DUP9",
      "path": "3"
    },
    "2066": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2067": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2068": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2070": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2071": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7720,
        7737
      ],
      "op": "DUP7",
      "path": "3"
    },
    "2072": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2073": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2074": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7446,
        7747
      ],
      "op": "POP",
      "path": "3"
    },
    "2075": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7419
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "2077": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7432
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2079": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7420,
        7431
      ],
      "op": "DUP12",
      "path": "3"
    },
    "2080": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2082": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2084": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2086": {
      "op": "SHL"
    },
    "2087": {
      "op": "SUB"
    },
    "2088": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7432
      ],
      "op": "AND",
      "path": "3"
    },
    "2089": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2091": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2093": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2095": {
      "op": "SHL"
    },
    "2096": {
      "op": "SUB"
    },
    "2097": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7432
      ],
      "op": "AND",
      "path": "3"
    },
    "2098": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7432
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2099": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7432
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2100": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7432
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2102": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7432
      ],
      "op": "ADD",
      "path": "3"
    },
    "2103": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7432
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2104": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7432
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2105": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7432
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2106": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7432
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2108": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7432
      ],
      "op": "ADD",
      "path": "3"
    },
    "2109": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7432
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2111": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7432
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "2112": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7443
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2114": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7433,
        7442
      ],
      "op": "DUP13",
      "path": "3"
    },
    "2115": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7443
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2116": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7443
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2117": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7443
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2119": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7443
      ],
      "op": "ADD",
      "path": "3"
    },
    "2120": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7443
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2121": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7443
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2122": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7443
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2123": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7443
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2125": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7443
      ],
      "op": "ADD",
      "path": "3"
    },
    "2126": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7443
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2128": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7443
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "2129": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2131": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2132": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2133": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2134": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2135": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2137": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2138": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "2139": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2141": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2142": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2143": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2144": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2145": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "2147": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2148": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "2149": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2151": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2152": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2153": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2154": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2155": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "2157": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2158": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "2159": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "2161": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2162": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2163": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2164": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2165": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "2167": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2168": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "2169": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x80"
    },
    "2171": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2172": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2173": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2174": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2175": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "2177": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2178": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "2179": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xA0"
    },
    "2181": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2182": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2183": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2184": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2185": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x5"
    },
    "2187": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2188": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "2189": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xC0"
    },
    "2191": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2192": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2193": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2194": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2195": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x6"
    },
    "2197": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "ADD",
      "path": "3"
    },
    "2198": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "2199": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2200": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "POP",
      "path": "3"
    },
    "2201": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7411,
        7747
      ],
      "op": "POP",
      "path": "3"
    },
    "2202": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7860,
        7875
      ],
      "op": "TIMESTAMP",
      "path": "3"
    },
    "2203": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7840,
        7857
      ],
      "op": "DUP6",
      "path": "3"
    },
    "2204": {
      "branch": 27,
      "fn": "MerkleVesting.initialize",
      "offset": [
        7840,
        7875
      ],
      "op": "LT",
      "path": "3"
    },
    "2205": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7836,
        7934
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "2206": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7836,
        7934
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8AB"
    },
    "2209": {
      "branch": 27,
      "fn": "MerkleVesting.initialize",
      "offset": [
        7836,
        7934
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "2210": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7891,
        7923
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 17,
      "value": "0x8AB"
    },
    "2213": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7900,
        7909
      ],
      "op": "DUP11",
      "path": "3"
    },
    "2214": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7911,
        7922
      ],
      "op": "DUP11",
      "path": "3"
    },
    "2215": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7891,
        7899
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x22C"
    },
    "2218": {
      "fn": "MerkleVesting.initialize",
      "jump": "i",
      "offset": [
        7891,
        7923
      ],
      "op": "JUMP",
      "path": "3"
    },
    "2219": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        7891,
        7923
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2220": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6441,
        7940
      ],
      "op": "POP",
      "path": "3"
    },
    "2221": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6441,
        7940
      ],
      "op": "POP",
      "path": "3"
    },
    "2222": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6441,
        7940
      ],
      "op": "POP",
      "path": "3"
    },
    "2223": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "POP",
      "path": "3"
    },
    "2224": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "POP",
      "path": "3"
    },
    "2225": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "POP",
      "path": "3"
    },
    "2226": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "POP",
      "path": "3"
    },
    "2227": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "POP",
      "path": "3"
    },
    "2228": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "POP",
      "path": "3"
    },
    "2229": {
      "fn": "MerkleVesting.initialize",
      "offset": [
        6280,
        7940
      ],
      "op": "POP",
      "path": "3"
    },
    "2230": {
      "fn": "MerkleVesting.initialize",
      "jump": "o",
      "offset": [
        6280,
        7940
      ],
      "op": "JUMP",
      "path": "3"
    },
    "2231": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4612,
        5223
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2232": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4720,
        4749
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2234": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4752,
        4774
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2235": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4752,
        4774
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2236": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4752,
        4774
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2237": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4752,
        4763
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "2239": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4752,
        4774
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2241": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4752,
        4774
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2242": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4752,
        4774
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2244": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4752,
        4774
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2245": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4752,
        4774
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "2246": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4846,
        4869
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 18,
      "value": "0x3"
    },
    "2248": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4846,
        4869
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2249": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4846,
        4869
      ],
      "op": "ADD",
      "path": "3"
    },
    "2250": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4846,
        4878
      ],
      "op": "DUP1",
      "path": "3"
    },
    "2251": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4846,
        4878
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "2252": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4752,
        4774
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "2253": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4752,
        4774
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "2254": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4873,
        4878
      ],
      "op": "DUP5",
      "path": "3"
    },
    "2255": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4873,
        4878
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "2256": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4846,
        4878
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8DA"
    },
    "2259": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4846,
        4878
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2260": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4873,
        4878
      ],
      "op": "DUP5",
      "path": "3"
    },
    "2261": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4873,
        4878
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2262": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4846,
        4878
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xD02"
    },
    "2265": {
      "fn": "MerkleVesting.depositTokens",
      "jump": "i",
      "offset": [
        4846,
        4878
      ],
      "op": "JUMP",
      "path": "3"
    },
    "2266": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4846,
        4878
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2267": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4846,
        4878
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2268": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4846,
        4878
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "2269": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4846,
        4878
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "2270": {
      "op": "POP"
    },
    "2271": {
      "op": "POP"
    },
    "2272": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5046,
        5069
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 19,
      "value": "0x2"
    },
    "2274": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5046,
        5069
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2275": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5046,
        5069
      ],
      "op": "ADD",
      "path": "3"
    },
    "2276": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5046,
        5069
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "2277": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2279": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2280": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "2285": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2287": {
      "op": "SHL"
    },
    "2288": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2289": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2290": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5084,
        5094
      ],
      "op": "CALLER",
      "path": "3"
    },
    "2291": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "2293": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2294": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "ADD",
      "path": "3"
    },
    "2295": {
      "op": "MSTORE"
    },
    "2296": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5104,
        5108
      ],
      "op": "ADDRESS",
      "path": "3"
    },
    "2297": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2299": {
      "op": "DUP3"
    },
    "2300": {
      "op": "ADD"
    },
    "2301": {
      "op": "MSTORE"
    },
    "2302": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2304": {
      "op": "DUP2"
    },
    "2305": {
      "op": "ADD"
    },
    "2306": {
      "op": "DUP5"
    },
    "2307": {
      "op": "SWAP1"
    },
    "2308": {
      "op": "MSTORE"
    },
    "2309": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2311": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2313": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2315": {
      "op": "SHL"
    },
    "2316": {
      "op": "SUB"
    },
    "2317": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5046,
        5069
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2318": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5046,
        5069
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "2319": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5046,
        5069
      ],
      "op": "AND",
      "path": "3"
    },
    "2320": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5046,
        5069
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2321": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5083
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x23B872DD"
    },
    "2326": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5083
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2327": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2329": {
      "op": "ADD"
    },
    "2330": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "2332": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2334": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2335": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP1",
      "path": "3"
    },
    "2336": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP4",
      "path": "3"
    },
    "2337": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "SUB",
      "path": "3"
    },
    "2338": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2339": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2341": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP8",
      "path": "3"
    },
    "2342": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP1",
      "path": "3"
    },
    "2343": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "EXTCODESIZE",
      "path": "3"
    },
    "2344": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "2345": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP1",
      "path": "3"
    },
    "2346": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "2347": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x933"
    },
    "2350": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "2351": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2353": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP1",
      "path": "3"
    },
    "2354": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "REVERT",
      "path": "3"
    },
    "2355": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2356": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "POP",
      "path": "3"
    },
    "2357": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "GAS",
      "path": "3"
    },
    "2358": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "CALL",
      "path": "3"
    },
    "2359": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "2360": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP1",
      "path": "3"
    },
    "2361": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "2362": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x947"
    },
    "2365": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "2366": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "2367": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2369": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP1",
      "path": "3"
    },
    "2370": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "RETURNDATACOPY",
      "path": "3"
    },
    "2371": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "2372": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "2374": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "REVERT",
      "path": "3"
    },
    "2375": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2376": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "POP",
      "path": "3"
    },
    "2377": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "POP",
      "path": "3"
    },
    "2378": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "POP",
      "path": "3"
    },
    "2379": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "POP",
      "path": "3"
    },
    "2380": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2382": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2383": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "2384": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "2386": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "NOT",
      "path": "3"
    },
    "2387": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "2389": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2390": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "ADD",
      "path": "3"
    },
    "2391": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "AND",
      "path": "3"
    },
    "2392": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2393": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "ADD",
      "path": "3"
    },
    "2394": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP1",
      "path": "3"
    },
    "2395": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2397": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2398": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "POP",
      "path": "3"
    },
    "2399": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2400": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "ADD",
      "path": "3"
    },
    "2401": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2402": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x96B"
    },
    "2405": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "2406": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2407": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC47"
    },
    "2410": {
      "fn": "MerkleVesting.depositTokens",
      "jump": "i",
      "offset": [
        5039,
        5117
      ],
      "op": "JUMP",
      "path": "3"
    },
    "2411": {
      "branch": 28,
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5039,
        5117
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2412": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5031,
        5143
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x9AF"
    },
    "2415": {
      "branch": 28,
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5031,
        5143
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "2416": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5031,
        5143
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2418": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5031,
        5143
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2419": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2423": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2425": {
      "op": "SHL"
    },
    "2426": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5031,
        5143
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2427": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5031,
        5143
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "2428": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2430": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5031,
        5143
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "2432": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5031,
        5143
      ],
      "op": "DUP3",
      "path": "3"
    },
    "2433": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5031,
        5143
      ],
      "op": "ADD",
      "path": "3"
    },
    "2434": {
      "op": "MSTORE"
    },
    "2435": {
      "op": "PUSH1",
      "value": "0x15"
    },
    "2437": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2439": {
      "op": "DUP3"
    },
    "2440": {
      "op": "ADD"
    },
    "2441": {
      "op": "MSTORE"
    },
    "2442": {
      "op": "PUSH21",
      "value": "0x115490CC8C081D1C985B9CD9995C8819985A5B1959"
    },
    "2464": {
      "op": "PUSH1",
      "value": "0x5A"
    },
    "2466": {
      "op": "SHL"
    },
    "2467": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2469": {
      "op": "DUP3"
    },
    "2470": {
      "op": "ADD"
    },
    "2471": {
      "op": "MSTORE"
    },
    "2472": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2474": {
      "op": "ADD"
    },
    "2475": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5031,
        5143
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2AB"
    },
    "2478": {
      "op": "JUMP"
    },
    "2479": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5031,
        5143
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "2480": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5185,
        5208
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 20,
      "value": "0x2"
    },
    "2482": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5185,
        5208
      ],
      "op": "DUP2",
      "path": "3"
    },
    "2483": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5185,
        5208
      ],
      "op": "ADD",
      "path": "3"
    },
    "2484": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5185,
        5208
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "2485": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5158,
        5216
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2487": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5158,
        5216
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2488": {
      "op": "DUP4"
    },
    "2489": {
      "op": "DUP2"
    },
    "2490": {
      "op": "MSTORE"
    },
    "2491": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2493": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2495": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2497": {
      "op": "SHL"
    },
    "2498": {
      "op": "SUB"
    },
    "2499": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5185,
        5208
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2500": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5185,
        5208
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "2501": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5185,
        5208
      ],
      "op": "AND",
      "path": "3"
    },
    "2502": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5185,
        5208
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2503": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5174,
        5183
      ],
      "op": "DUP5",
      "path": "3"
    },
    "2504": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5174,
        5183
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2505": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5158,
        5216
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0xB162210DA7D23D82C18CFF5AF46D3562661D26B42A6848FA28D64A6BDC70386A"
    },
    "2538": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5158,
        5216
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2539": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2541": {
      "op": "ADD"
    },
    "2542": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5158,
        5216
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "2544": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5158,
        5216
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "2545": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5158,
        5216
      ],
      "op": "DUP1",
      "path": "3"
    },
    "2546": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5158,
        5216
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "2547": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5158,
        5216
      ],
      "op": "SUB",
      "path": "3"
    },
    "2548": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5158,
        5216
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "2549": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        5158,
        5216
      ],
      "op": "LOG3",
      "path": "3"
    },
    "2550": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4670,
        5223
      ],
      "op": "POP",
      "path": "3"
    },
    "2551": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4612,
        5223
      ],
      "op": "POP",
      "path": "3"
    },
    "2552": {
      "fn": "MerkleVesting.depositTokens",
      "offset": [
        4612,
        5223
      ],
      "op": "POP",
      "path": "3"
    },
    "2553": {
      "fn": "MerkleVesting.depositTokens",
      "jump": "o",
      "offset": [
        4612,
        5223
      ],
      "op": "JUMP",
      "path": "3"
    },
    "2554": {
      "op": "JUMPDEST"
    },
    "2555": {
      "op": "DUP1"
    },
    "2556": {
      "op": "CALLDATALOAD"
    },
    "2557": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2559": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2561": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2563": {
      "op": "SHL"
    },
    "2564": {
      "op": "SUB"
    },
    "2565": {
      "op": "DUP2"
    },
    "2566": {
      "op": "AND"
    },
    "2567": {
      "op": "DUP2"
    },
    "2568": {
      "op": "EQ"
    },
    "2569": {
      "op": "PUSH2",
      "value": "0xA11"
    },
    "2572": {
      "op": "JUMPI"
    },
    "2573": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2575": {
      "op": "DUP1"
    },
    "2576": {
      "op": "REVERT"
    },
    "2577": {
      "op": "JUMPDEST"
    },
    "2578": {
      "op": "SWAP2"
    },
    "2579": {
      "op": "SWAP1"
    },
    "2580": {
      "op": "POP"
    },
    "2581": {
      "jump": "o",
      "op": "JUMP"
    },
    "2582": {
      "op": "JUMPDEST"
    },
    "2583": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2585": {
      "op": "DUP1"
    },
    "2586": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2588": {
      "op": "DUP4"
    },
    "2589": {
      "op": "DUP6"
    },
    "2590": {
      "op": "SUB"
    },
    "2591": {
      "op": "SLT"
    },
    "2592": {
      "op": "ISZERO"
    },
    "2593": {
      "op": "PUSH2",
      "value": "0xA29"
    },
    "2596": {
      "op": "JUMPI"
    },
    "2597": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2599": {
      "op": "DUP1"
    },
    "2600": {
      "op": "REVERT"
    },
    "2601": {
      "op": "JUMPDEST"
    },
    "2602": {
      "op": "DUP3"
    },
    "2603": {
      "op": "CALLDATALOAD"
    },
    "2604": {
      "op": "SWAP2"
    },
    "2605": {
      "op": "POP"
    },
    "2606": {
      "op": "PUSH2",
      "value": "0xA39"
    },
    "2609": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2611": {
      "op": "DUP5"
    },
    "2612": {
      "op": "ADD"
    },
    "2613": {
      "op": "PUSH2",
      "value": "0x9FA"
    },
    "2616": {
      "jump": "i",
      "op": "JUMP"
    },
    "2617": {
      "op": "JUMPDEST"
    },
    "2618": {
      "op": "SWAP1"
    },
    "2619": {
      "op": "POP"
    },
    "2620": {
      "op": "SWAP3"
    },
    "2621": {
      "op": "POP"
    },
    "2622": {
      "op": "SWAP3"
    },
    "2623": {
      "op": "SWAP1"
    },
    "2624": {
      "op": "POP"
    },
    "2625": {
      "jump": "o",
      "op": "JUMP"
    },
    "2626": {
      "op": "JUMPDEST"
    },
    "2627": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2629": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2631": {
      "op": "DUP3"
    },
    "2632": {
      "op": "DUP5"
    },
    "2633": {
      "op": "SUB"
    },
    "2634": {
      "op": "SLT"
    },
    "2635": {
      "op": "ISZERO"
    },
    "2636": {
      "op": "PUSH2",
      "value": "0xA54"
    },
    "2639": {
      "op": "JUMPI"
    },
    "2640": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2642": {
      "op": "DUP1"
    },
    "2643": {
      "op": "REVERT"
    },
    "2644": {
      "op": "JUMPDEST"
    },
    "2645": {
      "op": "POP"
    },
    "2646": {
      "op": "CALLDATALOAD"
    },
    "2647": {
      "op": "SWAP2"
    },
    "2648": {
      "op": "SWAP1"
    },
    "2649": {
      "op": "POP"
    },
    "2650": {
      "jump": "o",
      "op": "JUMP"
    },
    "2651": {
      "op": "JUMPDEST"
    },
    "2652": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2654": {
      "op": "DUP1"
    },
    "2655": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2657": {
      "op": "DUP4"
    },
    "2658": {
      "op": "DUP6"
    },
    "2659": {
      "op": "SUB"
    },
    "2660": {
      "op": "SLT"
    },
    "2661": {
      "op": "ISZERO"
    },
    "2662": {
      "op": "PUSH2",
      "value": "0xA6E"
    },
    "2665": {
      "op": "JUMPI"
    },
    "2666": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2668": {
      "op": "DUP1"
    },
    "2669": {
      "op": "REVERT"
    },
    "2670": {
      "op": "JUMPDEST"
    },
    "2671": {
      "op": "PUSH2",
      "value": "0xA77"
    },
    "2674": {
      "op": "DUP4"
    },
    "2675": {
      "op": "PUSH2",
      "value": "0x9FA"
    },
    "2678": {
      "jump": "i",
      "op": "JUMP"
    },
    "2679": {
      "op": "JUMPDEST"
    },
    "2680": {
      "op": "SWAP5"
    },
    "2681": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2683": {
      "op": "SWAP4"
    },
    "2684": {
      "op": "SWAP1"
    },
    "2685": {
      "op": "SWAP4"
    },
    "2686": {
      "op": "ADD"
    },
    "2687": {
      "op": "CALLDATALOAD"
    },
    "2688": {
      "op": "SWAP4"
    },
    "2689": {
      "op": "POP"
    },
    "2690": {
      "op": "POP"
    },
    "2691": {
      "op": "POP"
    },
    "2692": {
      "jump": "o",
      "op": "JUMP"
    },
    "2693": {
      "op": "JUMPDEST"
    },
    "2694": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2696": {
      "op": "DUP1"
    },
    "2697": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2699": {
      "op": "DUP1"
    },
    "2700": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2702": {
      "op": "DUP6"
    },
    "2703": {
      "op": "DUP8"
    },
    "2704": {
      "op": "SUB"
    },
    "2705": {
      "op": "SLT"
    },
    "2706": {
      "op": "ISZERO"
    },
    "2707": {
      "op": "PUSH2",
      "value": "0xA9B"
    },
    "2710": {
      "op": "JUMPI"
    },
    "2711": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2713": {
      "op": "DUP1"
    },
    "2714": {
      "op": "REVERT"
    },
    "2715": {
      "op": "JUMPDEST"
    },
    "2716": {
      "op": "DUP5"
    },
    "2717": {
      "op": "CALLDATALOAD"
    },
    "2718": {
      "op": "SWAP4"
    },
    "2719": {
      "op": "POP"
    },
    "2720": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2722": {
      "op": "DUP6"
    },
    "2723": {
      "op": "ADD"
    },
    "2724": {
      "op": "CALLDATALOAD"
    },
    "2725": {
      "op": "SWAP3"
    },
    "2726": {
      "op": "POP"
    },
    "2727": {
      "op": "PUSH2",
      "value": "0xAB2"
    },
    "2730": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2732": {
      "op": "DUP7"
    },
    "2733": {
      "op": "ADD"
    },
    "2734": {
      "op": "PUSH2",
      "value": "0x9FA"
    },
    "2737": {
      "jump": "i",
      "op": "JUMP"
    },
    "2738": {
      "op": "JUMPDEST"
    },
    "2739": {
      "op": "SWAP4"
    },
    "2740": {
      "op": "SWAP7"
    },
    "2741": {
      "op": "SWAP3"
    },
    "2742": {
      "op": "SWAP6"
    },
    "2743": {
      "op": "POP"
    },
    "2744": {
      "op": "SWAP3"
    },
    "2745": {
      "op": "SWAP4"
    },
    "2746": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2748": {
      "op": "ADD"
    },
    "2749": {
      "op": "CALLDATALOAD"
    },
    "2750": {
      "op": "SWAP3"
    },
    "2751": {
      "op": "POP"
    },
    "2752": {
      "op": "POP"
    },
    "2753": {
      "jump": "o",
      "op": "JUMP"
    },
    "2754": {
      "op": "JUMPDEST"
    },
    "2755": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2760": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2762": {
      "op": "SHL"
    },
    "2763": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2765": {
      "op": "MSTORE"
    },
    "2766": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "2768": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2770": {
      "op": "MSTORE"
    },
    "2771": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2773": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2775": {
      "op": "REVERT"
    },
    "2776": {
      "op": "JUMPDEST"
    },
    "2777": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2779": {
      "op": "DUP1"
    },
    "2780": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2782": {
      "op": "DUP1"
    },
    "2783": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2785": {
      "op": "DUP1"
    },
    "2786": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2788": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2790": {
      "op": "DUP9"
    },
    "2791": {
      "op": "DUP11"
    },
    "2792": {
      "op": "SUB"
    },
    "2793": {
      "op": "SLT"
    },
    "2794": {
      "op": "ISZERO"
    },
    "2795": {
      "op": "PUSH2",
      "value": "0xAF3"
    },
    "2798": {
      "op": "JUMPI"
    },
    "2799": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2801": {
      "op": "DUP1"
    },
    "2802": {
      "op": "REVERT"
    },
    "2803": {
      "op": "JUMPDEST"
    },
    "2804": {
      "op": "DUP8"
    },
    "2805": {
      "op": "CALLDATALOAD"
    },
    "2806": {
      "op": "SWAP7"
    },
    "2807": {
      "op": "POP"
    },
    "2808": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2810": {
      "op": "PUSH2",
      "value": "0xB04"
    },
    "2813": {
      "op": "DUP2"
    },
    "2814": {
      "op": "DUP11"
    },
    "2815": {
      "op": "ADD"
    },
    "2816": {
      "op": "PUSH2",
      "value": "0x9FA"
    },
    "2819": {
      "jump": "i",
      "op": "JUMP"
    },
    "2820": {
      "op": "JUMPDEST"
    },
    "2821": {
      "op": "SWAP7"
    },
    "2822": {
      "op": "POP"
    },
    "2823": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2825": {
      "op": "DUP10"
    },
    "2826": {
      "op": "ADD"
    },
    "2827": {
      "op": "CALLDATALOAD"
    },
    "2828": {
      "op": "SWAP6"
    },
    "2829": {
      "op": "POP"
    },
    "2830": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2832": {
      "op": "DUP10"
    },
    "2833": {
      "op": "ADD"
    },
    "2834": {
      "op": "CALLDATALOAD"
    },
    "2835": {
      "op": "SWAP5"
    },
    "2836": {
      "op": "POP"
    },
    "2837": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2839": {
      "op": "DUP10"
    },
    "2840": {
      "op": "ADD"
    },
    "2841": {
      "op": "CALLDATALOAD"
    },
    "2842": {
      "op": "SWAP4"
    },
    "2843": {
      "op": "POP"
    },
    "2844": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2846": {
      "op": "DUP10"
    },
    "2847": {
      "op": "ADD"
    },
    "2848": {
      "op": "CALLDATALOAD"
    },
    "2849": {
      "op": "SWAP3"
    },
    "2850": {
      "op": "POP"
    },
    "2851": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2853": {
      "op": "DUP10"
    },
    "2854": {
      "op": "ADD"
    },
    "2855": {
      "op": "CALLDATALOAD"
    },
    "2856": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2865": {
      "op": "DUP1"
    },
    "2866": {
      "op": "DUP3"
    },
    "2867": {
      "op": "GT"
    },
    "2868": {
      "op": "ISZERO"
    },
    "2869": {
      "op": "PUSH2",
      "value": "0xB3D"
    },
    "2872": {
      "op": "JUMPI"
    },
    "2873": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2875": {
      "op": "DUP1"
    },
    "2876": {
      "op": "REVERT"
    },
    "2877": {
      "op": "JUMPDEST"
    },
    "2878": {
      "op": "DUP2"
    },
    "2879": {
      "op": "DUP12"
    },
    "2880": {
      "op": "ADD"
    },
    "2881": {
      "op": "SWAP2"
    },
    "2882": {
      "op": "POP"
    },
    "2883": {
      "op": "DUP12"
    },
    "2884": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2886": {
      "op": "DUP4"
    },
    "2887": {
      "op": "ADD"
    },
    "2888": {
      "op": "SLT"
    },
    "2889": {
      "op": "PUSH2",
      "value": "0xB51"
    },
    "2892": {
      "op": "JUMPI"
    },
    "2893": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2895": {
      "op": "DUP1"
    },
    "2896": {
      "op": "REVERT"
    },
    "2897": {
      "op": "JUMPDEST"
    },
    "2898": {
      "op": "DUP2"
    },
    "2899": {
      "op": "CALLDATALOAD"
    },
    "2900": {
      "op": "DUP2"
    },
    "2901": {
      "op": "DUP2"
    },
    "2902": {
      "op": "GT"
    },
    "2903": {
      "op": "ISZERO"
    },
    "2904": {
      "op": "PUSH2",
      "value": "0xB63"
    },
    "2907": {
      "op": "JUMPI"
    },
    "2908": {
      "op": "PUSH2",
      "value": "0xB63"
    },
    "2911": {
      "op": "PUSH2",
      "value": "0xAC2"
    },
    "2914": {
      "jump": "i",
      "op": "JUMP"
    },
    "2915": {
      "op": "JUMPDEST"
    },
    "2916": {
      "op": "DUP1"
    },
    "2917": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "2919": {
      "op": "SHL"
    },
    "2920": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2922": {
      "op": "MLOAD"
    },
    "2923": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2925": {
      "op": "NOT"
    },
    "2926": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "2928": {
      "op": "DUP4"
    },
    "2929": {
      "op": "ADD"
    },
    "2930": {
      "op": "AND"
    },
    "2931": {
      "op": "DUP2"
    },
    "2932": {
      "op": "ADD"
    },
    "2933": {
      "op": "DUP2"
    },
    "2934": {
      "op": "DUP2"
    },
    "2935": {
      "op": "LT"
    },
    "2936": {
      "op": "DUP6"
    },
    "2937": {
      "op": "DUP3"
    },
    "2938": {
      "op": "GT"
    },
    "2939": {
      "op": "OR"
    },
    "2940": {
      "op": "ISZERO"
    },
    "2941": {
      "op": "PUSH2",
      "value": "0xB88"
    },
    "2944": {
      "op": "JUMPI"
    },
    "2945": {
      "op": "PUSH2",
      "value": "0xB88"
    },
    "2948": {
      "op": "PUSH2",
      "value": "0xAC2"
    },
    "2951": {
      "jump": "i",
      "op": "JUMP"
    },
    "2952": {
      "op": "JUMPDEST"
    },
    "2953": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2955": {
      "op": "MSTORE"
    },
    "2956": {
      "op": "SWAP2"
    },
    "2957": {
      "op": "DUP3"
    },
    "2958": {
      "op": "MSTORE"
    },
    "2959": {
      "op": "DUP5"
    },
    "2960": {
      "op": "DUP3"
    },
    "2961": {
      "op": "ADD"
    },
    "2962": {
      "op": "SWAP3"
    },
    "2963": {
      "op": "POP"
    },
    "2964": {
      "op": "DUP4"
    },
    "2965": {
      "op": "DUP2"
    },
    "2966": {
      "op": "ADD"
    },
    "2967": {
      "op": "DUP6"
    },
    "2968": {
      "op": "ADD"
    },
    "2969": {
      "op": "SWAP2"
    },
    "2970": {
      "op": "DUP15"
    },
    "2971": {
      "op": "DUP4"
    },
    "2972": {
      "op": "GT"
    },
    "2973": {
      "op": "ISZERO"
    },
    "2974": {
      "op": "PUSH2",
      "value": "0xBA6"
    },
    "2977": {
      "op": "JUMPI"
    },
    "2978": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2980": {
      "op": "DUP1"
    },
    "2981": {
      "op": "REVERT"
    },
    "2982": {
      "op": "JUMPDEST"
    },
    "2983": {
      "op": "SWAP4"
    },
    "2984": {
      "op": "DUP6"
    },
    "2985": {
      "op": "ADD"
    },
    "2986": {
      "op": "SWAP4"
    },
    "2987": {
      "op": "JUMPDEST"
    },
    "2988": {
      "op": "DUP3"
    },
    "2989": {
      "op": "DUP6"
    },
    "2990": {
      "op": "LT"
    },
    "2991": {
      "op": "ISZERO"
    },
    "2992": {
      "op": "PUSH2",
      "value": "0xBC4"
    },
    "2995": {
      "op": "JUMPI"
    },
    "2996": {
      "op": "DUP5"
    },
    "2997": {
      "op": "CALLDATALOAD"
    },
    "2998": {
      "op": "DUP5"
    },
    "2999": {
      "op": "MSTORE"
    },
    "3000": {
      "op": "SWAP4"
    },
    "3001": {
      "op": "DUP6"
    },
    "3002": {
      "op": "ADD"
    },
    "3003": {
      "op": "SWAP4"
    },
    "3004": {
      "op": "SWAP3"
    },
    "3005": {
      "op": "DUP6"
    },
    "3006": {
      "op": "ADD"
    },
    "3007": {
      "op": "SWAP3"
    },
    "3008": {
      "op": "PUSH2",
      "value": "0xBAB"
    },
    "3011": {
      "op": "JUMP"
    },
    "3012": {
      "op": "JUMPDEST"
    },
    "3013": {
      "op": "DUP1"
    },
    "3014": {
      "op": "SWAP7"
    },
    "3015": {
      "op": "POP"
    },
    "3016": {
      "op": "POP"
    },
    "3017": {
      "op": "POP"
    },
    "3018": {
      "op": "POP"
    },
    "3019": {
      "op": "POP"
    },
    "3020": {
      "op": "POP"
    },
    "3021": {
      "op": "POP"
    },
    "3022": {
      "op": "SWAP3"
    },
    "3023": {
      "op": "SWAP6"
    },
    "3024": {
      "op": "SWAP9"
    },
    "3025": {
      "op": "SWAP2"
    },
    "3026": {
      "op": "SWAP5"
    },
    "3027": {
      "op": "SWAP8"
    },
    "3028": {
      "op": "POP"
    },
    "3029": {
      "op": "SWAP3"
    },
    "3030": {
      "op": "SWAP6"
    },
    "3031": {
      "op": "POP"
    },
    "3032": {
      "jump": "o",
      "op": "JUMP"
    },
    "3033": {
      "op": "JUMPDEST"
    },
    "3034": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3036": {
      "op": "DUP1"
    },
    "3037": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3039": {
      "op": "DUP4"
    },
    "3040": {
      "op": "DUP6"
    },
    "3041": {
      "op": "SUB"
    },
    "3042": {
      "op": "SLT"
    },
    "3043": {
      "op": "ISZERO"
    },
    "3044": {
      "op": "PUSH2",
      "value": "0xBEC"
    },
    "3047": {
      "op": "JUMPI"
    },
    "3048": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3050": {
      "op": "DUP1"
    },
    "3051": {
      "op": "REVERT"
    },
    "3052": {
      "op": "JUMPDEST"
    },
    "3053": {
      "op": "POP"
    },
    "3054": {
      "op": "POP"
    },
    "3055": {
      "op": "DUP1"
    },
    "3056": {
      "op": "CALLDATALOAD"
    },
    "3057": {
      "op": "SWAP3"
    },
    "3058": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3060": {
      "op": "SWAP1"
    },
    "3061": {
      "op": "SWAP2"
    },
    "3062": {
      "op": "ADD"
    },
    "3063": {
      "op": "CALLDATALOAD"
    },
    "3064": {
      "op": "SWAP2"
    },
    "3065": {
      "op": "POP"
    },
    "3066": {
      "jump": "o",
      "op": "JUMP"
    },
    "3067": {
      "op": "JUMPDEST"
    },
    "3068": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3073": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3075": {
      "op": "SHL"
    },
    "3076": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3078": {
      "op": "MSTORE"
    },
    "3079": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3081": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3083": {
      "op": "MSTORE"
    },
    "3084": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3086": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3088": {
      "op": "REVERT"
    },
    "3089": {
      "op": "JUMPDEST"
    },
    "3090": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3092": {
      "op": "DUP3"
    },
    "3093": {
      "op": "DUP3"
    },
    "3094": {
      "op": "LT"
    },
    "3095": {
      "op": "ISZERO"
    },
    "3096": {
      "op": "PUSH2",
      "value": "0xC23"
    },
    "3099": {
      "op": "JUMPI"
    },
    "3100": {
      "op": "PUSH2",
      "value": "0xC23"
    },
    "3103": {
      "op": "PUSH2",
      "value": "0xBFB"
    },
    "3106": {
      "jump": "i",
      "op": "JUMP"
    },
    "3107": {
      "op": "JUMPDEST"
    },
    "3108": {
      "op": "POP"
    },
    "3109": {
      "op": "SUB"
    },
    "3110": {
      "op": "SWAP1"
    },
    "3111": {
      "jump": "o",
      "op": "JUMP"
    },
    "3112": {
      "op": "JUMPDEST"
    },
    "3113": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3115": {
      "op": "DUP2"
    },
    "3116": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3118": {
      "op": "NOT"
    },
    "3119": {
      "op": "DIV"
    },
    "3120": {
      "op": "DUP4"
    },
    "3121": {
      "op": "GT"
    },
    "3122": {
      "op": "DUP3"
    },
    "3123": {
      "op": "ISZERO"
    },
    "3124": {
      "op": "ISZERO"
    },
    "3125": {
      "op": "AND"
    },
    "3126": {
      "op": "ISZERO"
    },
    "3127": {
      "op": "PUSH2",
      "value": "0xC42"
    },
    "3130": {
      "op": "JUMPI"
    },
    "3131": {
      "op": "PUSH2",
      "value": "0xC42"
    },
    "3134": {
      "op": "PUSH2",
      "value": "0xBFB"
    },
    "3137": {
      "jump": "i",
      "op": "JUMP"
    },
    "3138": {
      "op": "JUMPDEST"
    },
    "3139": {
      "op": "POP"
    },
    "3140": {
      "op": "MUL"
    },
    "3141": {
      "op": "SWAP1"
    },
    "3142": {
      "jump": "o",
      "op": "JUMP"
    },
    "3143": {
      "op": "JUMPDEST"
    },
    "3144": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3146": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3148": {
      "op": "DUP3"
    },
    "3149": {
      "op": "DUP5"
    },
    "3150": {
      "op": "SUB"
    },
    "3151": {
      "op": "SLT"
    },
    "3152": {
      "op": "ISZERO"
    },
    "3153": {
      "op": "PUSH2",
      "value": "0xC59"
    },
    "3156": {
      "op": "JUMPI"
    },
    "3157": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3159": {
      "op": "DUP1"
    },
    "3160": {
      "op": "REVERT"
    },
    "3161": {
      "op": "JUMPDEST"
    },
    "3162": {
      "op": "DUP2"
    },
    "3163": {
      "op": "MLOAD"
    },
    "3164": {
      "op": "DUP1"
    },
    "3165": {
      "op": "ISZERO"
    },
    "3166": {
      "op": "ISZERO"
    },
    "3167": {
      "op": "DUP2"
    },
    "3168": {
      "op": "EQ"
    },
    "3169": {
      "op": "PUSH2",
      "value": "0xC69"
    },
    "3172": {
      "op": "JUMPI"
    },
    "3173": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3175": {
      "op": "DUP1"
    },
    "3176": {
      "op": "REVERT"
    },
    "3177": {
      "op": "JUMPDEST"
    },
    "3178": {
      "op": "SWAP4"
    },
    "3179": {
      "op": "SWAP3"
    },
    "3180": {
      "op": "POP"
    },
    "3181": {
      "op": "POP"
    },
    "3182": {
      "op": "POP"
    },
    "3183": {
      "jump": "o",
      "op": "JUMP"
    },
    "3184": {
      "op": "JUMPDEST"
    },
    "3185": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3187": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3189": {
      "op": "NOT"
    },
    "3190": {
      "op": "DUP3"
    },
    "3191": {
      "op": "EQ"
    },
    "3192": {
      "op": "ISZERO"
    },
    "3193": {
      "op": "PUSH2",
      "value": "0xC84"
    },
    "3196": {
      "op": "JUMPI"
    },
    "3197": {
      "op": "PUSH2",
      "value": "0xC84"
    },
    "3200": {
      "op": "PUSH2",
      "value": "0xBFB"
    },
    "3203": {
      "jump": "i",
      "op": "JUMP"
    },
    "3204": {
      "op": "JUMPDEST"
    },
    "3205": {
      "op": "POP"
    },
    "3206": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3208": {
      "op": "ADD"
    },
    "3209": {
      "op": "SWAP1"
    },
    "3210": {
      "jump": "o",
      "op": "JUMP"
    },
    "3211": {
      "op": "JUMPDEST"
    },
    "3212": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3214": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3216": {
      "op": "DUP3"
    },
    "3217": {
      "op": "ADD"
    },
    "3218": {
      "op": "DUP6"
    },
    "3219": {
      "op": "DUP4"
    },
    "3220": {
      "op": "MSTORE"
    },
    "3221": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3223": {
      "op": "DUP6"
    },
    "3224": {
      "op": "DUP2"
    },
    "3225": {
      "op": "DUP6"
    },
    "3226": {
      "op": "ADD"
    },
    "3227": {
      "op": "MSTORE"
    },
    "3228": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3230": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3232": {
      "op": "DUP6"
    },
    "3233": {
      "op": "ADD"
    },
    "3234": {
      "op": "MSTORE"
    },
    "3235": {
      "op": "DUP2"
    },
    "3236": {
      "op": "DUP6"
    },
    "3237": {
      "op": "MLOAD"
    },
    "3238": {
      "op": "DUP1"
    },
    "3239": {
      "op": "DUP5"
    },
    "3240": {
      "op": "MSTORE"
    },
    "3241": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3243": {
      "op": "DUP7"
    },
    "3244": {
      "op": "ADD"
    },
    "3245": {
      "op": "SWAP2"
    },
    "3246": {
      "op": "POP"
    },
    "3247": {
      "op": "DUP3"
    },
    "3248": {
      "op": "DUP8"
    },
    "3249": {
      "op": "ADD"
    },
    "3250": {
      "op": "SWAP4"
    },
    "3251": {
      "op": "POP"
    },
    "3252": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3254": {
      "op": "JUMPDEST"
    },
    "3255": {
      "op": "DUP2"
    },
    "3256": {
      "op": "DUP2"
    },
    "3257": {
      "op": "LT"
    },
    "3258": {
      "op": "ISZERO"
    },
    "3259": {
      "op": "PUSH2",
      "value": "0xCD2"
    },
    "3262": {
      "op": "JUMPI"
    },
    "3263": {
      "op": "DUP5"
    },
    "3264": {
      "op": "MLOAD"
    },
    "3265": {
      "op": "DUP4"
    },
    "3266": {
      "op": "MSTORE"
    },
    "3267": {
      "op": "SWAP4"
    },
    "3268": {
      "op": "DUP4"
    },
    "3269": {
      "op": "ADD"
    },
    "3270": {
      "op": "SWAP4"
    },
    "3271": {
      "op": "SWAP2"
    },
    "3272": {
      "op": "DUP4"
    },
    "3273": {
      "op": "ADD"
    },
    "3274": {
      "op": "SWAP2"
    },
    "3275": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3277": {
      "op": "ADD"
    },
    "3278": {
      "op": "PUSH2",
      "value": "0xCB6"
    },
    "3281": {
      "op": "JUMP"
    },
    "3282": {
      "op": "JUMPDEST"
    },
    "3283": {
      "op": "POP"
    },
    "3284": {
      "op": "SWAP1"
    },
    "3285": {
      "op": "SWAP9"
    },
    "3286": {
      "op": "SWAP8"
    },
    "3287": {
      "op": "POP"
    },
    "3288": {
      "op": "POP"
    },
    "3289": {
      "op": "POP"
    },
    "3290": {
      "op": "POP"
    },
    "3291": {
      "op": "POP"
    },
    "3292": {
      "op": "POP"
    },
    "3293": {
      "op": "POP"
    },
    "3294": {
      "op": "POP"
    },
    "3295": {
      "jump": "o",
      "op": "JUMP"
    },
    "3296": {
      "op": "JUMPDEST"
    },
    "3297": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3299": {
      "op": "DUP3"
    },
    "3300": {
      "op": "PUSH2",
      "value": "0xCFD"
    },
    "3303": {
      "op": "JUMPI"
    },
    "3304": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3309": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3311": {
      "op": "SHL"
    },
    "3312": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3314": {
      "op": "MSTORE"
    },
    "3315": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "3317": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3319": {
      "op": "MSTORE"
    },
    "3320": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3322": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3324": {
      "op": "REVERT"
    },
    "3325": {
      "op": "JUMPDEST"
    },
    "3326": {
      "op": "POP"
    },
    "3327": {
      "op": "DIV"
    },
    "3328": {
      "op": "SWAP1"
    },
    "3329": {
      "jump": "o",
      "op": "JUMP"
    },
    "3330": {
      "op": "JUMPDEST"
    },
    "3331": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3333": {
      "op": "DUP3"
    },
    "3334": {
      "op": "NOT"
    },
    "3335": {
      "op": "DUP3"
    },
    "3336": {
      "op": "GT"
    },
    "3337": {
      "op": "ISZERO"
    },
    "3338": {
      "op": "PUSH2",
      "value": "0xD15"
    },
    "3341": {
      "op": "JUMPI"
    },
    "3342": {
      "op": "PUSH2",
      "value": "0xD15"
    },
    "3345": {
      "op": "PUSH2",
      "value": "0xBFB"
    },
    "3348": {
      "jump": "i",
      "op": "JUMP"
    },
    "3349": {
      "op": "JUMPDEST"
    },
    "3350": {
      "op": "POP"
    },
    "3351": {
      "op": "ADD"
    },
    "3352": {
      "op": "SWAP1"
    },
    "3353": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "fc095043bae0ec38e2b3b41f0cb1c06a19db094b",
  "source": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./MerkleLib.sol\";\n\n/// @title A factory pattern for merkle-vesting, that is, a time release schedule for tokens, using merkle proofs to scale\n/// @author metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki\n/// @notice This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.\n/// @dev The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof\ncontract MerkleVesting {\n    using MerkleLib for bytes32;\n\n    // the number of vesting schedules in this contract\n    uint public numTrees = 0;\n    \n    // this represents a single vesting schedule for a specific address\n    struct Tranche {\n        uint totalCoins;  // total number of coins released to an address after vesting is completed\n        uint currentCoins; // how many coins are left unclaimed by this address, vested or unvested\n        uint startTime; // when the vesting schedule is set to start, possibly in the past\n        uint endTime;  // when the vesting schedule will have released all coins\n        uint coinsPerSecond; // an intermediate value cached to reduce gas costs, how many coins released every second\n        uint lastWithdrawalTime; // the last time a withdrawal occurred, used to compute unvested coins\n        uint lockPeriodEndTime; // the first time at which coins may be withdrawn\n    }\n\n    // this represents a set of vesting schedules all in the same token\n    struct MerkleTree {\n        bytes32 rootHash;  // merkleroot of tree whose leaves are (address,uint,uint,uint,uint) representing vesting schedules\n        bytes32 ipfsHash; // ipfs hash of entire dataset, used to reconstruct merkle proofs if our servers go down\n        address tokenAddress; // token that the vesting schedules will be denominated in\n        uint tokenBalance; // current amount of tokens deposited to this tree, used to make sure trees don't share tokens\n    }\n\n    // initialized[recipient][treeIndex] = wasItInitialized?\n    mapping (address => mapping (uint => bool)) public initialized;\n\n    // array-like sequential map for all the vesting schedules\n    mapping (uint => MerkleTree) public merkleTrees;\n\n    // tranches[recipient][treeIndex] = initializedVestingSchedule\n    mapping (address => mapping (uint => Tranche)) public tranches;\n\n    // every time there's a withdrawal\n    event WithdrawalOccurred(uint indexed treeIndex, address indexed destination, uint numTokens, uint tokensLeft);\n\n    // every time a tree is added\n    event MerkleRootAdded(uint indexed treeIndex, address indexed tokenAddress, bytes32 newRoot, bytes32 ipfsHash);\n\n    // every time a tree is topped up\n    event TokensDeposited(uint indexed treeIndex, address indexed tokenAddress, uint amount);\n\n    /// @notice Add a new merkle tree to the contract, creating a new merkle-vesting-schedule\n    /// @dev Anyone may call this function, therefore we must make sure trees cannot affect each other\n    /// @dev Root hash should be built from (destination, totalCoins, startTime, endTime, lockPeriodEndTime)\n    /// @param newRoot root hash of merkle tree representing vesting schedules\n    /// @param ipfsHash the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable\n    /// @param tokenAddress the address of the token contract that is being distributed\n    /// @param tokenBalance the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded\n    function addMerkleRoot(bytes32 newRoot, bytes32 ipfsHash, address tokenAddress, uint tokenBalance) public {\n        // prefix operator ++ increments then evaluates\n        merkleTrees[++numTrees] = MerkleTree(\n            newRoot,\n            ipfsHash,\n            tokenAddress,\n            0    // no funds have been allocated to the tree yet\n        );\n        // fund the tree now\n        depositTokens(numTrees, tokenBalance);\n        emit MerkleRootAdded(numTrees, tokenAddress, newRoot, ipfsHash);\n    }\n\n    /// @notice Add funds to an existing merkle-vesting-schedule\n    /// @dev Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious\n    /// @dev If the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs\n    /// @param treeIndex index into array-like map of merkleTrees\n    /// @param value the amount of tokens user wishes to use to fund the airdrop, note trees can be underfunded\n    function depositTokens(uint treeIndex, uint value) public {\n        // storage since we are editing\n        MerkleTree storage merkleTree = merkleTrees[treeIndex];\n\n        // bookkeeping to make sure trees don't share tokens\n        merkleTree.tokenBalance += value;\n\n        // transfer tokens, if this is a malicious token, then this whole tree is malicious\n        // but it does not effect the other trees\n        require(IERC20(merkleTree.tokenAddress).transferFrom(msg.sender, address(this), value), \"ERC20 transfer failed\");\n        emit TokensDeposited(treeIndex, merkleTree.tokenAddress, value);\n    }\n\n    /// @notice Called once per recipient of a vesting schedule to initialize the vesting schedule\n    /// @dev Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious\n    /// @dev If the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree stats\n    /// @dev The contract has no knowledge of the vesting schedules until this function is called\n    /// @param treeIndex index into array-like map of merkleTrees\n    /// @param destination address that will receive tokens\n    /// @param totalCoins amount of tokens to be released after vesting completes\n    /// @param startTime time that vesting schedule starts, can be past or future\n    /// @param endTime time vesting schedule completes, can be past or future\n    /// @param lockPeriodEndTime time that coins become unlocked, can be after endTime\n    /// @param proof array of hashes linking leaf hash of (destination, totalCoins, startTime, endTime, lockPeriodEndTime) to root\n    function initialize(uint treeIndex, address destination, uint totalCoins, uint startTime, uint endTime, uint lockPeriodEndTime, bytes32[] memory proof) external {\n        // must not initialize multiple times\n        require(!initialized[destination][treeIndex], \"Already initialized\");\n        // leaf hash is digest of vesting schedule parameters and destination\n        // NOTE: use abi.encode, not abi.encodePacked to avoid possible (but unlikely) collision\n        bytes32 leaf = keccak256(abi.encode(destination, totalCoins, startTime, endTime, lockPeriodEndTime));\n        // memory because we read only\n        MerkleTree memory tree = merkleTrees[treeIndex];\n        // call to MerkleLib to check if the submitted data is correct\n        require(tree.rootHash.verifyProof(leaf, proof), \"The proof could not be verified.\");\n        // set initialized, preventing double initialization\n        initialized[destination][treeIndex] = true;\n        // precompute how many coins are released per second\n        uint coinsPerSecond = totalCoins / (endTime - startTime);\n        // create the tranche struct and assign it\n        tranches[destination][treeIndex] = Tranche(\n            totalCoins,  // total coins to be released\n            totalCoins,  // currentCoins starts as totalCoins\n            startTime,\n            endTime,\n            coinsPerSecond,\n            startTime,    // lastWithdrawal starts as startTime\n            lockPeriodEndTime\n        );\n        // if we've passed the lock time go ahead and perform a withdrawal now\n        if (lockPeriodEndTime < block.timestamp) {\n            withdraw(treeIndex, destination);\n        }\n    }\n\n    /// @notice Claim funds as a recipient in the merkle-drop\n    /// @dev Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of\n    /// @dev who provides the proof and pays the gas, msg.sender is not used in this function\n    /// @param treeIndex index into array-like map of merkleTrees, which tree should we apply the proof to?\n    /// @param destination recipient of tokens\n    function withdraw(uint treeIndex, address destination) public {\n        // cannot withdraw from an uninitialized vesting schedule\n        require(initialized[destination][treeIndex], \"You must initialize your account first.\");\n        // storage because we will modify it\n        Tranche storage tranche = tranches[destination][treeIndex];\n        // no withdrawals before lock time ends\n        require(block.timestamp > tranche.lockPeriodEndTime, 'Must wait until after lock period');\n        // revert if there's nothing left\n        require(tranche.currentCoins >  0, 'No coins left to withdraw');\n\n        // declaration for branched assignment\n        uint currentWithdrawal = 0;\n\n        // if after vesting period ends, give them the remaining coins\n        if (block.timestamp >= tranche.endTime) {\n            currentWithdrawal = tranche.currentCoins;\n        } else {\n            // compute allowed withdrawal\n            currentWithdrawal = (block.timestamp - tranche.lastWithdrawalTime) * tranche.coinsPerSecond;\n        }\n\n        // decrease allocation of coins\n        tranche.currentCoins -= currentWithdrawal;\n        // this makes sure coins don't get double withdrawn\n        tranche.lastWithdrawalTime = block.timestamp;\n\n        // update the tree balance so trees can't take each other's tokens\n        MerkleTree storage tree = merkleTrees[treeIndex];\n        tree.tokenBalance -= currentWithdrawal;\n\n        // Transfer the tokens, if the token contract is malicious, this will make the whole tree malicious\n        // but this does not allow re-entrance due to struct updates and it does not effect other trees.\n        // It is also consistent with the ethereum general security model:\n        // other contracts do what they want, it's our job to protect our contract\n        IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal);\n        emit WithdrawalOccurred(treeIndex, destination, currentWithdrawal, tranche.currentCoins);\n    }\n\n}",
  "sourceMap": "557:9798:3:-:0;;;699:1;676:24;;557:9798;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/MerkleVesting.sol",
  "type": "contract"
}