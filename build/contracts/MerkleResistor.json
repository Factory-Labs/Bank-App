{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trancheIndex",
          "type": "uint256"
        }
      ],
      "name": "AccountEmpty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        }
      ],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "BadProof",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        }
      ],
      "name": "BadTreeIndex",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalPayments",
          "type": "uint256"
        }
      ],
      "name": "BadVestingSchedule",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "IncoherentTimes",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pct",
          "type": "uint256"
        }
      ],
      "name": "InvalidPct",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trancheIndex",
          "type": "uint256"
        }
      ],
      "name": "UninitializedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        }
      ],
      "name": "MerkleTreeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "trancheIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        }
      ],
      "name": "TrancheInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensLeft",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalOccurred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pctUpFront",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "name": "addMerkleTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "depositTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        }
      ],
      "name": "getInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trancheIndex",
          "type": "uint256"
        }
      ],
      "name": "getTranche",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleTrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pctUpFront",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numTranchesInitialized",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTrees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalPayments",
          "type": "uint256"
        }
      ],
      "name": "verifyVestingSchedule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trancheIndex",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "contracts/MerkleLib.sol",
    "2": "contracts/MerkleResistor.sol",
    "4": "interfaces/IERC20.sol"
  },
  "ast": {
    "absolutePath": "contracts/MerkleResistor.sol",
    "exportedSymbols": {
      "IERC20": [
        1999
      ],
      "MerkleLib": [
        1921
      ],
      "MerkleResistor": [
        1215
      ]
    },
    "id": 1216,
    "license": "GPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 387,
        "literals": [
          "solidity",
          "0.8",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "42:23:2"
      },
      {
        "absolutePath": "interfaces/IERC20.sol",
        "file": "../interfaces/IERC20.sol",
        "id": 388,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1216,
        "sourceUnit": 2000,
        "src": "67:34:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/MerkleLib.sol",
        "file": "./MerkleLib.sol",
        "id": 389,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1216,
        "sourceUnit": 1922,
        "src": "102:25:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "MerkleResistor",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 390,
          "nodeType": "StructuredDocumentation",
          "src": "129:1325:2",
          "text": "@title A factory pattern for user-chosen vesting-schedules, that is, a time release schedule for tokens, using merkle proofs to scale\n @author metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki\n @notice This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.\n @dev The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof.\n @dev User chosen vesting schedules means the contract has parameters that define a line segment that\n @dev describes a range of vesting-schedule parameters within which the user can negotiate tradeoffs\n @dev More tokens => longer vesting time && slower drip, when used correctly, but the contract does not enforce\n @dev coherence of vesting schedules, so someone could make a range of vesting schedules in which\n @dev more tokens => longer vesting time && faster drip, but this is a user error, also we wouldn't catch it until\n @dev after the tree has been initialized and funded, so we just let them do it.\n @dev The choice of which parameters to initialize at tree-creation-time versus at schedule-initialization-time is\n @dev somewhat arbitrary, but we choose to have min/max end times at tree scope and min/max total payments at first-withdrawal-time"
        },
        "fullyImplemented": true,
        "id": 1215,
        "linearizedBaseContracts": [
          1215
        ],
        "name": "MerkleResistor",
        "nameLocation": "1463:14:2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 393,
            "libraryName": {
              "id": 391,
              "name": "MerkleLib",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1921,
              "src": "1490:9:2"
            },
            "nodeType": "UsingForDirective",
            "src": "1484:28:2",
            "typeName": {
              "id": 392,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1504:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "390b7c66",
            "id": 395,
            "mutability": "mutable",
            "name": "numTrees",
            "nameLocation": "1569:8:2",
            "nodeType": "VariableDeclaration",
            "scope": 1215,
            "src": "1557:20:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 394,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "1557:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "canonicalName": "MerkleResistor.Tranche",
            "id": 410,
            "members": [
              {
                "constant": false,
                "id": 397,
                "mutability": "mutable",
                "name": "recipient",
                "nameLocation": "1688:9:2",
                "nodeType": "VariableDeclaration",
                "scope": 410,
                "src": "1680:17:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 396,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1680:7:2",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 399,
                "mutability": "mutable",
                "name": "totalCoins",
                "nameLocation": "1712:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 410,
                "src": "1707:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 398,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1707:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 401,
                "mutability": "mutable",
                "name": "currentCoins",
                "nameLocation": "1784:12:2",
                "nodeType": "VariableDeclaration",
                "scope": 410,
                "src": "1779:17:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 400,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1779:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 403,
                "mutability": "mutable",
                "name": "startTime",
                "nameLocation": "1878:9:2",
                "nodeType": "VariableDeclaration",
                "scope": 410,
                "src": "1873:14:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 402,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1873:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 405,
                "mutability": "mutable",
                "name": "endTime",
                "nameLocation": "1940:7:2",
                "nodeType": "VariableDeclaration",
                "scope": 410,
                "src": "1935:12:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 404,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1935:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 407,
                "mutability": "mutable",
                "name": "coinsPerSecond",
                "nameLocation": "2000:14:2",
                "nodeType": "VariableDeclaration",
                "scope": 410,
                "src": "1995:19:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 406,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1995:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 409,
                "mutability": "mutable",
                "name": "lastWithdrawalTime",
                "nameLocation": "2117:18:2",
                "nodeType": "VariableDeclaration",
                "scope": 410,
                "src": "2112:23:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 408,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2112:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Tranche",
            "nameLocation": "1662:7:2",
            "nodeType": "StructDefinition",
            "scope": 1215,
            "src": "1655:575:2",
            "visibility": "public"
          },
          {
            "canonicalName": "MerkleResistor.MerkleTree",
            "id": 436,
            "members": [
              {
                "constant": false,
                "id": 412,
                "mutability": "mutable",
                "name": "merkleRoot",
                "nameLocation": "2385:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 436,
                "src": "2377:18:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 411,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "2377:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 414,
                "mutability": "mutable",
                "name": "ipfsHash",
                "nameLocation": "2500:8:2",
                "nodeType": "VariableDeclaration",
                "scope": 436,
                "src": "2492:16:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 413,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "2492:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 416,
                "mutability": "mutable",
                "name": "minEndTime",
                "nameLocation": "2619:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 436,
                "src": "2614:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 415,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2614:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 418,
                "mutability": "mutable",
                "name": "maxEndTime",
                "nameLocation": "2716:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 436,
                "src": "2711:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 417,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2711:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 420,
                "mutability": "mutable",
                "name": "pctUpFront",
                "nameLocation": "2813:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 436,
                "src": "2808:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 419,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2808:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 422,
                "mutability": "mutable",
                "name": "tokenAddress",
                "nameLocation": "2925:12:2",
                "nodeType": "VariableDeclaration",
                "scope": 436,
                "src": "2917:20:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 421,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "2917:7:2",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 424,
                "mutability": "mutable",
                "name": "tokenBalance",
                "nameLocation": "2990:12:2",
                "nodeType": "VariableDeclaration",
                "scope": 436,
                "src": "2985:17:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 423,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2985:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 426,
                "mutability": "mutable",
                "name": "numTranchesInitialized",
                "nameLocation": "3102:22:2",
                "nodeType": "VariableDeclaration",
                "scope": 436,
                "src": "3097:27:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 425,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "3097:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 431,
                "mutability": "mutable",
                "name": "tranches",
                "nameLocation": "3160:8:2",
                "nodeType": "VariableDeclaration",
                "scope": 436,
                "src": "3134:34:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$410_storage_$",
                  "typeString": "mapping(uint256 => struct MerkleResistor.Tranche)"
                },
                "typeName": {
                  "id": 430,
                  "keyType": {
                    "id": 427,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3143:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "3134:25:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$410_storage_$",
                    "typeString": "mapping(uint256 => struct MerkleResistor.Tranche)"
                  },
                  "valueType": {
                    "id": 429,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 428,
                      "name": "Tranche",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 410,
                      "src": "3151:7:2"
                    },
                    "referencedDeclaration": 410,
                    "src": "3151:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                      "typeString": "struct MerkleResistor.Tranche"
                    }
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 435,
                "mutability": "mutable",
                "name": "initialized",
                "nameLocation": "3204:11:2",
                "nodeType": "VariableDeclaration",
                "scope": 436,
                "src": "3178:37:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                  "typeString": "mapping(bytes32 => bool)"
                },
                "typeName": {
                  "id": 434,
                  "keyType": {
                    "id": 432,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3187:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "3178:25:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                    "typeString": "mapping(bytes32 => bool)"
                  },
                  "valueType": {
                    "id": 433,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3198:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "MerkleTree",
            "nameLocation": "2356:10:2",
            "nodeType": "StructDefinition",
            "scope": 1215,
            "src": "2349:873:2",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "85d88cb1",
            "id": 441,
            "mutability": "mutable",
            "name": "merkleTrees",
            "nameLocation": "3355:11:2",
            "nodeType": "VariableDeclaration",
            "scope": 1215,
            "src": "3319:47:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$436_storage_$",
              "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree)"
            },
            "typeName": {
              "id": 440,
              "keyType": {
                "id": 437,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "3328:4:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "3319:28:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$436_storage_$",
                "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree)"
              },
              "valueType": {
                "id": 439,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 438,
                  "name": "MerkleTree",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 436,
                  "src": "3336:10:2"
                },
                "referencedDeclaration": 436,
                "src": "3336:10:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                  "typeString": "struct MerkleResistor.MerkleTree"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "aaf5eb68",
            "id": 444,
            "mutability": "constant",
            "name": "PRECISION",
            "nameLocation": "3460:9:2",
            "nodeType": "VariableDeclaration",
            "scope": 1215,
            "src": "3439:40:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 442,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "3439:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31303030303030",
              "id": 443,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "3472:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              },
              "value": "1000000"
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 454,
            "name": "WithdrawalOccurred",
            "nameLocation": "3530:18:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 453,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 446,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "3562:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 454,
                  "src": "3549:22:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 445,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3549:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 448,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "3589:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 454,
                  "src": "3573:27:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 447,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3573:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 450,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "numTokens",
                  "nameLocation": "3607:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 454,
                  "src": "3602:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 449,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3602:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 452,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokensLeft",
                  "nameLocation": "3623:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 454,
                  "src": "3618:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 451,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3618:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3548:86:2"
            },
            "src": "3524:111:2"
          },
          {
            "anonymous": false,
            "id": 464,
            "name": "MerkleTreeAdded",
            "nameLocation": "3681:15:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 463,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 456,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "3710:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 464,
                  "src": "3697:22:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 455,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3697:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 458,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "3737:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 464,
                  "src": "3721:28:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 457,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3721:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 460,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "3759:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 464,
                  "src": "3751:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 459,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3751:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 462,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "3776:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 464,
                  "src": "3768:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 461,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3768:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3696:89:2"
            },
            "src": "3675:111:2"
          },
          {
            "anonymous": false,
            "id": 472,
            "name": "TokensDeposited",
            "nameLocation": "3836:15:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 471,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 466,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "3865:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "3852:22:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 465,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3852:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 468,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "3892:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "3876:28:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 467,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3876:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 470,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3911:6:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 472,
                  "src": "3906:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 469,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3906:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3851:67:2"
            },
            "src": "3830:89:2"
          },
          {
            "anonymous": false,
            "id": 482,
            "name": "TrancheInitialized",
            "nameLocation": "3930:18:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 481,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 474,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "3962:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 482,
                  "src": "3949:22:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 473,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3949:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 476,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "trancheIndex",
                  "nameLocation": "3986:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 482,
                  "src": "3973:25:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 475,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3973:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 478,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "4016:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 482,
                  "src": "4000:25:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 477,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4000:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 480,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "leaf",
                  "nameLocation": "4035:4:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 482,
                  "src": "4027:12:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 479,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4027:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3948:92:2"
            },
            "src": "3924:117:2"
          },
          {
            "id": 486,
            "name": "BadTreeIndex",
            "nameLocation": "4053:12:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 485,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 484,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4071:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 486,
                  "src": "4066:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 483,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4066:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4065:16:2"
            },
            "src": "4047:35:2"
          },
          {
            "id": 490,
            "name": "InvalidPct",
            "nameLocation": "4093:10:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 489,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 488,
                  "mutability": "mutable",
                  "name": "pct",
                  "nameLocation": "4109:3:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 490,
                  "src": "4104:8:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 487,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4104:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4103:10:2"
            },
            "src": "4087:27:2"
          },
          {
            "id": 496,
            "name": "IncoherentTimes",
            "nameLocation": "4125:15:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 495,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 492,
                  "mutability": "mutable",
                  "name": "min",
                  "nameLocation": "4146:3:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 496,
                  "src": "4141:8:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 491,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4141:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 494,
                  "mutability": "mutable",
                  "name": "max",
                  "nameLocation": "4156:3:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 496,
                  "src": "4151:8:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 493,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4151:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4140:20:2"
            },
            "src": "4119:42:2"
          },
          {
            "id": 502,
            "name": "AlreadyInitialized",
            "nameLocation": "4172:18:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 501,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 498,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4196:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 502,
                  "src": "4191:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 497,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4191:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 500,
                  "mutability": "mutable",
                  "name": "leaf",
                  "nameLocation": "4215:4:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 502,
                  "src": "4207:12:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 499,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4207:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4190:30:2"
            },
            "src": "4166:55:2"
          },
          {
            "id": 511,
            "name": "BadProof",
            "nameLocation": "4232:8:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 510,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 504,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4246:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 511,
                  "src": "4241:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 503,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4241:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 506,
                  "mutability": "mutable",
                  "name": "leaf",
                  "nameLocation": "4265:4:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 511,
                  "src": "4257:12:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 505,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4257:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 509,
                  "mutability": "mutable",
                  "name": "proof",
                  "nameLocation": "4281:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 511,
                  "src": "4271:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 507,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "4271:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 508,
                    "nodeType": "ArrayTypeName",
                    "src": "4271:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4240:47:2"
            },
            "src": "4226:62:2"
          },
          {
            "id": 521,
            "name": "BadVestingSchedule",
            "nameLocation": "4299:18:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 520,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 513,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4323:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 521,
                  "src": "4318:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 512,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4318:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 515,
                  "mutability": "mutable",
                  "name": "vestingTime",
                  "nameLocation": "4339:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 521,
                  "src": "4334:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 514,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4334:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 517,
                  "mutability": "mutable",
                  "name": "minTotalPayments",
                  "nameLocation": "4357:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 521,
                  "src": "4352:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 516,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4352:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 519,
                  "mutability": "mutable",
                  "name": "maxTotalPayments",
                  "nameLocation": "4380:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 521,
                  "src": "4375:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 518,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4375:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4317:80:2"
            },
            "src": "4293:105:2"
          },
          {
            "id": 527,
            "name": "UninitializedAccount",
            "nameLocation": "4409:20:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 526,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 523,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4435:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 527,
                  "src": "4430:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 522,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4430:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 525,
                  "mutability": "mutable",
                  "name": "trancheIndex",
                  "nameLocation": "4451:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 527,
                  "src": "4446:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 524,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4446:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4429:35:2"
            },
            "src": "4403:62:2"
          },
          {
            "id": 533,
            "name": "AccountEmpty",
            "nameLocation": "4476:12:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 532,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 529,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4494:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 533,
                  "src": "4489:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 528,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4489:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 531,
                  "mutability": "mutable",
                  "name": "trancheIndex",
                  "nameLocation": "4510:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 533,
                  "src": "4505:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 530,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4505:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4488:35:2"
            },
            "src": "4470:54:2"
          },
          {
            "body": {
              "id": 626,
              "nodeType": "Block",
              "src": "5745:919:2",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 553,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 551,
                      "name": "pctUpFront",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 544,
                      "src": "5803:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "hexValue": "313030",
                      "id": 552,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5817:3:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_100_by_1",
                        "typeString": "int_const 100"
                      },
                      "value": "100"
                    },
                    "src": "5803:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 559,
                  "nodeType": "IfStatement",
                  "src": "5799:77:2",
                  "trueBody": {
                    "id": 558,
                    "nodeType": "Block",
                    "src": "5822:54:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 555,
                              "name": "pctUpFront",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 544,
                              "src": "5854:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 554,
                            "name": "InvalidPct",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 490,
                            "src": "5843:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) pure"
                            }
                          },
                          "id": 556,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5843:22:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 557,
                        "nodeType": "RevertStatement",
                        "src": "5836:29:2"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 562,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 560,
                      "name": "minEndTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 540,
                      "src": "5890:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "id": 561,
                      "name": "maxEndTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 542,
                      "src": "5904:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5890:24:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 569,
                  "nodeType": "IfStatement",
                  "src": "5886:101:2",
                  "trueBody": {
                    "id": 568,
                    "nodeType": "Block",
                    "src": "5916:71:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 564,
                              "name": "minEndTime",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 540,
                              "src": "5953:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 565,
                              "name": "maxEndTime",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 542,
                              "src": "5965:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 563,
                            "name": "IncoherentTimes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 496,
                            "src": "5937:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256) pure"
                            }
                          },
                          "id": 566,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5937:39:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 567,
                        "nodeType": "RevertStatement",
                        "src": "5930:46:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    572
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 572,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "6016:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 626,
                      "src": "5997:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 571,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 570,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 436,
                          "src": "5997:10:2"
                        },
                        "referencedDeclaration": 436,
                        "src": "5997:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 577,
                  "initialValue": {
                    "baseExpression": {
                      "id": 573,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 441,
                      "src": "6023:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$436_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 576,
                    "indexExpression": {
                      "id": 575,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "6035:10:2",
                      "subExpression": {
                        "id": 574,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 395,
                        "src": "6037:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6023:23:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$436_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5997:49:2"
                },
                {
                  "expression": {
                    "id": 582,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 578,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 572,
                        "src": "6056:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 580,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "merkleRoot",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 412,
                      "src": "6056:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 581,
                      "name": "newRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 536,
                      "src": "6074:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "6056:25:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 583,
                  "nodeType": "ExpressionStatement",
                  "src": "6056:25:2"
                },
                {
                  "expression": {
                    "id": 588,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 584,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 572,
                        "src": "6091:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 586,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ipfsHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 414,
                      "src": "6091:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 587,
                      "name": "ipfsHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 538,
                      "src": "6107:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "6091:24:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 589,
                  "nodeType": "ExpressionStatement",
                  "src": "6091:24:2"
                },
                {
                  "expression": {
                    "id": 594,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 590,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 572,
                        "src": "6125:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 592,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "minEndTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 416,
                      "src": "6125:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 593,
                      "name": "minEndTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 540,
                      "src": "6143:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6125:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 595,
                  "nodeType": "ExpressionStatement",
                  "src": "6125:28:2"
                },
                {
                  "expression": {
                    "id": 600,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 596,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 572,
                        "src": "6163:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 598,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "maxEndTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 418,
                      "src": "6163:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 599,
                      "name": "maxEndTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 542,
                      "src": "6181:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6163:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 601,
                  "nodeType": "ExpressionStatement",
                  "src": "6163:28:2"
                },
                {
                  "expression": {
                    "id": 606,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 602,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 572,
                        "src": "6201:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 604,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "pctUpFront",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 420,
                      "src": "6201:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 605,
                      "name": "pctUpFront",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 544,
                      "src": "6219:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6201:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 607,
                  "nodeType": "ExpressionStatement",
                  "src": "6201:28:2"
                },
                {
                  "expression": {
                    "id": 612,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 608,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 572,
                        "src": "6239:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 610,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 422,
                      "src": "6239:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 611,
                      "name": "tokenAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 546,
                      "src": "6259:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6239:32:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 613,
                  "nodeType": "ExpressionStatement",
                  "src": "6239:32:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 615,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 395,
                        "src": "6561:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 616,
                        "name": "tokenBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 548,
                        "src": "6571:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 614,
                      "name": "depositTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 715,
                      "src": "6547:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 617,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6547:37:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 618,
                  "nodeType": "ExpressionStatement",
                  "src": "6547:37:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 620,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 395,
                        "src": "6615:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 621,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 546,
                        "src": "6625:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 622,
                        "name": "newRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 536,
                        "src": "6639:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 623,
                        "name": "ipfsHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 538,
                        "src": "6648:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 619,
                      "name": "MerkleTreeAdded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 464,
                      "src": "6599:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_bytes32_$_t_bytes32_$returns$__$",
                        "typeString": "function (uint256,address,bytes32,bytes32)"
                      }
                    },
                    "id": 624,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6599:58:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 625,
                  "nodeType": "EmitStatement",
                  "src": "6594:63:2"
                }
              ]
            },
            "documentation": {
              "id": 534,
              "nodeType": "StructuredDocumentation",
              "src": "4530:1053:2",
              "text": "@notice Add a new merkle tree to the contract, creating a new merkle-vesting-schedule-range\n @dev Anyone may call this function, therefore we must make sure trees cannot affect each other\n @dev Root hash should be built from (destination, minTotalPayments, maxTotalPayments)\n @param newRoot root hash of merkle tree representing vesting schedule ranges\n @param ipfsHash the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable\n @param minEndTime a continuous range of possible end times are specified, this is the minimum\n @param maxEndTime a continuous range of possible end times are specified, this is the maximum\n @param pctUpFront the percent of tokens user will get at initialization time (note this implies no lock time)\n @param tokenAddress the address of the token contract that is being distributed\n @param tokenBalance the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
            },
            "functionSelector": "d71383ed",
            "id": 627,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addMerkleTree",
            "nameLocation": "5597:13:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 549,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 536,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "5619:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 627,
                  "src": "5611:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 535,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5611:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 538,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "5636:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 627,
                  "src": "5628:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 537,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5628:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 540,
                  "mutability": "mutable",
                  "name": "minEndTime",
                  "nameLocation": "5651:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 627,
                  "src": "5646:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 539,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5646:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 542,
                  "mutability": "mutable",
                  "name": "maxEndTime",
                  "nameLocation": "5668:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 627,
                  "src": "5663:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 541,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5663:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 544,
                  "mutability": "mutable",
                  "name": "pctUpFront",
                  "nameLocation": "5685:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 627,
                  "src": "5680:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 543,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5680:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 546,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "5705:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 627,
                  "src": "5697:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 545,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5697:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 548,
                  "mutability": "mutable",
                  "name": "tokenBalance",
                  "nameLocation": "5724:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 627,
                  "src": "5719:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 547,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5719:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5610:127:2"
            },
            "returnParameters": {
              "id": 550,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5745:0:2"
            },
            "scope": 1215,
            "src": "5588:1076:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 714,
              "nodeType": "Block",
              "src": "7097:1482:2",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 641,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 637,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 635,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 630,
                        "src": "7111:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 636,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7124:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "7111:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 640,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 638,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 630,
                        "src": "7129:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "id": 639,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 395,
                        "src": "7141:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "7129:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "7111:38:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 647,
                  "nodeType": "IfStatement",
                  "src": "7107:99:2",
                  "trueBody": {
                    "id": 646,
                    "nodeType": "Block",
                    "src": "7151:55:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 643,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 630,
                              "src": "7185:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 642,
                            "name": "BadTreeIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 486,
                            "src": "7172:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) pure"
                            }
                          },
                          "id": 644,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7172:23:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 645,
                        "nodeType": "RevertStatement",
                        "src": "7165:30:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    650
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 650,
                      "mutability": "mutable",
                      "name": "merkleTree",
                      "nameLocation": "7235:10:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 714,
                      "src": "7216:29:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 649,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 648,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 436,
                          "src": "7216:10:2"
                        },
                        "referencedDeclaration": 436,
                        "src": "7216:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 654,
                  "initialValue": {
                    "baseExpression": {
                      "id": 651,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 441,
                      "src": "7248:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$436_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 653,
                    "indexExpression": {
                      "id": 652,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 630,
                      "src": "7260:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7248:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$436_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7216:54:2"
                },
                {
                  "assignments": [
                    657
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 657,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "7288:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 714,
                      "src": "7281:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$1999",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 656,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 655,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1999,
                          "src": "7281:6:2"
                        },
                        "referencedDeclaration": 1999,
                        "src": "7281:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1999",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 662,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 659,
                          "name": "merkleTree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 650,
                          "src": "7303:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 660,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "tokenAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 422,
                        "src": "7303:23:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 658,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1999,
                      "src": "7296:6:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$1999_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 661,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7296:31:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$1999",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7281:46:2"
                },
                {
                  "assignments": [
                    664
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 664,
                      "mutability": "mutable",
                      "name": "balanceBefore",
                      "nameLocation": "7342:13:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 714,
                      "src": "7337:18:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 663,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "7337:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 672,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 669,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "7382:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1215",
                              "typeString": "contract MerkleResistor"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1215",
                              "typeString": "contract MerkleResistor"
                            }
                          ],
                          "id": 668,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "7374:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 667,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "7374:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 670,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7374:13:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 665,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 657,
                        "src": "7358:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1999",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 666,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1938,
                      "src": "7358:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 671,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7358:30:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7337:51:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 676,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "8150:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 677,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "8150:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 680,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "8170:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1215",
                              "typeString": "contract MerkleResistor"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1215",
                              "typeString": "contract MerkleResistor"
                            }
                          ],
                          "id": 679,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8162:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 678,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8162:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 681,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8162:13:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 682,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 632,
                        "src": "8177:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 673,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 657,
                        "src": "8131:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1999",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 675,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1980,
                      "src": "8131:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,address,uint256) external returns (bool)"
                      }
                    },
                    "id": 683,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8131:52:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 684,
                  "nodeType": "ExpressionStatement",
                  "src": "8131:52:2"
                },
                {
                  "assignments": [
                    686
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 686,
                      "mutability": "mutable",
                      "name": "balanceAfter",
                      "nameLocation": "8199:12:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 714,
                      "src": "8194:17:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 685,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "8194:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 694,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 691,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "8238:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1215",
                              "typeString": "contract MerkleResistor"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1215",
                              "typeString": "contract MerkleResistor"
                            }
                          ],
                          "id": 690,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8230:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 689,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8230:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 692,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8230:13:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 687,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 657,
                        "src": "8214:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1999",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 688,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1938,
                      "src": "8214:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 693,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8214:30:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8194:50:2"
                },
                {
                  "assignments": [
                    696
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 696,
                      "mutability": "mutable",
                      "name": "diff",
                      "nameLocation": "8361:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 714,
                      "src": "8356:9:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 695,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "8356:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 700,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 699,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 697,
                      "name": "balanceAfter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 686,
                      "src": "8368:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "id": 698,
                      "name": "balanceBefore",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 664,
                      "src": "8383:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8368:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8356:40:2"
                },
                {
                  "expression": {
                    "id": 705,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 701,
                        "name": "merkleTree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 650,
                        "src": "8469:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 703,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 424,
                      "src": "8469:23:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 704,
                      "name": "diff",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 696,
                      "src": "8496:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8469:31:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 706,
                  "nodeType": "ExpressionStatement",
                  "src": "8469:31:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 708,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 630,
                        "src": "8531:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 709,
                          "name": "merkleTree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 650,
                          "src": "8542:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 710,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "tokenAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 422,
                        "src": "8542:23:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 711,
                        "name": "diff",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 696,
                        "src": "8567:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 707,
                      "name": "TokensDeposited",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 472,
                      "src": "8515:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,address,uint256)"
                      }
                    },
                    "id": 712,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8515:57:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 713,
                  "nodeType": "EmitStatement",
                  "src": "8510:62:2"
                }
              ]
            },
            "documentation": {
              "id": 628,
              "nodeType": "StructuredDocumentation",
              "src": "6670:364:2",
              "text": "@notice Add funds to an existing merkle-tree\n @dev Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious\n @param treeIndex index into array-like map of merkleTrees\n @param value the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
            },
            "functionSelector": "f16ad51e",
            "id": 715,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "depositTokens",
            "nameLocation": "7048:13:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 633,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 630,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "7067:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 715,
                  "src": "7062:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 629,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7062:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 632,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "7083:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 715,
                  "src": "7078:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 631,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7078:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7061:28:2"
            },
            "returnParameters": {
              "id": 634,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7097:0:2"
            },
            "scope": 1215,
            "src": "7039:1540:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 866,
              "nodeType": "Block",
              "src": "9652:1959:2",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 738,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 734,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 732,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 718,
                        "src": "9666:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 733,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9679:1:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "9666:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 737,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 735,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 718,
                        "src": "9684:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "id": 736,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 395,
                        "src": "9696:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "9684:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "9666:38:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 744,
                  "nodeType": "IfStatement",
                  "src": "9662:99:2",
                  "trueBody": {
                    "id": 743,
                    "nodeType": "Block",
                    "src": "9706:55:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 740,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 718,
                              "src": "9740:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 739,
                            "name": "BadTreeIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 486,
                            "src": "9727:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) pure"
                            }
                          },
                          "id": 741,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9727:23:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 742,
                        "nodeType": "RevertStatement",
                        "src": "9720:30:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    747
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 747,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "9790:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 866,
                      "src": "9771:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 746,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 745,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 436,
                          "src": "9771:10:2"
                        },
                        "referencedDeclaration": 436,
                        "src": "9771:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 751,
                  "initialValue": {
                    "baseExpression": {
                      "id": 748,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 441,
                      "src": "9797:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$436_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 750,
                    "indexExpression": {
                      "id": 749,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 718,
                      "src": "9809:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "9797:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$436_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9771:48:2"
                },
                {
                  "assignments": [
                    753
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 753,
                      "mutability": "mutable",
                      "name": "leaf",
                      "nameLocation": "9900:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 866,
                      "src": "9892:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 752,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "9892:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 763,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 757,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "9928:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 758,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "9928:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 759,
                            "name": "minTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 722,
                            "src": "9940:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 760,
                            "name": "maxTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 724,
                            "src": "9958:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 755,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "9917:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 756,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "9917:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 761,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9917:58:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 754,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "9907:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 762,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9907:69:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9892:84:2"
                },
                {
                  "condition": {
                    "baseExpression": {
                      "expression": {
                        "id": 764,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 747,
                        "src": "9991:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 765,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "initialized",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 435,
                      "src": "9991:16:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                        "typeString": "mapping(bytes32 => bool)"
                      }
                    },
                    "id": 767,
                    "indexExpression": {
                      "id": 766,
                      "name": "leaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 753,
                      "src": "10008:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "9991:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 774,
                  "nodeType": "IfStatement",
                  "src": "9987:95:2",
                  "trueBody": {
                    "id": 773,
                    "nodeType": "Block",
                    "src": "10015:67:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 769,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 718,
                              "src": "10055:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 770,
                              "name": "leaf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 753,
                              "src": "10066:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 768,
                            "name": "AlreadyInitialized",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 502,
                            "src": "10036:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_bytes32_$returns$__$",
                              "typeString": "function (uint256,bytes32) pure"
                            }
                          },
                          "id": 771,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10036:35:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 772,
                        "nodeType": "RevertStatement",
                        "src": "10029:42:2"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 782,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "id": 778,
                          "name": "leaf",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 753,
                          "src": "10124:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 779,
                          "name": "proof",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 727,
                          "src": "10130:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                            "typeString": "bytes32[] memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                            "typeString": "bytes32[] memory"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "id": 775,
                            "name": "tree",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 747,
                            "src": "10096:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                              "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                            }
                          },
                          "id": 776,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "merkleRoot",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 412,
                          "src": "10096:15:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 777,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "verifyProof",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1893,
                        "src": "10096:27:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_delegatecall_pure$_t_bytes32_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes32_$",
                          "typeString": "function (bytes32,bytes32,bytes32[] memory) pure returns (bool)"
                        }
                      },
                      "id": 780,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10096:40:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "66616c7365",
                      "id": 781,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10140:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "10096:49:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 790,
                  "nodeType": "IfStatement",
                  "src": "10092:119:2",
                  "trueBody": {
                    "id": 789,
                    "nodeType": "Block",
                    "src": "10147:64:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 784,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 718,
                              "src": "10177:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 785,
                              "name": "leaf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 753,
                              "src": "10188:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 786,
                              "name": "proof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 727,
                              "src": "10194:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            ],
                            "id": 783,
                            "name": "BadProof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 511,
                            "src": "10168:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$__$",
                              "typeString": "function (uint256,bytes32,bytes32[] memory) pure"
                            }
                          },
                          "id": 787,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10168:32:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 788,
                        "nodeType": "RevertStatement",
                        "src": "10161:39:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    792,
                    794,
                    796,
                    798
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 792,
                      "mutability": "mutable",
                      "name": "valid",
                      "nameLocation": "10227:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 866,
                      "src": "10222:10:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 791,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "10222:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 794,
                      "mutability": "mutable",
                      "name": "totalCoins",
                      "nameLocation": "10239:10:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 866,
                      "src": "10234:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 793,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "10234:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 796,
                      "mutability": "mutable",
                      "name": "coinsPerSecond",
                      "nameLocation": "10256:14:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 866,
                      "src": "10251:19:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 795,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "10251:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 798,
                      "mutability": "mutable",
                      "name": "startTime",
                      "nameLocation": "10277:9:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 866,
                      "src": "10272:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 797,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "10272:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 805,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 800,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 718,
                        "src": "10312:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 801,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 720,
                        "src": "10323:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 802,
                        "name": "minTotalPayments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 722,
                        "src": "10336:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 803,
                        "name": "maxTotalPayments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 724,
                        "src": "10354:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 799,
                      "name": "verifyVestingSchedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1149,
                      "src": "10290:21:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256,uint256) view returns (bool,uint256,uint256,uint256)"
                      }
                    },
                    "id": 804,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10290:81:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(bool,uint256,uint256,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10221:150:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 808,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 806,
                      "name": "valid",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 792,
                      "src": "10386:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "66616c7365",
                      "id": 807,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10395:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "10386:14:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 817,
                  "nodeType": "IfStatement",
                  "src": "10382:130:2",
                  "trueBody": {
                    "id": 816,
                    "nodeType": "Block",
                    "src": "10402:110:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 810,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 718,
                              "src": "10442:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 811,
                              "name": "vestingTime",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 720,
                              "src": "10453:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 812,
                              "name": "minTotalPayments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 722,
                              "src": "10466:16:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 813,
                              "name": "maxTotalPayments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 724,
                              "src": "10484:16:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 809,
                            "name": "BadVestingSchedule",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 521,
                            "src": "10423:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256,uint256,uint256) pure"
                            }
                          },
                          "id": 814,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10423:78:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 815,
                        "nodeType": "RevertStatement",
                        "src": "10416:85:2"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 824,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "expression": {
                          "id": 818,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 747,
                          "src": "10610:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 821,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "initialized",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 435,
                        "src": "10610:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                          "typeString": "mapping(bytes32 => bool)"
                        }
                      },
                      "id": 822,
                      "indexExpression": {
                        "id": 820,
                        "name": "leaf",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 753,
                        "src": "10627:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "10610:22:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 823,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10635:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "10610:29:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 825,
                  "nodeType": "ExpressionStatement",
                  "src": "10610:29:2"
                },
                {
                  "expression": {
                    "id": 846,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "expression": {
                          "id": 826,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 747,
                          "src": "10834:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 831,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "tranches",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 431,
                        "src": "10834:13:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$410_storage_$",
                          "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"
                        }
                      },
                      "id": 832,
                      "indexExpression": {
                        "id": 830,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "++",
                        "prefix": true,
                        "src": "10848:29:2",
                        "subExpression": {
                          "expression": {
                            "id": 828,
                            "name": "tree",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 747,
                            "src": "10850:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                              "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                            }
                          },
                          "id": 829,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberName": "numTranchesInitialized",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 426,
                          "src": "10850:27:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "10834:44:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$410_storage",
                        "typeString": "struct MerkleResistor.Tranche storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 834,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "10902:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 835,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "10902:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 836,
                          "name": "totalCoins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 794,
                          "src": "10926:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 837,
                          "name": "totalCoins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 794,
                          "src": "11002:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 838,
                          "name": "startTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 798,
                          "src": "11048:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 842,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 839,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "11136:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 840,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "11136:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 841,
                            "name": "vestingTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 720,
                            "src": "11154:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "11136:29:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 843,
                          "name": "coinsPerSecond",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 796,
                          "src": "11223:14:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 844,
                          "name": "startTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 798,
                          "src": "11291:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 833,
                        "name": "Tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 410,
                        "src": "10881:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Tranche_$410_storage_ptr_$",
                          "typeString": "type(struct MerkleResistor.Tranche storage pointer)"
                        }
                      },
                      "id": 845,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10881:527:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$410_memory_ptr",
                        "typeString": "struct MerkleResistor.Tranche memory"
                      }
                    },
                    "src": "10834:574:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$410_storage",
                      "typeString": "struct MerkleResistor.Tranche storage ref"
                    }
                  },
                  "id": 847,
                  "nodeType": "ExpressionStatement",
                  "src": "10834:574:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 849,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 718,
                        "src": "11443:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 850,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 747,
                          "src": "11454:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 851,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "numTranchesInitialized",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 426,
                        "src": "11454:27:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 852,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "11483:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 853,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "11483:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 854,
                        "name": "leaf",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 753,
                        "src": "11495:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 848,
                      "name": "TrancheInitialized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 482,
                      "src": "11424:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$_t_bytes32_$returns$__$",
                        "typeString": "function (uint256,uint256,address,bytes32)"
                      }
                    },
                    "id": 855,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11424:76:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 856,
                  "nodeType": "EmitStatement",
                  "src": "11419:81:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 858,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 718,
                        "src": "11520:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 859,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 747,
                          "src": "11531:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 860,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "numTranchesInitialized",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 426,
                        "src": "11531:27:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 857,
                      "name": "withdraw",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1011,
                      "src": "11511:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 861,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11511:48:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 862,
                  "nodeType": "ExpressionStatement",
                  "src": "11511:48:2"
                },
                {
                  "expression": {
                    "expression": {
                      "id": 863,
                      "name": "tree",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 747,
                      "src": "11577:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                      }
                    },
                    "id": 864,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "numTranchesInitialized",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 426,
                    "src": "11577:27:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 731,
                  "id": 865,
                  "nodeType": "Return",
                  "src": "11570:34:2"
                }
              ]
            },
            "documentation": {
              "id": 716,
              "nodeType": "StructuredDocumentation",
              "src": "8585:873:2",
              "text": "@notice Called once per recipient of a vesting schedule to initialize the vesting schedule and fix the parameters\n @dev Only the recipient can initialize their own schedule here, because a meaningful choice is made\n @dev If the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree stats\n @param treeIndex index into array-like map of merkleTrees\n @param vestingTime the actual length of the vesting schedule, chosen by the user\n @param minTotalPayments the minimum amount of tokens they will receive, if they choose minEndTime as vestingTime\n @param maxTotalPayments the maximum amount of tokens they will receive, if they choose maxEndTime as vestingTime\n @param proof array of hashes linking leaf hash of (destination, minTotalPayments, maxTotalPayments) to root"
            },
            "functionSelector": "77389921",
            "id": 867,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "9472:10:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 728,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 718,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "9497:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 867,
                  "src": "9492:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 717,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9492:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 720,
                  "mutability": "mutable",
                  "name": "vestingTime",
                  "nameLocation": "9521:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 867,
                  "src": "9516:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 719,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9516:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 722,
                  "mutability": "mutable",
                  "name": "minTotalPayments",
                  "nameLocation": "9547:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 867,
                  "src": "9542:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 721,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9542:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 724,
                  "mutability": "mutable",
                  "name": "maxTotalPayments",
                  "nameLocation": "9578:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 867,
                  "src": "9573:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 723,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9573:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 727,
                  "mutability": "mutable",
                  "name": "proof",
                  "nameLocation": "9621:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 867,
                  "src": "9604:22:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 725,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "9604:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 726,
                    "nodeType": "ArrayTypeName",
                    "src": "9604:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9482:145:2"
            },
            "returnParameters": {
              "id": 731,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 730,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 867,
                  "src": "9646:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 729,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9646:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9645:6:2"
            },
            "scope": 1215,
            "src": "9463:2148:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1010,
              "nodeType": "Block",
              "src": "12105:2722:2",
              "statements": [
                {
                  "assignments": [
                    877
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 877,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "12134:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1010,
                      "src": "12115:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 876,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 875,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 436,
                          "src": "12115:10:2"
                        },
                        "referencedDeclaration": 436,
                        "src": "12115:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 881,
                  "initialValue": {
                    "baseExpression": {
                      "id": 878,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 441,
                      "src": "12141:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$436_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 880,
                    "indexExpression": {
                      "id": 879,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 870,
                      "src": "12153:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "12141:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$436_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12115:48:2"
                },
                {
                  "assignments": [
                    884
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 884,
                      "mutability": "mutable",
                      "name": "tranche",
                      "nameLocation": "12189:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1010,
                      "src": "12173:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                        "typeString": "struct MerkleResistor.Tranche"
                      },
                      "typeName": {
                        "id": 883,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 882,
                          "name": "Tranche",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 410,
                          "src": "12173:7:2"
                        },
                        "referencedDeclaration": 410,
                        "src": "12173:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 889,
                  "initialValue": {
                    "baseExpression": {
                      "expression": {
                        "id": 885,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 877,
                        "src": "12199:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 886,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "tranches",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 431,
                      "src": "12199:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$410_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"
                      }
                    },
                    "id": 888,
                    "indexExpression": {
                      "id": 887,
                      "name": "trancheIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 872,
                      "src": "12213:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "12199:27:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$410_storage",
                      "typeString": "struct MerkleResistor.Tranche storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12173:53:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 893,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 890,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 884,
                        "src": "12310:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 891,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "totalCoins",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 399,
                      "src": "12310:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 892,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "12332:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "12310:23:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 900,
                  "nodeType": "IfStatement",
                  "src": "12306:106:2",
                  "trueBody": {
                    "id": 899,
                    "nodeType": "Block",
                    "src": "12335:77:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 895,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 870,
                              "src": "12377:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 896,
                              "name": "trancheIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 872,
                              "src": "12388:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 894,
                            "name": "UninitializedAccount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 527,
                            "src": "12356:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256) pure"
                            }
                          },
                          "id": 897,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12356:45:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 898,
                        "nodeType": "RevertStatement",
                        "src": "12349:52:2"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 904,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 901,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 884,
                        "src": "12468:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 902,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "currentCoins",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 401,
                      "src": "12468:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 903,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "12492:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "12468:25:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 911,
                  "nodeType": "IfStatement",
                  "src": "12464:100:2",
                  "trueBody": {
                    "id": 910,
                    "nodeType": "Block",
                    "src": "12495:69:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 906,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 870,
                              "src": "12529:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 907,
                              "name": "trancheIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 872,
                              "src": "12540:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 905,
                            "name": "AccountEmpty",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 533,
                            "src": "12516:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256) pure"
                            }
                          },
                          "id": 908,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12516:37:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 909,
                        "nodeType": "RevertStatement",
                        "src": "12509:44:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    913
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 913,
                      "mutability": "mutable",
                      "name": "currentWithdrawal",
                      "nameLocation": "12579:17:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1010,
                      "src": "12574:22:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 912,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "12574:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 914,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12574:22:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 919,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 915,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "12721:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 916,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "12721:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "expression": {
                        "id": 917,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 884,
                        "src": "12740:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 918,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "endTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 405,
                      "src": "12740:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12721:34:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 938,
                    "nodeType": "Block",
                    "src": "12828:263:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 936,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 926,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 913,
                            "src": "12989:17:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 935,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 931,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 927,
                                      "name": "block",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -4,
                                      "src": "13010:5:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_block",
                                        "typeString": "block"
                                      }
                                    },
                                    "id": 928,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "timestamp",
                                    "nodeType": "MemberAccess",
                                    "src": "13010:15:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 929,
                                      "name": "tranche",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 884,
                                      "src": "13028:7:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                                        "typeString": "struct MerkleResistor.Tranche storage pointer"
                                      }
                                    },
                                    "id": 930,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lastWithdrawalTime",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 409,
                                    "src": "13028:26:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "13010:44:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 932,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "13009:46:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "expression": {
                                "id": 933,
                                "name": "tranche",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 884,
                                "src": "13058:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                                  "typeString": "struct MerkleResistor.Tranche storage pointer"
                                }
                              },
                              "id": 934,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "coinsPerSecond",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 407,
                              "src": "13058:22:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "13009:71:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12989:91:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 937,
                        "nodeType": "ExpressionStatement",
                        "src": "12989:91:2"
                      }
                    ]
                  },
                  "id": 939,
                  "nodeType": "IfStatement",
                  "src": "12717:374:2",
                  "trueBody": {
                    "id": 925,
                    "nodeType": "Block",
                    "src": "12757:65:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 923,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 920,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 913,
                            "src": "12771:17:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 921,
                              "name": "tranche",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 884,
                              "src": "12791:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                                "typeString": "struct MerkleResistor.Tranche storage pointer"
                              }
                            },
                            "id": 922,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "currentCoins",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 401,
                            "src": "12791:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12771:40:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 924,
                        "nodeType": "ExpressionStatement",
                        "src": "12771:40:2"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 945,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 940,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 884,
                        "src": "13283:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 942,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "lastWithdrawalTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 409,
                      "src": "13283:26:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 943,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "13312:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 944,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "13312:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "13283:44:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 946,
                  "nodeType": "ExpressionStatement",
                  "src": "13283:44:2"
                },
                {
                  "assignments": [
                    949
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 949,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "13345:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1010,
                      "src": "13338:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$1999",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 948,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 947,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1999,
                          "src": "13338:6:2"
                        },
                        "referencedDeclaration": 1999,
                        "src": "13338:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1999",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 954,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 951,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 877,
                          "src": "13360:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 952,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "tokenAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 422,
                        "src": "13360:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 950,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1999,
                      "src": "13353:6:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$1999_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 953,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13353:25:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$1999",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13338:40:2"
                },
                {
                  "assignments": [
                    956
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 956,
                      "mutability": "mutable",
                      "name": "balanceBefore",
                      "nameLocation": "13393:13:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1010,
                      "src": "13388:18:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 955,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "13388:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 964,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 961,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "13433:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1215",
                              "typeString": "contract MerkleResistor"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1215",
                              "typeString": "contract MerkleResistor"
                            }
                          ],
                          "id": 960,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "13425:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 959,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "13425:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 962,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13425:13:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 957,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 949,
                        "src": "13409:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1999",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 958,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1938,
                      "src": "13409:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 963,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13409:30:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13388:51:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 968,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 884,
                          "src": "14102:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 969,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "recipient",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 397,
                        "src": "14102:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 970,
                        "name": "currentWithdrawal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 913,
                        "src": "14121:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 965,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 949,
                        "src": "14087:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1999",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 967,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1948,
                      "src": "14087:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 971,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14087:52:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 972,
                  "nodeType": "ExpressionStatement",
                  "src": "14087:52:2"
                },
                {
                  "assignments": [
                    974
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 974,
                      "mutability": "mutable",
                      "name": "balanceAfter",
                      "nameLocation": "14246:12:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1010,
                      "src": "14241:17:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 973,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "14241:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 982,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 979,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "14285:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1215",
                              "typeString": "contract MerkleResistor"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1215",
                              "typeString": "contract MerkleResistor"
                            }
                          ],
                          "id": 978,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "14277:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 977,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "14277:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 980,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14277:13:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 975,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 949,
                        "src": "14261:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1999",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 976,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1938,
                      "src": "14261:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 981,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14261:30:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14241:50:2"
                },
                {
                  "assignments": [
                    984
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 984,
                      "mutability": "mutable",
                      "name": "diff",
                      "nameLocation": "14306:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1010,
                      "src": "14301:9:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 983,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "14301:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 988,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 987,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 985,
                      "name": "balanceBefore",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 956,
                      "src": "14313:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "id": 986,
                      "name": "balanceAfter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 974,
                      "src": "14329:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "14313:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14301:40:2"
                },
                {
                  "expression": {
                    "id": 993,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 989,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 884,
                        "src": "14540:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 991,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "currentCoins",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 401,
                      "src": "14540:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 992,
                      "name": "diff",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 984,
                      "src": "14564:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "14540:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 994,
                  "nodeType": "ExpressionStatement",
                  "src": "14540:28:2"
                },
                {
                  "expression": {
                    "id": 999,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 995,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 877,
                        "src": "14703:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 997,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 424,
                      "src": "14703:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 998,
                      "name": "diff",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 984,
                      "src": "14724:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "14703:25:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1000,
                  "nodeType": "ExpressionStatement",
                  "src": "14703:25:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 1002,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 870,
                        "src": "14763:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1003,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 884,
                          "src": "14774:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1004,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "recipient",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 397,
                        "src": "14774:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1005,
                        "name": "diff",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 984,
                        "src": "14793:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1006,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 884,
                          "src": "14799:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1007,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "currentCoins",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 401,
                        "src": "14799:20:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1001,
                      "name": "WithdrawalOccurred",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 454,
                      "src": "14744:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,address,uint256,uint256)"
                      }
                    },
                    "id": 1008,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14744:76:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1009,
                  "nodeType": "EmitStatement",
                  "src": "14739:81:2"
                }
              ]
            },
            "documentation": {
              "id": 868,
              "nodeType": "StructuredDocumentation",
              "src": "11617:423:2",
              "text": "@notice Move unlocked funds to the destination\n @dev Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of\n @dev who provides the proof and pays the gas, msg.sender is not used in this function\n @param treeIndex index into array-like map of merkleTrees, which tree should we apply the proof to?\n @param trancheIndex index into tranche map"
            },
            "functionSelector": "441a3e70",
            "id": 1011,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "12054:8:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 873,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 870,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "12068:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1011,
                  "src": "12063:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 869,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "12063:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 872,
                  "mutability": "mutable",
                  "name": "trancheIndex",
                  "nameLocation": "12084:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1011,
                  "src": "12079:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 871,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "12079:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "12062:35:2"
            },
            "returnParameters": {
              "id": 874,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "12105:0:2"
            },
            "scope": 1215,
            "src": "12045:2782:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1148,
              "nodeType": "Block",
              "src": "15898:2782:2",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1033,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1031,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1014,
                      "src": "16030:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 1032,
                      "name": "numTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 395,
                      "src": "16042:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "16030:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1041,
                  "nodeType": "IfStatement",
                  "src": "16026:74:2",
                  "trueBody": {
                    "id": 1040,
                    "nodeType": "Block",
                    "src": "16052:48:2",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "hexValue": "66616c7365",
                              "id": 1034,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16074:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "hexValue": "30",
                              "id": 1035,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16081:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 1036,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16084:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 1037,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16087:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "id": 1038,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "16073:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$",
                            "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"
                          }
                        },
                        "functionReturnParameters": 1030,
                        "id": 1039,
                        "nodeType": "Return",
                        "src": "16066:23:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    1044
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1044,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "16224:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1148,
                      "src": "16205:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 1043,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1042,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 436,
                          "src": "16205:10:2"
                        },
                        "referencedDeclaration": 436,
                        "src": "16205:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1048,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1045,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 441,
                      "src": "16231:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$436_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 1047,
                    "indexExpression": {
                      "id": 1046,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1014,
                      "src": "16243:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "16231:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$436_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16205:48:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 1057,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1052,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1049,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1016,
                        "src": "16356:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "expression": {
                          "id": 1050,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1044,
                          "src": "16370:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 1051,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "maxEndTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 418,
                        "src": "16370:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "16356:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1056,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1053,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1016,
                        "src": "16389:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "expression": {
                          "id": 1054,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1044,
                          "src": "16403:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 1055,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "minEndTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 416,
                        "src": "16403:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "16389:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "16356:62:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1065,
                  "nodeType": "IfStatement",
                  "src": "16352:116:2",
                  "trueBody": {
                    "id": 1064,
                    "nodeType": "Block",
                    "src": "16420:48:2",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "hexValue": "66616c7365",
                              "id": 1058,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16442:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "hexValue": "30",
                              "id": 1059,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16449:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 1060,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16452:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 1061,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16455:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "id": 1062,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "16441:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$",
                            "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"
                          }
                        },
                        "functionReturnParameters": 1030,
                        "id": 1063,
                        "nodeType": "Return",
                        "src": "16434:23:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    1067
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1067,
                      "mutability": "mutable",
                      "name": "totalCoins",
                      "nameLocation": "16483:10:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1148,
                      "src": "16478:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1066,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "16478:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1068,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16478:15:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1072,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1069,
                      "name": "vestingTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1016,
                      "src": "16507:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 1070,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1044,
                        "src": "16522:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 1071,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "maxEndTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 418,
                      "src": "16522:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "16507:30:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 1109,
                    "nodeType": "Block",
                    "src": "16756:1051:2",
                    "statements": [
                      {
                        "assignments": [
                          1079
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1079,
                            "mutability": "mutable",
                            "name": "paymentSlope",
                            "nameLocation": "17419:12:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 1109,
                            "src": "17414:17:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1078,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "17414:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1093,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1092,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1085,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1082,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1080,
                                    "name": "maxTotalPayments",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1020,
                                    "src": "17435:16:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "id": 1081,
                                    "name": "minTotalPayments",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1018,
                                    "src": "17454:16:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "17435:35:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 1083,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "17434:37:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "id": 1084,
                              "name": "PRECISION",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 444,
                              "src": "17474:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "17434:49:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1090,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1086,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1044,
                                    "src": "17487:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                                    }
                                  },
                                  "id": 1087,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "maxEndTime",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 418,
                                  "src": "17487:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1088,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1044,
                                    "src": "17505:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                                    }
                                  },
                                  "id": 1089,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "minEndTime",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 416,
                                  "src": "17505:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "17487:33:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 1091,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "17486:35:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "17434:87:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "17414:107:2"
                      },
                      {
                        "expression": {
                          "id": 1107,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1094,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1067,
                            "src": "17704:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1106,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1103,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1101,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1095,
                                      "name": "paymentSlope",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1079,
                                      "src": "17718:12:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 1099,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 1096,
                                            "name": "vestingTime",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1016,
                                            "src": "17734:11:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "-",
                                          "rightExpression": {
                                            "expression": {
                                              "id": 1097,
                                              "name": "tree",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1044,
                                              "src": "17748:4:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                                                "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                                              }
                                            },
                                            "id": 1098,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "minEndTime",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 416,
                                            "src": "17748:15:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "17734:29:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 1100,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "17733:31:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "17718:46:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "id": 1102,
                                    "name": "PRECISION",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 444,
                                    "src": "17767:9:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "17718:58:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 1104,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "17717:60:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "id": 1105,
                              "name": "minTotalPayments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1018,
                              "src": "17780:16:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "17717:79:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "17704:92:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1108,
                        "nodeType": "ExpressionStatement",
                        "src": "17704:92:2"
                      }
                    ]
                  },
                  "id": 1110,
                  "nodeType": "IfStatement",
                  "src": "16503:1304:2",
                  "trueBody": {
                    "id": 1077,
                    "nodeType": "Block",
                    "src": "16539:211:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 1075,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1073,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1067,
                            "src": "16710:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1074,
                            "name": "maxTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1020,
                            "src": "16723:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16710:29:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1076,
                        "nodeType": "ExpressionStatement",
                        "src": "16710:29:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    1112
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1112,
                      "mutability": "mutable",
                      "name": "coinsPerSecond",
                      "nameLocation": "18273:14:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1148,
                      "src": "18268:19:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1111,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "18268:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1129,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1128,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1122,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1113,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1067,
                            "src": "18291:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1120,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "313030",
                                      "id": 1116,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "18310:3:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      },
                                      "value": "100"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      }
                                    ],
                                    "id": 1115,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "18305:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 1114,
                                      "name": "uint",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "18305:4:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1117,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "18305:9:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1118,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1044,
                                    "src": "18317:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$436_storage_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                                    }
                                  },
                                  "id": 1119,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pctUpFront",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 420,
                                  "src": "18317:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "18305:27:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 1121,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "18304:29:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "18291:42:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1123,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "18290:44:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1126,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1124,
                            "name": "vestingTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1016,
                            "src": "18338:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "hexValue": "313030",
                            "id": 1125,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "18352:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_100_by_1",
                              "typeString": "int_const 100"
                            },
                            "value": "100"
                          },
                          "src": "18338:17:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1127,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "18337:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "18290:66:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "18268:88:2"
                },
                {
                  "assignments": [
                    1131
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1131,
                      "mutability": "mutable",
                      "name": "startTime",
                      "nameLocation": "18537:9:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1148,
                      "src": "18532:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1130,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "18532:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1141,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1140,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1135,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 1132,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "18549:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 1133,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "18549:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "id": 1134,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1016,
                        "src": "18567:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "18549:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1138,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1136,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1067,
                            "src": "18582:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 1137,
                            "name": "coinsPerSecond",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1112,
                            "src": "18595:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "18582:27:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1139,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "18581:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "18549:61:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "18532:78:2"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "74727565",
                        "id": 1142,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "18629:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      {
                        "id": 1143,
                        "name": "totalCoins",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1067,
                        "src": "18635:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1144,
                        "name": "coinsPerSecond",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1112,
                        "src": "18647:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1145,
                        "name": "startTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1131,
                        "src": "18663:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 1146,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "18628:45:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(bool,uint256,uint256,uint256)"
                    }
                  },
                  "functionReturnParameters": 1030,
                  "id": 1147,
                  "nodeType": "Return",
                  "src": "18621:52:2"
                }
              ]
            },
            "documentation": {
              "id": 1012,
              "nodeType": "StructuredDocumentation",
              "src": "14833:904:2",
              "text": "@notice Determine if the proposed vesting schedule is legit\n @dev Anyone may call this to check, but it also returns values used in the initialization of vesting schedules\n @param treeIndex index into array-like map of merkleTrees, which tree are we talking about?\n @param vestingTime user chosen length of vesting schedule\n @param minTotalPayments pre-committed (in the root hash) minimum of possible totalCoins\n @param maxTotalPayments pre-committed (in the root hash) maximum of possible totalCoins\n @return valid is the proposed vesting-schedule valid\n @return totalCoins amount of coins allocated in the vesting schedule\n @return coinsPerSecond amount of coins released every second, in the proposed vesting schedule\n @return startTime start time of vesting schedule implied by supplied parameters, will always be <= block.timestamp"
            },
            "functionSelector": "6fb6ec41",
            "id": 1149,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyVestingSchedule",
            "nameLocation": "15751:21:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1021,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1014,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "15778:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1149,
                  "src": "15773:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1013,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "15773:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1016,
                  "mutability": "mutable",
                  "name": "vestingTime",
                  "nameLocation": "15794:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1149,
                  "src": "15789:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1015,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "15789:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1018,
                  "mutability": "mutable",
                  "name": "minTotalPayments",
                  "nameLocation": "15812:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1149,
                  "src": "15807:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1017,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "15807:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1020,
                  "mutability": "mutable",
                  "name": "maxTotalPayments",
                  "nameLocation": "15835:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1149,
                  "src": "15830:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1019,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "15830:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15772:80:2"
            },
            "returnParameters": {
              "id": 1030,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1023,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1149,
                  "src": "15874:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1022,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "15874:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1025,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1149,
                  "src": "15880:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1024,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "15880:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1027,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1149,
                  "src": "15886:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1026,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "15886:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1029,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1149,
                  "src": "15892:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1028,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "15892:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15873:24:2"
            },
            "scope": 1215,
            "src": "15742:2938:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1196,
              "nodeType": "Block",
              "src": "18809:254:2",
              "statements": [
                {
                  "assignments": [
                    1172
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1172,
                      "mutability": "mutable",
                      "name": "tranche",
                      "nameLocation": "18835:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1196,
                      "src": "18819:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                        "typeString": "struct MerkleResistor.Tranche"
                      },
                      "typeName": {
                        "id": 1171,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1170,
                          "name": "Tranche",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 410,
                          "src": "18819:7:2"
                        },
                        "referencedDeclaration": 410,
                        "src": "18819:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1179,
                  "initialValue": {
                    "baseExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 1173,
                          "name": "merkleTrees",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 441,
                          "src": "18845:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$436_storage_$",
                            "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                          }
                        },
                        "id": 1175,
                        "indexExpression": {
                          "id": 1174,
                          "name": "treeIndex",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1151,
                          "src": "18857:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "18845:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage",
                          "typeString": "struct MerkleResistor.MerkleTree storage ref"
                        }
                      },
                      "id": 1176,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "tranches",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 431,
                      "src": "18845:31:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$410_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"
                      }
                    },
                    "id": 1178,
                    "indexExpression": {
                      "id": 1177,
                      "name": "trancheIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1153,
                      "src": "18877:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "18845:45:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$410_storage",
                      "typeString": "struct MerkleResistor.Tranche storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "18819:71:2"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "expression": {
                          "id": 1180,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1172,
                          "src": "18908:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1181,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "recipient",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 397,
                        "src": "18908:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 1182,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1172,
                          "src": "18927:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1183,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "totalCoins",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 399,
                        "src": "18927:18:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1184,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1172,
                          "src": "18947:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1185,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "currentCoins",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 401,
                        "src": "18947:20:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1186,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1172,
                          "src": "18969:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1187,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "startTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 403,
                        "src": "18969:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1188,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1172,
                          "src": "18988:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1189,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "endTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 405,
                        "src": "18988:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1190,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1172,
                          "src": "19005:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1191,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "coinsPerSecond",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 407,
                        "src": "19005:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1192,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1172,
                          "src": "19029:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$410_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1193,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "lastWithdrawalTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 409,
                        "src": "19029:26:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 1194,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "18907:149:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(address,uint256,uint256,uint256,uint256,uint256,uint256)"
                    }
                  },
                  "functionReturnParameters": 1169,
                  "id": 1195,
                  "nodeType": "Return",
                  "src": "18900:156:2"
                }
              ]
            },
            "functionSelector": "0b42abf2",
            "id": 1197,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTranche",
            "nameLocation": "18695:10:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1154,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1151,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "18711:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1197,
                  "src": "18706:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1150,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18706:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1153,
                  "mutability": "mutable",
                  "name": "trancheIndex",
                  "nameLocation": "18727:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1197,
                  "src": "18722:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1152,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18722:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18705:35:2"
            },
            "returnParameters": {
              "id": 1169,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1156,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1197,
                  "src": "18764:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1155,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "18764:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1158,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1197,
                  "src": "18773:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1157,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18773:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1160,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1197,
                  "src": "18779:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1159,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18779:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1162,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1197,
                  "src": "18785:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1161,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18785:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1164,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1197,
                  "src": "18791:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1163,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18791:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1166,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1197,
                  "src": "18797:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1165,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18797:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1168,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1197,
                  "src": "18803:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1167,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18803:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18763:45:2"
            },
            "scope": 1215,
            "src": "18686:377:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1213,
              "nodeType": "Block",
              "src": "19152:64:2",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 1206,
                          "name": "merkleTrees",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 441,
                          "src": "19169:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$436_storage_$",
                            "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                          }
                        },
                        "id": 1208,
                        "indexExpression": {
                          "id": 1207,
                          "name": "treeIndex",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1199,
                          "src": "19181:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "19169:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$436_storage",
                          "typeString": "struct MerkleResistor.MerkleTree storage ref"
                        }
                      },
                      "id": 1209,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "initialized",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 435,
                      "src": "19169:34:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                        "typeString": "mapping(bytes32 => bool)"
                      }
                    },
                    "id": 1211,
                    "indexExpression": {
                      "id": 1210,
                      "name": "leaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1201,
                      "src": "19204:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "19169:40:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1205,
                  "id": 1212,
                  "nodeType": "Return",
                  "src": "19162:47:2"
                }
              ]
            },
            "functionSelector": "d6801c2e",
            "id": 1214,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getInitialized",
            "nameLocation": "19078:14:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1202,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1199,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "19098:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1214,
                  "src": "19093:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1198,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "19093:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1201,
                  "mutability": "mutable",
                  "name": "leaf",
                  "nameLocation": "19117:4:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1214,
                  "src": "19109:12:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1200,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "19109:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19092:30:2"
            },
            "returnParameters": {
              "id": 1205,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1204,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1214,
                  "src": "19146:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1203,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "19146:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "19145:6:2"
            },
            "scope": 1215,
            "src": "19069:147:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1216,
        "src": "1454:17765:2",
        "usedErrors": [
          486,
          490,
          496,
          502,
          511,
          521,
          527,
          533
        ]
      }
    ],
    "src": "42:19178:2"
  },
  "bytecode": "608060405234801561001057600080fd5b50611014806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806385d88cb11161006657806385d88cb1146101bd578063aaf5eb681461025d578063d6801c2e14610267578063d71383ed146102a9578063f16ad51e146102bc57600080fd5b80630b42abf2146100a3578063390b7c6614610149578063441a3e70146101605780636fb6ec411461017557806377389921146101aa575b600080fd5b6101056100b1366004610cd0565b600091825260016020818152604080852093855260089093019052912080549181015460028201546003830154600484015460058501546006909501546001600160a01b0390961696939592949193909290565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0015b60405180910390f35b61015260005481565b604051908152602001610140565b61017361016e366004610cd0565b6102cf565b005b610188610183366004610cf2565b610582565b6040805194151585526020850193909352918301526060820152608001610140565b6101526101b8366004610d3a565b6106d3565b6102196101cb366004610e21565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600686015460079096015494959394929391926001600160a01b03909116919088565b60408051988952602089019790975295870194909452606086019290925260808501526001600160a01b031660a084015260c083015260e082015261010001610140565b610152620f424081565b610299610275366004610cd0565b60009182526001602090815260408084209284526009909201905290205460ff1690565b6040519015158152602001610140565b6101736102b7366004610e3a565b6109ac565b6101736102ca366004610cd0565b610ac2565b6000828152600160208181526040808420858552600881019092529092209081015461031d5760405163c085915360e01b815260048101859052602481018490526044015b60405180910390fd5b6002810154610349576040516318c0dc6760e21b81526004810185905260248101849052604401610314565b60008160040154421061036157506002810154610382565b600582015460068301546103759042610ebc565b61037f9190610ed3565b90505b42600683015560058301546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a0823190602401602060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb9190610ef2565b845460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905291925083169063a9059cbb906044016020604051808303816000875af115801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190610f0b565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190610ef2565b905060006104ed8284610ebc565b9050808660020160008282546105039190610ebc565b925050819055508087600601600082825461051e9190610ebc565b9091555050855460028701546040516001600160a01b03909216918b917f1680e4cfe90468085407ef2b599dbe94b0aa30ff9f180f0e41d22eb71c8728729161056f91868252602082015260400190565b60405180910390a3505050505050505050565b6000806000806000548811156105a3575060009250829150819050806106c8565b600088815260016020526040902060038101548811806105c65750806002015488105b156105df576000806000809450945094509450506106c8565b600081600301548914156105f4575085610665565b60008260020154836003015461060a9190610ebc565b620f42406106188b8b610ebc565b6106229190610ed3565b61062c9190610f34565b905088620f424084600201548c6106439190610ebc565b61064d9084610ed3565b6106579190610f34565b6106619190610f56565b9150505b60006106728a6064610ed3565b6004840154610682906064610ebc565b61068c9084610ed3565b6106969190610f34565b905060006106a48284610f34565b6106ae8c42610f56565b6106b89190610ebc565b6001985092965090945090925050505b945094509450949050565b60008515806106e3575060005486115b156107045760405163190a97ad60e01b815260048101879052602401610314565b600086815260016020908152604080832081513381850152808301899052606080820189905283518083039091018152608090910183528051908401208085526009820190935292205460ff16156107795760405163a0b0703160e01b81526004810189905260248101829052604401610314565b8154604051632769cd1f60e21b815273__MerkleLib_____________________________91639da7347c916107b5919085908990600401610f6e565b602060405180830381865af41580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190610f0b565b61081957878185604051630da5a8fd60e41b815260040161031493929190610f6e565b60008060008061082b8c8c8c8c610582565b929650909450925090508361086b576040516323f4345360e01b8152600481018d9052602481018c9052604481018b9052606481018a9052608401610314565b6000858152600987016020908152604091829020805460ff19166001179055815160e08101835233815290810185905290810184905260608101829052608081016108b68d42610f56565b81526020018381526020018281525086600801600088600701600081546108dc90610fc3565b918290555081526020808201929092526040908101600020835181546001600160a01b0319166001600160a01b03909116178155838301516001820155838201516002820155606084015160038201556080840151600482015560a0840151600582015560c090930151600690930192909255600788015491518781523392918f917fe937d08e98e81d14e69757213935a0ccaf856636fb06fdafc51d7c78cc85e97d910160405180910390a46109978c87600701546102cf565b50505060079092015498975050505050505050565b606483106109d05760405163078299b560e21b815260048101849052602401610314565b8385106109fa57604051636f30d75760e11b81526004810186905260248101859052604401610314565b6000600160008060008154610a0e90610fc3565b9182905550815260208101919091526040016000908120898155600181018990556002810188905560038101879055600481018690556005810180546001600160a01b0319166001600160a01b0387161790559054909150610a709083610ac2565b600054604080518a8152602081018a90526001600160a01b03861692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a35050505050505050565b811580610ad0575060005482115b15610af15760405163190a97ad60e01b815260048101839052602401610314565b600082815260016020526040808220600581015491516370a0823160e01b815230600482015290926001600160a01b03909216919082906370a0823190602401602060405180830381865afa158015610b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b729190610ef2565b6040516323b872dd60e01b8152336004820152306024820152604481018690529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec9190610f0b565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c589190610ef2565b90506000610c668383610ebc565b905080856006016000828254610c7c9190610f56565b909155505060058501546040518281526001600160a01b039091169088907fb162210da7d23d82c18cff5af46d3562661d26b42a6848fa28d64a6bdc70386a9060200160405180910390a350505050505050565b60008060408385031215610ce357600080fd5b50508035926020909101359150565b60008060008060808587031215610d0857600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a08688031215610d5257600080fd5b8535945060208087013594506040870135935060608701359250608087013567ffffffffffffffff80821115610d8757600080fd5b818901915089601f830112610d9b57600080fd5b813581811115610dad57610dad610d24565b8060051b604051601f19603f83011681018181108582111715610dd257610dd2610d24565b60405291825284820192508381018501918c831115610df057600080fd5b938501935b82851015610e0e57843584529385019392850192610df5565b8096505050505050509295509295909350565b600060208284031215610e3357600080fd5b5035919050565b600080600080600080600060e0888a031215610e5557600080fd5b873596506020880135955060408801359450606088013593506080880135925060a08801356001600160a01b0381168114610e8f57600080fd5b8092505060c0880135905092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b600082821015610ece57610ece610ea6565b500390565b6000816000190483118215151615610eed57610eed610ea6565b500290565b600060208284031215610f0457600080fd5b5051919050565b600060208284031215610f1d57600080fd5b81518015158114610f2d57600080fd5b9392505050565b600082610f5157634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610f6957610f69610ea6565b500190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b81811015610fb557845183529383019391830191600101610f99565b509098975050505050505050565b6000600019821415610fd757610fd7610ea6565b506001019056fea2646970667358221220afc0b6b00dc16ffec3d8484a03fafeb60777540ecb0a992093f42ddadeb9880464736f6c634300080c0033",
  "bytecodeSha1": "ecd816e42459afc70b2a409e76ab8aa193c7bf98",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "MerkleResistor",
  "coverageMap": {
    "branches": {
      "1": {},
      "2": {
        "MerkleResistor.addMerkleTree": {
          "48": [
            5803,
            5820,
            false
          ],
          "49": [
            5890,
            5914,
            false
          ]
        },
        "MerkleResistor.depositTokens": {
          "50": [
            7111,
            7125,
            true
          ],
          "51": [
            7129,
            7149,
            false
          ]
        },
        "MerkleResistor.initialize": {
          "44": [
            9666,
            9680,
            true
          ],
          "45": [
            9684,
            9704,
            false
          ],
          "46": [
            9991,
            10013,
            false
          ],
          "47": [
            10386,
            10400,
            false
          ]
        },
        "MerkleResistor.verifyVestingSchedule": {
          "40": [
            16030,
            16050,
            false
          ],
          "41": [
            16356,
            16385,
            true
          ],
          "42": [
            16389,
            16418,
            false
          ],
          "43": [
            16507,
            16537,
            false
          ]
        },
        "MerkleResistor.withdraw": {
          "39": [
            12721,
            12755,
            false
          ]
        }
      },
      "4": {}
    },
    "statements": {
      "1": {},
      "2": {
        "MerkleResistor.addMerkleTree": {
          "25": [
            5799,
            5876
          ],
          "26": [
            5886,
            5987
          ],
          "27": [
            6056,
            6081
          ],
          "28": [
            6091,
            6115
          ],
          "29": [
            6125,
            6153
          ],
          "30": [
            6163,
            6191
          ],
          "31": [
            6201,
            6229
          ],
          "32": [
            6239,
            6271
          ],
          "33": [
            6547,
            6584
          ],
          "34": [
            6594,
            6657
          ]
        },
        "MerkleResistor.depositTokens": {
          "35": [
            7107,
            7206
          ],
          "36": [
            8131,
            8183
          ],
          "37": [
            8469,
            8500
          ],
          "38": [
            8510,
            8572
          ]
        },
        "MerkleResistor.getInitialized": {
          "1": [
            19162,
            19209
          ]
        },
        "MerkleResistor.getTranche": {
          "0": [
            18900,
            19056
          ]
        },
        "MerkleResistor.initialize": {
          "16": [
            9662,
            9761
          ],
          "17": [
            9987,
            10082
          ],
          "18": [
            10092,
            10211
          ],
          "19": [
            10382,
            10512
          ],
          "20": [
            10610,
            10639
          ],
          "21": [
            10834,
            11408
          ],
          "22": [
            11419,
            11500
          ],
          "23": [
            11511,
            11559
          ],
          "24": [
            11570,
            11604
          ]
        },
        "MerkleResistor.verifyVestingSchedule": {
          "11": [
            16066,
            16089
          ],
          "12": [
            16434,
            16457
          ],
          "13": [
            16710,
            16739
          ],
          "14": [
            17704,
            17796
          ],
          "15": [
            18621,
            18673
          ]
        },
        "MerkleResistor.withdraw": {
          "2": [
            12306,
            12412
          ],
          "3": [
            12464,
            12564
          ],
          "4": [
            12771,
            12811
          ],
          "5": [
            12989,
            13080
          ],
          "6": [
            13283,
            13327
          ],
          "7": [
            14087,
            14139
          ],
          "8": [
            14540,
            14568
          ],
          "9": [
            14703,
            14728
          ],
          "10": [
            14739,
            14820
          ]
        }
      },
      "4": {}
    }
  },
  "dependencies": [
    "IERC20",
    "MerkleLib"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061009e5760003560e01c806385d88cb11161006657806385d88cb1146101bd578063aaf5eb681461025d578063d6801c2e14610267578063d71383ed146102a9578063f16ad51e146102bc57600080fd5b80630b42abf2146100a3578063390b7c6614610149578063441a3e70146101605780636fb6ec411461017557806377389921146101aa575b600080fd5b6101056100b1366004610cd0565b600091825260016020818152604080852093855260089093019052912080549181015460028201546003830154600484015460058501546006909501546001600160a01b0390961696939592949193909290565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0015b60405180910390f35b61015260005481565b604051908152602001610140565b61017361016e366004610cd0565b6102cf565b005b610188610183366004610cf2565b610582565b6040805194151585526020850193909352918301526060820152608001610140565b6101526101b8366004610d3a565b6106d3565b6102196101cb366004610e21565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600686015460079096015494959394929391926001600160a01b03909116919088565b60408051988952602089019790975295870194909452606086019290925260808501526001600160a01b031660a084015260c083015260e082015261010001610140565b610152620f424081565b610299610275366004610cd0565b60009182526001602090815260408084209284526009909201905290205460ff1690565b6040519015158152602001610140565b6101736102b7366004610e3a565b6109ac565b6101736102ca366004610cd0565b610ac2565b6000828152600160208181526040808420858552600881019092529092209081015461031d5760405163c085915360e01b815260048101859052602481018490526044015b60405180910390fd5b6002810154610349576040516318c0dc6760e21b81526004810185905260248101849052604401610314565b60008160040154421061036157506002810154610382565b600582015460068301546103759042610ebc565b61037f9190610ed3565b90505b42600683015560058301546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a0823190602401602060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb9190610ef2565b845460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905291925083169063a9059cbb906044016020604051808303816000875af115801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190610f0b565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190610ef2565b905060006104ed8284610ebc565b9050808660020160008282546105039190610ebc565b925050819055508087600601600082825461051e9190610ebc565b9091555050855460028701546040516001600160a01b03909216918b917f1680e4cfe90468085407ef2b599dbe94b0aa30ff9f180f0e41d22eb71c8728729161056f91868252602082015260400190565b60405180910390a3505050505050505050565b6000806000806000548811156105a3575060009250829150819050806106c8565b600088815260016020526040902060038101548811806105c65750806002015488105b156105df576000806000809450945094509450506106c8565b600081600301548914156105f4575085610665565b60008260020154836003015461060a9190610ebc565b620f42406106188b8b610ebc565b6106229190610ed3565b61062c9190610f34565b905088620f424084600201548c6106439190610ebc565b61064d9084610ed3565b6106579190610f34565b6106619190610f56565b9150505b60006106728a6064610ed3565b6004840154610682906064610ebc565b61068c9084610ed3565b6106969190610f34565b905060006106a48284610f34565b6106ae8c42610f56565b6106b89190610ebc565b6001985092965090945090925050505b945094509450949050565b60008515806106e3575060005486115b156107045760405163190a97ad60e01b815260048101879052602401610314565b600086815260016020908152604080832081513381850152808301899052606080820189905283518083039091018152608090910183528051908401208085526009820190935292205460ff16156107795760405163a0b0703160e01b81526004810189905260248101829052604401610314565b8154604051632769cd1f60e21b815273__$61dd25696c02d5bd2863c8d2c1a2324a87$__91639da7347c916107b5919085908990600401610f6e565b602060405180830381865af41580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f69190610f0b565b61081957878185604051630da5a8fd60e41b815260040161031493929190610f6e565b60008060008061082b8c8c8c8c610582565b929650909450925090508361086b576040516323f4345360e01b8152600481018d9052602481018c9052604481018b9052606481018a9052608401610314565b6000858152600987016020908152604091829020805460ff19166001179055815160e08101835233815290810185905290810184905260608101829052608081016108b68d42610f56565b81526020018381526020018281525086600801600088600701600081546108dc90610fc3565b918290555081526020808201929092526040908101600020835181546001600160a01b0319166001600160a01b03909116178155838301516001820155838201516002820155606084015160038201556080840151600482015560a0840151600582015560c090930151600690930192909255600788015491518781523392918f917fe937d08e98e81d14e69757213935a0ccaf856636fb06fdafc51d7c78cc85e97d910160405180910390a46109978c87600701546102cf565b50505060079092015498975050505050505050565b606483106109d05760405163078299b560e21b815260048101849052602401610314565b8385106109fa57604051636f30d75760e11b81526004810186905260248101859052604401610314565b6000600160008060008154610a0e90610fc3565b9182905550815260208101919091526040016000908120898155600181018990556002810188905560038101879055600481018690556005810180546001600160a01b0319166001600160a01b0387161790559054909150610a709083610ac2565b600054604080518a8152602081018a90526001600160a01b03861692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a35050505050505050565b811580610ad0575060005482115b15610af15760405163190a97ad60e01b815260048101839052602401610314565b600082815260016020526040808220600581015491516370a0823160e01b815230600482015290926001600160a01b03909216919082906370a0823190602401602060405180830381865afa158015610b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b729190610ef2565b6040516323b872dd60e01b8152336004820152306024820152604481018690529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec9190610f0b565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c589190610ef2565b90506000610c668383610ebc565b905080856006016000828254610c7c9190610f56565b909155505060058501546040518281526001600160a01b039091169088907fb162210da7d23d82c18cff5af46d3562661d26b42a6848fa28d64a6bdc70386a9060200160405180910390a350505050505050565b60008060408385031215610ce357600080fd5b50508035926020909101359150565b60008060008060808587031215610d0857600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a08688031215610d5257600080fd5b8535945060208087013594506040870135935060608701359250608087013567ffffffffffffffff80821115610d8757600080fd5b818901915089601f830112610d9b57600080fd5b813581811115610dad57610dad610d24565b8060051b604051601f19603f83011681018181108582111715610dd257610dd2610d24565b60405291825284820192508381018501918c831115610df057600080fd5b938501935b82851015610e0e57843584529385019392850192610df5565b8096505050505050509295509295909350565b600060208284031215610e3357600080fd5b5035919050565b600080600080600080600060e0888a031215610e5557600080fd5b873596506020880135955060408801359450606088013593506080880135925060a08801356001600160a01b0381168114610e8f57600080fd5b8092505060c0880135905092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b600082821015610ece57610ece610ea6565b500390565b6000816000190483118215151615610eed57610eed610ea6565b500290565b600060208284031215610f0457600080fd5b5051919050565b600060208284031215610f1d57600080fd5b81518015158114610f2d57600080fd5b9392505050565b600082610f5157634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610f6957610f69610ea6565b500190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b81811015610fb557845183529383019391830191600101610f99565b509098975050505050505050565b6000600019821415610fd757610fd7610ea6565b506001019056fea2646970667358221220afc0b6b00dc16ffec3d8484a03fafeb60777540ecb0a992093f42ddadeb9880464736f6c634300080c0033",
  "deployedSourceMap": "1454:17765:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18686:377;;;;;;:::i;:::-;18764:7;18845:22;;;:11;:22;;;;;;;;:45;;;:31;;;;:45;;;;18908:17;;18927:18;;;;18947:20;;;;18969:17;;;;18988:15;;;;19005:22;;;;19029:26;;;;;-1:-1:-1;;;;;18908:17:2;;;;18927:18;;18947:20;;18969:17;;18988:15;;19029:26;18686:377;;;;;-1:-1:-1;;;;;600:32:5;;;582:51;;664:2;649:18;;642:34;;;;692:18;;;685:34;;;;750:2;735:18;;728:34;;;;793:3;778:19;;771:35;620:3;822:19;;815:35;881:3;866:19;;859:35;569:3;554:19;18686:377:2;;;;;;;;1557:20;;;;;;;;;1051:25:5;;;1039:2;1024:18;1557:20:2;905:177:5;12045:2782:2;;;;;;:::i;:::-;;:::i;:::-;;15742:2938;;;;;;:::i;:::-;;:::i;:::-;;;;1727:14:5;;1720:22;1702:41;;1774:2;1759:18;;1752:34;;;;1802:18;;;1795:34;1860:2;1845:18;;1838:34;1689:3;1674:19;15742:2938:2;1477:401:5;9463:2148:2;;;;;;:::i;:::-;;:::i;3319:47::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3319:47:2;;;;;;;;;;;3937:25:5;;;3993:2;3978:18;;3971:34;;;;4021:18;;;4014:34;;;;4079:2;4064:18;;4057:34;;;;4122:3;4107:19;;4100:35;-1:-1:-1;;;;;4172:32:5;4192:3;4151:19;;4144:61;4236:3;4221:19;;4214:35;4280:3;4265:19;;4258:35;3924:3;3909:19;3319:47:2;3594:705:5;3439:40:2;;3472:7;3439:40;;19069:147;;;;;;:::i;:::-;19146:4;19169:22;;;:11;:22;;;;;;;;:40;;;:34;;;;:40;;;;;;;;19069:147;;;;4722:14:5;;4715:22;4697:41;;4685:2;4670:18;19069:147:2;4557:187:5;5588:1076:2;;;;;;:::i;:::-;;:::i;7039:1540::-;;;;;;:::i;:::-;;:::i;12045:2782::-;12115:23;12141:22;;;:11;:22;;;;;;;;12199:27;;;:13;;;:27;;;;;;12310:18;;;;12306:106;;12356:45;;-1:-1:-1;;;12356:45:2;;;;;5626:25:5;;;5667:18;;;5660:34;;;5599:18;;12356:45:2;;;;;;;;12306:106;12468:20;;;;12464:100;;12516:37;;-1:-1:-1;;;12516:37:2;;;;;5626:25:5;;;5667:18;;;5660:34;;;5599:18;;12516:37:2;5452:248:5;12464:100:2;12574:22;12740:7;:15;;;12721;:34;12717:374;;-1:-1:-1;12791:20:2;;;;12717:374;;;13058:22;;;;13028:26;;;;13010:44;;:15;:44;:::i;:::-;13009:71;;;;:::i;:::-;12989:91;;12717:374;13312:15;13283:26;;;:44;13360:17;;;;13409:30;;-1:-1:-1;;;13409:30:2;;13433:4;13409:30;;;6286:51:5;-1:-1:-1;;;;;13360:17:2;;;;13338:12;;13360:17;;13409:15;;6259:18:5;;13409:30:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;14102:17;;14087:52;;-1:-1:-1;;;14087:52:2;;-1:-1:-1;;;;;14102:17:2;;;14087:52;;;6711:51:5;6778:18;;;6771:34;;;13388:51:2;;-1:-1:-1;14087:14:2;;;;;6684:18:5;;14087:52:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;14261:30:2;;-1:-1:-1;;;14261:30:2;;14285:4;14261:30;;;6286:51:5;14241:17:2;;-1:-1:-1;;;;;14261:15:2;;;;;6259:18:5;;14261:30:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;14241:50;-1:-1:-1;14301:9:2;14313:28;14241:50;14313:13;:28;:::i;:::-;14301:40;;14564:4;14540:7;:20;;;:28;;;;;;;:::i;:::-;;;;;;;;14724:4;14703;:17;;;:25;;;;;;;:::i;:::-;;;;-1:-1:-1;;14774:17:2;;14799:20;;;;14744:76;;-1:-1:-1;;;;;14774:17:2;;;;14763:9;;14744:76;;;;14793:4;5626:25:5;;5682:2;5667:18;;5660:34;5614:2;5599:18;;5452:248;14744:76:2;;;;;;;;12105:2722;;;;;;;12045:2782;;:::o;15742:2938::-;15874:4;15880;15886;15892;16042:8;;16030:9;:20;16026:74;;;-1:-1:-1;16074:5:2;;-1:-1:-1;16074:5:2;;-1:-1:-1;16074:5:2;;-1:-1:-1;16074:5:2;16066:23;;16026:74;16205:23;16231:22;;;:11;:22;;;;;16370:15;;;;16356:29;;;:62;;;16403:4;:15;;;16389:11;:29;16356:62;16352:116;;;16442:5;16449:1;16452;16455;16434:23;;;;;;;;;;;16352:116;16478:15;16522:4;:15;;;16507:11;:30;16503:1304;;;-1:-1:-1;16723:16:2;16503:1304;;;17414:17;17505:4;:15;;;17487:4;:15;;;:33;;;;:::i;:::-;3472:7;17435:35;17454:16;17435;:35;:::i;:::-;17434:49;;;;:::i;:::-;:87;;;;:::i;:::-;17414:107;;17780:16;3472:7;17748:4;:15;;;17734:11;:29;;;;:::i;:::-;17718:46;;:12;:46;:::i;:::-;:58;;;;:::i;:::-;17717:79;;;;:::i;:::-;17704:92;;16756:1051;16503:1304;18268:19;18338:17;:11;18352:3;18338:17;:::i;:::-;18317:15;;;;18305:27;;18310:3;18305:27;:::i;:::-;18291:42;;:10;:42;:::i;:::-;18290:66;;;;:::i;:::-;18268:88;-1:-1:-1;18532:14:2;18582:27;18268:88;18582:10;:27;:::i;:::-;18549:29;18567:11;18549:15;:29;:::i;:::-;:61;;;;:::i;:::-;18629:4;;-1:-1:-1;18635:10:2;;-1:-1:-1;18647:14:2;;-1:-1:-1;18532:78:2;;-1:-1:-1;;;15742:2938:2;;;;;;;;;;:::o;9463:2148::-;9646:4;9666:14;;;:38;;;9696:8;;9684:9;:20;9666:38;9662:99;;;9727:23;;-1:-1:-1;;;9727:23:2;;;;;1051:25:5;;;1024:18;;9727:23:2;905:177:5;9662:99:2;9771:23;9797:22;;;:11;:22;;;;;;;;9917:58;;9928:10;9917:58;;;7655:51:5;7722:18;;;7715:34;;;7765:18;;;;7758:34;;;9917:58:2;;;;;;;;;;7628:18:5;;;;9917:58:2;;9907:69;;;;;;9991:22;;;:16;;;:22;;;;;;;;9987:95;;;10036:35;;-1:-1:-1;;;10036:35:2;;;;;5626:25:5;;;5667:18;;;5660:34;;;5599:18;;10036:35:2;5452:248:5;9987:95:2;10096:15;;:40;;-1:-1:-1;;;10096:40:2;;:27;;;;:40;;:15;10124:4;;10130:5;;10096:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10092:119;;10177:9;10188:4;10194:5;10168:32;;-1:-1:-1;;;10168:32:2;;;;;;;;;;:::i;10092:119::-;10222:10;10234:15;10251:19;10272:14;10290:81;10312:9;10323:11;10336:16;10354;10290:21;:81::i;:::-;10221:150;;-1:-1:-1;10221:150:2;;-1:-1:-1;10221:150:2;-1:-1:-1;10221:150:2;-1:-1:-1;10386:14:2;10382:130;;10423:78;;-1:-1:-1;;;10423:78:2;;;;;9855:25:5;;;9896:18;;;9889:34;;;9939:18;;;9932:34;;;9982:18;;;9975:34;;;9827:19;;10423:78:2;9624:391:5;10382:130:2;10610:22;;;;:16;;;:22;;;;;;;;;:29;;-1:-1:-1;;10610:29:2;10635:4;10610:29;;;10881:527;;;;;;;10902:10;10881:527;;;;;;;;;;;;;;;;;;;;;;;11136:29;11154:11;11136:15;:29;:::i;:::-;10881:527;;;;11223:14;10881:527;;;;11291:9;10881:527;;;10834:4;:13;;:44;10850:4;:27;;;10848:29;;;;;:::i;:::-;;;;;-1:-1:-1;10834:44:2;;;;;;;;;;;;;;-1:-1:-1;10834:44:2;:574;;;;-1:-1:-1;;;;;;10834:574:2;-1:-1:-1;;;;;10834:574:2;;;;;;;;;;-1:-1:-1;10834:574:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11454:27;;;;11424:76;;1051:25:5;;;11483:10:2;;11454:27;11443:9;;11424:76;;1024:18:5;11424:76:2;;;;;;;11511:48;11520:9;11531:4;:27;;;11511:8;:48::i;:::-;-1:-1:-1;;;11577:27:2;;;;;;9463:2148;-1:-1:-1;;;;;;;;9463:2148:2:o;5588:1076::-;5817:3;5803:10;:17;5799:77;;5843:22;;-1:-1:-1;;;5843:22:2;;;;;1051:25:5;;;1024:18;;5843:22:2;905:177:5;5799:77:2;5904:10;5890;:24;5886:101;;5937:39;;-1:-1:-1;;;5937:39:2;;;;;5626:25:5;;;5667:18;;;5660:34;;;5599:18;;5937:39:2;5452:248:5;5886:101:2;5997:23;6023:11;:23;6037:8;;6035:10;;;;;:::i;:::-;;;;;-1:-1:-1;6023:23:2;;;;;;;;;;;-1:-1:-1;6023:23:2;;;6056:25;;;6091:13;;;:24;;;6125:15;;;:28;;;6163:15;;;:28;;;6201:15;;;:28;;;6239:17;;;:32;;-1:-1:-1;;;;;;6239:32:2;-1:-1:-1;;;;;6239:32:2;;;;;6561:8;;6023:23;;-1:-1:-1;6547:37:2;;6571:12;6547:13;:37::i;:::-;6615:8;;6599:58;;;5626:25:5;;;5682:2;5667:18;;5660:34;;;-1:-1:-1;;;;;6599:58:2;;;6615:8;6599:58;;5599:18:5;6599:58:2;;;;;;;5745:919;5588:1076;;;;;;;:::o;7039:1540::-;7111:14;;;:38;;;7141:8;;7129:9;:20;7111:38;7107:99;;;7172:23;;-1:-1:-1;;;7172:23:2;;;;;1051:25:5;;;1024:18;;7172:23:2;905:177:5;7107:99:2;7216:29;7248:22;;;:11;:22;;;;;;7303:23;;;;7358:30;;-1:-1:-1;;;7358:30:2;;7382:4;7358:30;;;6286:51:5;7248:22:2;;-1:-1:-1;;;;;7303:23:2;;;;7216:29;7303:23;;7358:15;;6259:18:5;;7358:30:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8131:52;;-1:-1:-1;;;8131:52:2;;8150:10;8131:52;;;10835:34:5;8170:4:2;10885:18:5;;;10878:43;10937:18;;;10930:34;;;7337:51:2;;-1:-1:-1;;;;;;8131:18:2;;;;;10770::5;;8131:52:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;8214:30:2;;-1:-1:-1;;;8214:30:2;;8238:4;8214:30;;;6286:51:5;8194:17:2;;-1:-1:-1;;;;;8214:15:2;;;;;6259:18:5;;8214:30:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8194:50;-1:-1:-1;8356:9:2;8368:28;8383:13;8194:50;8368:28;:::i;:::-;8356:40;;8496:4;8469:10;:23;;;:31;;;;;;;:::i;:::-;;;;-1:-1:-1;;8542:23:2;;;;8515:57;;1051:25:5;;;-1:-1:-1;;;;;8542:23:2;;;;8531:9;;8515:57;;1039:2:5;1024:18;8515:57:2;;;;;;;7097:1482;;;;;7039:1540;;:::o;14:248:5:-;82:6;90;143:2;131:9;122:7;118:23;114:32;111:52;;;159:1;156;149:12;111:52;-1:-1:-1;;182:23:5;;;252:2;237:18;;;224:32;;-1:-1:-1;14:248:5:o;1087:385::-;1173:6;1181;1189;1197;1250:3;1238:9;1229:7;1225:23;1221:33;1218:53;;;1267:1;1264;1257:12;1218:53;-1:-1:-1;;1290:23:5;;;1360:2;1345:18;;1332:32;;-1:-1:-1;1411:2:5;1396:18;;1383:32;;1462:2;1447:18;1434:32;;-1:-1:-1;1087:385:5;-1:-1:-1;1087:385:5:o;1883:127::-;1944:10;1939:3;1935:20;1932:1;1925:31;1975:4;1972:1;1965:15;1999:4;1996:1;1989:15;2015:1389;2135:6;2143;2151;2159;2167;2220:3;2208:9;2199:7;2195:23;2191:33;2188:53;;;2237:1;2234;2227:12;2188:53;2273:9;2260:23;2250:33;;2302:2;2351;2340:9;2336:18;2323:32;2313:42;;2402:2;2391:9;2387:18;2374:32;2364:42;;2453:2;2442:9;2438:18;2425:32;2415:42;;2508:3;2497:9;2493:19;2480:33;2532:18;2573:2;2565:6;2562:14;2559:34;;;2589:1;2586;2579:12;2559:34;2627:6;2616:9;2612:22;2602:32;;2672:7;2665:4;2661:2;2657:13;2653:27;2643:55;;2694:1;2691;2684:12;2643:55;2730:2;2717:16;2752:2;2748;2745:10;2742:36;;;2758:18;;:::i;:::-;2804:2;2801:1;2797:10;2836:2;2830:9;2899:2;2895:7;2890:2;2886;2882:11;2878:25;2870:6;2866:38;2954:6;2942:10;2939:22;2934:2;2922:10;2919:18;2916:46;2913:72;;;2965:18;;:::i;:::-;3001:2;2994:22;3051:18;;;3085:15;;;;-1:-1:-1;3127:11:5;;;3123:20;;;3155:19;;;3152:39;;;3187:1;3184;3177:12;3152:39;3211:11;;;;3231:142;3247:6;3242:3;3239:15;3231:142;;;3313:17;;3301:30;;3264:12;;;;3351;;;;3231:142;;;3392:6;3382:16;;;;;;;;2015:1389;;;;;;;;:::o;3409:180::-;3468:6;3521:2;3509:9;3500:7;3496:23;3492:32;3489:52;;;3537:1;3534;3527:12;3489:52;-1:-1:-1;3560:23:5;;3409:180;-1:-1:-1;3409:180:5:o;4749:698::-;4862:6;4870;4878;4886;4894;4902;4910;4963:3;4951:9;4942:7;4938:23;4934:33;4931:53;;;4980:1;4977;4970:12;4931:53;5003:23;;;-1:-1:-1;5073:2:5;5058:18;;5045:32;;-1:-1:-1;5124:2:5;5109:18;;5096:32;;-1:-1:-1;5175:2:5;5160:18;;5147:32;;-1:-1:-1;5226:3:5;5211:19;;5198:33;;-1:-1:-1;5281:3:5;5266:19;;5253:33;-1:-1:-1;;;;;5315:31:5;;5305:42;;5295:70;;5361:1;5358;5351:12;5295:70;5384:5;5374:15;;;5436:3;5425:9;5421:19;5408:33;5398:43;;4749:698;;;;;;;;;;:::o;5705:127::-;5766:10;5761:3;5757:20;5754:1;5747:31;5797:4;5794:1;5787:15;5821:4;5818:1;5811:15;5837:125;5877:4;5905:1;5902;5899:8;5896:34;;;5910:18;;:::i;:::-;-1:-1:-1;5947:9:5;;5837:125::o;5967:168::-;6007:7;6073:1;6069;6065:6;6061:14;6058:1;6055:21;6050:1;6043:9;6036:17;6032:45;6029:71;;;6080:18;;:::i;:::-;-1:-1:-1;6120:9:5;;5967:168::o;6348:184::-;6418:6;6471:2;6459:9;6450:7;6446:23;6442:32;6439:52;;;6487:1;6484;6477:12;6439:52;-1:-1:-1;6510:16:5;;6348:184;-1:-1:-1;6348:184:5:o;6816:277::-;6883:6;6936:2;6924:9;6915:7;6911:23;6907:32;6904:52;;;6952:1;6949;6942:12;6904:52;6984:9;6978:16;7037:5;7030:13;7023:21;7016:5;7013:32;7003:60;;7059:1;7056;7049:12;7003:60;7082:5;6816:277;-1:-1:-1;;;6816:277:5:o;7098:217::-;7138:1;7164;7154:132;;7208:10;7203:3;7199:20;7196:1;7189:31;7243:4;7240:1;7233:15;7271:4;7268:1;7261:15;7154:132;-1:-1:-1;7300:9:5;;7098:217::o;7320:128::-;7360:3;7391:1;7387:6;7384:1;7381:13;7378:39;;;7397:18;;:::i;:::-;-1:-1:-1;7433:9:5;;7320:128::o;8056:783::-;8262:4;8310:2;8299:9;8295:18;8340:6;8329:9;8322:25;8366:2;8404:6;8399:2;8388:9;8384:18;8377:34;8447:2;8442;8431:9;8427:18;8420:30;8470:6;8505;8499:13;8536:6;8528;8521:22;8574:3;8563:9;8559:19;8552:26;;8613:2;8605:6;8601:15;8587:29;;8634:1;8644:169;8658:6;8655:1;8652:13;8644:169;;;8719:13;;8707:26;;8788:15;;;;8753:12;;;;8680:1;8673:9;8644:169;;;-1:-1:-1;8830:3:5;;8056:783;-1:-1:-1;;;;;;;;8056:783:5:o;10020:135::-;10059:3;-1:-1:-1;;10080:17:5;;10077:43;;;10100:18;;:::i;:::-;-1:-1:-1;10147:1:5;10136:13;;10020:135::o",
  "language": "Solidity",
  "natspec": {
    "author": "metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki",
    "details": "The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof.User chosen vesting schedules means the contract has parameters that define a line segment thatdescribes a range of vesting-schedule parameters within which the user can negotiate tradeoffsMore tokens => longer vesting time && slower drip, when used correctly, but the contract does not enforcecoherence of vesting schedules, so someone could make a range of vesting schedules in whichmore tokens => longer vesting time && faster drip, but this is a user error, also we wouldn't catch it untilafter the tree has been initialized and funded, so we just let them do it.The choice of which parameters to initialize at tree-creation-time versus at schedule-initialization-time issomewhat arbitrary, but we choose to have min/max end times at tree scope and min/max total payments at first-withdrawal-time",
    "kind": "dev",
    "methods": {
      "addMerkleTree(bytes32,bytes32,uint256,uint256,uint256,address,uint256)": {
        "details": "Anyone may call this function, therefore we must make sure trees cannot affect each otherRoot hash should be built from (destination, minTotalPayments, maxTotalPayments)",
        "notice": "Add a new merkle tree to the contract, creating a new merkle-vesting-schedule-range",
        "params": {
          "ipfsHash": "the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable",
          "maxEndTime": "a continuous range of possible end times are specified, this is the maximum",
          "minEndTime": "a continuous range of possible end times are specified, this is the minimum",
          "newRoot": "root hash of merkle tree representing vesting schedule ranges",
          "pctUpFront": "the percent of tokens user will get at initialization time (note this implies no lock time)",
          "tokenAddress": "the address of the token contract that is being distributed",
          "tokenBalance": "the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
        }
      },
      "depositTokens(uint256,uint256)": {
        "details": "Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious",
        "notice": "Add funds to an existing merkle-tree",
        "params": {
          "treeIndex": "index into array-like map of merkleTrees",
          "value": "the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
        }
      },
      "initialize(uint256,uint256,uint256,uint256,bytes32[])": {
        "details": "Only the recipient can initialize their own schedule here, because a meaningful choice is madeIf the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree stats",
        "notice": "Called once per recipient of a vesting schedule to initialize the vesting schedule and fix the parameters",
        "params": {
          "maxTotalPayments": "the maximum amount of tokens they will receive, if they choose maxEndTime as vestingTime",
          "minTotalPayments": "the minimum amount of tokens they will receive, if they choose minEndTime as vestingTime",
          "proof": "array of hashes linking leaf hash of (destination, minTotalPayments, maxTotalPayments) to root",
          "treeIndex": "index into array-like map of merkleTrees",
          "vestingTime": "the actual length of the vesting schedule, chosen by the user"
        }
      },
      "verifyVestingSchedule(uint256,uint256,uint256,uint256)": {
        "details": "Anyone may call this to check, but it also returns values used in the initialization of vesting schedules",
        "notice": "Determine if the proposed vesting schedule is legit",
        "params": {
          "maxTotalPayments": "pre-committed (in the root hash) maximum of possible totalCoins",
          "minTotalPayments": "pre-committed (in the root hash) minimum of possible totalCoins",
          "treeIndex": "index into array-like map of merkleTrees, which tree are we talking about?",
          "vestingTime": "user chosen length of vesting schedule"
        },
        "returns": {
          "_0": "valid is the proposed vesting-schedule valid",
          "_1": "totalCoins amount of coins allocated in the vesting schedule",
          "_2": "coinsPerSecond amount of coins released every second, in the proposed vesting schedule",
          "_3": "startTime start time of vesting schedule implied by supplied parameters, will always be <= block.timestamp"
        }
      },
      "withdraw(uint256,uint256)": {
        "details": "Anyone may call this function for anyone else, funds go to destination regardless, it's just a question ofwho provides the proof and pays the gas, msg.sender is not used in this function",
        "notice": "Move unlocked funds to the destination",
        "params": {
          "trancheIndex": "index into tranche map",
          "treeIndex": "index into array-like map of merkleTrees, which tree should we apply the proof to?"
        }
      }
    },
    "notice": "This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.",
    "title": "A factory pattern for user-chosen vesting-schedules, that is, a time release schedule for tokens, using merkle proofs to scale",
    "version": 1
  },
  "offset": [
    1454,
    19219
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x85D88CB1 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x85D88CB1 EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0xAAF5EB68 EQ PUSH2 0x25D JUMPI DUP1 PUSH4 0xD6801C2E EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xD71383ED EQ PUSH2 0x2A9 JUMPI DUP1 PUSH4 0xF16AD51E EQ PUSH2 0x2BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB42ABF2 EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x390B7C66 EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x441A3E70 EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0x6FB6EC41 EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0x77389921 EQ PUSH2 0x1AA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x105 PUSH2 0xB1 CALLDATASIZE PUSH1 0x4 PUSH2 0xCD0 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP4 DUP6 MSTORE PUSH1 0x8 SWAP1 SWAP4 ADD SWAP1 MSTORE SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 SWAP1 SWAP6 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP7 AND SWAP7 SWAP4 SWAP6 SWAP3 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP9 AND DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP5 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x140 JUMP JUMPDEST PUSH2 0x173 PUSH2 0x16E CALLDATASIZE PUSH1 0x4 PUSH2 0xCD0 JUMP JUMPDEST PUSH2 0x2CF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH2 0x183 CALLDATASIZE PUSH1 0x4 PUSH2 0xCF2 JUMP JUMPDEST PUSH2 0x582 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 ISZERO ISZERO DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x140 JUMP JUMPDEST PUSH2 0x152 PUSH2 0x1B8 CALLDATASIZE PUSH1 0x4 PUSH2 0xD3A JUMP JUMPDEST PUSH2 0x6D3 JUMP JUMPDEST PUSH2 0x219 PUSH2 0x1CB CALLDATASIZE PUSH1 0x4 PUSH2 0xE21 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 DUP7 ADD SLOAD PUSH1 0x7 SWAP1 SWAP7 ADD SLOAD SWAP5 SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 DUP9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP9 DUP10 MSTORE PUSH1 0x20 DUP10 ADD SWAP8 SWAP1 SWAP8 MSTORE SWAP6 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 ADD PUSH2 0x140 JUMP JUMPDEST PUSH2 0x152 PUSH3 0xF4240 DUP2 JUMP JUMPDEST PUSH2 0x299 PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0xCD0 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP3 DUP5 MSTORE PUSH1 0x9 SWAP1 SWAP3 ADD SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x140 JUMP JUMPDEST PUSH2 0x173 PUSH2 0x2B7 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3A JUMP JUMPDEST PUSH2 0x9AC JUMP JUMPDEST PUSH2 0x173 PUSH2 0x2CA CALLDATASIZE PUSH1 0x4 PUSH2 0xCD0 JUMP JUMPDEST PUSH2 0xAC2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP6 DUP6 MSTORE PUSH1 0x8 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP3 KECCAK256 SWAP1 DUP2 ADD SLOAD PUSH2 0x31D JUMPI PUSH1 0x40 MLOAD PUSH4 0xC0859153 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD PUSH2 0x349 JUMPI PUSH1 0x40 MLOAD PUSH4 0x18C0DC67 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD SLOAD TIMESTAMP LT PUSH2 0x361 JUMPI POP PUSH1 0x2 DUP2 ADD SLOAD PUSH2 0x382 JUMP JUMPDEST PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0x6 DUP4 ADD SLOAD PUSH2 0x375 SWAP1 TIMESTAMP PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x37F SWAP2 SWAP1 PUSH2 0xED3 JUMP JUMPDEST SWAP1 POP JUMPDEST TIMESTAMP PUSH1 0x6 DUP4 ADD SSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3FB SWAP2 SWAP1 PUSH2 0xEF2 JUMP JUMPDEST DUP5 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 SWAP3 POP DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x44F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x473 SWAP2 SWAP1 PUSH2 0xF0B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4BB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4DF SWAP2 SWAP1 PUSH2 0xEF2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4ED DUP3 DUP5 PUSH2 0xEBC JUMP JUMPDEST SWAP1 POP DUP1 DUP7 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x503 SWAP2 SWAP1 PUSH2 0xEBC JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP8 PUSH1 0x6 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x51E SWAP2 SWAP1 PUSH2 0xEBC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP6 SLOAD PUSH1 0x2 DUP8 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP12 SWAP2 PUSH32 0x1680E4CFE90468085407EF2B599DBE94B0AA30FF9F180F0E41D22EB71C872872 SWAP2 PUSH2 0x56F SWAP2 DUP7 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 SLOAD DUP9 GT ISZERO PUSH2 0x5A3 JUMPI POP PUSH1 0x0 SWAP3 POP DUP3 SWAP2 POP DUP2 SWAP1 POP DUP1 PUSH2 0x6C8 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD DUP9 GT DUP1 PUSH2 0x5C6 JUMPI POP DUP1 PUSH1 0x2 ADD SLOAD DUP9 LT JUMPDEST ISZERO PUSH2 0x5DF JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP POP PUSH2 0x6C8 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3 ADD SLOAD DUP10 EQ ISZERO PUSH2 0x5F4 JUMPI POP DUP6 PUSH2 0x665 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x2 ADD SLOAD DUP4 PUSH1 0x3 ADD SLOAD PUSH2 0x60A SWAP2 SWAP1 PUSH2 0xEBC JUMP JUMPDEST PUSH3 0xF4240 PUSH2 0x618 DUP12 DUP12 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x622 SWAP2 SWAP1 PUSH2 0xED3 JUMP JUMPDEST PUSH2 0x62C SWAP2 SWAP1 PUSH2 0xF34 JUMP JUMPDEST SWAP1 POP DUP9 PUSH3 0xF4240 DUP5 PUSH1 0x2 ADD SLOAD DUP13 PUSH2 0x643 SWAP2 SWAP1 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x64D SWAP1 DUP5 PUSH2 0xED3 JUMP JUMPDEST PUSH2 0x657 SWAP2 SWAP1 PUSH2 0xF34 JUMP JUMPDEST PUSH2 0x661 SWAP2 SWAP1 PUSH2 0xF56 JUMP JUMPDEST SWAP2 POP POP JUMPDEST PUSH1 0x0 PUSH2 0x672 DUP11 PUSH1 0x64 PUSH2 0xED3 JUMP JUMPDEST PUSH1 0x4 DUP5 ADD SLOAD PUSH2 0x682 SWAP1 PUSH1 0x64 PUSH2 0xEBC JUMP JUMPDEST PUSH2 0x68C SWAP1 DUP5 PUSH2 0xED3 JUMP JUMPDEST PUSH2 0x696 SWAP2 SWAP1 PUSH2 0xF34 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6A4 DUP3 DUP5 PUSH2 0xF34 JUMP JUMPDEST PUSH2 0x6AE DUP13 TIMESTAMP PUSH2 0xF56 JUMP JUMPDEST PUSH2 0x6B8 SWAP2 SWAP1 PUSH2 0xEBC JUMP JUMPDEST PUSH1 0x1 SWAP9 POP SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP1 SWAP3 POP POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP6 ISZERO DUP1 PUSH2 0x6E3 JUMPI POP PUSH1 0x0 SLOAD DUP7 GT JUMPDEST ISZERO PUSH2 0x704 JUMPI PUSH1 0x40 MLOAD PUSH4 0x190A97AD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD CALLER DUP2 DUP6 ADD MSTORE DUP1 DUP4 ADD DUP10 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP3 ADD DUP10 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD DUP4 MSTORE DUP1 MLOAD SWAP1 DUP5 ADD KECCAK256 DUP1 DUP6 MSTORE PUSH1 0x9 DUP3 ADD SWAP1 SWAP4 MSTORE SWAP3 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x779 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA0B07031 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x314 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2769CD1F PUSH1 0xE2 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x9DA7347C SWAP2 PUSH2 0x7B5 SWAP2 SWAP1 DUP6 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xF6E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x7D2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7F6 SWAP2 SWAP1 PUSH2 0xF0B JUMP JUMPDEST PUSH2 0x819 JUMPI DUP8 DUP2 DUP6 PUSH1 0x40 MLOAD PUSH4 0xDA5A8FD PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x314 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xF6E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x82B DUP13 DUP13 DUP13 DUP13 PUSH2 0x582 JUMP JUMPDEST SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP SWAP1 POP DUP4 PUSH2 0x86B JUMPI PUSH1 0x40 MLOAD PUSH4 0x23F43453 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP14 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP13 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x9 DUP8 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE CALLER DUP2 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x8B6 DUP14 TIMESTAMP PUSH2 0xF56 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP DUP7 PUSH1 0x8 ADD PUSH1 0x0 DUP9 PUSH1 0x7 ADD PUSH1 0x0 DUP2 SLOAD PUSH2 0x8DC SWAP1 PUSH2 0xFC3 JUMP JUMPDEST SWAP2 DUP3 SWAP1 SSTORE POP DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 KECCAK256 DUP4 MLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP2 SSTORE DUP4 DUP4 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE DUP4 DUP3 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0xC0 SWAP1 SWAP4 ADD MLOAD PUSH1 0x6 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x7 DUP9 ADD SLOAD SWAP2 MLOAD DUP8 DUP2 MSTORE CALLER SWAP3 SWAP2 DUP16 SWAP2 PUSH32 0xE937D08E98E81D14E69757213935A0CCAF856636FB06FDAFC51D7C78CC85E97D SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x997 DUP13 DUP8 PUSH1 0x7 ADD SLOAD PUSH2 0x2CF JUMP JUMPDEST POP POP POP PUSH1 0x7 SWAP1 SWAP3 ADD SLOAD SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x9D0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x78299B5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x314 JUMP JUMPDEST DUP4 DUP6 LT PUSH2 0x9FA JUMPI PUSH1 0x40 MLOAD PUSH4 0x6F30D757 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP2 SLOAD PUSH2 0xA0E SWAP1 PUSH2 0xFC3 JUMP JUMPDEST SWAP2 DUP3 SWAP1 SSTORE POP DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP10 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP10 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP9 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP8 SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 SSTORE PUSH1 0x5 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND OR SWAP1 SSTORE SWAP1 SLOAD SWAP1 SWAP2 POP PUSH2 0xA70 SWAP1 DUP4 PUSH2 0xAC2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD DUP11 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP3 SWAP2 PUSH32 0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0xAD0 JUMPI POP PUSH1 0x0 SLOAD DUP3 GT JUMPDEST ISZERO PUSH2 0xAF1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x190A97AD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x314 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x5 DUP2 ADD SLOAD SWAP2 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB4E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB72 SWAP2 SWAP1 PUSH2 0xEF2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBC8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBEC SWAP2 SWAP1 PUSH2 0xF0B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC34 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC58 SWAP2 SWAP1 PUSH2 0xEF2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC66 DUP4 DUP4 PUSH2 0xEBC JUMP JUMPDEST SWAP1 POP DUP1 DUP6 PUSH1 0x6 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xC7C SWAP2 SWAP1 PUSH2 0xF56 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP9 SWAP1 PUSH32 0xB162210DA7D23D82C18CFF5AF46D3562661D26B42A6848FA28D64A6BDC70386A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xD08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xD52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP1 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xD87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xDAD JUMPI PUSH2 0xDAD PUSH2 0xD24 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xDD2 JUMPI PUSH2 0xDD2 PUSH2 0xD24 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP13 DUP4 GT ISZERO PUSH2 0xDF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xE0E JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xDF5 JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xE55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP3 POP POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xECE JUMPI PUSH2 0xECE PUSH2 0xEA6 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xEED JUMPI PUSH2 0xEED PUSH2 0xEA6 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xF2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF51 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xF69 JUMPI PUSH2 0xF69 PUSH2 0xEA6 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP6 DUP4 MSTORE PUSH1 0x20 DUP6 DUP2 DUP6 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 POP DUP3 DUP8 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xFB5 JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xF99 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0xFD7 JUMPI PUSH2 0xFD7 PUSH2 0xEA6 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF 0xC0 0xB6 0xB0 0xD 0xC1 PUSH16 0xFEC3D8484A03FAFEB60777540ECB0A99 KECCAK256 SWAP4 DELEGATECALL 0x2D 0xDA 0xDE 0xB9 DUP9 DIV PUSH5 0x736F6C6343 STOP ADDMOD 0xC STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "6": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "7": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "8": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "12": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "REVERT",
      "path": "2"
    },
    "16": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "17": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "POP",
      "path": "2"
    },
    "18": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "21": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "LT",
      "path": "2"
    },
    "22": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9E"
    },
    "25": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "26": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "29": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "SHR",
      "path": "2"
    },
    "32": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "33": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x85D88CB1"
    },
    "38": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "GT",
      "path": "2"
    },
    "39": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x66"
    },
    "42": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "43": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "44": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x85D88CB1"
    },
    "49": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "EQ",
      "path": "2"
    },
    "50": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1BD"
    },
    "53": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "54": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "55": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xAAF5EB68"
    },
    "60": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "EQ",
      "path": "2"
    },
    "61": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x25D"
    },
    "64": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "65": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "66": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xD6801C2E"
    },
    "71": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "EQ",
      "path": "2"
    },
    "72": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x267"
    },
    "75": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "76": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "77": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xD71383ED"
    },
    "82": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "EQ",
      "path": "2"
    },
    "83": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2A9"
    },
    "86": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "87": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "88": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xF16AD51E"
    },
    "93": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "EQ",
      "path": "2"
    },
    "94": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2BC"
    },
    "97": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "98": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "100": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "101": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "REVERT",
      "path": "2"
    },
    "102": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "103": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "104": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xB42ABF2"
    },
    "109": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "EQ",
      "path": "2"
    },
    "110": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA3"
    },
    "113": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "114": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "115": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x390B7C66"
    },
    "120": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "EQ",
      "path": "2"
    },
    "121": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x149"
    },
    "124": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "125": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "126": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x441A3E70"
    },
    "131": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "EQ",
      "path": "2"
    },
    "132": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x160"
    },
    "135": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "136": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "137": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x6FB6EC41"
    },
    "142": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "EQ",
      "path": "2"
    },
    "143": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x175"
    },
    "146": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "147": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "148": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x77389921"
    },
    "153": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "EQ",
      "path": "2"
    },
    "154": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1AA"
    },
    "157": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "158": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "159": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "161": {
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "DUP1",
      "path": "2"
    },
    "162": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1454,
        19219
      ],
      "op": "REVERT",
      "path": "2"
    },
    "163": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "164": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x105"
    },
    "167": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB1"
    },
    "170": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "171": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "173": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCD0"
    },
    "176": {
      "fn": "MerkleResistor.getTranche",
      "jump": "i",
      "offset": [
        18686,
        19063
      ],
      "op": "JUMP",
      "path": "2"
    },
    "177": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "178": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18764,
        18771
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "180": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18867
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "181": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18867
      ],
      "op": "DUP3",
      "path": "2"
    },
    "182": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18867
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "183": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18856
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "185": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18867
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "187": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18867
      ],
      "op": "DUP2",
      "path": "2"
    },
    "188": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18867
      ],
      "op": "DUP2",
      "path": "2"
    },
    "189": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18867
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "190": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18867
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "192": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18867
      ],
      "op": "DUP1",
      "path": "2"
    },
    "193": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18867
      ],
      "op": "DUP6",
      "path": "2"
    },
    "194": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18867
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "195": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18890
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "196": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18890
      ],
      "op": "DUP6",
      "path": "2"
    },
    "197": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18890
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "198": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18876
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x8"
    },
    "200": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18876
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "201": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18876
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "202": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18876
      ],
      "op": "ADD",
      "path": "2"
    },
    "203": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18890
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "204": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18890
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "205": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18890
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "206": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18845,
        18890
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "207": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18908,
        18925
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 0
    },
    "208": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18908,
        18925
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "209": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18927,
        18945
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "210": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18927,
        18945
      ],
      "op": "DUP2",
      "path": "2"
    },
    "211": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18927,
        18945
      ],
      "op": "ADD",
      "path": "2"
    },
    "212": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18927,
        18945
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "213": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18947,
        18967
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "215": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18947,
        18967
      ],
      "op": "DUP3",
      "path": "2"
    },
    "216": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18947,
        18967
      ],
      "op": "ADD",
      "path": "2"
    },
    "217": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18947,
        18967
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "218": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18969,
        18986
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "220": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18969,
        18986
      ],
      "op": "DUP4",
      "path": "2"
    },
    "221": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18969,
        18986
      ],
      "op": "ADD",
      "path": "2"
    },
    "222": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18969,
        18986
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "223": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18988,
        19003
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "225": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18988,
        19003
      ],
      "op": "DUP5",
      "path": "2"
    },
    "226": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18988,
        19003
      ],
      "op": "ADD",
      "path": "2"
    },
    "227": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18988,
        19003
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "228": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        19005,
        19027
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "230": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        19005,
        19027
      ],
      "op": "DUP6",
      "path": "2"
    },
    "231": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        19005,
        19027
      ],
      "op": "ADD",
      "path": "2"
    },
    "232": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        19005,
        19027
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "233": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        19029,
        19055
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "235": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        19029,
        19055
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "236": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        19029,
        19055
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "237": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        19029,
        19055
      ],
      "op": "ADD",
      "path": "2"
    },
    "238": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        19029,
        19055
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "239": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "241": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "243": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "245": {
      "op": "SHL"
    },
    "246": {
      "op": "SUB"
    },
    "247": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18908,
        18925
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "248": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18908,
        18925
      ],
      "op": "SWAP7",
      "path": "2"
    },
    "249": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18908,
        18925
      ],
      "op": "AND",
      "path": "2"
    },
    "250": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18908,
        18925
      ],
      "op": "SWAP7",
      "path": "2"
    },
    "251": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18927,
        18945
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "252": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18927,
        18945
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "253": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18947,
        18967
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "254": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18947,
        18967
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "255": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18969,
        18986
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "256": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18969,
        18986
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "257": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18988,
        19003
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "258": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18988,
        19003
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "259": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        19029,
        19055
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "260": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "JUMP",
      "path": "2"
    },
    "261": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "262": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "264": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "DUP1",
      "path": "2"
    },
    "265": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "266": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "268": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "270": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "272": {
      "op": "SHL"
    },
    "273": {
      "op": "SUB"
    },
    "274": {
      "op": "SWAP1"
    },
    "275": {
      "op": "SWAP9"
    },
    "276": {
      "op": "AND"
    },
    "277": {
      "op": "DUP9"
    },
    "278": {
      "op": "MSTORE"
    },
    "279": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "281": {
      "op": "DUP9"
    },
    "282": {
      "op": "ADD"
    },
    "283": {
      "op": "SWAP7"
    },
    "284": {
      "op": "SWAP1"
    },
    "285": {
      "op": "SWAP7"
    },
    "286": {
      "op": "MSTORE"
    },
    "287": {
      "op": "SWAP5"
    },
    "288": {
      "op": "DUP7"
    },
    "289": {
      "op": "ADD"
    },
    "290": {
      "op": "SWAP4"
    },
    "291": {
      "op": "SWAP1"
    },
    "292": {
      "op": "SWAP4"
    },
    "293": {
      "op": "MSTORE"
    },
    "294": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "296": {
      "op": "DUP6"
    },
    "297": {
      "op": "ADD"
    },
    "298": {
      "op": "SWAP2"
    },
    "299": {
      "op": "SWAP1"
    },
    "300": {
      "op": "SWAP2"
    },
    "301": {
      "op": "MSTORE"
    },
    "302": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "304": {
      "op": "DUP5"
    },
    "305": {
      "op": "ADD"
    },
    "306": {
      "op": "MSTORE"
    },
    "307": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "309": {
      "op": "DUP4"
    },
    "310": {
      "op": "ADD"
    },
    "311": {
      "op": "MSTORE"
    },
    "312": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "314": {
      "op": "DUP3"
    },
    "315": {
      "op": "ADD"
    },
    "316": {
      "op": "MSTORE"
    },
    "317": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "319": {
      "op": "ADD"
    },
    "320": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "321": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "323": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "324": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "DUP1",
      "path": "2"
    },
    "325": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "326": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "SUB",
      "path": "2"
    },
    "327": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "328": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18686,
        19063
      ],
      "op": "RETURN",
      "path": "2"
    },
    "329": {
      "offset": [
        1557,
        1577
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "330": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x152"
    },
    "333": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "335": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "336": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "DUP2",
      "path": "2"
    },
    "337": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "JUMP",
      "path": "2"
    },
    "338": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "339": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "341": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "342": {
      "op": "SWAP1"
    },
    "343": {
      "op": "DUP2"
    },
    "344": {
      "op": "MSTORE"
    },
    "345": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "347": {
      "op": "ADD"
    },
    "348": {
      "offset": [
        1557,
        1577
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x140"
    },
    "351": {
      "op": "JUMP"
    },
    "352": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12045,
        14827
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "353": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12045,
        14827
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x173"
    },
    "356": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12045,
        14827
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x16E"
    },
    "359": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12045,
        14827
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "360": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12045,
        14827
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "362": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12045,
        14827
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCD0"
    },
    "365": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        12045,
        14827
      ],
      "op": "JUMP",
      "path": "2"
    },
    "366": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12045,
        14827
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "367": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12045,
        14827
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2CF"
    },
    "370": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        12045,
        14827
      ],
      "op": "JUMP",
      "path": "2"
    },
    "371": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12045,
        14827
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "372": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12045,
        14827
      ],
      "op": "STOP",
      "path": "2"
    },
    "373": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "374": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x188"
    },
    "377": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x183"
    },
    "380": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "381": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "383": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCF2"
    },
    "386": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        15742,
        18680
      ],
      "op": "JUMP",
      "path": "2"
    },
    "387": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "388": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x582"
    },
    "391": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        15742,
        18680
      ],
      "op": "JUMP",
      "path": "2"
    },
    "392": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "393": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "395": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "DUP1",
      "path": "2"
    },
    "396": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "397": {
      "op": "SWAP5"
    },
    "398": {
      "op": "ISZERO"
    },
    "399": {
      "op": "ISZERO"
    },
    "400": {
      "op": "DUP6"
    },
    "401": {
      "op": "MSTORE"
    },
    "402": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "404": {
      "op": "DUP6"
    },
    "405": {
      "op": "ADD"
    },
    "406": {
      "op": "SWAP4"
    },
    "407": {
      "op": "SWAP1"
    },
    "408": {
      "op": "SWAP4"
    },
    "409": {
      "op": "MSTORE"
    },
    "410": {
      "op": "SWAP2"
    },
    "411": {
      "op": "DUP4"
    },
    "412": {
      "op": "ADD"
    },
    "413": {
      "op": "MSTORE"
    },
    "414": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "416": {
      "op": "DUP3"
    },
    "417": {
      "op": "ADD"
    },
    "418": {
      "op": "MSTORE"
    },
    "419": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "421": {
      "op": "ADD"
    },
    "422": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x140"
    },
    "425": {
      "op": "JUMP"
    },
    "426": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9463,
        11611
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "427": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9463,
        11611
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x152"
    },
    "430": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9463,
        11611
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1B8"
    },
    "433": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9463,
        11611
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "434": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9463,
        11611
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "436": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9463,
        11611
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD3A"
    },
    "439": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        9463,
        11611
      ],
      "op": "JUMP",
      "path": "2"
    },
    "440": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9463,
        11611
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "441": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9463,
        11611
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6D3"
    },
    "444": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        9463,
        11611
      ],
      "op": "JUMP",
      "path": "2"
    },
    "445": {
      "offset": [
        3319,
        3366
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "446": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x219"
    },
    "449": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1CB"
    },
    "452": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "453": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "455": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE21"
    },
    "458": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        3319,
        3366
      ],
      "op": "JUMP",
      "path": "2"
    },
    "459": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "460": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "462": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "464": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP2",
      "path": "2"
    },
    "465": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "466": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "467": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "469": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "470": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP3",
      "path": "2"
    },
    "471": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "472": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "474": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "475": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "476": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "477": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP1",
      "path": "2"
    },
    "478": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "479": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "480": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP2",
      "path": "2"
    },
    "481": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "ADD",
      "path": "2"
    },
    "482": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "483": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "485": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP3",
      "path": "2"
    },
    "486": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "ADD",
      "path": "2"
    },
    "487": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "488": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "490": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP4",
      "path": "2"
    },
    "491": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "ADD",
      "path": "2"
    },
    "492": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "493": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "495": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP5",
      "path": "2"
    },
    "496": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "ADD",
      "path": "2"
    },
    "497": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "498": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "500": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP6",
      "path": "2"
    },
    "501": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "ADD",
      "path": "2"
    },
    "502": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "503": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "505": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP7",
      "path": "2"
    },
    "506": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "ADD",
      "path": "2"
    },
    "507": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "508": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x7"
    },
    "510": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "511": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP7",
      "path": "2"
    },
    "512": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "ADD",
      "path": "2"
    },
    "513": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "514": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "515": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "516": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "517": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "518": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "519": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "520": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "521": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "522": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "524": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "526": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "528": {
      "op": "SHL"
    },
    "529": {
      "op": "SUB"
    },
    "530": {
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "531": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "532": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "AND",
      "path": "2"
    },
    "533": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "534": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "535": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP9",
      "path": "2"
    },
    "536": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "JUMP",
      "path": "2"
    },
    "537": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "538": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "540": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP1",
      "path": "2"
    },
    "541": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "542": {
      "op": "SWAP9"
    },
    "543": {
      "op": "DUP10"
    },
    "544": {
      "op": "MSTORE"
    },
    "545": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "547": {
      "op": "DUP10"
    },
    "548": {
      "op": "ADD"
    },
    "549": {
      "op": "SWAP8"
    },
    "550": {
      "op": "SWAP1"
    },
    "551": {
      "op": "SWAP8"
    },
    "552": {
      "op": "MSTORE"
    },
    "553": {
      "op": "SWAP6"
    },
    "554": {
      "op": "DUP8"
    },
    "555": {
      "op": "ADD"
    },
    "556": {
      "op": "SWAP5"
    },
    "557": {
      "op": "SWAP1"
    },
    "558": {
      "op": "SWAP5"
    },
    "559": {
      "op": "MSTORE"
    },
    "560": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "562": {
      "op": "DUP7"
    },
    "563": {
      "op": "ADD"
    },
    "564": {
      "op": "SWAP3"
    },
    "565": {
      "op": "SWAP1"
    },
    "566": {
      "op": "SWAP3"
    },
    "567": {
      "op": "MSTORE"
    },
    "568": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "570": {
      "op": "DUP6"
    },
    "571": {
      "op": "ADD"
    },
    "572": {
      "op": "MSTORE"
    },
    "573": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "575": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "577": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "579": {
      "op": "SHL"
    },
    "580": {
      "op": "SUB"
    },
    "581": {
      "op": "AND"
    },
    "582": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "584": {
      "op": "DUP5"
    },
    "585": {
      "op": "ADD"
    },
    "586": {
      "op": "MSTORE"
    },
    "587": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "589": {
      "op": "DUP4"
    },
    "590": {
      "op": "ADD"
    },
    "591": {
      "op": "MSTORE"
    },
    "592": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "594": {
      "op": "DUP3"
    },
    "595": {
      "op": "ADD"
    },
    "596": {
      "op": "MSTORE"
    },
    "597": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "600": {
      "op": "ADD"
    },
    "601": {
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x140"
    },
    "604": {
      "op": "JUMP"
    },
    "605": {
      "offset": [
        3439,
        3479
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "606": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3439,
        3479
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x152"
    },
    "609": {
      "offset": [
        3472,
        3479
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0xF4240"
    },
    "613": {
      "offset": [
        3439,
        3479
      ],
      "op": "DUP2",
      "path": "2"
    },
    "614": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3439,
        3479
      ],
      "op": "JUMP",
      "path": "2"
    },
    "615": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19069,
        19216
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "616": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19069,
        19216
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x299"
    },
    "619": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19069,
        19216
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x275"
    },
    "622": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19069,
        19216
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "623": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19069,
        19216
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "625": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19069,
        19216
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCD0"
    },
    "628": {
      "fn": "MerkleResistor.getInitialized",
      "jump": "i",
      "offset": [
        19069,
        19216
      ],
      "op": "JUMP",
      "path": "2"
    },
    "629": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19069,
        19216
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "630": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19146,
        19150
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "632": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19191
      ],
      "op": "SWAP2",
      "path": "2",
      "statement": 1
    },
    "633": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19191
      ],
      "op": "DUP3",
      "path": "2"
    },
    "634": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19191
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "635": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19180
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "637": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19191
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "639": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19191
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "640": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19191
      ],
      "op": "DUP2",
      "path": "2"
    },
    "641": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19191
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "642": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19191
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "644": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19191
      ],
      "op": "DUP1",
      "path": "2"
    },
    "645": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19191
      ],
      "op": "DUP5",
      "path": "2"
    },
    "646": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19191
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "647": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19209
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "648": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19209
      ],
      "op": "DUP5",
      "path": "2"
    },
    "649": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19209
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "650": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19203
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x9"
    },
    "652": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19203
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "653": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19203
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "654": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19203
      ],
      "op": "ADD",
      "path": "2"
    },
    "655": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19209
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "656": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19209
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "657": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19209
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "658": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19209
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "659": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19209
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "660": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19209
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "662": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19209
      ],
      "op": "AND",
      "path": "2"
    },
    "663": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19169,
        19209
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "664": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19069,
        19216
      ],
      "op": "JUMP",
      "path": "2"
    },
    "665": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19069,
        19216
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "666": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19069,
        19216
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "668": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19069,
        19216
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "669": {
      "op": "SWAP1"
    },
    "670": {
      "op": "ISZERO"
    },
    "671": {
      "op": "ISZERO"
    },
    "672": {
      "op": "DUP2"
    },
    "673": {
      "op": "MSTORE"
    },
    "674": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "676": {
      "op": "ADD"
    },
    "677": {
      "fn": "MerkleResistor.getInitialized",
      "offset": [
        19069,
        19216
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x140"
    },
    "680": {
      "op": "JUMP"
    },
    "681": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "682": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x173"
    },
    "685": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2B7"
    },
    "688": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "689": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "691": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE3A"
    },
    "694": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        5588,
        6664
      ],
      "op": "JUMP",
      "path": "2"
    },
    "695": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "696": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9AC"
    },
    "699": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        5588,
        6664
      ],
      "op": "JUMP",
      "path": "2"
    },
    "700": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7039,
        8579
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "701": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7039,
        8579
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x173"
    },
    "704": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7039,
        8579
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2CA"
    },
    "707": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7039,
        8579
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "708": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7039,
        8579
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "710": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7039,
        8579
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCD0"
    },
    "713": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        7039,
        8579
      ],
      "op": "JUMP",
      "path": "2"
    },
    "714": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7039,
        8579
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "715": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7039,
        8579
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAC2"
    },
    "718": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        7039,
        8579
      ],
      "op": "JUMP",
      "path": "2"
    },
    "719": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12045,
        14827
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "720": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12115,
        12138
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "722": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12141,
        12163
      ],
      "op": "DUP3",
      "path": "2"
    },
    "723": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12141,
        12163
      ],
      "op": "DUP2",
      "path": "2"
    },
    "724": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12141,
        12163
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "725": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12141,
        12152
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "727": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12141,
        12163
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "729": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12141,
        12163
      ],
      "op": "DUP2",
      "path": "2"
    },
    "730": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12141,
        12163
      ],
      "op": "DUP2",
      "path": "2"
    },
    "731": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12141,
        12163
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "732": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12141,
        12163
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "734": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12141,
        12163
      ],
      "op": "DUP1",
      "path": "2"
    },
    "735": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12141,
        12163
      ],
      "op": "DUP5",
      "path": "2"
    },
    "736": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12141,
        12163
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "737": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12199,
        12226
      ],
      "op": "DUP6",
      "path": "2"
    },
    "738": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12199,
        12226
      ],
      "op": "DUP6",
      "path": "2"
    },
    "739": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12199,
        12226
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "740": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12199,
        12212
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x8"
    },
    "742": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12199,
        12212
      ],
      "op": "DUP2",
      "path": "2"
    },
    "743": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12199,
        12212
      ],
      "op": "ADD",
      "path": "2"
    },
    "744": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12199,
        12226
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "745": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12199,
        12226
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "746": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12199,
        12226
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "747": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12199,
        12226
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "748": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12199,
        12226
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "749": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12199,
        12226
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "750": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12310,
        12328
      ],
      "op": "SWAP1",
      "path": "2",
      "statement": 2
    },
    "751": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12310,
        12328
      ],
      "op": "DUP2",
      "path": "2"
    },
    "752": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12310,
        12328
      ],
      "op": "ADD",
      "path": "2"
    },
    "753": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12310,
        12328
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "754": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12306,
        12412
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x31D"
    },
    "757": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12306,
        12412
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "758": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "760": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "761": {
      "op": "PUSH4",
      "value": "0xC0859153"
    },
    "766": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "768": {
      "op": "SHL"
    },
    "769": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "DUP2",
      "path": "2"
    },
    "770": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "771": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "773": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "DUP2",
      "path": "2"
    },
    "774": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "ADD",
      "path": "2"
    },
    "775": {
      "op": "DUP6"
    },
    "776": {
      "op": "SWAP1"
    },
    "777": {
      "op": "MSTORE"
    },
    "778": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "780": {
      "op": "DUP2"
    },
    "781": {
      "op": "ADD"
    },
    "782": {
      "op": "DUP5"
    },
    "783": {
      "op": "SWAP1"
    },
    "784": {
      "op": "MSTORE"
    },
    "785": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "787": {
      "op": "ADD"
    },
    "788": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "789": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "791": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "792": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "DUP1",
      "path": "2"
    },
    "793": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "794": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "SUB",
      "path": "2"
    },
    "795": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "796": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12356,
        12401
      ],
      "op": "REVERT",
      "path": "2"
    },
    "797": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12306,
        12412
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "798": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12468,
        12488
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 3,
      "value": "0x2"
    },
    "800": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12468,
        12488
      ],
      "op": "DUP2",
      "path": "2"
    },
    "801": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12468,
        12488
      ],
      "op": "ADD",
      "path": "2"
    },
    "802": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12468,
        12488
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "803": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12464,
        12564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x349"
    },
    "806": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12464,
        12564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "807": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12516,
        12553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "809": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12516,
        12553
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "810": {
      "op": "PUSH4",
      "value": "0x18C0DC67"
    },
    "815": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "817": {
      "op": "SHL"
    },
    "818": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12516,
        12553
      ],
      "op": "DUP2",
      "path": "2"
    },
    "819": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12516,
        12553
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "820": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12516,
        12553
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "822": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12516,
        12553
      ],
      "op": "DUP2",
      "path": "2"
    },
    "823": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12516,
        12553
      ],
      "op": "ADD",
      "path": "2"
    },
    "824": {
      "op": "DUP6"
    },
    "825": {
      "op": "SWAP1"
    },
    "826": {
      "op": "MSTORE"
    },
    "827": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "829": {
      "op": "DUP2"
    },
    "830": {
      "op": "ADD"
    },
    "831": {
      "op": "DUP5"
    },
    "832": {
      "op": "SWAP1"
    },
    "833": {
      "op": "MSTORE"
    },
    "834": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "836": {
      "op": "ADD"
    },
    "837": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12516,
        12553
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x314"
    },
    "840": {
      "op": "JUMP"
    },
    "841": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12464,
        12564
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "842": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12574,
        12596
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "844": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12740,
        12747
      ],
      "op": "DUP2",
      "path": "2"
    },
    "845": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12740,
        12755
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "847": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12740,
        12755
      ],
      "op": "ADD",
      "path": "2"
    },
    "848": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12740,
        12755
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "849": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12721,
        12736
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "850": {
      "branch": 39,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12721,
        12755
      ],
      "op": "LT",
      "path": "2"
    },
    "851": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12717,
        13091
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x361"
    },
    "854": {
      "branch": 39,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12717,
        13091
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "855": {
      "op": "POP"
    },
    "856": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12791,
        12811
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 4,
      "value": "0x2"
    },
    "858": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12791,
        12811
      ],
      "op": "DUP2",
      "path": "2"
    },
    "859": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12791,
        12811
      ],
      "op": "ADD",
      "path": "2"
    },
    "860": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12791,
        12811
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "861": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12717,
        13091
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x382"
    },
    "864": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12717,
        13091
      ],
      "op": "JUMP",
      "path": "2"
    },
    "865": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12717,
        13091
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "866": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13058,
        13080
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 5,
      "value": "0x5"
    },
    "868": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13058,
        13080
      ],
      "op": "DUP3",
      "path": "2"
    },
    "869": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13058,
        13080
      ],
      "op": "ADD",
      "path": "2"
    },
    "870": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13058,
        13080
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "871": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13028,
        13054
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "873": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13028,
        13054
      ],
      "op": "DUP4",
      "path": "2"
    },
    "874": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13028,
        13054
      ],
      "op": "ADD",
      "path": "2"
    },
    "875": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13028,
        13054
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "876": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13010,
        13054
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x375"
    },
    "879": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13010,
        13054
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "880": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13010,
        13025
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "881": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13010,
        13054
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBC"
    },
    "884": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        13010,
        13054
      ],
      "op": "JUMP",
      "path": "2"
    },
    "885": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13010,
        13054
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "886": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13009,
        13080
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x37F"
    },
    "889": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13009,
        13080
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "890": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13009,
        13080
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "891": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13009,
        13080
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xED3"
    },
    "894": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        13009,
        13080
      ],
      "op": "JUMP",
      "path": "2"
    },
    "895": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13009,
        13080
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "896": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12989,
        13080
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "897": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12989,
        13080
      ],
      "op": "POP",
      "path": "2"
    },
    "898": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12717,
        13091
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "899": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13312,
        13327
      ],
      "op": "TIMESTAMP",
      "path": "2",
      "statement": 6
    },
    "900": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13283,
        13309
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "902": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13283,
        13309
      ],
      "op": "DUP4",
      "path": "2"
    },
    "903": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13283,
        13309
      ],
      "op": "ADD",
      "path": "2"
    },
    "904": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13283,
        13327
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "905": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13360,
        13377
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "907": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13360,
        13377
      ],
      "op": "DUP4",
      "path": "2"
    },
    "908": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13360,
        13377
      ],
      "op": "ADD",
      "path": "2"
    },
    "909": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13360,
        13377
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "910": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "912": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "913": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "918": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "920": {
      "op": "SHL"
    },
    "921": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "DUP2",
      "path": "2"
    },
    "922": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "923": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13433,
        13437
      ],
      "op": "ADDRESS",
      "path": "2"
    },
    "924": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "926": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "DUP3",
      "path": "2"
    },
    "927": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "ADD",
      "path": "2"
    },
    "928": {
      "op": "MSTORE"
    },
    "929": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "931": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "933": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "935": {
      "op": "SHL"
    },
    "936": {
      "op": "SUB"
    },
    "937": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13360,
        13377
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "938": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13360,
        13377
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "939": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13360,
        13377
      ],
      "op": "AND",
      "path": "2"
    },
    "940": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13360,
        13377
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "941": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13338,
        13350
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "943": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13338,
        13350
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "944": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13360,
        13377
      ],
      "op": "DUP3",
      "path": "2"
    },
    "945": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13360,
        13377
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "946": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13424
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x70A08231"
    },
    "951": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13424
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "952": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "954": {
      "op": "ADD"
    },
    "955": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "957": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "959": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "960": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "DUP1",
      "path": "2"
    },
    "961": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "DUP4",
      "path": "2"
    },
    "962": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "SUB",
      "path": "2"
    },
    "963": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "DUP2",
      "path": "2"
    },
    "964": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "DUP7",
      "path": "2"
    },
    "965": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "GAS",
      "path": "2"
    },
    "966": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "STATICCALL",
      "path": "2"
    },
    "967": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "968": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "DUP1",
      "path": "2"
    },
    "969": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "970": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3D7"
    },
    "973": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "974": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "975": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "977": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "DUP1",
      "path": "2"
    },
    "978": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "979": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "980": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "982": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "REVERT",
      "path": "2"
    },
    "983": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "984": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "POP",
      "path": "2"
    },
    "985": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "POP",
      "path": "2"
    },
    "986": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "POP",
      "path": "2"
    },
    "987": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "POP",
      "path": "2"
    },
    "988": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "990": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "991": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "992": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "994": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "NOT",
      "path": "2"
    },
    "995": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "997": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "DUP3",
      "path": "2"
    },
    "998": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "ADD",
      "path": "2"
    },
    "999": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "AND",
      "path": "2"
    },
    "1000": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1001": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "ADD",
      "path": "2"
    },
    "1002": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1003": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1005": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1006": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "POP",
      "path": "2"
    },
    "1007": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1008": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "ADD",
      "path": "2"
    },
    "1009": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1010": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3FB"
    },
    "1013": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1014": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1015": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF2"
    },
    "1018": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        13409,
        13439
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1019": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13409,
        13439
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1020": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14102,
        14119
      ],
      "op": "DUP5",
      "path": "2",
      "statement": 7
    },
    "1021": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14102,
        14119
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1022": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1024": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1025": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "1030": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1032": {
      "op": "SHL"
    },
    "1033": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1034": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1035": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1037": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1039": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1041": {
      "op": "SHL"
    },
    "1042": {
      "op": "SUB"
    },
    "1043": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14102,
        14119
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1044": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14102,
        14119
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1045": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14102,
        14119
      ],
      "op": "AND",
      "path": "2"
    },
    "1046": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1048": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1049": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "ADD",
      "path": "2"
    },
    "1050": {
      "op": "MSTORE"
    },
    "1051": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1053": {
      "op": "DUP2"
    },
    "1054": {
      "op": "ADD"
    },
    "1055": {
      "op": "DUP7"
    },
    "1056": {
      "op": "SWAP1"
    },
    "1057": {
      "op": "MSTORE"
    },
    "1058": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13388,
        13439
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1059": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13388,
        13439
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1060": {
      "op": "POP"
    },
    "1061": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14101
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1062": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14101
      ],
      "op": "AND",
      "path": "2"
    },
    "1063": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14101
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1064": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14101
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xA9059CBB"
    },
    "1069": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14101
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1070": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1072": {
      "op": "ADD"
    },
    "1073": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1075": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1077": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1078": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1079": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1080": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "SUB",
      "path": "2"
    },
    "1081": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1082": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1084": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1085": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "GAS",
      "path": "2"
    },
    "1086": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "CALL",
      "path": "2"
    },
    "1087": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1088": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1089": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1090": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x44F"
    },
    "1093": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1094": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1095": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1097": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1098": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "1099": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1100": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1102": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1103": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1104": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "POP",
      "path": "2"
    },
    "1105": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "POP",
      "path": "2"
    },
    "1106": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "POP",
      "path": "2"
    },
    "1107": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "POP",
      "path": "2"
    },
    "1108": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1110": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1111": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1112": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1114": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "NOT",
      "path": "2"
    },
    "1115": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1117": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1118": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "ADD",
      "path": "2"
    },
    "1119": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "AND",
      "path": "2"
    },
    "1120": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1121": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "ADD",
      "path": "2"
    },
    "1122": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1123": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1125": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1126": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "POP",
      "path": "2"
    },
    "1127": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1128": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "ADD",
      "path": "2"
    },
    "1129": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1130": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x473"
    },
    "1133": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1134": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1135": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF0B"
    },
    "1138": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        14087,
        14139
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1139": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14087,
        14139
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1140": {
      "op": "POP"
    },
    "1141": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1143": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1144": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "1149": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1151": {
      "op": "SHL"
    },
    "1152": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1153": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1154": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14285,
        14289
      ],
      "op": "ADDRESS",
      "path": "2"
    },
    "1155": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1157": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1158": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "ADD",
      "path": "2"
    },
    "1159": {
      "op": "MSTORE"
    },
    "1160": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14241,
        14258
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1162": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14241,
        14258
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1163": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1165": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1167": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1169": {
      "op": "SHL"
    },
    "1170": {
      "op": "SUB"
    },
    "1171": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14276
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1172": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14276
      ],
      "op": "AND",
      "path": "2"
    },
    "1173": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14276
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1174": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14276
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x70A08231"
    },
    "1179": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14276
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1180": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1182": {
      "op": "ADD"
    },
    "1183": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1185": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1187": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1188": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1189": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1190": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "SUB",
      "path": "2"
    },
    "1191": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1192": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1193": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "GAS",
      "path": "2"
    },
    "1194": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "STATICCALL",
      "path": "2"
    },
    "1195": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1196": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1197": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1198": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4BB"
    },
    "1201": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1202": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1203": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1205": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1206": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "1207": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1208": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1210": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1211": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1212": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "POP",
      "path": "2"
    },
    "1213": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "POP",
      "path": "2"
    },
    "1214": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "POP",
      "path": "2"
    },
    "1215": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "POP",
      "path": "2"
    },
    "1216": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1218": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1219": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1220": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1222": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "NOT",
      "path": "2"
    },
    "1223": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1225": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1226": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "ADD",
      "path": "2"
    },
    "1227": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "AND",
      "path": "2"
    },
    "1228": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1229": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "ADD",
      "path": "2"
    },
    "1230": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1231": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1233": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1234": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "POP",
      "path": "2"
    },
    "1235": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1236": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "ADD",
      "path": "2"
    },
    "1237": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1238": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4DF"
    },
    "1241": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1242": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1243": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF2"
    },
    "1246": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        14261,
        14291
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1247": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14261,
        14291
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1248": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14241,
        14291
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1249": {
      "op": "POP"
    },
    "1250": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14301,
        14310
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1252": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14313,
        14341
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4ED"
    },
    "1255": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14241,
        14291
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1256": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14313,
        14326
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1257": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14313,
        14341
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBC"
    },
    "1260": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        14313,
        14341
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1261": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14313,
        14341
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1262": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14301,
        14341
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1263": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14301,
        14341
      ],
      "op": "POP",
      "path": "2"
    },
    "1264": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14564,
        14568
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 8
    },
    "1265": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14547
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1266": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14560
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1268": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14560
      ],
      "op": "ADD",
      "path": "2"
    },
    "1269": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14560
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1271": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1272": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1273": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1274": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x503"
    },
    "1277": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1278": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1279": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBC"
    },
    "1282": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        14540,
        14568
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1283": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1284": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1285": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "POP",
      "path": "2"
    },
    "1286": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "POP",
      "path": "2"
    },
    "1287": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1288": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1289": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1290": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14540,
        14568
      ],
      "op": "POP",
      "path": "2"
    },
    "1291": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14724,
        14728
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 9
    },
    "1292": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14707
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1293": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14720
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "1295": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14720
      ],
      "op": "ADD",
      "path": "2"
    },
    "1296": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14720
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1298": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14728
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1299": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14728
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1300": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14728
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1301": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14728
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x51E"
    },
    "1304": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14728
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1305": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14728
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1306": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14728
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBC"
    },
    "1309": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        14703,
        14728
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1310": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14728
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1311": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14728
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1312": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14728
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1313": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14703,
        14728
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1314": {
      "op": "POP"
    },
    "1315": {
      "op": "POP"
    },
    "1316": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14774,
        14791
      ],
      "op": "DUP6",
      "path": "2",
      "statement": 10
    },
    "1317": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14774,
        14791
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1318": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14799,
        14819
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1320": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14799,
        14819
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1321": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14799,
        14819
      ],
      "op": "ADD",
      "path": "2"
    },
    "1322": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14799,
        14819
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1323": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14744,
        14820
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1325": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14744,
        14820
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1326": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1328": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1330": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1332": {
      "op": "SHL"
    },
    "1333": {
      "op": "SUB"
    },
    "1334": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14774,
        14791
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1335": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14774,
        14791
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1336": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14774,
        14791
      ],
      "op": "AND",
      "path": "2"
    },
    "1337": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14774,
        14791
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1338": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14763,
        14772
      ],
      "op": "DUP12",
      "path": "2"
    },
    "1339": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14763,
        14772
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1340": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14744,
        14820
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x1680E4CFE90468085407EF2B599DBE94B0AA30FF9F180F0E41D22EB71C872872"
    },
    "1373": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14744,
        14820
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1374": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14744,
        14820
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x56F"
    },
    "1377": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14744,
        14820
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1378": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14793,
        14797
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1379": {
      "op": "DUP3"
    },
    "1380": {
      "op": "MSTORE"
    },
    "1381": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1383": {
      "op": "DUP3"
    },
    "1384": {
      "op": "ADD"
    },
    "1385": {
      "op": "MSTORE"
    },
    "1386": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1388": {
      "op": "ADD"
    },
    "1389": {
      "op": "SWAP1"
    },
    "1390": {
      "op": "JUMP"
    },
    "1391": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14744,
        14820
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1392": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14744,
        14820
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1394": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14744,
        14820
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1395": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14744,
        14820
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1396": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14744,
        14820
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1397": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14744,
        14820
      ],
      "op": "SUB",
      "path": "2"
    },
    "1398": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14744,
        14820
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1399": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14744,
        14820
      ],
      "op": "LOG3",
      "path": "2"
    },
    "1400": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12105,
        14827
      ],
      "op": "POP",
      "path": "2"
    },
    "1401": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12105,
        14827
      ],
      "op": "POP",
      "path": "2"
    },
    "1402": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12105,
        14827
      ],
      "op": "POP",
      "path": "2"
    },
    "1403": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12105,
        14827
      ],
      "op": "POP",
      "path": "2"
    },
    "1404": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12105,
        14827
      ],
      "op": "POP",
      "path": "2"
    },
    "1405": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12105,
        14827
      ],
      "op": "POP",
      "path": "2"
    },
    "1406": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12105,
        14827
      ],
      "op": "POP",
      "path": "2"
    },
    "1407": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12045,
        14827
      ],
      "op": "POP",
      "path": "2"
    },
    "1408": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12045,
        14827
      ],
      "op": "POP",
      "path": "2"
    },
    "1409": {
      "fn": "MerkleResistor.withdraw",
      "jump": "o",
      "offset": [
        12045,
        14827
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1410": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1411": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15874,
        15878
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1413": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15880,
        15884
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1414": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15886,
        15890
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1416": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15892,
        15896
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1417": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16042,
        16050
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1419": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16042,
        16050
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1420": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16030,
        16039
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1421": {
      "branch": 40,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16030,
        16050
      ],
      "op": "GT",
      "path": "2"
    },
    "1422": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16026,
        16100
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1423": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16026,
        16100
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5A3"
    },
    "1426": {
      "branch": 40,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16026,
        16100
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1427": {
      "op": "POP"
    },
    "1428": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16074,
        16079
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 11,
      "value": "0x0"
    },
    "1430": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16074,
        16079
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1431": {
      "op": "POP"
    },
    "1432": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16074,
        16079
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1433": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16074,
        16079
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1434": {
      "op": "POP"
    },
    "1435": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16074,
        16079
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1436": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16074,
        16079
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1437": {
      "op": "POP"
    },
    "1438": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16074,
        16079
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1439": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16066,
        16089
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6C8"
    },
    "1442": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16066,
        16089
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1443": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16026,
        16100
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1444": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16205,
        16228
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1446": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16231,
        16253
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1447": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16231,
        16253
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1448": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16231,
        16253
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1449": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16231,
        16242
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1451": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16231,
        16253
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1453": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16231,
        16253
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1454": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16231,
        16253
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1456": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16231,
        16253
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1457": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16231,
        16253
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1458": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16370,
        16385
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "1460": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16370,
        16385
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1461": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16370,
        16385
      ],
      "op": "ADD",
      "path": "2"
    },
    "1462": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16370,
        16385
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1463": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16356,
        16385
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1464": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16356,
        16385
      ],
      "op": "GT",
      "path": "2"
    },
    "1465": {
      "branch": 41,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16356,
        16385
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1466": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16356,
        16418
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5C6"
    },
    "1469": {
      "branch": 41,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16356,
        16418
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1470": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16356,
        16418
      ],
      "op": "POP",
      "path": "2"
    },
    "1471": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16403,
        16407
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1472": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16403,
        16418
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1474": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16403,
        16418
      ],
      "op": "ADD",
      "path": "2"
    },
    "1475": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16403,
        16418
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1476": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16389,
        16400
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1477": {
      "branch": 42,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16389,
        16418
      ],
      "op": "LT",
      "path": "2"
    },
    "1478": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16356,
        16418
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1479": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16352,
        16468
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1480": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16352,
        16468
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5DF"
    },
    "1483": {
      "branch": 42,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16352,
        16468
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1484": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16442,
        16447
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 12,
      "value": "0x0"
    },
    "1486": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16449,
        16450
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1487": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16452,
        16453
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1489": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16455,
        16456
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1490": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16457
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1491": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16457
      ],
      "op": "POP",
      "path": "2"
    },
    "1492": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16457
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1493": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16457
      ],
      "op": "POP",
      "path": "2"
    },
    "1494": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16457
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1495": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16457
      ],
      "op": "POP",
      "path": "2"
    },
    "1496": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16457
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1497": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16457
      ],
      "op": "POP",
      "path": "2"
    },
    "1498": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16457
      ],
      "op": "POP",
      "path": "2"
    },
    "1499": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16457
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6C8"
    },
    "1502": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16457
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1503": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16352,
        16468
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1504": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16478,
        16493
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1506": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16522,
        16526
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1507": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16522,
        16537
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "1509": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16522,
        16537
      ],
      "op": "ADD",
      "path": "2"
    },
    "1510": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16522,
        16537
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1511": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16507,
        16518
      ],
      "op": "DUP10",
      "path": "2"
    },
    "1512": {
      "branch": 43,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16507,
        16537
      ],
      "op": "EQ",
      "path": "2"
    },
    "1513": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16503,
        17807
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1514": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16503,
        17807
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5F4"
    },
    "1517": {
      "branch": 43,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16503,
        17807
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1518": {
      "op": "POP"
    },
    "1519": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16723,
        16739
      ],
      "op": "DUP6",
      "path": "2",
      "statement": 13
    },
    "1520": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16503,
        17807
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x665"
    },
    "1523": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16503,
        17807
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1524": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16503,
        17807
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1525": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17414,
        17431
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1527": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17505,
        17509
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1528": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17505,
        17520
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1530": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17505,
        17520
      ],
      "op": "ADD",
      "path": "2"
    },
    "1531": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17505,
        17520
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1532": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17487,
        17491
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1533": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17487,
        17502
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "1535": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17487,
        17502
      ],
      "op": "ADD",
      "path": "2"
    },
    "1536": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17487,
        17502
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1537": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17487,
        17520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x60A"
    },
    "1540": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17487,
        17520
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1541": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17487,
        17520
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1542": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17487,
        17520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBC"
    },
    "1545": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17487,
        17520
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1546": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17487,
        17520
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1547": {
      "offset": [
        3472,
        3479
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0xF4240"
    },
    "1551": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17435,
        17470
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x618"
    },
    "1554": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17454,
        17470
      ],
      "op": "DUP12",
      "path": "2"
    },
    "1555": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17435,
        17451
      ],
      "op": "DUP12",
      "path": "2"
    },
    "1556": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17435,
        17470
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBC"
    },
    "1559": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17435,
        17470
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1560": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17435,
        17470
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1561": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17434,
        17483
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x622"
    },
    "1564": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17434,
        17483
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1565": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17434,
        17483
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1566": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17434,
        17483
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xED3"
    },
    "1569": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17434,
        17483
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1570": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17434,
        17483
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1571": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17434,
        17521
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x62C"
    },
    "1574": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17434,
        17521
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1575": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17434,
        17521
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1576": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17434,
        17521
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF34"
    },
    "1579": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17434,
        17521
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1580": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17434,
        17521
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1581": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17414,
        17521
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1582": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17414,
        17521
      ],
      "op": "POP",
      "path": "2"
    },
    "1583": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17780,
        17796
      ],
      "op": "DUP9",
      "path": "2",
      "statement": 14
    },
    "1584": {
      "offset": [
        3472,
        3479
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0xF4240"
    },
    "1588": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17748,
        17752
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1589": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17748,
        17763
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1591": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17748,
        17763
      ],
      "op": "ADD",
      "path": "2"
    },
    "1592": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17748,
        17763
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1593": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17734,
        17745
      ],
      "op": "DUP13",
      "path": "2"
    },
    "1594": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17734,
        17763
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x643"
    },
    "1597": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17734,
        17763
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1598": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17734,
        17763
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1599": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17734,
        17763
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBC"
    },
    "1602": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17734,
        17763
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1603": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17734,
        17763
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1604": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17718,
        17764
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x64D"
    },
    "1607": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17718,
        17764
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1608": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17718,
        17730
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1609": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17718,
        17764
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xED3"
    },
    "1612": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17718,
        17764
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1613": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17718,
        17764
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1614": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17718,
        17776
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x657"
    },
    "1617": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17718,
        17776
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1618": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17718,
        17776
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1619": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17718,
        17776
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF34"
    },
    "1622": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17718,
        17776
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1623": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17718,
        17776
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1624": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17717,
        17796
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x661"
    },
    "1627": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17717,
        17796
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1628": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17717,
        17796
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1629": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17717,
        17796
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF56"
    },
    "1632": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17717,
        17796
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1633": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17717,
        17796
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1634": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17704,
        17796
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1635": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17704,
        17796
      ],
      "op": "POP",
      "path": "2"
    },
    "1636": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16756,
        17807
      ],
      "op": "POP",
      "path": "2"
    },
    "1637": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16503,
        17807
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1638": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18268,
        18287
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1640": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18338,
        18355
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x672"
    },
    "1643": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18338,
        18349
      ],
      "op": "DUP11",
      "path": "2"
    },
    "1644": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18352,
        18355
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "1646": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18338,
        18355
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xED3"
    },
    "1649": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        18338,
        18355
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1650": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18338,
        18355
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1651": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18317,
        18332
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1653": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18317,
        18332
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1654": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18317,
        18332
      ],
      "op": "ADD",
      "path": "2"
    },
    "1655": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18317,
        18332
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1656": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18305,
        18332
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x682"
    },
    "1659": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18305,
        18332
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1660": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18310,
        18313
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "1662": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18305,
        18332
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBC"
    },
    "1665": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        18305,
        18332
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1666": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18305,
        18332
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1667": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18291,
        18333
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x68C"
    },
    "1670": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18291,
        18333
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1671": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18291,
        18301
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1672": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18291,
        18333
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xED3"
    },
    "1675": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        18291,
        18333
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1676": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18291,
        18333
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1677": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18290,
        18356
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x696"
    },
    "1680": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18290,
        18356
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1681": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18290,
        18356
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1682": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18290,
        18356
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF34"
    },
    "1685": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        18290,
        18356
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1686": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18290,
        18356
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1687": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18268,
        18356
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1688": {
      "op": "POP"
    },
    "1689": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18532,
        18546
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1691": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18582,
        18609
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6A4"
    },
    "1694": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18268,
        18356
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1695": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18582,
        18592
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1696": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18582,
        18609
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF34"
    },
    "1699": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        18582,
        18609
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1700": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18582,
        18609
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1701": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18549,
        18578
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6AE"
    },
    "1704": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18567,
        18578
      ],
      "op": "DUP13",
      "path": "2"
    },
    "1705": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18549,
        18564
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "1706": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18549,
        18578
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF56"
    },
    "1709": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        18549,
        18578
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1710": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18549,
        18578
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1711": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18549,
        18610
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6B8"
    },
    "1714": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18549,
        18610
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1715": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18549,
        18610
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1716": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18549,
        18610
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBC"
    },
    "1719": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        18549,
        18610
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1720": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18549,
        18610
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1721": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18629,
        18633
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 15,
      "value": "0x1"
    },
    "1723": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18629,
        18633
      ],
      "op": "SWAP9",
      "path": "2"
    },
    "1724": {
      "op": "POP"
    },
    "1725": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18635,
        18645
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1726": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18635,
        18645
      ],
      "op": "SWAP7",
      "path": "2"
    },
    "1727": {
      "op": "POP"
    },
    "1728": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18647,
        18661
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1729": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18647,
        18661
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1730": {
      "op": "POP"
    },
    "1731": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18532,
        18610
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1732": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18532,
        18610
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1733": {
      "op": "POP"
    },
    "1734": {
      "op": "POP"
    },
    "1735": {
      "op": "POP"
    },
    "1736": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1737": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1738": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "POP",
      "path": "2"
    },
    "1739": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1740": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "POP",
      "path": "2"
    },
    "1741": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1742": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "POP",
      "path": "2"
    },
    "1743": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1744": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1745": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15742,
        18680
      ],
      "op": "POP",
      "path": "2"
    },
    "1746": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "o",
      "offset": [
        15742,
        18680
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1747": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9463,
        11611
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1748": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9646,
        9650
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1750": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9666,
        9680
      ],
      "op": "DUP6",
      "path": "2",
      "statement": 16
    },
    "1751": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9666,
        9680
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1752": {
      "branch": 44,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9666,
        9680
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1753": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9666,
        9704
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6E3"
    },
    "1756": {
      "branch": 44,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9666,
        9704
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1757": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9666,
        9704
      ],
      "op": "POP",
      "path": "2"
    },
    "1758": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9696,
        9704
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1760": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9696,
        9704
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1761": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9684,
        9693
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1762": {
      "branch": 45,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9684,
        9704
      ],
      "op": "GT",
      "path": "2"
    },
    "1763": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9666,
        9704
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1764": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9662,
        9761
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1765": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9662,
        9761
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x704"
    },
    "1768": {
      "branch": 45,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9662,
        9761
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1769": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9727,
        9750
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1771": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9727,
        9750
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1772": {
      "op": "PUSH4",
      "value": "0x190A97AD"
    },
    "1777": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1779": {
      "op": "SHL"
    },
    "1780": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9727,
        9750
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1781": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9727,
        9750
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1782": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9727,
        9750
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1784": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9727,
        9750
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1785": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9727,
        9750
      ],
      "op": "ADD",
      "path": "2"
    },
    "1786": {
      "op": "DUP8"
    },
    "1787": {
      "op": "SWAP1"
    },
    "1788": {
      "op": "MSTORE"
    },
    "1789": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1791": {
      "op": "ADD"
    },
    "1792": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9727,
        9750
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x314"
    },
    "1795": {
      "op": "JUMP"
    },
    "1796": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9662,
        9761
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1797": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9771,
        9794
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1799": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9797,
        9819
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1800": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9797,
        9819
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1801": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9797,
        9819
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1802": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9797,
        9808
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1804": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9797,
        9819
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1806": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9797,
        9819
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1807": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9797,
        9819
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1808": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9797,
        9819
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1809": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9797,
        9819
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1811": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9797,
        9819
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1812": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9797,
        9819
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1813": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9797,
        9819
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1814": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1815": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1816": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9928,
        9938
      ],
      "op": "CALLER",
      "path": "2"
    },
    "1817": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1818": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1819": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "ADD",
      "path": "2"
    },
    "1820": {
      "op": "MSTORE"
    },
    "1821": {
      "op": "DUP1"
    },
    "1822": {
      "op": "DUP4"
    },
    "1823": {
      "op": "ADD"
    },
    "1824": {
      "op": "DUP10"
    },
    "1825": {
      "op": "SWAP1"
    },
    "1826": {
      "op": "MSTORE"
    },
    "1827": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1829": {
      "op": "DUP1"
    },
    "1830": {
      "op": "DUP3"
    },
    "1831": {
      "op": "ADD"
    },
    "1832": {
      "op": "DUP10"
    },
    "1833": {
      "op": "SWAP1"
    },
    "1834": {
      "op": "MSTORE"
    },
    "1835": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1836": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1837": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1838": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1839": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "SUB",
      "path": "2"
    },
    "1840": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1841": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1842": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "ADD",
      "path": "2"
    },
    "1843": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1844": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1845": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1847": {
      "op": "SWAP1"
    },
    "1848": {
      "op": "SWAP2"
    },
    "1849": {
      "op": "ADD"
    },
    "1850": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1851": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9975
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1852": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9907,
        9976
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1853": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9907,
        9976
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1854": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9907,
        9976
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1855": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9907,
        9976
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1856": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9907,
        9976
      ],
      "op": "ADD",
      "path": "2"
    },
    "1857": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9907,
        9976
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1858": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9991,
        10013
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 17
    },
    "1859": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9991,
        10013
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1860": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9991,
        10013
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1861": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9991,
        10007
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x9"
    },
    "1863": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9991,
        10007
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1864": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9991,
        10007
      ],
      "op": "ADD",
      "path": "2"
    },
    "1865": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9991,
        10013
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1866": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9991,
        10013
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1867": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9991,
        10013
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1868": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9991,
        10013
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1869": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9991,
        10013
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1870": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9991,
        10013
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1871": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9991,
        10013
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "1873": {
      "branch": 46,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9991,
        10013
      ],
      "op": "AND",
      "path": "2"
    },
    "1874": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9987,
        10082
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1875": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9987,
        10082
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x779"
    },
    "1878": {
      "branch": 46,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9987,
        10082
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1879": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10036,
        10071
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1881": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10036,
        10071
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1882": {
      "op": "PUSH4",
      "value": "0xA0B07031"
    },
    "1887": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1889": {
      "op": "SHL"
    },
    "1890": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10036,
        10071
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1891": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10036,
        10071
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1892": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10036,
        10071
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1894": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10036,
        10071
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1895": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10036,
        10071
      ],
      "op": "ADD",
      "path": "2"
    },
    "1896": {
      "op": "DUP10"
    },
    "1897": {
      "op": "SWAP1"
    },
    "1898": {
      "op": "MSTORE"
    },
    "1899": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1901": {
      "op": "DUP2"
    },
    "1902": {
      "op": "ADD"
    },
    "1903": {
      "op": "DUP3"
    },
    "1904": {
      "op": "SWAP1"
    },
    "1905": {
      "op": "MSTORE"
    },
    "1906": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1908": {
      "op": "ADD"
    },
    "1909": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10036,
        10071
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x314"
    },
    "1912": {
      "op": "JUMP"
    },
    "1913": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9987,
        10082
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1914": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10111
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 18
    },
    "1915": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10111
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1916": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1918": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1919": {
      "op": "PUSH4",
      "value": "0x2769CD1F"
    },
    "1924": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "1926": {
      "op": "SHL"
    },
    "1927": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1928": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1929": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10123
      ],
      "op": "PUSH20",
      "path": "2",
      "value": "0x0"
    },
    "1950": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10123
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1951": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10123
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x9DA7347C"
    },
    "1956": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10123
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1957": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7B5"
    },
    "1960": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1961": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10111
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1962": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10124,
        10128
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1963": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10124,
        10128
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1964": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10130,
        10135
      ],
      "op": "DUP10",
      "path": "2"
    },
    "1965": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10130,
        10135
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1966": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1968": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "ADD",
      "path": "2"
    },
    "1969": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF6E"
    },
    "1972": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        10096,
        10136
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1973": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1974": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1976": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1978": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1979": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1980": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1981": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "SUB",
      "path": "2"
    },
    "1982": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1983": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1984": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "GAS",
      "path": "2"
    },
    "1985": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "DELEGATECALL",
      "path": "2"
    },
    "1986": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1987": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1988": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1989": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7D2"
    },
    "1992": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1993": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1994": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1996": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1997": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "1998": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1999": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2001": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2002": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2003": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "POP",
      "path": "2"
    },
    "2004": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "POP",
      "path": "2"
    },
    "2005": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "POP",
      "path": "2"
    },
    "2006": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "POP",
      "path": "2"
    },
    "2007": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2009": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2010": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2011": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2013": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "NOT",
      "path": "2"
    },
    "2014": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2016": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2017": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "ADD",
      "path": "2"
    },
    "2018": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "AND",
      "path": "2"
    },
    "2019": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2020": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "ADD",
      "path": "2"
    },
    "2021": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2022": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2024": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2025": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "POP",
      "path": "2"
    },
    "2026": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2027": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "ADD",
      "path": "2"
    },
    "2028": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2029": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7F6"
    },
    "2032": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2033": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2034": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF0B"
    },
    "2037": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        10096,
        10136
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2038": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10096,
        10136
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2039": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10092,
        10211
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x819"
    },
    "2042": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10092,
        10211
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2043": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10177,
        10186
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2044": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10188,
        10192
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2045": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10194,
        10199
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2046": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10168,
        10200
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2048": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10168,
        10200
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2049": {
      "op": "PUSH4",
      "value": "0xDA5A8FD"
    },
    "2054": {
      "op": "PUSH1",
      "value": "0xE4"
    },
    "2056": {
      "op": "SHL"
    },
    "2057": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10168,
        10200
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2058": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10168,
        10200
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2059": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10168,
        10200
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2061": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10168,
        10200
      ],
      "op": "ADD",
      "path": "2"
    },
    "2062": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10168,
        10200
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x314"
    },
    "2065": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10168,
        10200
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "2066": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10168,
        10200
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2067": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10168,
        10200
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2068": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10168,
        10200
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2069": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10168,
        10200
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF6E"
    },
    "2072": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        10168,
        10200
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2073": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10092,
        10211
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2074": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10222,
        10232
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2076": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10234,
        10249
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2077": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10251,
        10270
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2079": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10272,
        10286
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2080": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10290,
        10371
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x82B"
    },
    "2083": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10312,
        10321
      ],
      "op": "DUP13",
      "path": "2"
    },
    "2084": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10323,
        10334
      ],
      "op": "DUP13",
      "path": "2"
    },
    "2085": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10336,
        10352
      ],
      "op": "DUP13",
      "path": "2"
    },
    "2086": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10354,
        10370
      ],
      "op": "DUP13",
      "path": "2"
    },
    "2087": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10290,
        10311
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x582"
    },
    "2090": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        10290,
        10371
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2091": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10290,
        10371
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2092": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10221,
        10371
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2093": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10221,
        10371
      ],
      "op": "SWAP7",
      "path": "2"
    },
    "2094": {
      "op": "POP"
    },
    "2095": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10221,
        10371
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2096": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10221,
        10371
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2097": {
      "op": "POP"
    },
    "2098": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10221,
        10371
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2099": {
      "op": "POP"
    },
    "2100": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10221,
        10371
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2101": {
      "op": "POP"
    },
    "2102": {
      "branch": 47,
      "fn": "MerkleResistor.initialize",
      "offset": [
        10386,
        10400
      ],
      "op": "DUP4",
      "path": "2",
      "statement": 19
    },
    "2103": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10382,
        10512
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x86B"
    },
    "2106": {
      "branch": 47,
      "fn": "MerkleResistor.initialize",
      "offset": [
        10382,
        10512
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2107": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10423,
        10501
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2109": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10423,
        10501
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2110": {
      "op": "PUSH4",
      "value": "0x23F43453"
    },
    "2115": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2117": {
      "op": "SHL"
    },
    "2118": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10423,
        10501
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2119": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10423,
        10501
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2120": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10423,
        10501
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2122": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10423,
        10501
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2123": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10423,
        10501
      ],
      "op": "ADD",
      "path": "2"
    },
    "2124": {
      "op": "DUP14"
    },
    "2125": {
      "op": "SWAP1"
    },
    "2126": {
      "op": "MSTORE"
    },
    "2127": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2129": {
      "op": "DUP2"
    },
    "2130": {
      "op": "ADD"
    },
    "2131": {
      "op": "DUP13"
    },
    "2132": {
      "op": "SWAP1"
    },
    "2133": {
      "op": "MSTORE"
    },
    "2134": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2136": {
      "op": "DUP2"
    },
    "2137": {
      "op": "ADD"
    },
    "2138": {
      "op": "DUP12"
    },
    "2139": {
      "op": "SWAP1"
    },
    "2140": {
      "op": "MSTORE"
    },
    "2141": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2143": {
      "op": "DUP2"
    },
    "2144": {
      "op": "ADD"
    },
    "2145": {
      "op": "DUP11"
    },
    "2146": {
      "op": "SWAP1"
    },
    "2147": {
      "op": "MSTORE"
    },
    "2148": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2150": {
      "op": "ADD"
    },
    "2151": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10423,
        10501
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x314"
    },
    "2154": {
      "op": "JUMP"
    },
    "2155": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10382,
        10512
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2156": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10632
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 20,
      "value": "0x0"
    },
    "2158": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10632
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2159": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10632
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2160": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10632
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2161": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10626
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x9"
    },
    "2163": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10626
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2164": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10626
      ],
      "op": "ADD",
      "path": "2"
    },
    "2165": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10632
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2167": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10632
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2168": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10632
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2169": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10632
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2170": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10632
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2172": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10632
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2173": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10632
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2174": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10632
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2175": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10632
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2176": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10639
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2177": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10639
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2178": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2180": {
      "op": "NOT"
    },
    "2181": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10639
      ],
      "op": "AND",
      "path": "2"
    },
    "2182": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10635,
        10639
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2184": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10639
      ],
      "op": "OR",
      "path": "2"
    },
    "2185": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10639
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2186": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10610,
        10639
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2187": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 21
    },
    "2188": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2189": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "2191": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2192": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2193": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2194": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2195": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10902,
        10912
      ],
      "op": "CALLER",
      "path": "2"
    },
    "2196": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2197": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2198": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2199": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2200": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2201": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2202": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2203": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2204": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2205": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2206": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2207": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2208": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2209": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2210": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "2212": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2213": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2214": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2215": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2216": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2217": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2219": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2220": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2221": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11136,
        11165
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8B6"
    },
    "2224": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11154,
        11165
      ],
      "op": "DUP14",
      "path": "2"
    },
    "2225": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11136,
        11151
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "2226": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11136,
        11165
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF56"
    },
    "2229": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        11136,
        11165
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2230": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11136,
        11165
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2231": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2232": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2233": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2235": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2236": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11223,
        11237
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2237": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2238": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2239": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2241": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2242": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11291,
        11300
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2243": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2244": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2245": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10881,
        11408
      ],
      "op": "POP",
      "path": "2"
    },
    "2246": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10838
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2247": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10847
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x8"
    },
    "2249": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10847
      ],
      "op": "ADD",
      "path": "2"
    },
    "2250": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2252": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10850,
        10854
      ],
      "op": "DUP9",
      "path": "2"
    },
    "2253": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10850,
        10877
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x7"
    },
    "2255": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10850,
        10877
      ],
      "op": "ADD",
      "path": "2"
    },
    "2256": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10850,
        10877
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2258": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10848,
        10877
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2259": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10848,
        10877
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2260": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10848,
        10877
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8DC"
    },
    "2263": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10848,
        10877
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2264": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10848,
        10877
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFC3"
    },
    "2267": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        10848,
        10877
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2268": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10848,
        10877
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2269": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10848,
        10877
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2270": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10848,
        10877
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2271": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10848,
        10877
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2272": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10848,
        10877
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2273": {
      "op": "POP"
    },
    "2274": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2275": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2276": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2278": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2279": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2280": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "ADD",
      "path": "2"
    },
    "2281": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2282": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2283": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2284": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2285": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2287": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2288": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2289": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "ADD",
      "path": "2"
    },
    "2290": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2292": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        10878
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2293": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2294": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2295": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2296": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2297": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2299": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2301": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2303": {
      "op": "SHL"
    },
    "2304": {
      "op": "SUB"
    },
    "2305": {
      "op": "NOT"
    },
    "2306": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "AND",
      "path": "2"
    },
    "2307": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2309": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2311": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2313": {
      "op": "SHL"
    },
    "2314": {
      "op": "SUB"
    },
    "2315": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2316": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2317": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "AND",
      "path": "2"
    },
    "2318": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "OR",
      "path": "2"
    },
    "2319": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2320": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2321": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2322": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2323": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2324": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2325": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2327": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2328": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2329": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2330": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2331": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2332": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2333": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2334": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2336": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2337": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2338": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2339": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "2341": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2342": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2343": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2344": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "2346": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2347": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2348": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2349": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2351": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2352": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2353": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2354": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2356": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2357": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2358": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2359": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA0"
    },
    "2361": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2362": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2363": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2364": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "2366": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2367": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2368": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2369": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC0"
    },
    "2371": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2372": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "2373": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2374": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2375": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "2377": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2378": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "2379": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "ADD",
      "path": "2"
    },
    "2380": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2381": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2382": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2383": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10834,
        11408
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2384": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11454,
        11481
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 22,
      "value": "0x7"
    },
    "2386": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11454,
        11481
      ],
      "op": "DUP9",
      "path": "2"
    },
    "2387": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11454,
        11481
      ],
      "op": "ADD",
      "path": "2"
    },
    "2388": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11454,
        11481
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2389": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11424,
        11500
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2390": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11424,
        11500
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2391": {
      "op": "DUP8"
    },
    "2392": {
      "op": "DUP2"
    },
    "2393": {
      "op": "MSTORE"
    },
    "2394": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11483,
        11493
      ],
      "op": "CALLER",
      "path": "2"
    },
    "2395": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11483,
        11493
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2396": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11454,
        11481
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2397": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11443,
        11452
      ],
      "op": "DUP16",
      "path": "2"
    },
    "2398": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11443,
        11452
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2399": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11424,
        11500
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0xE937D08E98E81D14E69757213935A0CCAF856636FB06FDAFC51D7C78CC85E97D"
    },
    "2432": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11424,
        11500
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2433": {
      "op": "ADD"
    },
    "2434": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11424,
        11500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2436": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11424,
        11500
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2437": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11424,
        11500
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2438": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11424,
        11500
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2439": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11424,
        11500
      ],
      "op": "SUB",
      "path": "2"
    },
    "2440": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11424,
        11500
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2441": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11424,
        11500
      ],
      "op": "LOG4",
      "path": "2"
    },
    "2442": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11511,
        11559
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 23,
      "value": "0x997"
    },
    "2445": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11520,
        11529
      ],
      "op": "DUP13",
      "path": "2"
    },
    "2446": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11531,
        11535
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2447": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11531,
        11558
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x7"
    },
    "2449": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11531,
        11558
      ],
      "op": "ADD",
      "path": "2"
    },
    "2450": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11531,
        11558
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2451": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11511,
        11519
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2CF"
    },
    "2454": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        11511,
        11559
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2455": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11511,
        11559
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2456": {
      "op": "POP"
    },
    "2457": {
      "op": "POP"
    },
    "2458": {
      "op": "POP"
    },
    "2459": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11577,
        11604
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 24,
      "value": "0x7"
    },
    "2461": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11577,
        11604
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2462": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11577,
        11604
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2463": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11577,
        11604
      ],
      "op": "ADD",
      "path": "2"
    },
    "2464": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11577,
        11604
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2465": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11577,
        11604
      ],
      "op": "SWAP9",
      "path": "2"
    },
    "2466": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9463,
        11611
      ],
      "op": "SWAP8",
      "path": "2"
    },
    "2467": {
      "op": "POP"
    },
    "2468": {
      "op": "POP"
    },
    "2469": {
      "op": "POP"
    },
    "2470": {
      "op": "POP"
    },
    "2471": {
      "op": "POP"
    },
    "2472": {
      "op": "POP"
    },
    "2473": {
      "op": "POP"
    },
    "2474": {
      "op": "POP"
    },
    "2475": {
      "fn": "MerkleResistor.initialize",
      "jump": "o",
      "offset": [
        9463,
        11611
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2476": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2477": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5817,
        5820
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 25,
      "value": "0x64"
    },
    "2479": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5803,
        5813
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2480": {
      "branch": 48,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5803,
        5820
      ],
      "op": "LT",
      "path": "2"
    },
    "2481": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5799,
        5876
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9D0"
    },
    "2484": {
      "branch": 48,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5799,
        5876
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2485": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5843,
        5865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2487": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5843,
        5865
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2488": {
      "op": "PUSH4",
      "value": "0x78299B5"
    },
    "2493": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "2495": {
      "op": "SHL"
    },
    "2496": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5843,
        5865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2497": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5843,
        5865
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2498": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5843,
        5865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2500": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5843,
        5865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2501": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5843,
        5865
      ],
      "op": "ADD",
      "path": "2"
    },
    "2502": {
      "op": "DUP5"
    },
    "2503": {
      "op": "SWAP1"
    },
    "2504": {
      "op": "MSTORE"
    },
    "2505": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2507": {
      "op": "ADD"
    },
    "2508": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5843,
        5865
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x314"
    },
    "2511": {
      "op": "JUMP"
    },
    "2512": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5799,
        5876
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2513": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5904,
        5914
      ],
      "op": "DUP4",
      "path": "2",
      "statement": 26
    },
    "2514": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5890,
        5900
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2515": {
      "branch": 49,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5890,
        5914
      ],
      "op": "LT",
      "path": "2"
    },
    "2516": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5886,
        5987
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9FA"
    },
    "2519": {
      "branch": 49,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5886,
        5987
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2520": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5937,
        5976
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2522": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5937,
        5976
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2523": {
      "op": "PUSH4",
      "value": "0x6F30D757"
    },
    "2528": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "2530": {
      "op": "SHL"
    },
    "2531": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5937,
        5976
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2532": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5937,
        5976
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2533": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5937,
        5976
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2535": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5937,
        5976
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2536": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5937,
        5976
      ],
      "op": "ADD",
      "path": "2"
    },
    "2537": {
      "op": "DUP7"
    },
    "2538": {
      "op": "SWAP1"
    },
    "2539": {
      "op": "MSTORE"
    },
    "2540": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2542": {
      "op": "DUP2"
    },
    "2543": {
      "op": "ADD"
    },
    "2544": {
      "op": "DUP6"
    },
    "2545": {
      "op": "SWAP1"
    },
    "2546": {
      "op": "MSTORE"
    },
    "2547": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2549": {
      "op": "ADD"
    },
    "2550": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5937,
        5976
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x314"
    },
    "2553": {
      "op": "JUMP"
    },
    "2554": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5886,
        5987
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2555": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5997,
        6020
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2557": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6034
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2559": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2561": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6037,
        6045
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2562": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6037,
        6045
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2564": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6035,
        6045
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2565": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6035,
        6045
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2566": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6035,
        6045
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA0E"
    },
    "2569": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6035,
        6045
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2570": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6035,
        6045
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFC3"
    },
    "2573": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        6035,
        6045
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2574": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6035,
        6045
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2575": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6035,
        6045
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2576": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6035,
        6045
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2577": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6035,
        6045
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2578": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6035,
        6045
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2579": {
      "op": "POP"
    },
    "2580": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2581": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2582": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2584": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2585": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "ADD",
      "path": "2"
    },
    "2586": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2587": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2588": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2589": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2590": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2592": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "ADD",
      "path": "2"
    },
    "2593": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2595": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2596": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2597": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2598": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6056,
        6081
      ],
      "op": "DUP10",
      "path": "2",
      "statement": 27
    },
    "2599": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6056,
        6081
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2600": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6056,
        6081
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2601": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6091,
        6104
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 28,
      "value": "0x1"
    },
    "2603": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6091,
        6104
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2604": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6091,
        6104
      ],
      "op": "ADD",
      "path": "2"
    },
    "2605": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6091,
        6115
      ],
      "op": "DUP10",
      "path": "2"
    },
    "2606": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6091,
        6115
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2607": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6091,
        6115
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2608": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6125,
        6140
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 29,
      "value": "0x2"
    },
    "2610": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6125,
        6140
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2611": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6125,
        6140
      ],
      "op": "ADD",
      "path": "2"
    },
    "2612": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6125,
        6153
      ],
      "op": "DUP9",
      "path": "2"
    },
    "2613": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6125,
        6153
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2614": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6125,
        6153
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2615": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6163,
        6178
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 30,
      "value": "0x3"
    },
    "2617": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6163,
        6178
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2618": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6163,
        6178
      ],
      "op": "ADD",
      "path": "2"
    },
    "2619": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6163,
        6191
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2620": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6163,
        6191
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2621": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6163,
        6191
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2622": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6201,
        6216
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 31,
      "value": "0x4"
    },
    "2624": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6201,
        6216
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2625": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6201,
        6216
      ],
      "op": "ADD",
      "path": "2"
    },
    "2626": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6201,
        6229
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2627": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6201,
        6229
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2628": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6201,
        6229
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2629": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6239,
        6256
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 32,
      "value": "0x5"
    },
    "2631": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6239,
        6256
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2632": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6239,
        6256
      ],
      "op": "ADD",
      "path": "2"
    },
    "2633": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6239,
        6271
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2634": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6239,
        6271
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2635": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2637": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2639": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2641": {
      "op": "SHL"
    },
    "2642": {
      "op": "SUB"
    },
    "2643": {
      "op": "NOT"
    },
    "2644": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6239,
        6271
      ],
      "op": "AND",
      "path": "2"
    },
    "2645": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2647": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2649": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2651": {
      "op": "SHL"
    },
    "2652": {
      "op": "SUB"
    },
    "2653": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6239,
        6271
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2654": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6239,
        6271
      ],
      "op": "AND",
      "path": "2"
    },
    "2655": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6239,
        6271
      ],
      "op": "OR",
      "path": "2"
    },
    "2656": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6239,
        6271
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2657": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6239,
        6271
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2658": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6561,
        6569
      ],
      "op": "SWAP1",
      "path": "2",
      "statement": 33
    },
    "2659": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6561,
        6569
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2660": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2661": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6023,
        6046
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2662": {
      "op": "POP"
    },
    "2663": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6547,
        6584
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA70"
    },
    "2666": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6547,
        6584
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2667": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6571,
        6583
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2668": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6547,
        6560
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAC2"
    },
    "2671": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        6547,
        6584
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2672": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6547,
        6584
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2673": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6615,
        6623
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 34,
      "value": "0x0"
    },
    "2675": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6615,
        6623
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2676": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2678": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2679": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2680": {
      "op": "DUP11"
    },
    "2681": {
      "op": "DUP2"
    },
    "2682": {
      "op": "MSTORE"
    },
    "2683": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2685": {
      "op": "DUP2"
    },
    "2686": {
      "op": "ADD"
    },
    "2687": {
      "op": "DUP11"
    },
    "2688": {
      "op": "SWAP1"
    },
    "2689": {
      "op": "MSTORE"
    },
    "2690": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2692": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2694": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2696": {
      "op": "SHL"
    },
    "2697": {
      "op": "SUB"
    },
    "2698": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2699": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "AND",
      "path": "2"
    },
    "2700": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2701": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6615,
        6623
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2702": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45"
    },
    "2735": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2736": {
      "op": "ADD"
    },
    "2737": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2739": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2740": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2741": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2742": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "SUB",
      "path": "2"
    },
    "2743": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2744": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6599,
        6657
      ],
      "op": "LOG3",
      "path": "2"
    },
    "2745": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5745,
        6664
      ],
      "op": "POP",
      "path": "2"
    },
    "2746": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "POP",
      "path": "2"
    },
    "2747": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "POP",
      "path": "2"
    },
    "2748": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "POP",
      "path": "2"
    },
    "2749": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "POP",
      "path": "2"
    },
    "2750": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "POP",
      "path": "2"
    },
    "2751": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "POP",
      "path": "2"
    },
    "2752": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5588,
        6664
      ],
      "op": "POP",
      "path": "2"
    },
    "2753": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "o",
      "offset": [
        5588,
        6664
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2754": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7039,
        8579
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2755": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7111,
        7125
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 35
    },
    "2756": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7111,
        7125
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2757": {
      "branch": 50,
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7111,
        7125
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2758": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7111,
        7149
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAD0"
    },
    "2761": {
      "branch": 50,
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7111,
        7149
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2762": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7111,
        7149
      ],
      "op": "POP",
      "path": "2"
    },
    "2763": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7141,
        7149
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2765": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7141,
        7149
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2766": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7129,
        7138
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2767": {
      "branch": 51,
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7129,
        7149
      ],
      "op": "GT",
      "path": "2"
    },
    "2768": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7111,
        7149
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2769": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7107,
        7206
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2770": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7107,
        7206
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAF1"
    },
    "2773": {
      "branch": 51,
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7107,
        7206
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2774": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7172,
        7195
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2776": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7172,
        7195
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2777": {
      "op": "PUSH4",
      "value": "0x190A97AD"
    },
    "2782": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2784": {
      "op": "SHL"
    },
    "2785": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7172,
        7195
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2786": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7172,
        7195
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2787": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7172,
        7195
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2789": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7172,
        7195
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2790": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7172,
        7195
      ],
      "op": "ADD",
      "path": "2"
    },
    "2791": {
      "op": "DUP4"
    },
    "2792": {
      "op": "SWAP1"
    },
    "2793": {
      "op": "MSTORE"
    },
    "2794": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2796": {
      "op": "ADD"
    },
    "2797": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7172,
        7195
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x314"
    },
    "2800": {
      "op": "JUMP"
    },
    "2801": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7107,
        7206
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2802": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7216,
        7245
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2804": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7248,
        7270
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2805": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7248,
        7270
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2806": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7248,
        7270
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2807": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7248,
        7259
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2809": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7248,
        7270
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2811": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7248,
        7270
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2812": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7248,
        7270
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2814": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7248,
        7270
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2815": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7248,
        7270
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2816": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7248,
        7270
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2817": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7303,
        7326
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "2819": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7303,
        7326
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2820": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7303,
        7326
      ],
      "op": "ADD",
      "path": "2"
    },
    "2821": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7303,
        7326
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2822": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2823": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2824": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "2829": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2831": {
      "op": "SHL"
    },
    "2832": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2833": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2834": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7382,
        7386
      ],
      "op": "ADDRESS",
      "path": "2"
    },
    "2835": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2837": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2838": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "ADD",
      "path": "2"
    },
    "2839": {
      "op": "MSTORE"
    },
    "2840": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7248,
        7270
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2841": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7248,
        7270
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2842": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2844": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2846": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2848": {
      "op": "SHL"
    },
    "2849": {
      "op": "SUB"
    },
    "2850": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7303,
        7326
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2851": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7303,
        7326
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2852": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7303,
        7326
      ],
      "op": "AND",
      "path": "2"
    },
    "2853": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7303,
        7326
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2854": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7216,
        7245
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2855": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7303,
        7326
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2856": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7303,
        7326
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2857": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7373
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x70A08231"
    },
    "2862": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7373
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2863": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2865": {
      "op": "ADD"
    },
    "2866": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2868": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2870": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2871": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2872": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2873": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "SUB",
      "path": "2"
    },
    "2874": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2875": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2876": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "GAS",
      "path": "2"
    },
    "2877": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "STATICCALL",
      "path": "2"
    },
    "2878": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2879": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2880": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2881": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB4E"
    },
    "2884": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2885": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2886": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2888": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2889": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "2890": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2891": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2893": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2894": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2895": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "POP",
      "path": "2"
    },
    "2896": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "POP",
      "path": "2"
    },
    "2897": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "POP",
      "path": "2"
    },
    "2898": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "POP",
      "path": "2"
    },
    "2899": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2901": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2902": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2903": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2905": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "NOT",
      "path": "2"
    },
    "2906": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2908": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2909": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "ADD",
      "path": "2"
    },
    "2910": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "AND",
      "path": "2"
    },
    "2911": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2912": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "ADD",
      "path": "2"
    },
    "2913": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2914": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2916": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2917": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "POP",
      "path": "2"
    },
    "2918": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2919": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "ADD",
      "path": "2"
    },
    "2920": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2921": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB72"
    },
    "2924": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2925": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2926": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF2"
    },
    "2929": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        7358,
        7388
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2930": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7358,
        7388
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2931": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 36,
      "value": "0x40"
    },
    "2933": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2934": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "2939": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2941": {
      "op": "SHL"
    },
    "2942": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2943": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2944": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8150,
        8160
      ],
      "op": "CALLER",
      "path": "2"
    },
    "2945": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2947": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2948": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "ADD",
      "path": "2"
    },
    "2949": {
      "op": "MSTORE"
    },
    "2950": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8170,
        8174
      ],
      "op": "ADDRESS",
      "path": "2"
    },
    "2951": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2953": {
      "op": "DUP3"
    },
    "2954": {
      "op": "ADD"
    },
    "2955": {
      "op": "MSTORE"
    },
    "2956": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2958": {
      "op": "DUP2"
    },
    "2959": {
      "op": "ADD"
    },
    "2960": {
      "op": "DUP7"
    },
    "2961": {
      "op": "SWAP1"
    },
    "2962": {
      "op": "MSTORE"
    },
    "2963": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7337,
        7388
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2964": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7337,
        7388
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2965": {
      "op": "POP"
    },
    "2966": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2968": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2970": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2972": {
      "op": "SHL"
    },
    "2973": {
      "op": "SUB"
    },
    "2974": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8149
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2975": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8149
      ],
      "op": "AND",
      "path": "2"
    },
    "2976": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8149
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2977": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8149
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x23B872DD"
    },
    "2982": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8149
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2983": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2985": {
      "op": "ADD"
    },
    "2986": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2988": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2990": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2991": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2992": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2993": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "SUB",
      "path": "2"
    },
    "2994": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2995": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2997": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2998": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "GAS",
      "path": "2"
    },
    "2999": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "CALL",
      "path": "2"
    },
    "3000": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "3001": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3002": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "3003": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBC8"
    },
    "3006": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "3007": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "3008": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3010": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3011": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "3012": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "3013": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3015": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "REVERT",
      "path": "2"
    },
    "3016": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3017": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "POP",
      "path": "2"
    },
    "3018": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "POP",
      "path": "2"
    },
    "3019": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "POP",
      "path": "2"
    },
    "3020": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "POP",
      "path": "2"
    },
    "3021": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3023": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3024": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "3025": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "3027": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "NOT",
      "path": "2"
    },
    "3028": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "3030": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3031": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "ADD",
      "path": "2"
    },
    "3032": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "AND",
      "path": "2"
    },
    "3033": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3034": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "ADD",
      "path": "2"
    },
    "3035": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3036": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3038": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3039": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "POP",
      "path": "2"
    },
    "3040": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3041": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "ADD",
      "path": "2"
    },
    "3042": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3043": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBEC"
    },
    "3046": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3047": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3048": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF0B"
    },
    "3051": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        8131,
        8183
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3052": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8131,
        8183
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3053": {
      "op": "POP"
    },
    "3054": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3056": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3057": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "3062": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3064": {
      "op": "SHL"
    },
    "3065": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3066": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3067": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8238,
        8242
      ],
      "op": "ADDRESS",
      "path": "2"
    },
    "3068": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "3070": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3071": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "ADD",
      "path": "2"
    },
    "3072": {
      "op": "MSTORE"
    },
    "3073": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8194,
        8211
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3075": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8194,
        8211
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3076": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3078": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3080": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3082": {
      "op": "SHL"
    },
    "3083": {
      "op": "SUB"
    },
    "3084": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8229
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3085": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8229
      ],
      "op": "AND",
      "path": "2"
    },
    "3086": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8229
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3087": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8229
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x70A08231"
    },
    "3092": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8229
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3093": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3095": {
      "op": "ADD"
    },
    "3096": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3098": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3100": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3101": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3102": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "DUP4",
      "path": "2"
    },
    "3103": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "SUB",
      "path": "2"
    },
    "3104": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3105": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "DUP7",
      "path": "2"
    },
    "3106": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "GAS",
      "path": "2"
    },
    "3107": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "STATICCALL",
      "path": "2"
    },
    "3108": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "3109": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3110": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "3111": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC34"
    },
    "3114": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "3115": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "3116": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3118": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3119": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "3120": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "3121": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3123": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "REVERT",
      "path": "2"
    },
    "3124": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3125": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "POP",
      "path": "2"
    },
    "3126": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "POP",
      "path": "2"
    },
    "3127": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "POP",
      "path": "2"
    },
    "3128": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "POP",
      "path": "2"
    },
    "3129": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3131": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3132": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "3133": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "3135": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "NOT",
      "path": "2"
    },
    "3136": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "3138": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3139": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "ADD",
      "path": "2"
    },
    "3140": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "AND",
      "path": "2"
    },
    "3141": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3142": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "ADD",
      "path": "2"
    },
    "3143": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3144": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3146": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3147": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "POP",
      "path": "2"
    },
    "3148": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3149": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "ADD",
      "path": "2"
    },
    "3150": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3151": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC58"
    },
    "3154": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3155": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3156": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEF2"
    },
    "3159": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        8214,
        8244
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3160": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8214,
        8244
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3161": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8194,
        8244
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3162": {
      "op": "POP"
    },
    "3163": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8356,
        8365
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3165": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8368,
        8396
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC66"
    },
    "3168": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8383,
        8396
      ],
      "op": "DUP4",
      "path": "2"
    },
    "3169": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8194,
        8244
      ],
      "op": "DUP4",
      "path": "2"
    },
    "3170": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8368,
        8396
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBC"
    },
    "3173": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        8368,
        8396
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3174": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8368,
        8396
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3175": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8356,
        8396
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3176": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8356,
        8396
      ],
      "op": "POP",
      "path": "2"
    },
    "3177": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8496,
        8500
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 37
    },
    "3178": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8479
      ],
      "op": "DUP6",
      "path": "2"
    },
    "3179": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8492
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "3181": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8492
      ],
      "op": "ADD",
      "path": "2"
    },
    "3182": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8492
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3184": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8500
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3185": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8500
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3186": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8500
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "3187": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC7C"
    },
    "3190": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8500
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3191": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8500
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3192": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF56"
    },
    "3195": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        8469,
        8500
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3196": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8500
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3197": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8500
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3198": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8500
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3199": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8469,
        8500
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3200": {
      "op": "POP"
    },
    "3201": {
      "op": "POP"
    },
    "3202": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8542,
        8565
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 38,
      "value": "0x5"
    },
    "3204": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8542,
        8565
      ],
      "op": "DUP6",
      "path": "2"
    },
    "3205": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8542,
        8565
      ],
      "op": "ADD",
      "path": "2"
    },
    "3206": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8542,
        8565
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "3207": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8515,
        8572
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3209": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8515,
        8572
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3210": {
      "op": "DUP3"
    },
    "3211": {
      "op": "DUP2"
    },
    "3212": {
      "op": "MSTORE"
    },
    "3213": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3215": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3217": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3219": {
      "op": "SHL"
    },
    "3220": {
      "op": "SUB"
    },
    "3221": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8542,
        8565
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3222": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8542,
        8565
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3223": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8542,
        8565
      ],
      "op": "AND",
      "path": "2"
    },
    "3224": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8542,
        8565
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3225": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8531,
        8540
      ],
      "op": "DUP9",
      "path": "2"
    },
    "3226": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8531,
        8540
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3227": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8515,
        8572
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0xB162210DA7D23D82C18CFF5AF46D3562661D26B42A6848FA28D64A6BDC70386A"
    },
    "3260": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8515,
        8572
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3261": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3263": {
      "op": "ADD"
    },
    "3264": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8515,
        8572
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3266": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8515,
        8572
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3267": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8515,
        8572
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3268": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8515,
        8572
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3269": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8515,
        8572
      ],
      "op": "SUB",
      "path": "2"
    },
    "3270": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8515,
        8572
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3271": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8515,
        8572
      ],
      "op": "LOG3",
      "path": "2"
    },
    "3272": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7097,
        8579
      ],
      "op": "POP",
      "path": "2"
    },
    "3273": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7097,
        8579
      ],
      "op": "POP",
      "path": "2"
    },
    "3274": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7097,
        8579
      ],
      "op": "POP",
      "path": "2"
    },
    "3275": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7097,
        8579
      ],
      "op": "POP",
      "path": "2"
    },
    "3276": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7097,
        8579
      ],
      "op": "POP",
      "path": "2"
    },
    "3277": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7039,
        8579
      ],
      "op": "POP",
      "path": "2"
    },
    "3278": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7039,
        8579
      ],
      "op": "POP",
      "path": "2"
    },
    "3279": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "o",
      "offset": [
        7039,
        8579
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3280": {
      "op": "JUMPDEST"
    },
    "3281": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3283": {
      "op": "DUP1"
    },
    "3284": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3286": {
      "op": "DUP4"
    },
    "3287": {
      "op": "DUP6"
    },
    "3288": {
      "op": "SUB"
    },
    "3289": {
      "op": "SLT"
    },
    "3290": {
      "op": "ISZERO"
    },
    "3291": {
      "op": "PUSH2",
      "value": "0xCE3"
    },
    "3294": {
      "op": "JUMPI"
    },
    "3295": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3297": {
      "op": "DUP1"
    },
    "3298": {
      "op": "REVERT"
    },
    "3299": {
      "op": "JUMPDEST"
    },
    "3300": {
      "op": "POP"
    },
    "3301": {
      "op": "POP"
    },
    "3302": {
      "op": "DUP1"
    },
    "3303": {
      "op": "CALLDATALOAD"
    },
    "3304": {
      "op": "SWAP3"
    },
    "3305": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3307": {
      "op": "SWAP1"
    },
    "3308": {
      "op": "SWAP2"
    },
    "3309": {
      "op": "ADD"
    },
    "3310": {
      "op": "CALLDATALOAD"
    },
    "3311": {
      "op": "SWAP2"
    },
    "3312": {
      "op": "POP"
    },
    "3313": {
      "jump": "o",
      "op": "JUMP"
    },
    "3314": {
      "op": "JUMPDEST"
    },
    "3315": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3317": {
      "op": "DUP1"
    },
    "3318": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3320": {
      "op": "DUP1"
    },
    "3321": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3323": {
      "op": "DUP6"
    },
    "3324": {
      "op": "DUP8"
    },
    "3325": {
      "op": "SUB"
    },
    "3326": {
      "op": "SLT"
    },
    "3327": {
      "op": "ISZERO"
    },
    "3328": {
      "op": "PUSH2",
      "value": "0xD08"
    },
    "3331": {
      "op": "JUMPI"
    },
    "3332": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3334": {
      "op": "DUP1"
    },
    "3335": {
      "op": "REVERT"
    },
    "3336": {
      "op": "JUMPDEST"
    },
    "3337": {
      "op": "POP"
    },
    "3338": {
      "op": "POP"
    },
    "3339": {
      "op": "DUP3"
    },
    "3340": {
      "op": "CALLDATALOAD"
    },
    "3341": {
      "op": "SWAP5"
    },
    "3342": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3344": {
      "op": "DUP5"
    },
    "3345": {
      "op": "ADD"
    },
    "3346": {
      "op": "CALLDATALOAD"
    },
    "3347": {
      "op": "SWAP5"
    },
    "3348": {
      "op": "POP"
    },
    "3349": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3351": {
      "op": "DUP5"
    },
    "3352": {
      "op": "ADD"
    },
    "3353": {
      "op": "CALLDATALOAD"
    },
    "3354": {
      "op": "SWAP4"
    },
    "3355": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3357": {
      "op": "ADD"
    },
    "3358": {
      "op": "CALLDATALOAD"
    },
    "3359": {
      "op": "SWAP3"
    },
    "3360": {
      "op": "POP"
    },
    "3361": {
      "op": "SWAP1"
    },
    "3362": {
      "op": "POP"
    },
    "3363": {
      "jump": "o",
      "op": "JUMP"
    },
    "3364": {
      "op": "JUMPDEST"
    },
    "3365": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3370": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3372": {
      "op": "SHL"
    },
    "3373": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3375": {
      "op": "MSTORE"
    },
    "3376": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "3378": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3380": {
      "op": "MSTORE"
    },
    "3381": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3383": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3385": {
      "op": "REVERT"
    },
    "3386": {
      "op": "JUMPDEST"
    },
    "3387": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3389": {
      "op": "DUP1"
    },
    "3390": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3392": {
      "op": "DUP1"
    },
    "3393": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3395": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3397": {
      "op": "DUP7"
    },
    "3398": {
      "op": "DUP9"
    },
    "3399": {
      "op": "SUB"
    },
    "3400": {
      "op": "SLT"
    },
    "3401": {
      "op": "ISZERO"
    },
    "3402": {
      "op": "PUSH2",
      "value": "0xD52"
    },
    "3405": {
      "op": "JUMPI"
    },
    "3406": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3408": {
      "op": "DUP1"
    },
    "3409": {
      "op": "REVERT"
    },
    "3410": {
      "op": "JUMPDEST"
    },
    "3411": {
      "op": "DUP6"
    },
    "3412": {
      "op": "CALLDATALOAD"
    },
    "3413": {
      "op": "SWAP5"
    },
    "3414": {
      "op": "POP"
    },
    "3415": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3417": {
      "op": "DUP1"
    },
    "3418": {
      "op": "DUP8"
    },
    "3419": {
      "op": "ADD"
    },
    "3420": {
      "op": "CALLDATALOAD"
    },
    "3421": {
      "op": "SWAP5"
    },
    "3422": {
      "op": "POP"
    },
    "3423": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3425": {
      "op": "DUP8"
    },
    "3426": {
      "op": "ADD"
    },
    "3427": {
      "op": "CALLDATALOAD"
    },
    "3428": {
      "op": "SWAP4"
    },
    "3429": {
      "op": "POP"
    },
    "3430": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3432": {
      "op": "DUP8"
    },
    "3433": {
      "op": "ADD"
    },
    "3434": {
      "op": "CALLDATALOAD"
    },
    "3435": {
      "op": "SWAP3"
    },
    "3436": {
      "op": "POP"
    },
    "3437": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3439": {
      "op": "DUP8"
    },
    "3440": {
      "op": "ADD"
    },
    "3441": {
      "op": "CALLDATALOAD"
    },
    "3442": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3451": {
      "op": "DUP1"
    },
    "3452": {
      "op": "DUP3"
    },
    "3453": {
      "op": "GT"
    },
    "3454": {
      "op": "ISZERO"
    },
    "3455": {
      "op": "PUSH2",
      "value": "0xD87"
    },
    "3458": {
      "op": "JUMPI"
    },
    "3459": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3461": {
      "op": "DUP1"
    },
    "3462": {
      "op": "REVERT"
    },
    "3463": {
      "op": "JUMPDEST"
    },
    "3464": {
      "op": "DUP2"
    },
    "3465": {
      "op": "DUP10"
    },
    "3466": {
      "op": "ADD"
    },
    "3467": {
      "op": "SWAP2"
    },
    "3468": {
      "op": "POP"
    },
    "3469": {
      "op": "DUP10"
    },
    "3470": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3472": {
      "op": "DUP4"
    },
    "3473": {
      "op": "ADD"
    },
    "3474": {
      "op": "SLT"
    },
    "3475": {
      "op": "PUSH2",
      "value": "0xD9B"
    },
    "3478": {
      "op": "JUMPI"
    },
    "3479": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3481": {
      "op": "DUP1"
    },
    "3482": {
      "op": "REVERT"
    },
    "3483": {
      "op": "JUMPDEST"
    },
    "3484": {
      "op": "DUP2"
    },
    "3485": {
      "op": "CALLDATALOAD"
    },
    "3486": {
      "op": "DUP2"
    },
    "3487": {
      "op": "DUP2"
    },
    "3488": {
      "op": "GT"
    },
    "3489": {
      "op": "ISZERO"
    },
    "3490": {
      "op": "PUSH2",
      "value": "0xDAD"
    },
    "3493": {
      "op": "JUMPI"
    },
    "3494": {
      "op": "PUSH2",
      "value": "0xDAD"
    },
    "3497": {
      "op": "PUSH2",
      "value": "0xD24"
    },
    "3500": {
      "jump": "i",
      "op": "JUMP"
    },
    "3501": {
      "op": "JUMPDEST"
    },
    "3502": {
      "op": "DUP1"
    },
    "3503": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "3505": {
      "op": "SHL"
    },
    "3506": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3508": {
      "op": "MLOAD"
    },
    "3509": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3511": {
      "op": "NOT"
    },
    "3512": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "3514": {
      "op": "DUP4"
    },
    "3515": {
      "op": "ADD"
    },
    "3516": {
      "op": "AND"
    },
    "3517": {
      "op": "DUP2"
    },
    "3518": {
      "op": "ADD"
    },
    "3519": {
      "op": "DUP2"
    },
    "3520": {
      "op": "DUP2"
    },
    "3521": {
      "op": "LT"
    },
    "3522": {
      "op": "DUP6"
    },
    "3523": {
      "op": "DUP3"
    },
    "3524": {
      "op": "GT"
    },
    "3525": {
      "op": "OR"
    },
    "3526": {
      "op": "ISZERO"
    },
    "3527": {
      "op": "PUSH2",
      "value": "0xDD2"
    },
    "3530": {
      "op": "JUMPI"
    },
    "3531": {
      "op": "PUSH2",
      "value": "0xDD2"
    },
    "3534": {
      "op": "PUSH2",
      "value": "0xD24"
    },
    "3537": {
      "jump": "i",
      "op": "JUMP"
    },
    "3538": {
      "op": "JUMPDEST"
    },
    "3539": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3541": {
      "op": "MSTORE"
    },
    "3542": {
      "op": "SWAP2"
    },
    "3543": {
      "op": "DUP3"
    },
    "3544": {
      "op": "MSTORE"
    },
    "3545": {
      "op": "DUP5"
    },
    "3546": {
      "op": "DUP3"
    },
    "3547": {
      "op": "ADD"
    },
    "3548": {
      "op": "SWAP3"
    },
    "3549": {
      "op": "POP"
    },
    "3550": {
      "op": "DUP4"
    },
    "3551": {
      "op": "DUP2"
    },
    "3552": {
      "op": "ADD"
    },
    "3553": {
      "op": "DUP6"
    },
    "3554": {
      "op": "ADD"
    },
    "3555": {
      "op": "SWAP2"
    },
    "3556": {
      "op": "DUP13"
    },
    "3557": {
      "op": "DUP4"
    },
    "3558": {
      "op": "GT"
    },
    "3559": {
      "op": "ISZERO"
    },
    "3560": {
      "op": "PUSH2",
      "value": "0xDF0"
    },
    "3563": {
      "op": "JUMPI"
    },
    "3564": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3566": {
      "op": "DUP1"
    },
    "3567": {
      "op": "REVERT"
    },
    "3568": {
      "op": "JUMPDEST"
    },
    "3569": {
      "op": "SWAP4"
    },
    "3570": {
      "op": "DUP6"
    },
    "3571": {
      "op": "ADD"
    },
    "3572": {
      "op": "SWAP4"
    },
    "3573": {
      "op": "JUMPDEST"
    },
    "3574": {
      "op": "DUP3"
    },
    "3575": {
      "op": "DUP6"
    },
    "3576": {
      "op": "LT"
    },
    "3577": {
      "op": "ISZERO"
    },
    "3578": {
      "op": "PUSH2",
      "value": "0xE0E"
    },
    "3581": {
      "op": "JUMPI"
    },
    "3582": {
      "op": "DUP5"
    },
    "3583": {
      "op": "CALLDATALOAD"
    },
    "3584": {
      "op": "DUP5"
    },
    "3585": {
      "op": "MSTORE"
    },
    "3586": {
      "op": "SWAP4"
    },
    "3587": {
      "op": "DUP6"
    },
    "3588": {
      "op": "ADD"
    },
    "3589": {
      "op": "SWAP4"
    },
    "3590": {
      "op": "SWAP3"
    },
    "3591": {
      "op": "DUP6"
    },
    "3592": {
      "op": "ADD"
    },
    "3593": {
      "op": "SWAP3"
    },
    "3594": {
      "op": "PUSH2",
      "value": "0xDF5"
    },
    "3597": {
      "op": "JUMP"
    },
    "3598": {
      "op": "JUMPDEST"
    },
    "3599": {
      "op": "DUP1"
    },
    "3600": {
      "op": "SWAP7"
    },
    "3601": {
      "op": "POP"
    },
    "3602": {
      "op": "POP"
    },
    "3603": {
      "op": "POP"
    },
    "3604": {
      "op": "POP"
    },
    "3605": {
      "op": "POP"
    },
    "3606": {
      "op": "POP"
    },
    "3607": {
      "op": "POP"
    },
    "3608": {
      "op": "SWAP3"
    },
    "3609": {
      "op": "SWAP6"
    },
    "3610": {
      "op": "POP"
    },
    "3611": {
      "op": "SWAP3"
    },
    "3612": {
      "op": "SWAP6"
    },
    "3613": {
      "op": "SWAP1"
    },
    "3614": {
      "op": "SWAP4"
    },
    "3615": {
      "op": "POP"
    },
    "3616": {
      "jump": "o",
      "op": "JUMP"
    },
    "3617": {
      "op": "JUMPDEST"
    },
    "3618": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3620": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3622": {
      "op": "DUP3"
    },
    "3623": {
      "op": "DUP5"
    },
    "3624": {
      "op": "SUB"
    },
    "3625": {
      "op": "SLT"
    },
    "3626": {
      "op": "ISZERO"
    },
    "3627": {
      "op": "PUSH2",
      "value": "0xE33"
    },
    "3630": {
      "op": "JUMPI"
    },
    "3631": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3633": {
      "op": "DUP1"
    },
    "3634": {
      "op": "REVERT"
    },
    "3635": {
      "op": "JUMPDEST"
    },
    "3636": {
      "op": "POP"
    },
    "3637": {
      "op": "CALLDATALOAD"
    },
    "3638": {
      "op": "SWAP2"
    },
    "3639": {
      "op": "SWAP1"
    },
    "3640": {
      "op": "POP"
    },
    "3641": {
      "jump": "o",
      "op": "JUMP"
    },
    "3642": {
      "op": "JUMPDEST"
    },
    "3643": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3645": {
      "op": "DUP1"
    },
    "3646": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3648": {
      "op": "DUP1"
    },
    "3649": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3651": {
      "op": "DUP1"
    },
    "3652": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3654": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3656": {
      "op": "DUP9"
    },
    "3657": {
      "op": "DUP11"
    },
    "3658": {
      "op": "SUB"
    },
    "3659": {
      "op": "SLT"
    },
    "3660": {
      "op": "ISZERO"
    },
    "3661": {
      "op": "PUSH2",
      "value": "0xE55"
    },
    "3664": {
      "op": "JUMPI"
    },
    "3665": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3667": {
      "op": "DUP1"
    },
    "3668": {
      "op": "REVERT"
    },
    "3669": {
      "op": "JUMPDEST"
    },
    "3670": {
      "op": "DUP8"
    },
    "3671": {
      "op": "CALLDATALOAD"
    },
    "3672": {
      "op": "SWAP7"
    },
    "3673": {
      "op": "POP"
    },
    "3674": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3676": {
      "op": "DUP9"
    },
    "3677": {
      "op": "ADD"
    },
    "3678": {
      "op": "CALLDATALOAD"
    },
    "3679": {
      "op": "SWAP6"
    },
    "3680": {
      "op": "POP"
    },
    "3681": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3683": {
      "op": "DUP9"
    },
    "3684": {
      "op": "ADD"
    },
    "3685": {
      "op": "CALLDATALOAD"
    },
    "3686": {
      "op": "SWAP5"
    },
    "3687": {
      "op": "POP"
    },
    "3688": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3690": {
      "op": "DUP9"
    },
    "3691": {
      "op": "ADD"
    },
    "3692": {
      "op": "CALLDATALOAD"
    },
    "3693": {
      "op": "SWAP4"
    },
    "3694": {
      "op": "POP"
    },
    "3695": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3697": {
      "op": "DUP9"
    },
    "3698": {
      "op": "ADD"
    },
    "3699": {
      "op": "CALLDATALOAD"
    },
    "3700": {
      "op": "SWAP3"
    },
    "3701": {
      "op": "POP"
    },
    "3702": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3704": {
      "op": "DUP9"
    },
    "3705": {
      "op": "ADD"
    },
    "3706": {
      "op": "CALLDATALOAD"
    },
    "3707": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3709": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3711": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3713": {
      "op": "SHL"
    },
    "3714": {
      "op": "SUB"
    },
    "3715": {
      "op": "DUP2"
    },
    "3716": {
      "op": "AND"
    },
    "3717": {
      "op": "DUP2"
    },
    "3718": {
      "op": "EQ"
    },
    "3719": {
      "op": "PUSH2",
      "value": "0xE8F"
    },
    "3722": {
      "op": "JUMPI"
    },
    "3723": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3725": {
      "op": "DUP1"
    },
    "3726": {
      "op": "REVERT"
    },
    "3727": {
      "op": "JUMPDEST"
    },
    "3728": {
      "op": "DUP1"
    },
    "3729": {
      "op": "SWAP3"
    },
    "3730": {
      "op": "POP"
    },
    "3731": {
      "op": "POP"
    },
    "3732": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "3734": {
      "op": "DUP9"
    },
    "3735": {
      "op": "ADD"
    },
    "3736": {
      "op": "CALLDATALOAD"
    },
    "3737": {
      "op": "SWAP1"
    },
    "3738": {
      "op": "POP"
    },
    "3739": {
      "op": "SWAP3"
    },
    "3740": {
      "op": "SWAP6"
    },
    "3741": {
      "op": "SWAP9"
    },
    "3742": {
      "op": "SWAP2"
    },
    "3743": {
      "op": "SWAP5"
    },
    "3744": {
      "op": "SWAP8"
    },
    "3745": {
      "op": "POP"
    },
    "3746": {
      "op": "SWAP3"
    },
    "3747": {
      "op": "SWAP6"
    },
    "3748": {
      "op": "POP"
    },
    "3749": {
      "jump": "o",
      "op": "JUMP"
    },
    "3750": {
      "op": "JUMPDEST"
    },
    "3751": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3756": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3758": {
      "op": "SHL"
    },
    "3759": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3761": {
      "op": "MSTORE"
    },
    "3762": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3764": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3766": {
      "op": "MSTORE"
    },
    "3767": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3769": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3771": {
      "op": "REVERT"
    },
    "3772": {
      "op": "JUMPDEST"
    },
    "3773": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3775": {
      "op": "DUP3"
    },
    "3776": {
      "op": "DUP3"
    },
    "3777": {
      "op": "LT"
    },
    "3778": {
      "op": "ISZERO"
    },
    "3779": {
      "op": "PUSH2",
      "value": "0xECE"
    },
    "3782": {
      "op": "JUMPI"
    },
    "3783": {
      "op": "PUSH2",
      "value": "0xECE"
    },
    "3786": {
      "op": "PUSH2",
      "value": "0xEA6"
    },
    "3789": {
      "jump": "i",
      "op": "JUMP"
    },
    "3790": {
      "op": "JUMPDEST"
    },
    "3791": {
      "op": "POP"
    },
    "3792": {
      "op": "SUB"
    },
    "3793": {
      "op": "SWAP1"
    },
    "3794": {
      "jump": "o",
      "op": "JUMP"
    },
    "3795": {
      "op": "JUMPDEST"
    },
    "3796": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3798": {
      "op": "DUP2"
    },
    "3799": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3801": {
      "op": "NOT"
    },
    "3802": {
      "op": "DIV"
    },
    "3803": {
      "op": "DUP4"
    },
    "3804": {
      "op": "GT"
    },
    "3805": {
      "op": "DUP3"
    },
    "3806": {
      "op": "ISZERO"
    },
    "3807": {
      "op": "ISZERO"
    },
    "3808": {
      "op": "AND"
    },
    "3809": {
      "op": "ISZERO"
    },
    "3810": {
      "op": "PUSH2",
      "value": "0xEED"
    },
    "3813": {
      "op": "JUMPI"
    },
    "3814": {
      "op": "PUSH2",
      "value": "0xEED"
    },
    "3817": {
      "op": "PUSH2",
      "value": "0xEA6"
    },
    "3820": {
      "jump": "i",
      "op": "JUMP"
    },
    "3821": {
      "op": "JUMPDEST"
    },
    "3822": {
      "op": "POP"
    },
    "3823": {
      "op": "MUL"
    },
    "3824": {
      "op": "SWAP1"
    },
    "3825": {
      "jump": "o",
      "op": "JUMP"
    },
    "3826": {
      "op": "JUMPDEST"
    },
    "3827": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3829": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3831": {
      "op": "DUP3"
    },
    "3832": {
      "op": "DUP5"
    },
    "3833": {
      "op": "SUB"
    },
    "3834": {
      "op": "SLT"
    },
    "3835": {
      "op": "ISZERO"
    },
    "3836": {
      "op": "PUSH2",
      "value": "0xF04"
    },
    "3839": {
      "op": "JUMPI"
    },
    "3840": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3842": {
      "op": "DUP1"
    },
    "3843": {
      "op": "REVERT"
    },
    "3844": {
      "op": "JUMPDEST"
    },
    "3845": {
      "op": "POP"
    },
    "3846": {
      "op": "MLOAD"
    },
    "3847": {
      "op": "SWAP2"
    },
    "3848": {
      "op": "SWAP1"
    },
    "3849": {
      "op": "POP"
    },
    "3850": {
      "jump": "o",
      "op": "JUMP"
    },
    "3851": {
      "op": "JUMPDEST"
    },
    "3852": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3854": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3856": {
      "op": "DUP3"
    },
    "3857": {
      "op": "DUP5"
    },
    "3858": {
      "op": "SUB"
    },
    "3859": {
      "op": "SLT"
    },
    "3860": {
      "op": "ISZERO"
    },
    "3861": {
      "op": "PUSH2",
      "value": "0xF1D"
    },
    "3864": {
      "op": "JUMPI"
    },
    "3865": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3867": {
      "op": "DUP1"
    },
    "3868": {
      "op": "REVERT"
    },
    "3869": {
      "op": "JUMPDEST"
    },
    "3870": {
      "op": "DUP2"
    },
    "3871": {
      "op": "MLOAD"
    },
    "3872": {
      "op": "DUP1"
    },
    "3873": {
      "op": "ISZERO"
    },
    "3874": {
      "op": "ISZERO"
    },
    "3875": {
      "op": "DUP2"
    },
    "3876": {
      "op": "EQ"
    },
    "3877": {
      "op": "PUSH2",
      "value": "0xF2D"
    },
    "3880": {
      "op": "JUMPI"
    },
    "3881": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3883": {
      "op": "DUP1"
    },
    "3884": {
      "op": "REVERT"
    },
    "3885": {
      "op": "JUMPDEST"
    },
    "3886": {
      "op": "SWAP4"
    },
    "3887": {
      "op": "SWAP3"
    },
    "3888": {
      "op": "POP"
    },
    "3889": {
      "op": "POP"
    },
    "3890": {
      "op": "POP"
    },
    "3891": {
      "jump": "o",
      "op": "JUMP"
    },
    "3892": {
      "op": "JUMPDEST"
    },
    "3893": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3895": {
      "op": "DUP3"
    },
    "3896": {
      "op": "PUSH2",
      "value": "0xF51"
    },
    "3899": {
      "op": "JUMPI"
    },
    "3900": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3905": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3907": {
      "op": "SHL"
    },
    "3908": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3910": {
      "op": "MSTORE"
    },
    "3911": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "3913": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3915": {
      "op": "MSTORE"
    },
    "3916": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3918": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3920": {
      "op": "REVERT"
    },
    "3921": {
      "op": "JUMPDEST"
    },
    "3922": {
      "op": "POP"
    },
    "3923": {
      "op": "DIV"
    },
    "3924": {
      "op": "SWAP1"
    },
    "3925": {
      "jump": "o",
      "op": "JUMP"
    },
    "3926": {
      "op": "JUMPDEST"
    },
    "3927": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3929": {
      "op": "DUP3"
    },
    "3930": {
      "op": "NOT"
    },
    "3931": {
      "op": "DUP3"
    },
    "3932": {
      "op": "GT"
    },
    "3933": {
      "op": "ISZERO"
    },
    "3934": {
      "op": "PUSH2",
      "value": "0xF69"
    },
    "3937": {
      "op": "JUMPI"
    },
    "3938": {
      "op": "PUSH2",
      "value": "0xF69"
    },
    "3941": {
      "op": "PUSH2",
      "value": "0xEA6"
    },
    "3944": {
      "jump": "i",
      "op": "JUMP"
    },
    "3945": {
      "op": "JUMPDEST"
    },
    "3946": {
      "op": "POP"
    },
    "3947": {
      "op": "ADD"
    },
    "3948": {
      "op": "SWAP1"
    },
    "3949": {
      "jump": "o",
      "op": "JUMP"
    },
    "3950": {
      "op": "JUMPDEST"
    },
    "3951": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3953": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3955": {
      "op": "DUP3"
    },
    "3956": {
      "op": "ADD"
    },
    "3957": {
      "op": "DUP6"
    },
    "3958": {
      "op": "DUP4"
    },
    "3959": {
      "op": "MSTORE"
    },
    "3960": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3962": {
      "op": "DUP6"
    },
    "3963": {
      "op": "DUP2"
    },
    "3964": {
      "op": "DUP6"
    },
    "3965": {
      "op": "ADD"
    },
    "3966": {
      "op": "MSTORE"
    },
    "3967": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3969": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3971": {
      "op": "DUP6"
    },
    "3972": {
      "op": "ADD"
    },
    "3973": {
      "op": "MSTORE"
    },
    "3974": {
      "op": "DUP2"
    },
    "3975": {
      "op": "DUP6"
    },
    "3976": {
      "op": "MLOAD"
    },
    "3977": {
      "op": "DUP1"
    },
    "3978": {
      "op": "DUP5"
    },
    "3979": {
      "op": "MSTORE"
    },
    "3980": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3982": {
      "op": "DUP7"
    },
    "3983": {
      "op": "ADD"
    },
    "3984": {
      "op": "SWAP2"
    },
    "3985": {
      "op": "POP"
    },
    "3986": {
      "op": "DUP3"
    },
    "3987": {
      "op": "DUP8"
    },
    "3988": {
      "op": "ADD"
    },
    "3989": {
      "op": "SWAP4"
    },
    "3990": {
      "op": "POP"
    },
    "3991": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3993": {
      "op": "JUMPDEST"
    },
    "3994": {
      "op": "DUP2"
    },
    "3995": {
      "op": "DUP2"
    },
    "3996": {
      "op": "LT"
    },
    "3997": {
      "op": "ISZERO"
    },
    "3998": {
      "op": "PUSH2",
      "value": "0xFB5"
    },
    "4001": {
      "op": "JUMPI"
    },
    "4002": {
      "op": "DUP5"
    },
    "4003": {
      "op": "MLOAD"
    },
    "4004": {
      "op": "DUP4"
    },
    "4005": {
      "op": "MSTORE"
    },
    "4006": {
      "op": "SWAP4"
    },
    "4007": {
      "op": "DUP4"
    },
    "4008": {
      "op": "ADD"
    },
    "4009": {
      "op": "SWAP4"
    },
    "4010": {
      "op": "SWAP2"
    },
    "4011": {
      "op": "DUP4"
    },
    "4012": {
      "op": "ADD"
    },
    "4013": {
      "op": "SWAP2"
    },
    "4014": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4016": {
      "op": "ADD"
    },
    "4017": {
      "op": "PUSH2",
      "value": "0xF99"
    },
    "4020": {
      "op": "JUMP"
    },
    "4021": {
      "op": "JUMPDEST"
    },
    "4022": {
      "op": "POP"
    },
    "4023": {
      "op": "SWAP1"
    },
    "4024": {
      "op": "SWAP9"
    },
    "4025": {
      "op": "SWAP8"
    },
    "4026": {
      "op": "POP"
    },
    "4027": {
      "op": "POP"
    },
    "4028": {
      "op": "POP"
    },
    "4029": {
      "op": "POP"
    },
    "4030": {
      "op": "POP"
    },
    "4031": {
      "op": "POP"
    },
    "4032": {
      "op": "POP"
    },
    "4033": {
      "op": "POP"
    },
    "4034": {
      "jump": "o",
      "op": "JUMP"
    },
    "4035": {
      "op": "JUMPDEST"
    },
    "4036": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4038": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4040": {
      "op": "NOT"
    },
    "4041": {
      "op": "DUP3"
    },
    "4042": {
      "op": "EQ"
    },
    "4043": {
      "op": "ISZERO"
    },
    "4044": {
      "op": "PUSH2",
      "value": "0xFD7"
    },
    "4047": {
      "op": "JUMPI"
    },
    "4048": {
      "op": "PUSH2",
      "value": "0xFD7"
    },
    "4051": {
      "op": "PUSH2",
      "value": "0xEA6"
    },
    "4054": {
      "jump": "i",
      "op": "JUMP"
    },
    "4055": {
      "op": "JUMPDEST"
    },
    "4056": {
      "op": "POP"
    },
    "4057": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4059": {
      "op": "ADD"
    },
    "4060": {
      "op": "SWAP1"
    },
    "4061": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "bfb1de63cd8d85a3e844a5a781a79a8e54086dd5",
  "source": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.12;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./MerkleLib.sol\";\n\n/// @title A factory pattern for user-chosen vesting-schedules, that is, a time release schedule for tokens, using merkle proofs to scale\n/// @author metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki\n/// @notice This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.\n/// @dev The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof.\n/// @dev User chosen vesting schedules means the contract has parameters that define a line segment that\n/// @dev describes a range of vesting-schedule parameters within which the user can negotiate tradeoffs\n/// @dev More tokens => longer vesting time && slower drip, when used correctly, but the contract does not enforce\n/// @dev coherence of vesting schedules, so someone could make a range of vesting schedules in which\n/// @dev more tokens => longer vesting time && faster drip, but this is a user error, also we wouldn't catch it until\n/// @dev after the tree has been initialized and funded, so we just let them do it.\n/// @dev The choice of which parameters to initialize at tree-creation-time versus at schedule-initialization-time is\n/// @dev somewhat arbitrary, but we choose to have min/max end times at tree scope and min/max total payments at first-withdrawal-time\ncontract MerkleResistor {\n    using MerkleLib for bytes32;\n\n    // tree (vesting schedule) counter\n    uint public numTrees;\n\n    // this represents a user chosen vesting schedule, post initiation\n    struct Tranche {\n        address recipient;\n        uint totalCoins; // total coins released after vesting complete\n        uint currentCoins; // unclaimed coins remaining in the contract, waiting to be vested\n        uint startTime; // start time of the vesting schedule\n        uint endTime;   // end time of the vesting schedule\n        uint coinsPerSecond;  // how many coins are emitted per second, this value is cached to avoid recomputing it\n        uint lastWithdrawalTime; // keep track of last time user claimed coins to compute coins owed for this withdrawal\n    }\n\n    // this represents an arbitrarily large set of token recipients with partially-initialized vesting schedules\n    struct MerkleTree {\n        bytes32 merkleRoot; // merkle root of tree whose leaves are ranges of vesting schedules for each recipient\n        bytes32 ipfsHash; // ipfs hash of the entire data set represented by the merkle root, in case our servers go down\n        uint minEndTime; // minimum length (offset, not absolute) of vesting schedule in seconds\n        uint maxEndTime; // maximum length (offset, not absolute) of vesting schedule in seconds\n        uint pctUpFront; // percent of vested coins that will be available and withdrawn upon initialization\n        address tokenAddress; // address of token to be distributed\n        uint tokenBalance; // amount of tokens allocated to this tree (this prevents trees from sharing tokens)\n        uint numTranchesInitialized;\n        mapping (uint => Tranche) tranches;\n        mapping (bytes32 => bool) initialized;\n    }\n\n    // basically an array of vesting schedules, but without annoying solidity array syntax\n    mapping (uint => MerkleTree) public merkleTrees;\n\n    // precision factory used to handle floating point arithmetic\n    uint constant public PRECISION = 1000000;\n\n    // every time a withdrawal occurs\n    event WithdrawalOccurred(uint indexed treeIndex, address indexed destination, uint numTokens, uint tokensLeft);\n\n    // every time a tree is added\n    event MerkleTreeAdded(uint indexed treeIndex, address indexed tokenAddress, bytes32 newRoot, bytes32 ipfsHash);\n\n    // every time a tree is topped up\n    event TokensDeposited(uint indexed treeIndex, address indexed tokenAddress, uint amount);\n    event TrancheInitialized(uint indexed treeIndex, uint indexed trancheIndex, address indexed recipient, bytes32 leaf);\n\n    error BadTreeIndex(uint treeIndex);\n    error InvalidPct(uint pct);\n    error IncoherentTimes(uint min, uint max);\n    error AlreadyInitialized(uint treeIndex, bytes32 leaf);\n    error BadProof(uint treeIndex, bytes32 leaf, bytes32[] proof);\n    error BadVestingSchedule(uint treeIndex, uint vestingTime, uint minTotalPayments, uint maxTotalPayments);\n    error UninitializedAccount(uint treeIndex, uint trancheIndex);\n    error AccountEmpty(uint treeIndex, uint trancheIndex);\n\n    /// @notice Add a new merkle tree to the contract, creating a new merkle-vesting-schedule-range\n    /// @dev Anyone may call this function, therefore we must make sure trees cannot affect each other\n    /// @dev Root hash should be built from (destination, minTotalPayments, maxTotalPayments)\n    /// @param newRoot root hash of merkle tree representing vesting schedule ranges\n    /// @param ipfsHash the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable\n    /// @param minEndTime a continuous range of possible end times are specified, this is the minimum\n    /// @param maxEndTime a continuous range of possible end times are specified, this is the maximum\n    /// @param pctUpFront the percent of tokens user will get at initialization time (note this implies no lock time)\n    /// @param tokenAddress the address of the token contract that is being distributed\n    /// @param tokenBalance the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded\n    function addMerkleTree(bytes32 newRoot, bytes32 ipfsHash, uint minEndTime, uint maxEndTime, uint pctUpFront, address tokenAddress, uint tokenBalance) public {\n        // check basic coherence of request\n        if (pctUpFront >= 100) {\n            revert InvalidPct(pctUpFront);\n        }\n\n        if (minEndTime >= maxEndTime) {\n            revert IncoherentTimes(minEndTime, maxEndTime);\n        }\n\n        MerkleTree storage tree = merkleTrees[++numTrees];\n        tree.merkleRoot = newRoot;\n        tree.ipfsHash = ipfsHash;\n        tree.minEndTime = minEndTime;\n        tree.maxEndTime = maxEndTime;\n        tree.pctUpFront = pctUpFront;\n        tree.tokenAddress = tokenAddress;\n\n        // pull tokens from user to fund the tree\n        // if tree is insufficiently funded, then some users may not be able to be paid out, this is the responsibility\n        // of the tree creator, if trees are not funded, then the UI will not display the tree\n        depositTokens(numTrees, tokenBalance);\n        emit MerkleTreeAdded(numTrees, tokenAddress, newRoot, ipfsHash);\n    }\n\n    /// @notice Add funds to an existing merkle-tree\n    /// @dev Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious\n    /// @param treeIndex index into array-like map of merkleTrees\n    /// @param value the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded\n    function depositTokens(uint treeIndex, uint value) public {\n        if (treeIndex == 0 || treeIndex > numTrees) {\n            revert BadTreeIndex(treeIndex);\n        }\n\n        MerkleTree storage merkleTree = merkleTrees[treeIndex];\n\n        IERC20 token = IERC20(merkleTree.tokenAddress);\n        uint balanceBefore = token.balanceOf(address(this));\n\n        // do the transfer from the caller\n        // NOTE: it is possible for user to overfund the tree and there is no mechanism to reclaim excess tokens\n        // this is because there is no way for the contract to know when a tree has had all leaves claimed.\n        // There is also no way for the contract to know the minimum or maximum liabilities represented by the leaves\n        // in short, there is no on-chain inspection of any of the leaf data except at initialization time\n        // NOTE: a malicious token contract could cause merkleTree.tokenBalance to be out of sync with the token contract\n        // this is an unavoidable possibility, and it could render the tree unusable, while leaving other trees unharmed\n        token.transferFrom(msg.sender, address(this), value);\n\n        uint balanceAfter = token.balanceOf(address(this));\n        // diff may be different from value here, it may even be zero if the transfer failed silently\n        uint diff = balanceAfter - balanceBefore;\n\n        // bookkeeping to make sure trees do not share tokens\n        merkleTree.tokenBalance += diff;\n        emit TokensDeposited(treeIndex, merkleTree.tokenAddress, diff);\n    }\n\n    /// @notice Called once per recipient of a vesting schedule to initialize the vesting schedule and fix the parameters\n    /// @dev Only the recipient can initialize their own schedule here, because a meaningful choice is made\n    /// @dev If the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree stats\n    /// @param treeIndex index into array-like map of merkleTrees\n    /// @param vestingTime the actual length of the vesting schedule, chosen by the user\n    /// @param minTotalPayments the minimum amount of tokens they will receive, if they choose minEndTime as vestingTime\n    /// @param maxTotalPayments the maximum amount of tokens they will receive, if they choose maxEndTime as vestingTime\n    /// @param proof array of hashes linking leaf hash of (destination, minTotalPayments, maxTotalPayments) to root\n    function initialize(\n        uint treeIndex,\n        uint vestingTime,\n        uint minTotalPayments,\n        uint maxTotalPayments,\n        bytes32[] memory proof) external returns (uint) {\n        if (treeIndex == 0 || treeIndex > numTrees) {\n            revert BadTreeIndex(treeIndex);\n        }\n\n        MerkleTree storage tree = merkleTrees[treeIndex];\n        // compute merkle leaf, this is first element of proof\n        bytes32 leaf = keccak256(abi.encode(msg.sender, minTotalPayments, maxTotalPayments));\n\n        if (tree.initialized[leaf]) {\n            revert AlreadyInitialized(treeIndex, leaf);\n        }\n\n        if (tree.merkleRoot.verifyProof(leaf, proof) == false) {\n            revert BadProof(treeIndex, leaf, proof);\n        }\n\n        (bool valid, uint totalCoins, uint coinsPerSecond, uint startTime) = verifyVestingSchedule(treeIndex, vestingTime, minTotalPayments, maxTotalPayments);\n\n        if (valid == false) {\n            revert BadVestingSchedule(treeIndex, vestingTime, minTotalPayments, maxTotalPayments);\n        }\n\n        // mark tree as initialized, preventing re-entrance or multiple initializations\n        tree.initialized[leaf] = true;\n\n\n        // fill out the struct for the address' vesting schedule\n        // don't have to mark as storage here, it's implied (why isn't it always implied when written to? solc-devs?)\n        tree.tranches[++tree.numTranchesInitialized] = Tranche(\n            msg.sender,\n            totalCoins,    // this is just a cached number for UI, not used\n            totalCoins,    // starts out full\n            startTime,     // start time will usually be in the past, if pctUpFront > 0\n            block.timestamp + vestingTime,  // vesting starts from initialization time\n            coinsPerSecond,  // cached value to avoid recomputation\n            startTime      // this is lastWithdrawalTime, set to startTime to indicate no withdrawals have occurred yet\n        );\n\n        emit TrancheInitialized(treeIndex, tree.numTranchesInitialized, msg.sender, leaf);\n\n        withdraw(treeIndex, tree.numTranchesInitialized);\n\n        return tree.numTranchesInitialized;\n    }\n\n    /// @notice Move unlocked funds to the destination\n    /// @dev Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of\n    /// @dev who provides the proof and pays the gas, msg.sender is not used in this function\n    /// @param treeIndex index into array-like map of merkleTrees, which tree should we apply the proof to?\n    /// @param trancheIndex index into tranche map\n    function withdraw(uint treeIndex, uint trancheIndex) public {\n        MerkleTree storage tree = merkleTrees[treeIndex];\n        Tranche storage tranche = tree.tranches[trancheIndex];\n\n        // checking this way so we don't have to recompute leaf hash\n        if (tranche.totalCoins == 0) {\n            revert UninitializedAccount(treeIndex, trancheIndex);\n        }\n\n        // revert if there's nothing left\n        if (tranche.currentCoins == 0) {\n            revert AccountEmpty(treeIndex, trancheIndex);\n        }\n\n        uint currentWithdrawal;\n\n        // if after vesting period ends, give them the remaining coins, also avoids dust from rounding errors\n        if (block.timestamp >= tranche.endTime) {\n            currentWithdrawal = tranche.currentCoins;\n        } else {\n            // compute allowed withdrawal\n            // secondsElapsedSinceLastWithdrawal * coinsPerSecond == coinsAccumulatedSinceLastWithdrawal\n            currentWithdrawal = (block.timestamp - tranche.lastWithdrawalTime) * tranche.coinsPerSecond;\n        }\n\n        // move the time counter up so users can't double-withdraw allocated coins\n        // this also works as a re-entrance gate, so currentWithdrawal would be 0 upon re-entrance\n        tranche.lastWithdrawalTime = block.timestamp;\n\n        IERC20 token = IERC20(tree.tokenAddress);\n        uint balanceBefore = token.balanceOf(address(this));\n\n        // transfer the tokens, brah\n        // NOTE: if this is a malicious token, what could happen?\n        // 1/ token doesn't transfer given amount to recipient, this is bad for user, but does not effect other trees\n        // 2/ token fails for some reason, again bad for user, but this does not effect other trees\n        // 3/ token re-enters this function (or other, but this is the only one that transfers tokens out)\n        // in which case, lastWithdrawalTime == block.timestamp, so currentWithdrawal == 0\n        // Also this could be a misconfigured ERC20 and not return true even if successful, so diff should catch that\n        token.transfer(tranche.recipient, currentWithdrawal);\n\n        // compute the diff in case there is a fee-on-transfer or transfer failed silently\n        uint balanceAfter = token.balanceOf(address(this));\n        uint diff = balanceBefore - balanceAfter;\n\n        // update struct, modern solidity will catch underflow and prevent currentWithdrawal from exceeding currentCoins\n        // but it's computed internally anyway, not user generated\n        tranche.currentCoins -= diff;\n        // handle the bookkeeping so trees don't share tokens, do it before transferring to create one more re-entrance gate\n        tree.tokenBalance -= diff;\n\n        emit WithdrawalOccurred(treeIndex, tranche.recipient, diff, tranche.currentCoins);\n    }\n\n    /// @notice Determine if the proposed vesting schedule is legit\n    /// @dev Anyone may call this to check, but it also returns values used in the initialization of vesting schedules\n    /// @param treeIndex index into array-like map of merkleTrees, which tree are we talking about?\n    /// @param vestingTime user chosen length of vesting schedule\n    /// @param minTotalPayments pre-committed (in the root hash) minimum of possible totalCoins\n    /// @param maxTotalPayments pre-committed (in the root hash) maximum of possible totalCoins\n    /// @return valid is the proposed vesting-schedule valid\n    /// @return totalCoins amount of coins allocated in the vesting schedule\n    /// @return coinsPerSecond amount of coins released every second, in the proposed vesting schedule\n    /// @return startTime start time of vesting schedule implied by supplied parameters, will always be <= block.timestamp\n    function verifyVestingSchedule(uint treeIndex, uint vestingTime, uint minTotalPayments, uint maxTotalPayments) public view returns (bool, uint, uint, uint) {\n        // vesting schedules for non-existing trees are invalid, I don't care how much you like uninitialized structs\n        if (treeIndex > numTrees) {\n            return (false, 0, 0, 0);\n        }\n\n        // memory not storage, since we do not edit the tree, and it's a view function anyways\n        MerkleTree storage tree = merkleTrees[treeIndex];\n\n        // vesting time must sit within the closed interval of [minEndTime, maxEndTime]\n        if (vestingTime > tree.maxEndTime || vestingTime < tree.minEndTime) {\n            return (false, 0, 0, 0);\n        }\n\n        uint totalCoins;\n        if (vestingTime == tree.maxEndTime) {\n            // this is to prevent dust accumulation from rounding errors\n            // maxEndTime results in max payments, no further computation necessary\n            totalCoins = maxTotalPayments;\n        } else {\n            // remember grade school algebra? slope = \u0394y / \u0394x\n            // this is the slope of eligible vesting schedules. In general, 0 < m < 1,\n            // (longer vesting schedules should result in less coins per second, hence \"resistor\")\n            // so we multiply by a precision factor to reduce rounding errors\n            // y axis = total coins released after vesting completed\n            // x axis = length of vesting schedule\n            // this is the line of valid end-points for the chosen vesting schedule line, see below\n            // NOTE: this reverts if minTotalPayments > maxTotalPayments, which is a good thing\n            uint paymentSlope = (maxTotalPayments - minTotalPayments) * PRECISION / (tree.maxEndTime - tree.minEndTime);\n\n            // y = mx + b = paymentSlope * (x - x0) + y0\n            // divide by precision factor here since we have completed the rounding error sensitive operations\n            totalCoins = (paymentSlope * (vestingTime - tree.minEndTime) / PRECISION) + minTotalPayments;\n        }\n\n        // this is a different slope, the slope of their chosen vesting schedule\n        // y axis = cumulative coins emitted\n        // x axis = time elapsed\n        // NOTE: vestingTime starts from block.timestamp, so doesn't include coins already available from pctUpFront\n        // totalCoins / vestingTime is wrong, we have to multiple by the proportion of the coins that are indexed\n        // by vestingTime, which is (100 - pctUpFront) / 100\n        uint coinsPerSecond = (totalCoins * (uint(100) - tree.pctUpFront)) / (vestingTime * 100);\n\n        // vestingTime is relative to initialization point\n        // endTime = block.timestamp + vestingTime\n        // vestingLength = totalCoins / coinsPerSecond\n        uint startTime = block.timestamp + vestingTime - (totalCoins / coinsPerSecond);\n\n        return (true, totalCoins, coinsPerSecond, startTime);\n    }\n\n    function getTranche(uint treeIndex, uint trancheIndex) view external returns (address, uint, uint, uint, uint, uint, uint) {\n        Tranche storage tranche = merkleTrees[treeIndex].tranches[trancheIndex];\n        return (tranche.recipient, tranche.totalCoins, tranche.currentCoins, tranche.startTime, tranche.endTime, tranche.coinsPerSecond, tranche.lastWithdrawalTime);\n    }\n\n    function getInitialized(uint treeIndex, bytes32 leaf) external view returns (bool) {\n        return merkleTrees[treeIndex].initialized[leaf];\n    }\n\n}\n",
  "sourceMap": "1454:17765:2:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/MerkleResistor.sol",
  "type": "contract"
}