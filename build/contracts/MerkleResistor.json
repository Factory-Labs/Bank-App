{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        }
      ],
      "name": "MerkleTreeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensLeft",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalOccurred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pctUpFront",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "name": "addMerkleTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "depositTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleTrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pctUpFront",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTrees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tranches",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coinsPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastWithdrawalTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalPayments",
          "type": "uint256"
        }
      ],
      "name": "verifyVestingSchedule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "4": "contracts/MerkleLib.sol",
    "5": "contracts/MerkleResistor.sol",
    "7": "interfaces/IERC20.sol"
  },
  "ast": {
    "absolutePath": "contracts/MerkleResistor.sol",
    "exportedSymbols": {
      "IERC20": [
        2387
      ],
      "MerkleLib": [
        1366
      ],
      "MerkleResistor": [
        1924
      ]
    },
    "id": 1925,
    "license": "GPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1368,
        "literals": [
          "solidity",
          "0.8",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "42:23:5"
      },
      {
        "absolutePath": "interfaces/IERC20.sol",
        "file": "../interfaces/IERC20.sol",
        "id": 1369,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1925,
        "sourceUnit": 2388,
        "src": "67:34:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/MerkleLib.sol",
        "file": "./MerkleLib.sol",
        "id": 1370,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1925,
        "sourceUnit": 1367,
        "src": "102:25:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "MerkleResistor",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1371,
          "nodeType": "StructuredDocumentation",
          "src": "129:1325:5",
          "text": "@title A factory pattern for user-chosen vesting-schedules, that is, a time release schedule for tokens, using merkle proofs to scale\n @author metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki\n @notice This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.\n @dev The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof.\n @dev User chosen vesting schedules means the contract has parameters that define a line segment that\n @dev describes a range of vesting-schedule parameters within which the user can negotiate tradeoffs\n @dev More tokens => longer vesting time && slower drip, when used correctly, but the contract does not enforce\n @dev coherence of vesting schedules, so someone could make a range of vesting schedules in which\n @dev more tokens => longer vesting time && faster drip, but this is a user error, also we wouldn't catch it until\n @dev after the tree has been initialized and funded, so we just let them do it.\n @dev The choice of which parameters to initialize at tree-creation-time versus at schedule-initialization-time is\n @dev somewhat arbitrary, but we choose to have min/max end times at tree scope and min/max total payments at first-withdrawal-time"
        },
        "fullyImplemented": true,
        "id": 1924,
        "linearizedBaseContracts": [
          1924
        ],
        "name": "MerkleResistor",
        "nameLocation": "1463:14:5",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 1374,
            "libraryName": {
              "id": 1372,
              "name": "MerkleLib",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1366,
              "src": "1490:9:5"
            },
            "nodeType": "UsingForDirective",
            "src": "1484:28:5",
            "typeName": {
              "id": 1373,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1504:7:5",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "390b7c66",
            "id": 1377,
            "mutability": "mutable",
            "name": "numTrees",
            "nameLocation": "1569:8:5",
            "nodeType": "VariableDeclaration",
            "scope": 1924,
            "src": "1557:24:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1375,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "1557:4:5",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 1376,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1580:1:5",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "canonicalName": "MerkleResistor.Tranche",
            "id": 1390,
            "members": [
              {
                "constant": false,
                "id": 1379,
                "mutability": "mutable",
                "name": "totalCoins",
                "nameLocation": "1689:10:5",
                "nodeType": "VariableDeclaration",
                "scope": 1390,
                "src": "1684:15:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1378,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1684:4:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1381,
                "mutability": "mutable",
                "name": "currentCoins",
                "nameLocation": "1761:12:5",
                "nodeType": "VariableDeclaration",
                "scope": 1390,
                "src": "1756:17:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1380,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1756:4:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1383,
                "mutability": "mutable",
                "name": "startTime",
                "nameLocation": "1855:9:5",
                "nodeType": "VariableDeclaration",
                "scope": 1390,
                "src": "1850:14:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1382,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1850:4:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1385,
                "mutability": "mutable",
                "name": "endTime",
                "nameLocation": "1917:7:5",
                "nodeType": "VariableDeclaration",
                "scope": 1390,
                "src": "1912:12:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1384,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1912:4:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1387,
                "mutability": "mutable",
                "name": "coinsPerSecond",
                "nameLocation": "1977:14:5",
                "nodeType": "VariableDeclaration",
                "scope": 1390,
                "src": "1972:19:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1386,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1972:4:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1389,
                "mutability": "mutable",
                "name": "lastWithdrawalTime",
                "nameLocation": "2094:18:5",
                "nodeType": "VariableDeclaration",
                "scope": 1390,
                "src": "2089:23:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1388,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2089:4:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Tranche",
            "nameLocation": "1666:7:5",
            "nodeType": "StructDefinition",
            "scope": 1924,
            "src": "1659:548:5",
            "visibility": "public"
          },
          {
            "canonicalName": "MerkleResistor.MerkleTree",
            "id": 1405,
            "members": [
              {
                "constant": false,
                "id": 1392,
                "mutability": "mutable",
                "name": "merkleRoot",
                "nameLocation": "2362:10:5",
                "nodeType": "VariableDeclaration",
                "scope": 1405,
                "src": "2354:18:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 1391,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "2354:7:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1394,
                "mutability": "mutable",
                "name": "ipfsHash",
                "nameLocation": "2477:8:5",
                "nodeType": "VariableDeclaration",
                "scope": 1405,
                "src": "2469:16:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 1393,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "2469:7:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1396,
                "mutability": "mutable",
                "name": "minEndTime",
                "nameLocation": "2596:10:5",
                "nodeType": "VariableDeclaration",
                "scope": 1405,
                "src": "2591:15:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1395,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2591:4:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1398,
                "mutability": "mutable",
                "name": "maxEndTime",
                "nameLocation": "2693:10:5",
                "nodeType": "VariableDeclaration",
                "scope": 1405,
                "src": "2688:15:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1397,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2688:4:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1400,
                "mutability": "mutable",
                "name": "pctUpFront",
                "nameLocation": "2790:10:5",
                "nodeType": "VariableDeclaration",
                "scope": 1405,
                "src": "2785:15:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1399,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2785:4:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1402,
                "mutability": "mutable",
                "name": "tokenAddress",
                "nameLocation": "2902:12:5",
                "nodeType": "VariableDeclaration",
                "scope": 1405,
                "src": "2894:20:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1401,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "2894:7:5",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 1404,
                "mutability": "mutable",
                "name": "tokenBalance",
                "nameLocation": "2967:12:5",
                "nodeType": "VariableDeclaration",
                "scope": 1405,
                "src": "2962:17:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1403,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2962:4:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "MerkleTree",
            "nameLocation": "2333:10:5",
            "nodeType": "StructDefinition",
            "scope": 1924,
            "src": "2326:745:5",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "86bb8249",
            "id": 1411,
            "mutability": "mutable",
            "name": "initialized",
            "nameLocation": "3448:11:5",
            "nodeType": "VariableDeclaration",
            "scope": 1924,
            "src": "3397:62:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
              "typeString": "mapping(address => mapping(uint256 => bool))"
            },
            "typeName": {
              "id": 1410,
              "keyType": {
                "id": 1406,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "3406:7:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "3397:43:5",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                "typeString": "mapping(address => mapping(uint256 => bool))"
              },
              "valueType": {
                "id": 1409,
                "keyType": {
                  "id": 1407,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "3426:4:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "3417:22:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                  "typeString": "mapping(uint256 => bool)"
                },
                "valueType": {
                  "id": 1408,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "3434:4:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "85d88cb1",
            "id": 1416,
            "mutability": "mutable",
            "name": "merkleTrees",
            "nameLocation": "3593:11:5",
            "nodeType": "VariableDeclaration",
            "scope": 1924,
            "src": "3557:47:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$1405_storage_$",
              "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree)"
            },
            "typeName": {
              "id": 1415,
              "keyType": {
                "id": 1412,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "3566:4:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "3557:28:5",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$1405_storage_$",
                "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree)"
              },
              "valueType": {
                "id": 1414,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 1413,
                  "name": "MerkleTree",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1405,
                  "src": "3574:10:5"
                },
                "referencedDeclaration": 1405,
                "src": "3574:10:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_MerkleTree_$1405_storage_ptr",
                  "typeString": "struct MerkleResistor.MerkleTree"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "c26cb54f",
            "id": 1423,
            "mutability": "mutable",
            "name": "tranches",
            "nameLocation": "3727:8:5",
            "nodeType": "VariableDeclaration",
            "scope": 1924,
            "src": "3673:62:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$1390_storage_$_$",
              "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche))"
            },
            "typeName": {
              "id": 1422,
              "keyType": {
                "id": 1417,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "3682:7:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "3673:46:5",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$1390_storage_$_$",
                "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche))"
              },
              "valueType": {
                "id": 1421,
                "keyType": {
                  "id": 1418,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "3702:4:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "3693:25:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$1390_storage_$",
                  "typeString": "mapping(uint256 => struct MerkleResistor.Tranche)"
                },
                "valueType": {
                  "id": 1420,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 1419,
                    "name": "Tranche",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 1390,
                    "src": "3710:7:5"
                  },
                  "referencedDeclaration": 1390,
                  "src": "3710:7:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Tranche_$1390_storage_ptr",
                    "typeString": "struct MerkleResistor.Tranche"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "aaf5eb68",
            "id": 1426,
            "mutability": "constant",
            "name": "PRECISION",
            "nameLocation": "3829:9:5",
            "nodeType": "VariableDeclaration",
            "scope": 1924,
            "src": "3808:40:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1424,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "3808:4:5",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31303030303030",
              "id": 1425,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "3841:7:5",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              },
              "value": "1000000"
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 1436,
            "name": "WithdrawalOccurred",
            "nameLocation": "3899:18:5",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1435,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1428,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "3931:9:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1436,
                  "src": "3918:22:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1427,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3918:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1430,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "3958:11:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1436,
                  "src": "3942:27:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1429,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3942:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1432,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "numTokens",
                  "nameLocation": "3976:9:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1436,
                  "src": "3971:14:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1431,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3971:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1434,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokensLeft",
                  "nameLocation": "3992:10:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1436,
                  "src": "3987:15:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1433,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3987:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3917:86:5"
            },
            "src": "3893:111:5"
          },
          {
            "anonymous": false,
            "id": 1446,
            "name": "MerkleTreeAdded",
            "nameLocation": "4050:15:5",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1445,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1438,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4079:9:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1446,
                  "src": "4066:22:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1437,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4066:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1440,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "4106:12:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1446,
                  "src": "4090:28:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1439,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4090:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1442,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "4128:7:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1446,
                  "src": "4120:15:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1441,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4120:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1444,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "4145:8:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1446,
                  "src": "4137:16:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1443,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4137:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4065:89:5"
            },
            "src": "4044:111:5"
          },
          {
            "anonymous": false,
            "id": 1454,
            "name": "TokensDeposited",
            "nameLocation": "4205:15:5",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1453,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1448,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4234:9:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1454,
                  "src": "4221:22:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1447,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4221:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1450,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "4261:12:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1454,
                  "src": "4245:28:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1449,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4245:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1452,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4280:6:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1454,
                  "src": "4275:11:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1451,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4275:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4220:67:5"
            },
            "src": "4199:89:5"
          },
          {
            "body": {
              "id": 1513,
              "nodeType": "Block",
              "src": "5509:918:5",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1475,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1473,
                          "name": "pctUpFront",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1465,
                          "src": "5571:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "hexValue": "313030",
                          "id": 1474,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5584:3:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_100_by_1",
                            "typeString": "int_const 100"
                          },
                          "value": "100"
                        },
                        "src": "5571:16:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "706374557046726f6e74203e3d20313030",
                        "id": 1476,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5589:19:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5d62361d64e7f8cf4fff457bf47173a531e51b64da30badb8e72846a2642165f",
                          "typeString": "literal_string \"pctUpFront >= 100\""
                        },
                        "value": "pctUpFront >= 100"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5d62361d64e7f8cf4fff457bf47173a531e51b64da30badb8e72846a2642165f",
                          "typeString": "literal_string \"pctUpFront >= 100\""
                        }
                      ],
                      "id": 1472,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5563:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1477,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5563:46:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1478,
                  "nodeType": "ExpressionStatement",
                  "src": "5563:46:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1482,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1480,
                          "name": "minEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1461,
                          "src": "5627:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "id": 1481,
                          "name": "maxEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1463,
                          "src": "5640:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5627:23:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6d696e456e6454696d65206d757374206265206c657373207468616e206d6178456e6454696d65",
                        "id": 1483,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5652:41:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b9f494a656d13b13a08d4cf899120fa0e5253d75c531a056af397669b40d9b3e",
                          "typeString": "literal_string \"minEndTime must be less than maxEndTime\""
                        },
                        "value": "minEndTime must be less than maxEndTime"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b9f494a656d13b13a08d4cf899120fa0e5253d75c531a056af397669b40d9b3e",
                          "typeString": "literal_string \"minEndTime must be less than maxEndTime\""
                        }
                      ],
                      "id": 1479,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5619:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1484,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5619:75:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1485,
                  "nodeType": "ExpressionStatement",
                  "src": "5619:75:5"
                },
                {
                  "expression": {
                    "id": 1499,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 1486,
                        "name": "merkleTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1416,
                        "src": "5761:11:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$1405_storage_$",
                          "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                        }
                      },
                      "id": 1489,
                      "indexExpression": {
                        "id": 1488,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "++",
                        "prefix": true,
                        "src": "5773:10:5",
                        "subExpression": {
                          "id": 1487,
                          "name": "numTrees",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1377,
                          "src": "5775:8:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5761:23:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$1405_storage",
                        "typeString": "struct MerkleResistor.MerkleTree storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1491,
                          "name": "newRoot",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1457,
                          "src": "5811:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 1492,
                          "name": "ipfsHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1459,
                          "src": "5832:8:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 1493,
                          "name": "minEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1461,
                          "src": "5854:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1494,
                          "name": "maxEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1463,
                          "src": "5878:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1495,
                          "name": "pctUpFront",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1465,
                          "src": "5902:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1496,
                          "name": "tokenAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1467,
                          "src": "5926:12:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "hexValue": "30",
                          "id": 1497,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5952:1:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 1490,
                        "name": "MerkleTree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1405,
                        "src": "5787:10:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_MerkleTree_$1405_storage_ptr_$",
                          "typeString": "type(struct MerkleResistor.MerkleTree storage pointer)"
                        }
                      },
                      "id": 1498,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5787:247:5",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$1405_memory_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree memory"
                      }
                    },
                    "src": "5761:273:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$1405_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "id": 1500,
                  "nodeType": "ExpressionStatement",
                  "src": "5761:273:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1502,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1377,
                        "src": "6324:8:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1503,
                        "name": "tokenBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1469,
                        "src": "6334:12:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1501,
                      "name": "depositTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1560,
                      "src": "6310:13:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 1504,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6310:37:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1505,
                  "nodeType": "ExpressionStatement",
                  "src": "6310:37:5"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 1507,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1377,
                        "src": "6378:8:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1508,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1467,
                        "src": "6388:12:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1509,
                        "name": "newRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1457,
                        "src": "6402:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 1510,
                        "name": "ipfsHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1459,
                        "src": "6411:8:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 1506,
                      "name": "MerkleTreeAdded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1446,
                      "src": "6362:15:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_bytes32_$_t_bytes32_$returns$__$",
                        "typeString": "function (uint256,address,bytes32,bytes32)"
                      }
                    },
                    "id": 1511,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6362:58:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1512,
                  "nodeType": "EmitStatement",
                  "src": "6357:63:5"
                }
              ]
            },
            "documentation": {
              "id": 1455,
              "nodeType": "StructuredDocumentation",
              "src": "4294:1053:5",
              "text": "@notice Add a new merkle tree to the contract, creating a new merkle-vesting-schedule-range\n @dev Anyone may call this function, therefore we must make sure trees cannot affect each other\n @dev Root hash should be built from (destination, minTotalPayments, maxTotalPayments)\n @param newRoot root hash of merkle tree representing vesting schedule ranges\n @param ipfsHash the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable\n @param minEndTime a continuous range of possible end times are specified, this is the minimum\n @param maxEndTime a continuous range of possible end times are specified, this is the maximum\n @param pctUpFront the percent of tokens user will get at initialization time (note this implies no lock time)\n @param tokenAddress the address of the token contract that is being distributed\n @param tokenBalance the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
            },
            "functionSelector": "d71383ed",
            "id": 1514,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addMerkleTree",
            "nameLocation": "5361:13:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1470,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1457,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "5383:7:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1514,
                  "src": "5375:15:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1456,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5375:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1459,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "5400:8:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1514,
                  "src": "5392:16:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1458,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5392:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1461,
                  "mutability": "mutable",
                  "name": "minEndTime",
                  "nameLocation": "5415:10:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1514,
                  "src": "5410:15:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1460,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5410:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1463,
                  "mutability": "mutable",
                  "name": "maxEndTime",
                  "nameLocation": "5432:10:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1514,
                  "src": "5427:15:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1462,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5427:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1465,
                  "mutability": "mutable",
                  "name": "pctUpFront",
                  "nameLocation": "5449:10:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1514,
                  "src": "5444:15:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1464,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5444:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1467,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "5469:12:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1514,
                  "src": "5461:20:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1466,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5461:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1469,
                  "mutability": "mutable",
                  "name": "tokenBalance",
                  "nameLocation": "5488:12:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1514,
                  "src": "5483:17:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1468,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5483:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5374:127:5"
            },
            "returnParameters": {
              "id": 1471,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5509:0:5"
            },
            "scope": 1924,
            "src": "5352:1075:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1559,
              "nodeType": "Block",
              "src": "6860:1139:5",
              "statements": [
                {
                  "assignments": [
                    1524
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1524,
                      "mutability": "mutable",
                      "name": "merkleTree",
                      "nameLocation": "6924:10:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1559,
                      "src": "6905:29:5",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$1405_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 1523,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1522,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1405,
                          "src": "6905:10:5"
                        },
                        "referencedDeclaration": 1405,
                        "src": "6905:10:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$1405_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1528,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1525,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1416,
                      "src": "6937:11:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$1405_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 1527,
                    "indexExpression": {
                      "id": 1526,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1517,
                      "src": "6949:9:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6937:22:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$1405_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6905:54:5"
                },
                {
                  "expression": {
                    "id": 1533,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1529,
                        "name": "merkleTree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1524,
                        "src": "7032:10:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$1405_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 1531,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1404,
                      "src": "7032:23:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 1532,
                      "name": "value",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1519,
                      "src": "7059:5:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7032:32:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1534,
                  "nodeType": "ExpressionStatement",
                  "src": "7032:32:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 1541,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "7860:3:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1542,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "7860:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 1545,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "7880:4:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_MerkleResistor_$1924",
                                  "typeString": "contract MerkleResistor"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_MerkleResistor_$1924",
                                  "typeString": "contract MerkleResistor"
                                }
                              ],
                              "id": 1544,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7872:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 1543,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "7872:7:5",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 1546,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7872:13:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1547,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1519,
                            "src": "7887:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 1537,
                                  "name": "merkleTree",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1524,
                                  "src": "7822:10:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_MerkleTree_$1405_storage_ptr",
                                    "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                                  }
                                },
                                "id": 1538,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "tokenAddress",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1402,
                                "src": "7822:23:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 1536,
                              "name": "IERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2387,
                              "src": "7815:6:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC20_$2387_$",
                                "typeString": "type(contract IERC20)"
                              }
                            },
                            "id": 1539,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7815:31:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$2387",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 1540,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2368,
                          "src": "7815:44:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) external returns (bool)"
                          }
                        },
                        "id": 1548,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7815:78:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433230207472616e73666572206661696c6564",
                        "id": 1549,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7895:23:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff",
                          "typeString": "literal_string \"ERC20 transfer failed\""
                        },
                        "value": "ERC20 transfer failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff",
                          "typeString": "literal_string \"ERC20 transfer failed\""
                        }
                      ],
                      "id": 1535,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7807:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1550,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7807:112:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1551,
                  "nodeType": "ExpressionStatement",
                  "src": "7807:112:5"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 1553,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1517,
                        "src": "7950:9:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1554,
                          "name": "merkleTree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1524,
                          "src": "7961:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$1405_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 1555,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "tokenAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1402,
                        "src": "7961:23:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1556,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1519,
                        "src": "7986:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1552,
                      "name": "TokensDeposited",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1454,
                      "src": "7934:15:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,address,uint256)"
                      }
                    },
                    "id": 1557,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7934:58:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1558,
                  "nodeType": "EmitStatement",
                  "src": "7929:63:5"
                }
              ]
            },
            "documentation": {
              "id": 1515,
              "nodeType": "StructuredDocumentation",
              "src": "6433:364:5",
              "text": "@notice Add funds to an existing merkle-tree\n @dev Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious\n @param treeIndex index into array-like map of merkleTrees\n @param value the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
            },
            "functionSelector": "f16ad51e",
            "id": 1560,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "depositTokens",
            "nameLocation": "6811:13:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1520,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1517,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "6830:9:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1560,
                  "src": "6825:14:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1516,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "6825:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1519,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "6846:5:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1560,
                  "src": "6841:10:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1518,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "6841:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6824:28:5"
            },
            "returnParameters": {
              "id": 1521,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6860:0:5"
            },
            "scope": 1924,
            "src": "6802:1197:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1674,
              "nodeType": "Block",
              "src": "9097:1818:5",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1581,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1578,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "9172:3:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1579,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "9172:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 1580,
                          "name": "destination",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1565,
                          "src": "9186:11:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "9172:25:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616e636865",
                        "id": 1582,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9199:38:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0d840bbe3638dabb5a6e726d796a00fcf265be6e5ba2e71e838f9bed65dfcb15",
                          "typeString": "literal_string \"Can only initialize your own tranche\""
                        },
                        "value": "Can only initialize your own tranche"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0d840bbe3638dabb5a6e726d796a00fcf265be6e5ba2e71e838f9bed65dfcb15",
                          "typeString": "literal_string \"Can only initialize your own tranche\""
                        }
                      ],
                      "id": 1577,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9164:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1583,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9164:74:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1584,
                  "nodeType": "ExpressionStatement",
                  "src": "9164:74:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1591,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "9292:36:5",
                        "subExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 1586,
                              "name": "initialized",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1411,
                              "src": "9293:11:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                                "typeString": "mapping(address => mapping(uint256 => bool))"
                              }
                            },
                            "id": 1588,
                            "indexExpression": {
                              "id": 1587,
                              "name": "destination",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1565,
                              "src": "9305:11:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "9293:24:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                              "typeString": "mapping(uint256 => bool)"
                            }
                          },
                          "id": 1590,
                          "indexExpression": {
                            "id": 1589,
                            "name": "treeIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1563,
                            "src": "9318:9:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "9293:35:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "416c726561647920696e697469616c697a6564",
                        "id": 1592,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9330:21:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0",
                          "typeString": "literal_string \"Already initialized\""
                        },
                        "value": "Already initialized"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0",
                          "typeString": "literal_string \"Already initialized\""
                        }
                      ],
                      "id": 1585,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9284:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1593,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9284:68:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1594,
                  "nodeType": "ExpressionStatement",
                  "src": "9284:68:5"
                },
                {
                  "assignments": [
                    1596
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1596,
                      "mutability": "mutable",
                      "name": "leaf",
                      "nameLocation": "9433:4:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1674,
                      "src": "9425:12:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1595,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "9425:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1605,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1600,
                            "name": "destination",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1565,
                            "src": "9461:11:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1601,
                            "name": "minTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1569,
                            "src": "9474:16:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 1602,
                            "name": "maxTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1571,
                            "src": "9492:16:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1598,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "9450:3:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1599,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "9450:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 1603,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9450:59:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 1597,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "9440:9:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 1604,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9440:70:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9425:85:5"
                },
                {
                  "assignments": [
                    1608
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1608,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "9579:4:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1674,
                      "src": "9561:22:5",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$1405_memory_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 1607,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1606,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1405,
                          "src": "9561:10:5"
                        },
                        "referencedDeclaration": 1405,
                        "src": "9561:10:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$1405_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1612,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1609,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1416,
                      "src": "9586:11:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$1405_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 1611,
                    "indexExpression": {
                      "id": 1610,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1563,
                      "src": "9598:9:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "9586:22:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$1405_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9561:47:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1617,
                            "name": "leaf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1596,
                            "src": "9732:4:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 1618,
                            "name": "proof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1574,
                            "src": "9738:5:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          ],
                          "expression": {
                            "expression": {
                              "id": 1614,
                              "name": "tree",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1608,
                              "src": "9704:4:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MerkleTree_$1405_memory_ptr",
                                "typeString": "struct MerkleResistor.MerkleTree memory"
                              }
                            },
                            "id": 1615,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "merkleRoot",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1392,
                            "src": "9704:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "id": 1616,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "verifyProof",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1333,
                          "src": "9704:27:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_delegatecall_pure$_t_bytes32_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes32_$",
                            "typeString": "function (bytes32,bytes32,bytes32[] memory) pure returns (bool)"
                          }
                        },
                        "id": 1619,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9704:40:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5468652070726f6f6620636f756c64206e6f742062652076657269666965642e",
                        "id": 1620,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9746:34:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6befa95a15378f3fa320a9fc597710e04d31854374b1378d40ad4268234fd91c",
                          "typeString": "literal_string \"The proof could not be verified.\""
                        },
                        "value": "The proof could not be verified."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6befa95a15378f3fa320a9fc597710e04d31854374b1378d40ad4268234fd91c",
                          "typeString": "literal_string \"The proof could not be verified.\""
                        }
                      ],
                      "id": 1613,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9696:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1621,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9696:85:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1622,
                  "nodeType": "ExpressionStatement",
                  "src": "9696:85:5"
                },
                {
                  "expression": {
                    "id": 1629,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 1623,
                          "name": "initialized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1411,
                          "src": "9879:11:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                            "typeString": "mapping(address => mapping(uint256 => bool))"
                          }
                        },
                        "id": 1626,
                        "indexExpression": {
                          "id": 1624,
                          "name": "destination",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1565,
                          "src": "9891:11:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "9879:24:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                          "typeString": "mapping(uint256 => bool)"
                        }
                      },
                      "id": 1627,
                      "indexExpression": {
                        "id": 1625,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1563,
                        "src": "9904:9:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "9879:35:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1628,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "9917:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "9879:42:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1630,
                  "nodeType": "ExpressionStatement",
                  "src": "9879:42:5"
                },
                {
                  "assignments": [
                    1632,
                    1634,
                    1636,
                    1638
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1632,
                      "mutability": "mutable",
                      "name": "valid",
                      "nameLocation": "9938:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1674,
                      "src": "9933:10:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1631,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "9933:4:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1634,
                      "mutability": "mutable",
                      "name": "totalCoins",
                      "nameLocation": "9950:10:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1674,
                      "src": "9945:15:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1633,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "9945:4:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1636,
                      "mutability": "mutable",
                      "name": "coinsPerSecond",
                      "nameLocation": "9967:14:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1674,
                      "src": "9962:19:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1635,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "9962:4:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1638,
                      "mutability": "mutable",
                      "name": "startTime",
                      "nameLocation": "9988:9:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1674,
                      "src": "9983:14:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1637,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "9983:4:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1645,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 1640,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1563,
                        "src": "10023:9:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1641,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1567,
                        "src": "10034:11:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1642,
                        "name": "minTotalPayments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1569,
                        "src": "10047:16:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1643,
                        "name": "maxTotalPayments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1571,
                        "src": "10065:16:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1639,
                      "name": "verifyVestingSchedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1923,
                      "src": "10001:21:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256,uint256) view returns (bool,uint256,uint256,uint256)"
                      }
                    },
                    "id": 1644,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10001:81:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(bool,uint256,uint256,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9932:150:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1647,
                        "name": "valid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1632,
                        "src": "10100:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c69642076657374696e67207363686564756c65",
                        "id": 1648,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10107:26:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e7aa6925863169bd8cb1c379b7045e79f109b7df282905e5a05c3523fee8c286",
                          "typeString": "literal_string \"Invalid vesting schedule\""
                        },
                        "value": "Invalid vesting schedule"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e7aa6925863169bd8cb1c379b7045e79f109b7df282905e5a05c3523fee8c286",
                          "typeString": "literal_string \"Invalid vesting schedule\""
                        }
                      ],
                      "id": 1646,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "10092:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1649,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10092:42:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1650,
                  "nodeType": "ExpressionStatement",
                  "src": "10092:42:5"
                },
                {
                  "expression": {
                    "id": 1667,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 1651,
                          "name": "tranches",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1423,
                          "src": "10328:8:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$1390_storage_$_$",
                            "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche storage ref))"
                          }
                        },
                        "id": 1654,
                        "indexExpression": {
                          "id": 1652,
                          "name": "destination",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1565,
                          "src": "10337:11:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "10328:21:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$1390_storage_$",
                          "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"
                        }
                      },
                      "id": 1655,
                      "indexExpression": {
                        "id": 1653,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1563,
                        "src": "10350:9:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "10328:32:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$1390_storage",
                        "typeString": "struct MerkleResistor.Tranche storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 1657,
                          "name": "totalCoins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1634,
                          "src": "10384:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1658,
                          "name": "totalCoins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1634,
                          "src": "10460:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1659,
                          "name": "startTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1638,
                          "src": "10506:9:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1663,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 1660,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "10594:5:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1661,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "10594:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 1662,
                            "name": "vestingTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1567,
                            "src": "10612:11:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10594:29:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1664,
                          "name": "coinsPerSecond",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1636,
                          "src": "10681:14:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 1665,
                          "name": "startTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1638,
                          "src": "10749:9:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 1656,
                        "name": "Tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1390,
                        "src": "10363:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Tranche_$1390_storage_ptr_$",
                          "typeString": "type(struct MerkleResistor.Tranche storage pointer)"
                        }
                      },
                      "id": 1666,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10363:503:5",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$1390_memory_ptr",
                        "typeString": "struct MerkleResistor.Tranche memory"
                      }
                    },
                    "src": "10328:538:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$1390_storage",
                      "typeString": "struct MerkleResistor.Tranche storage ref"
                    }
                  },
                  "id": 1668,
                  "nodeType": "ExpressionStatement",
                  "src": "10328:538:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1670,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1563,
                        "src": "10885:9:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1671,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1565,
                        "src": "10896:11:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1669,
                      "name": "withdraw",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1785,
                      "src": "10876:8:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$__$",
                        "typeString": "function (uint256,address)"
                      }
                    },
                    "id": 1672,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10876:32:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1673,
                  "nodeType": "ExpressionStatement",
                  "src": "10876:32:5"
                }
              ]
            },
            "documentation": {
              "id": 1561,
              "nodeType": "StructuredDocumentation",
              "src": "8005:933:5",
              "text": "@notice Called once per recipient of a vesting schedule to initialize the vesting schedule and fix the parameters\n @dev Only the recipient can initialize their own schedule here, because a meaningful choice is made\n @dev If the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree stats\n @param treeIndex index into array-like map of merkleTrees\n @param destination address that will receive tokens\n @param vestingTime the actual length of the vesting schedule, chosen by the user\n @param minTotalPayments the minimum amount of tokens they will receive, if they choose minEndTime as vestingTime\n @param maxTotalPayments the maximum amount of tokens they will receive, if they choose maxEndTime as vestingTime\n @param proof array of hashes linking leaf hash of (destination, minTotalPayments, maxTotalPayments) to root"
            },
            "functionSelector": "f287ad04",
            "id": 1675,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "8952:10:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1575,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1563,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "8968:9:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1675,
                  "src": "8963:14:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1562,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "8963:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1565,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "8987:11:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1675,
                  "src": "8979:19:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1564,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8979:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1567,
                  "mutability": "mutable",
                  "name": "vestingTime",
                  "nameLocation": "9005:11:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1675,
                  "src": "9000:16:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1566,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9000:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1569,
                  "mutability": "mutable",
                  "name": "minTotalPayments",
                  "nameLocation": "9023:16:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1675,
                  "src": "9018:21:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1568,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9018:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1571,
                  "mutability": "mutable",
                  "name": "maxTotalPayments",
                  "nameLocation": "9046:16:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1675,
                  "src": "9041:21:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1570,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9041:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1574,
                  "mutability": "mutable",
                  "name": "proof",
                  "nameLocation": "9081:5:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1675,
                  "src": "9064:22:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1572,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "9064:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 1573,
                    "nodeType": "ArrayTypeName",
                    "src": "9064:9:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8962:125:5"
            },
            "returnParameters": {
              "id": 1576,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9097:0:5"
            },
            "scope": 1924,
            "src": "8943:1972:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1784,
              "nodeType": "Block",
              "src": "11407:2421:5",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "baseExpression": {
                            "id": 1684,
                            "name": "initialized",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1411,
                            "src": "11533:11:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                              "typeString": "mapping(address => mapping(uint256 => bool))"
                            }
                          },
                          "id": 1686,
                          "indexExpression": {
                            "id": 1685,
                            "name": "destination",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1680,
                            "src": "11545:11:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "11533:24:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                            "typeString": "mapping(uint256 => bool)"
                          }
                        },
                        "id": 1688,
                        "indexExpression": {
                          "id": 1687,
                          "name": "treeIndex",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1678,
                          "src": "11558:9:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "11533:35:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f75206d75737420696e697469616c697a6520796f7572206163636f756e742066697273742e",
                        "id": 1689,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11570:41:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4abd8331dd14b306cce990886a8c58b8be69cac04657ffd8c84a7e7c5940d2d1",
                          "typeString": "literal_string \"You must initialize your account first.\""
                        },
                        "value": "You must initialize your account first."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4abd8331dd14b306cce990886a8c58b8be69cac04657ffd8c84a7e7c5940d2d1",
                          "typeString": "literal_string \"You must initialize your account first.\""
                        }
                      ],
                      "id": 1683,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "11525:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1690,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11525:87:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1691,
                  "nodeType": "ExpressionStatement",
                  "src": "11525:87:5"
                },
                {
                  "assignments": [
                    1694
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1694,
                      "mutability": "mutable",
                      "name": "tranche",
                      "nameLocation": "11679:7:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1784,
                      "src": "11663:23:5",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$1390_storage_ptr",
                        "typeString": "struct MerkleResistor.Tranche"
                      },
                      "typeName": {
                        "id": 1693,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1692,
                          "name": "Tranche",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1390,
                          "src": "11663:7:5"
                        },
                        "referencedDeclaration": 1390,
                        "src": "11663:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$1390_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1700,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 1695,
                        "name": "tranches",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1423,
                        "src": "11689:8:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$1390_storage_$_$",
                          "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche storage ref))"
                        }
                      },
                      "id": 1697,
                      "indexExpression": {
                        "id": 1696,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1680,
                        "src": "11698:11:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "11689:21:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$1390_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"
                      }
                    },
                    "id": 1699,
                    "indexExpression": {
                      "id": 1698,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1678,
                      "src": "11711:9:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "11689:32:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$1390_storage",
                      "typeString": "struct MerkleResistor.Tranche storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11663:58:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1705,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1702,
                            "name": "tranche",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1694,
                            "src": "11778:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Tranche_$1390_storage_ptr",
                              "typeString": "struct MerkleResistor.Tranche storage pointer"
                            }
                          },
                          "id": 1703,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "currentCoins",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1381,
                          "src": "11778:20:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1704,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "11802:1:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "11778:25:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f20636f696e73206c65667420746f207769746864726177",
                        "id": 1706,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11805:27:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f5408369ba8a5a8ab8865a5c8cf9d54818bf598d281aa43e2647b1ce4add273e",
                          "typeString": "literal_string \"No coins left to withdraw\""
                        },
                        "value": "No coins left to withdraw"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f5408369ba8a5a8ab8865a5c8cf9d54818bf598d281aa43e2647b1ce4add273e",
                          "typeString": "literal_string \"No coins left to withdraw\""
                        }
                      ],
                      "id": 1701,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "11770:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1707,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11770:63:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1708,
                  "nodeType": "ExpressionStatement",
                  "src": "11770:63:5"
                },
                {
                  "assignments": [
                    1710
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1710,
                      "mutability": "mutable",
                      "name": "currentWithdrawal",
                      "nameLocation": "11848:17:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1784,
                      "src": "11843:22:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1709,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "11843:4:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1712,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 1711,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "11868:1:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11843:26:5"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1717,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 1713,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "11994:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 1714,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "11994:15:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "expression": {
                        "id": 1715,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1694,
                        "src": "12013:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$1390_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 1716,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "endTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1385,
                      "src": "12013:15:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "11994:34:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 1736,
                    "nodeType": "Block",
                    "src": "12101:263:5",
                    "statements": [
                      {
                        "expression": {
                          "id": 1734,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1724,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1710,
                            "src": "12262:17:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1733,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1729,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 1725,
                                      "name": "block",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -4,
                                      "src": "12283:5:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_block",
                                        "typeString": "block"
                                      }
                                    },
                                    "id": 1726,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "timestamp",
                                    "nodeType": "MemberAccess",
                                    "src": "12283:15:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 1727,
                                      "name": "tranche",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1694,
                                      "src": "12301:7:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Tranche_$1390_storage_ptr",
                                        "typeString": "struct MerkleResistor.Tranche storage pointer"
                                      }
                                    },
                                    "id": 1728,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lastWithdrawalTime",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1389,
                                    "src": "12301:26:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "12283:44:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 1730,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "12282:46:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "expression": {
                                "id": 1731,
                                "name": "tranche",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1694,
                                "src": "12331:7:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Tranche_$1390_storage_ptr",
                                  "typeString": "struct MerkleResistor.Tranche storage pointer"
                                }
                              },
                              "id": 1732,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "coinsPerSecond",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1387,
                              "src": "12331:22:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "12282:71:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12262:91:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1735,
                        "nodeType": "ExpressionStatement",
                        "src": "12262:91:5"
                      }
                    ]
                  },
                  "id": 1737,
                  "nodeType": "IfStatement",
                  "src": "11990:374:5",
                  "trueBody": {
                    "id": 1723,
                    "nodeType": "Block",
                    "src": "12030:65:5",
                    "statements": [
                      {
                        "expression": {
                          "id": 1721,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1718,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1710,
                            "src": "12044:17:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1719,
                              "name": "tranche",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1694,
                              "src": "12064:7:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Tranche_$1390_storage_ptr",
                                "typeString": "struct MerkleResistor.Tranche storage pointer"
                              }
                            },
                            "id": 1720,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "currentCoins",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1381,
                            "src": "12064:20:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12044:40:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1722,
                        "nodeType": "ExpressionStatement",
                        "src": "12044:40:5"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    1740
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1740,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "12415:4:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1784,
                      "src": "12396:23:5",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$1405_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 1739,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1738,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1405,
                          "src": "12396:10:5"
                        },
                        "referencedDeclaration": 1405,
                        "src": "12396:10:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$1405_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1744,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1741,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1416,
                      "src": "12422:11:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$1405_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 1743,
                    "indexExpression": {
                      "id": 1742,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1678,
                      "src": "12434:9:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "12422:22:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$1405_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12396:48:5"
                },
                {
                  "expression": {
                    "id": 1749,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1745,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1694,
                        "src": "12643:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$1390_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 1747,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "currentCoins",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1381,
                      "src": "12643:20:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 1748,
                      "name": "currentWithdrawal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1710,
                      "src": "12667:17:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12643:41:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1750,
                  "nodeType": "ExpressionStatement",
                  "src": "12643:41:5"
                },
                {
                  "expression": {
                    "id": 1756,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1751,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1694,
                        "src": "12876:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$1390_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 1753,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "lastWithdrawalTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1389,
                      "src": "12876:26:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 1754,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "12905:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 1755,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "12905:15:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12876:44:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1757,
                  "nodeType": "ExpressionStatement",
                  "src": "12876:44:5"
                },
                {
                  "expression": {
                    "id": 1762,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1758,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1740,
                        "src": "13055:4:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$1405_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 1760,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1404,
                      "src": "13055:17:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 1761,
                      "name": "currentWithdrawal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1710,
                      "src": "13076:17:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "13055:38:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1763,
                  "nodeType": "ExpressionStatement",
                  "src": "13055:38:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1770,
                            "name": "destination",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1680,
                            "src": "13666:11:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1771,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1710,
                            "src": "13679:17:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 1766,
                                  "name": "tree",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1740,
                                  "src": "13638:4:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_MerkleTree_$1405_storage_ptr",
                                    "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                                  }
                                },
                                "id": 1767,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "tokenAddress",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1402,
                                "src": "13638:17:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 1765,
                              "name": "IERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2387,
                              "src": "13631:6:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC20_$2387_$",
                                "typeString": "type(contract IERC20)"
                              }
                            },
                            "id": 1768,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13631:25:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$2387",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 1769,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 2336,
                          "src": "13631:34:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 1772,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13631:66:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546f6b656e207472616e73666572206661696c6564",
                        "id": 1773,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "13699:23:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4",
                          "typeString": "literal_string \"Token transfer failed\""
                        },
                        "value": "Token transfer failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4",
                          "typeString": "literal_string \"Token transfer failed\""
                        }
                      ],
                      "id": 1764,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "13623:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 1774,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13623:100:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1775,
                  "nodeType": "ExpressionStatement",
                  "src": "13623:100:5"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 1777,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1678,
                        "src": "13757:9:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1778,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1680,
                        "src": "13768:11:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1779,
                        "name": "currentWithdrawal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1710,
                        "src": "13781:17:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1780,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1694,
                          "src": "13800:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$1390_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1781,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "currentCoins",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1381,
                        "src": "13800:20:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1776,
                      "name": "WithdrawalOccurred",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1436,
                      "src": "13738:18:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,address,uint256,uint256)"
                      }
                    },
                    "id": 1782,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13738:83:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1783,
                  "nodeType": "EmitStatement",
                  "src": "13733:88:5"
                }
              ]
            },
            "documentation": {
              "id": 1676,
              "nodeType": "StructuredDocumentation",
              "src": "10921:419:5",
              "text": "@notice Move unlocked funds to the destination\n @dev Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of\n @dev who provides the proof and pays the gas, msg.sender is not used in this function\n @param treeIndex index into array-like map of merkleTrees, which tree should we apply the proof to?\n @param destination recipient of tokens"
            },
            "functionSelector": "00f714ce",
            "id": 1785,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "11354:8:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1681,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1678,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "11368:9:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1785,
                  "src": "11363:14:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1677,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "11363:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1680,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "11387:11:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1785,
                  "src": "11379:19:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1679,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11379:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11362:37:5"
            },
            "returnParameters": {
              "id": 1682,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11407:0:5"
            },
            "scope": 1924,
            "src": "11345:2483:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1922,
              "nodeType": "Block",
              "src": "14899:2781:5",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1807,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1805,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1788,
                      "src": "15031:9:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 1806,
                      "name": "numTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1377,
                      "src": "15043:8:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "15031:20:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1815,
                  "nodeType": "IfStatement",
                  "src": "15027:74:5",
                  "trueBody": {
                    "id": 1814,
                    "nodeType": "Block",
                    "src": "15053:48:5",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "hexValue": "66616c7365",
                              "id": 1808,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15075:5:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "hexValue": "30",
                              "id": 1809,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15082:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 1810,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15085:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 1811,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15088:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "id": 1812,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "15074:16:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$",
                            "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"
                          }
                        },
                        "functionReturnParameters": 1804,
                        "id": 1813,
                        "nodeType": "Return",
                        "src": "15067:23:5"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    1818
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1818,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "15224:4:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1922,
                      "src": "15206:22:5",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$1405_memory_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 1817,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1816,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1405,
                          "src": "15206:10:5"
                        },
                        "referencedDeclaration": 1405,
                        "src": "15206:10:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$1405_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1822,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1819,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1416,
                      "src": "15231:11:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$1405_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 1821,
                    "indexExpression": {
                      "id": 1820,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1788,
                      "src": "15243:9:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "15231:22:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$1405_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15206:47:5"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 1831,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1826,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1823,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1790,
                        "src": "15356:11:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "expression": {
                          "id": 1824,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1818,
                          "src": "15370:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$1405_memory_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree memory"
                          }
                        },
                        "id": 1825,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "maxEndTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1398,
                        "src": "15370:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "15356:29:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1830,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1827,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1790,
                        "src": "15389:11:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "expression": {
                          "id": 1828,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1818,
                          "src": "15403:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$1405_memory_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree memory"
                          }
                        },
                        "id": 1829,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "minEndTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1396,
                        "src": "15403:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "15389:29:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "15356:62:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1839,
                  "nodeType": "IfStatement",
                  "src": "15352:116:5",
                  "trueBody": {
                    "id": 1838,
                    "nodeType": "Block",
                    "src": "15420:48:5",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "hexValue": "66616c7365",
                              "id": 1832,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15442:5:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "hexValue": "30",
                              "id": 1833,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15449:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 1834,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15452:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 1835,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15455:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "id": 1836,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "15441:16:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$",
                            "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"
                          }
                        },
                        "functionReturnParameters": 1804,
                        "id": 1837,
                        "nodeType": "Return",
                        "src": "15434:23:5"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    1841
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1841,
                      "mutability": "mutable",
                      "name": "totalCoins",
                      "nameLocation": "15483:10:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1922,
                      "src": "15478:15:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1840,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "15478:4:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1842,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15478:15:5"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1846,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1843,
                      "name": "vestingTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1790,
                      "src": "15507:11:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 1844,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1818,
                        "src": "15522:4:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$1405_memory_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree memory"
                        }
                      },
                      "id": 1845,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "maxEndTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1398,
                      "src": "15522:15:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "15507:30:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 1883,
                    "nodeType": "Block",
                    "src": "15756:1051:5",
                    "statements": [
                      {
                        "assignments": [
                          1853
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1853,
                            "mutability": "mutable",
                            "name": "paymentSlope",
                            "nameLocation": "16419:12:5",
                            "nodeType": "VariableDeclaration",
                            "scope": 1883,
                            "src": "16414:17:5",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1852,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "16414:4:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1867,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1866,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1859,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1856,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1854,
                                    "name": "maxTotalPayments",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1794,
                                    "src": "16435:16:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "id": 1855,
                                    "name": "minTotalPayments",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1792,
                                    "src": "16454:16:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "16435:35:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 1857,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "16434:37:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "id": 1858,
                              "name": "PRECISION",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1426,
                              "src": "16474:9:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "16434:49:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1864,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1860,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1818,
                                    "src": "16487:4:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$1405_memory_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree memory"
                                    }
                                  },
                                  "id": 1861,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "maxEndTime",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1398,
                                  "src": "16487:15:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1862,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1818,
                                    "src": "16505:4:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$1405_memory_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree memory"
                                    }
                                  },
                                  "id": 1863,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "minEndTime",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1396,
                                  "src": "16505:15:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "16487:33:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 1865,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "16486:35:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16434:87:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "16414:107:5"
                      },
                      {
                        "expression": {
                          "id": 1881,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1868,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1841,
                            "src": "16704:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1880,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1877,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1875,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1869,
                                      "name": "paymentSlope",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1853,
                                      "src": "16718:12:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 1873,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 1870,
                                            "name": "vestingTime",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1790,
                                            "src": "16734:11:5",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "-",
                                          "rightExpression": {
                                            "expression": {
                                              "id": 1871,
                                              "name": "tree",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1818,
                                              "src": "16748:4:5",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_MerkleTree_$1405_memory_ptr",
                                                "typeString": "struct MerkleResistor.MerkleTree memory"
                                              }
                                            },
                                            "id": 1872,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "minEndTime",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 1396,
                                            "src": "16748:15:5",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "16734:29:5",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 1874,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "16733:31:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "16718:46:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "id": 1876,
                                    "name": "PRECISION",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1426,
                                    "src": "16767:9:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "16718:58:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 1878,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "16717:60:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "id": 1879,
                              "name": "minTotalPayments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1792,
                              "src": "16780:16:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "16717:79:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16704:92:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1882,
                        "nodeType": "ExpressionStatement",
                        "src": "16704:92:5"
                      }
                    ]
                  },
                  "id": 1884,
                  "nodeType": "IfStatement",
                  "src": "15503:1304:5",
                  "trueBody": {
                    "id": 1851,
                    "nodeType": "Block",
                    "src": "15539:211:5",
                    "statements": [
                      {
                        "expression": {
                          "id": 1849,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1847,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1841,
                            "src": "15710:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1848,
                            "name": "maxTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1794,
                            "src": "15723:16:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "15710:29:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1850,
                        "nodeType": "ExpressionStatement",
                        "src": "15710:29:5"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    1886
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1886,
                      "mutability": "mutable",
                      "name": "coinsPerSecond",
                      "nameLocation": "17273:14:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1922,
                      "src": "17268:19:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1885,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "17268:4:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1903,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1902,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1896,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1887,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1841,
                            "src": "17291:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1894,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "313030",
                                      "id": 1890,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "17310:3:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      },
                                      "value": "100"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      }
                                    ],
                                    "id": 1889,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "17305:4:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 1888,
                                      "name": "uint",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "17305:4:5",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1891,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "17305:9:5",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1892,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1818,
                                    "src": "17317:4:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$1405_memory_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree memory"
                                    }
                                  },
                                  "id": 1893,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pctUpFront",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 1400,
                                  "src": "17317:15:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "17305:27:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 1895,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "17304:29:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "17291:42:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1897,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "17290:44:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1900,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1898,
                            "name": "vestingTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1790,
                            "src": "17338:11:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "hexValue": "313030",
                            "id": 1899,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "17352:3:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_100_by_1",
                              "typeString": "int_const 100"
                            },
                            "value": "100"
                          },
                          "src": "17338:17:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1901,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "17337:19:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "17290:66:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "17268:88:5"
                },
                {
                  "assignments": [
                    1905
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1905,
                      "mutability": "mutable",
                      "name": "startTime",
                      "nameLocation": "17537:9:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1922,
                      "src": "17532:14:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1904,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "17532:4:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1915,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1914,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1909,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 1906,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "17549:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 1907,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "17549:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "id": 1908,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1790,
                        "src": "17567:11:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "17549:29:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1912,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1910,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1841,
                            "src": "17582:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 1911,
                            "name": "coinsPerSecond",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1886,
                            "src": "17595:14:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "17582:27:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1913,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "17581:29:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "17549:61:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "17532:78:5"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "74727565",
                        "id": 1916,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "17629:4:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      {
                        "id": 1917,
                        "name": "totalCoins",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1841,
                        "src": "17635:10:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1918,
                        "name": "coinsPerSecond",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1886,
                        "src": "17647:14:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1919,
                        "name": "startTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1905,
                        "src": "17663:9:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 1920,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "17628:45:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(bool,uint256,uint256,uint256)"
                    }
                  },
                  "functionReturnParameters": 1804,
                  "id": 1921,
                  "nodeType": "Return",
                  "src": "17621:52:5"
                }
              ]
            },
            "documentation": {
              "id": 1786,
              "nodeType": "StructuredDocumentation",
              "src": "13834:904:5",
              "text": "@notice Determine if the proposed vesting schedule is legit\n @dev Anyone may call this to check, but it also returns values used in the initialization of vesting schedules\n @param treeIndex index into array-like map of merkleTrees, which tree are we talking about?\n @param vestingTime user chosen length of vesting schedule\n @param minTotalPayments pre-committed (in the root hash) minimum of possible totalCoins\n @param maxTotalPayments pre-committed (in the root hash) maximum of possible totalCoins\n @return valid is the proposed vesting-schedule valid\n @return totalCoins amount of coins allocated in the vesting schedule\n @return coinsPerSecond amount of coins released every second, in the proposed vesting schedule\n @return startTime start time of vesting schedule implied by supplied parameters, will always be <= block.timestamp"
            },
            "functionSelector": "6fb6ec41",
            "id": 1923,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyVestingSchedule",
            "nameLocation": "14752:21:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1795,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1788,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "14779:9:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1923,
                  "src": "14774:14:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1787,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "14774:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1790,
                  "mutability": "mutable",
                  "name": "vestingTime",
                  "nameLocation": "14795:11:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1923,
                  "src": "14790:16:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1789,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "14790:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1792,
                  "mutability": "mutable",
                  "name": "minTotalPayments",
                  "nameLocation": "14813:16:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1923,
                  "src": "14808:21:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1791,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "14808:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1794,
                  "mutability": "mutable",
                  "name": "maxTotalPayments",
                  "nameLocation": "14836:16:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1923,
                  "src": "14831:21:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1793,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "14831:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14773:80:5"
            },
            "returnParameters": {
              "id": 1804,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1797,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1923,
                  "src": "14875:4:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1796,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "14875:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1799,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1923,
                  "src": "14881:4:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1798,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "14881:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1801,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1923,
                  "src": "14887:4:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1800,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "14887:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1803,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1923,
                  "src": "14893:4:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1802,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "14893:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14874:24:5"
            },
            "scope": 1924,
            "src": "14743:2937:5",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 1925,
        "src": "1454:16229:5",
        "usedErrors": []
      }
    ],
    "src": "42:17642:5"
  },
  "bytecode": "60806040526000805534801561001457600080fd5b506110f3806100246000396000f3fe608060405234801561001057600080fd5b506004361061009d5760003560e01c8063aaf5eb6811610066578063aaf5eb68146101db578063c26cb54f146101e5578063d71383ed14610260578063f16ad51e14610273578063f287ad041461028657600080fd5b8062f714ce146100a2578063390b7c66146100b75780636fb6ec41146100d357806385d88cb11461010857806386bb82491461019d575b600080fd5b6100b56100b0366004610d73565b610299565b005b6100c060005481565b6040519081526020015b60405180910390f35b6100e66100e1366004610d9f565b61052d565b60408051941515855260208501939093529183015260608201526080016100ca565b61015f610116366004610dd1565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006909501549395949293919290916001600160a01b039091169087565b60408051978852602088019690965294860193909352606085019190915260808401526001600160a01b031660a083015260c082015260e0016100ca565b6101cb6101ab366004610dea565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ca565b6100c0620f424081565b6102336101f3366004610dea565b6003602081815260009384526040808520909152918352912080546001820154600283015493830154600484015460059094015492949193919290919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100ca565b6100b561026e366004610e14565b6106d4565b6100b5610281366004610e70565b610898565b6100b5610294366004610ea8565b6109cc565b6001600160a01b038116600090815260016020908152604080832085845290915290205460ff166103215760405162461bcd60e51b815260206004820152602760248201527f596f75206d75737420696e697469616c697a6520796f7572206163636f756e74604482015266103334b939ba1760c91b60648201526084015b60405180910390fd5b6001600160a01b0381166000908152600360209081526040808320858452909152902060018101546103955760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f696e73206c65667420746f207769746864726177000000000000006044820152606401610318565b6000816003015442106103ad575060018101546103ce565b600482015460058301546103c19042610fb4565b6103cb9190610fcb565b90505b6000848152600260205260408120600184018054919284926103f1908490610fb4565b9091555050426005840155600681018054839190600090610413908490610fb4565b9091555050600581015460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af115801561046d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104919190610fea565b6104d55760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b836001600160a01b0316857f1680e4cfe90468085407ef2b599dbe94b0aa30ff9f180f0e41d22eb71c87287284866001015460405161051e929190918252602082015260400190565b60405180910390a35050505050565b60008060008060005488111561054e575060009250829150819050806106c9565b600088815260026020818152604092839020835160e0810185528154815260018201549281019290925291820154928101929092526003810154606083018190526004820154608084015260058201546001600160a01b031660a084015260069091015460c08301528811806105c75750806040015188105b156105e0576000806000809450945094509450506106c9565b600081606001518914156105f5575085610666565b60008260400151836060015161060b9190610fb4565b620f42406106198b8b610fb4565b6106239190610fcb565b61062d9190611013565b905088620f424084604001518c6106449190610fb4565b61064e9084610fcb565b6106589190611013565b6106629190611035565b9150505b60006106738a6064610fcb565b6080840151610683906064610fb4565b61068d9084610fcb565b6106979190611013565b905060006106a58284611013565b6106af8c42611035565b6106b99190610fb4565b6001985092965090945090925050505b945094509450949050565b606483106107185760405162461bcd60e51b81526020600482015260116024820152700706374557046726f6e74203e3d2031303607c1b6044820152606401610318565b8385106107775760405162461bcd60e51b815260206004820152602760248201527f6d696e456e6454696d65206d757374206265206c657373207468616e206d6178604482015266456e6454696d6560c81b6064820152608401610318565b6040518060e00160405280888152602001878152602001868152602001858152602001848152602001836001600160a01b0316815260200160008152506002600080600081546107c69061104d565b918290555081526020808201929092526040908101600090812084518155928401516001840155908301516002830155606083015160038301556080830151600483015560a08301516005830180546001600160a01b0319166001600160a01b0390921691909117905560c090920151600690910155546108479082610898565b60005460408051898152602081018990526001600160a01b03851692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a350505050505050565b6000828152600260205260408120600681018054919284926108bb908490611035565b909155505060058101546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d9190610fea565b6109815760405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b60058101546040518381526001600160a01b039091169084907fb162210da7d23d82c18cff5af46d3562661d26b42a6848fa28d64a6bdc70386a9060200160405180910390a3505050565b336001600160a01b03861614610a305760405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616044820152636e63686560e01b6064820152608401610318565b6001600160a01b038516600090815260016020908152604080832089845290915290205460ff1615610a9a5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610318565b604080516001600160a01b03871660208201529081018490526060810183905260009060800160408051601f19818403018152828252805160209182012060008b815260028084529084902060e0860185528054808752600182015494870194909452908101548585015260038101546060860152600480820154608087015260058201546001600160a01b031660a087015260069091015460c08601529251632769cd1f60e21b815290945073__MerkleLib_____________________________92639da7347c92610b739290918791899101611068565b602060405180830381865af4158015610b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb49190610fea565b610c005760405162461bcd60e51b815260206004820181905260248201527f5468652070726f6f6620636f756c64206e6f742062652076657269666965642e6044820152606401610318565b6001600160a01b03871660009081526001602081815260408084208c85529091528220805460ff19169091179055808080610c3d8c8b8b8b61052d565b935093509350935083610c925760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67207363686564756c6500000000000000006044820152606401610318565b6040518060c001604052808481526020018481526020018281526020018b42610cbb9190611035565b815260200183815260200182815250600360008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050610d498c8c610299565b505050505050505050505050565b80356001600160a01b0381168114610d6e57600080fd5b919050565b60008060408385031215610d8657600080fd5b82359150610d9660208401610d57565b90509250929050565b60008060008060808587031215610db557600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215610de357600080fd5b5035919050565b60008060408385031215610dfd57600080fd5b610e0683610d57565b946020939093013593505050565b600080600080600080600060e0888a031215610e2f57600080fd5b8735965060208801359550604088013594506060880135935060808801359250610e5b60a08901610d57565b915060c0880135905092959891949750929550565b60008060408385031215610e8357600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610ec157600080fd5b863595506020610ed2818901610d57565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610f0457600080fd5b818a0191508a601f830112610f1857600080fd5b813581811115610f2a57610f2a610e92565b8060051b604051601f19603f83011681018181108582111715610f4f57610f4f610e92565b60405291825284820192508381018501918d831115610f6d57600080fd5b938501935b82851015610f8b57843584529385019392850192610f72565b8096505050505050509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015610fc657610fc6610f9e565b500390565b6000816000190483118215151615610fe557610fe5610f9e565b500290565b600060208284031215610ffc57600080fd5b8151801515811461100c57600080fd5b9392505050565b60008261103057634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561104857611048610f9e565b500190565b600060001982141561106157611061610f9e565b5060010190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b818110156110af57845183529383019391830191600101611093565b50909897505050505050505056fea2646970667358221220198ffe822c1c194d96499bea219612d820d133b281e67d5819fb658313d30dfb64736f6c634300080c0033",
  "bytecodeSha1": "1f6b2bfb5884cc0dbe972589d90a0a914cc2492c",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "MerkleResistor",
  "coverageMap": {
    "branches": {
      "4": {},
      "5": {
        "MerkleResistor.addMerkleTree": {
          "36": [
            5571,
            5587,
            true
          ],
          "37": [
            5627,
            5650,
            true
          ]
        },
        "MerkleResistor.depositTokens": {
          "38": [
            7815,
            7893,
            true
          ]
        },
        "MerkleResistor.initialize": {
          "39": [
            9172,
            9197,
            true
          ],
          "40": [
            9292,
            9328,
            true
          ],
          "41": [
            9704,
            9744,
            true
          ],
          "42": [
            10100,
            10105,
            true
          ]
        },
        "MerkleResistor.verifyVestingSchedule": {
          "32": [
            15031,
            15051,
            false
          ],
          "33": [
            15356,
            15385,
            true
          ],
          "34": [
            15389,
            15418,
            false
          ],
          "35": [
            15507,
            15537,
            false
          ]
        },
        "MerkleResistor.withdraw": {
          "29": [
            11533,
            11568,
            true
          ],
          "30": [
            11994,
            12028,
            false
          ],
          "31": [
            13631,
            13697,
            true
          ]
        }
      },
      "7": {}
    },
    "statements": {
      "4": {},
      "5": {
        "MerkleResistor.addMerkleTree": {
          "14": [
            5563,
            5609
          ],
          "15": [
            5619,
            5694
          ],
          "16": [
            5761,
            6034
          ],
          "17": [
            6310,
            6347
          ],
          "18": [
            6357,
            6420
          ]
        },
        "MerkleResistor.depositTokens": {
          "19": [
            7032,
            7064
          ],
          "20": [
            7807,
            7919
          ],
          "21": [
            7929,
            7992
          ]
        },
        "MerkleResistor.initialize": {
          "22": [
            9164,
            9238
          ],
          "23": [
            9284,
            9352
          ],
          "24": [
            9696,
            9781
          ],
          "25": [
            9879,
            9921
          ],
          "26": [
            10092,
            10134
          ],
          "27": [
            10328,
            10866
          ],
          "28": [
            10876,
            10908
          ]
        },
        "MerkleResistor.verifyVestingSchedule": {
          "9": [
            15067,
            15090
          ],
          "10": [
            15434,
            15457
          ],
          "11": [
            15710,
            15739
          ],
          "12": [
            16704,
            16796
          ],
          "13": [
            17621,
            17673
          ]
        },
        "MerkleResistor.withdraw": {
          "0": [
            11525,
            11612
          ],
          "1": [
            11770,
            11833
          ],
          "2": [
            12044,
            12084
          ],
          "3": [
            12262,
            12353
          ],
          "4": [
            12643,
            12684
          ],
          "5": [
            12876,
            12920
          ],
          "6": [
            13055,
            13093
          ],
          "7": [
            13623,
            13723
          ],
          "8": [
            13733,
            13821
          ]
        }
      },
      "7": {}
    }
  },
  "dependencies": [
    "IERC20",
    "MerkleLib"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061009d5760003560e01c8063aaf5eb6811610066578063aaf5eb68146101db578063c26cb54f146101e5578063d71383ed14610260578063f16ad51e14610273578063f287ad041461028657600080fd5b8062f714ce146100a2578063390b7c66146100b75780636fb6ec41146100d357806385d88cb11461010857806386bb82491461019d575b600080fd5b6100b56100b0366004610d73565b610299565b005b6100c060005481565b6040519081526020015b60405180910390f35b6100e66100e1366004610d9f565b61052d565b60408051941515855260208501939093529183015260608201526080016100ca565b61015f610116366004610dd1565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006909501549395949293919290916001600160a01b039091169087565b60408051978852602088019690965294860193909352606085019190915260808401526001600160a01b031660a083015260c082015260e0016100ca565b6101cb6101ab366004610dea565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ca565b6100c0620f424081565b6102336101f3366004610dea565b6003602081815260009384526040808520909152918352912080546001820154600283015493830154600484015460059094015492949193919290919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100ca565b6100b561026e366004610e14565b6106d4565b6100b5610281366004610e70565b610898565b6100b5610294366004610ea8565b6109cc565b6001600160a01b038116600090815260016020908152604080832085845290915290205460ff166103215760405162461bcd60e51b815260206004820152602760248201527f596f75206d75737420696e697469616c697a6520796f7572206163636f756e74604482015266103334b939ba1760c91b60648201526084015b60405180910390fd5b6001600160a01b0381166000908152600360209081526040808320858452909152902060018101546103955760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f696e73206c65667420746f207769746864726177000000000000006044820152606401610318565b6000816003015442106103ad575060018101546103ce565b600482015460058301546103c19042610fb4565b6103cb9190610fcb565b90505b6000848152600260205260408120600184018054919284926103f1908490610fb4565b9091555050426005840155600681018054839190600090610413908490610fb4565b9091555050600581015460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af115801561046d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104919190610fea565b6104d55760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b836001600160a01b0316857f1680e4cfe90468085407ef2b599dbe94b0aa30ff9f180f0e41d22eb71c87287284866001015460405161051e929190918252602082015260400190565b60405180910390a35050505050565b60008060008060005488111561054e575060009250829150819050806106c9565b600088815260026020818152604092839020835160e0810185528154815260018201549281019290925291820154928101929092526003810154606083018190526004820154608084015260058201546001600160a01b031660a084015260069091015460c08301528811806105c75750806040015188105b156105e0576000806000809450945094509450506106c9565b600081606001518914156105f5575085610666565b60008260400151836060015161060b9190610fb4565b620f42406106198b8b610fb4565b6106239190610fcb565b61062d9190611013565b905088620f424084604001518c6106449190610fb4565b61064e9084610fcb565b6106589190611013565b6106629190611035565b9150505b60006106738a6064610fcb565b6080840151610683906064610fb4565b61068d9084610fcb565b6106979190611013565b905060006106a58284611013565b6106af8c42611035565b6106b99190610fb4565b6001985092965090945090925050505b945094509450949050565b606483106107185760405162461bcd60e51b81526020600482015260116024820152700706374557046726f6e74203e3d2031303607c1b6044820152606401610318565b8385106107775760405162461bcd60e51b815260206004820152602760248201527f6d696e456e6454696d65206d757374206265206c657373207468616e206d6178604482015266456e6454696d6560c81b6064820152608401610318565b6040518060e00160405280888152602001878152602001868152602001858152602001848152602001836001600160a01b0316815260200160008152506002600080600081546107c69061104d565b918290555081526020808201929092526040908101600090812084518155928401516001840155908301516002830155606083015160038301556080830151600483015560a08301516005830180546001600160a01b0319166001600160a01b0390921691909117905560c090920151600690910155546108479082610898565b60005460408051898152602081018990526001600160a01b03851692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a350505050505050565b6000828152600260205260408120600681018054919284926108bb908490611035565b909155505060058101546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093d9190610fea565b6109815760405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b60058101546040518381526001600160a01b039091169084907fb162210da7d23d82c18cff5af46d3562661d26b42a6848fa28d64a6bdc70386a9060200160405180910390a3505050565b336001600160a01b03861614610a305760405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616044820152636e63686560e01b6064820152608401610318565b6001600160a01b038516600090815260016020908152604080832089845290915290205460ff1615610a9a5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610318565b604080516001600160a01b03871660208201529081018490526060810183905260009060800160408051601f19818403018152828252805160209182012060008b815260028084529084902060e0860185528054808752600182015494870194909452908101548585015260038101546060860152600480820154608087015260058201546001600160a01b031660a087015260069091015460c08601529251632769cd1f60e21b815290945073__$61dd25696c02d5bd2863c8d2c1a2324a87$__92639da7347c92610b739290918791899101611068565b602060405180830381865af4158015610b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb49190610fea565b610c005760405162461bcd60e51b815260206004820181905260248201527f5468652070726f6f6620636f756c64206e6f742062652076657269666965642e6044820152606401610318565b6001600160a01b03871660009081526001602081815260408084208c85529091528220805460ff19169091179055808080610c3d8c8b8b8b61052d565b935093509350935083610c925760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67207363686564756c6500000000000000006044820152606401610318565b6040518060c001604052808481526020018481526020018281526020018b42610cbb9190611035565b815260200183815260200182815250600360008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050610d498c8c610299565b505050505050505050505050565b80356001600160a01b0381168114610d6e57600080fd5b919050565b60008060408385031215610d8657600080fd5b82359150610d9660208401610d57565b90509250929050565b60008060008060808587031215610db557600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215610de357600080fd5b5035919050565b60008060408385031215610dfd57600080fd5b610e0683610d57565b946020939093013593505050565b600080600080600080600060e0888a031215610e2f57600080fd5b8735965060208801359550604088013594506060880135935060808801359250610e5b60a08901610d57565b915060c0880135905092959891949750929550565b60008060408385031215610e8357600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610ec157600080fd5b863595506020610ed2818901610d57565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610f0457600080fd5b818a0191508a601f830112610f1857600080fd5b813581811115610f2a57610f2a610e92565b8060051b604051601f19603f83011681018181108582111715610f4f57610f4f610e92565b60405291825284820192508381018501918d831115610f6d57600080fd5b938501935b82851015610f8b57843584529385019392850192610f72565b8096505050505050509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015610fc657610fc6610f9e565b500390565b6000816000190483118215151615610fe557610fe5610f9e565b500290565b600060208284031215610ffc57600080fd5b8151801515811461100c57600080fd5b9392505050565b60008261103057634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561104857611048610f9e565b500190565b600060001982141561106157611061610f9e565b5060010190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b818110156110af57845183529383019391830191600101611093565b50909897505050505050505056fea2646970667358221220198ffe822c1c194d96499bea219612d820d133b281e67d5819fb658313d30dfb64736f6c634300080c0033",
  "deployedSourceMap": "1454:16229:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11345:2483;;;;;;:::i;:::-;;:::i;:::-;;1557:24;;;;;;;;;597:25:8;;;585:2;570:18;1557:24:5;;;;;;;;14743:2937;;;;;;:::i;:::-;;:::i;:::-;;;;1273:14:8;;1266:22;1248:41;;1320:2;1305:18;;1298:34;;;;1348:18;;;1341:34;1406:2;1391:18;;1384:34;1235:3;1220:19;14743:2937:5;1023:401:8;3557:47:5;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3557:47:5;;;;;;;;;;1929:25:8;;;1985:2;1970:18;;1963:34;;;;2013:18;;;2006:34;;;;2071:2;2056:18;;2049:34;;;;2114:3;2099:19;;2092:35;-1:-1:-1;;;;;2164:32:8;2184:3;2143:19;;2136:61;2228:3;2213:19;;2206:35;1916:3;1901:19;3557:47:5;1614:633:8;3397:62:5;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2676:14:8;;2669:22;2651:41;;2639:2;2624:18;3397:62:5;2511:187:8;3808:40:5;;3841:7;3808:40;;3673:62;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2990:25:8;;;3046:2;3031:18;;3024:34;;;;3074:18;;;3067:34;;;;3132:2;3117:18;;3110:34;3175:3;3160:19;;3153:35;3219:3;3204:19;;3197:35;2977:3;2962:19;3673:62:5;2703:535:8;5352:1075:5;;;;;;:::i;:::-;;:::i;6802:1197::-;;;;;;:::i;:::-;;:::i;8943:1972::-;;;;;;:::i;:::-;;:::i;11345:2483::-;-1:-1:-1;;;;;11533:24:5;;;;;;:11;:24;;;;;;;;:35;;;;;;;;;;;11525:87;;;;-1:-1:-1;;;11525:87:5;;5902:2:8;11525:87:5;;;5884:21:8;5941:2;5921:18;;;5914:30;5980:34;5960:18;;;5953:62;-1:-1:-1;;;6031:18:8;;;6024:37;6078:19;;11525:87:5;;;;;;;;;-1:-1:-1;;;;;11689:21:5;;11663:23;11689:21;;;:8;:21;;;;;;;;:32;;;;;;;;11778:20;;;;11770:63;;;;-1:-1:-1;;;11770:63:5;;6310:2:8;11770:63:5;;;6292:21:8;6349:2;6329:18;;;6322:30;6388:27;6368:18;;;6361:55;6433:18;;11770:63:5;6108:349:8;11770:63:5;11843:22;12013:7;:15;;;11994;:34;11990:374;;-1:-1:-1;12064:20:5;;;;11990:374;;;12331:22;;;;12301:26;;;;12283:44;;:15;:44;:::i;:::-;12282:71;;;;:::i;:::-;12262:91;;11990:374;12396:23;12422:22;;;:11;:22;;;;;12643:20;;;:41;;12422:22;;12667:17;;12643:41;;12667:17;;12643:41;:::i;:::-;;;;-1:-1:-1;;12905:15:5;12876:26;;;:44;13055:17;;;:38;;13076:17;;13055;;;:38;;13076:17;;13055:38;:::i;:::-;;;;-1:-1:-1;;13638:17:5;;;;13631:66;;-1:-1:-1;;;13631:66:5;;-1:-1:-1;;;;;7089:32:8;;;13631:66:5;;;7071:51:8;7138:18;;;7131:34;;;13638:17:5;;;;13631:34;;7044:18:8;;13631:66:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13623:100;;;;-1:-1:-1;;;13623:100:5;;7660:2:8;13623:100:5;;;7642:21:8;7699:2;7679:18;;;7672:30;-1:-1:-1;;;7718:18:8;;;7711:51;7779:18;;13623:100:5;7458:345:8;13623:100:5;13768:11;-1:-1:-1;;;;;13738:83:5;13757:9;13738:83;13781:17;13800:7;:20;;;13738:83;;;;;;7982:25:8;;;8038:2;8023:18;;8016:34;7970:2;7955:18;;7808:248;13738:83:5;;;;;;;;11407:2421;;;11345:2483;;:::o;14743:2937::-;14875:4;14881;14887;14893;15043:8;;15031:9;:20;15027:74;;;-1:-1:-1;15075:5:5;;-1:-1:-1;15075:5:5;;-1:-1:-1;15075:5:5;;-1:-1:-1;15075:5:5;15067:23;;15027:74;15206:22;15231;;;:11;:22;;;;;;;;;15206:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;15206:47:5;;;;;;;;;;;;;;15356:29;;;:62;;;15403:4;:15;;;15389:11;:29;15356:62;15352:116;;;15442:5;15449:1;15452;15455;15434:23;;;;;;;;;;;15352:116;15478:15;15522:4;:15;;;15507:11;:30;15503:1304;;;-1:-1:-1;15723:16:5;15503:1304;;;16414:17;16505:4;:15;;;16487:4;:15;;;:33;;;;:::i;:::-;3841:7;16435:35;16454:16;16435;:35;:::i;:::-;16434:49;;;;:::i;:::-;:87;;;;:::i;:::-;16414:107;;16780:16;3841:7;16748:4;:15;;;16734:11;:29;;;;:::i;:::-;16718:46;;:12;:46;:::i;:::-;:58;;;;:::i;:::-;16717:79;;;;:::i;:::-;16704:92;;15756:1051;15503:1304;17268:19;17338:17;:11;17352:3;17338:17;:::i;:::-;17317:15;;;;17305:27;;17310:3;17305:27;:::i;:::-;17291:42;;:10;:42;:::i;:::-;17290:66;;;;:::i;:::-;17268:88;-1:-1:-1;17532:14:5;17582:27;17268:88;17582:10;:27;:::i;:::-;17549:29;17567:11;17549:15;:29;:::i;:::-;:61;;;;:::i;:::-;17629:4;;-1:-1:-1;17635:10:5;;-1:-1:-1;17647:14:5;;-1:-1:-1;17532:78:5;;-1:-1:-1;;;14743:2937:5;;;;;;;;;;:::o;5352:1075::-;5584:3;5571:10;:16;5563:46;;;;-1:-1:-1;;;5563:46:5;;8618:2:8;5563:46:5;;;8600:21:8;8657:2;8637:18;;;8630:30;-1:-1:-1;;;8676:18:8;;;8669:47;8733:18;;5563:46:5;8416:341:8;5563:46:5;5640:10;5627;:23;5619:75;;;;-1:-1:-1;;;5619:75:5;;8964:2:8;5619:75:5;;;8946:21:8;9003:2;8983:18;;;8976:30;9042:34;9022:18;;;9015:62;-1:-1:-1;;;9093:18:8;;;9086:37;9140:19;;5619:75:5;8762:403:8;5619:75:5;5787:247;;;;;;;;5811:7;5787:247;;;;5832:8;5787:247;;;;5854:10;5787:247;;;;5878:10;5787:247;;;;5902:10;5787:247;;;;5926:12;-1:-1:-1;;;;;5787:247:5;;;;;5952:1;5787:247;;;5761:11;:23;5775:8;;5773:10;;;;;:::i;:::-;;;;;-1:-1:-1;5761:23:5;;;;;;;;;;;;;;-1:-1:-1;5761:23:5;;;:273;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5761:273:5;-1:-1:-1;;;;;5761:273:5;;;;;;;;;;;;;;;;;;;6324:8;6310:37;;6334:12;6310:13;:37::i;:::-;6378:8;;6362:58;;;7982:25:8;;;8038:2;8023:18;;8016:34;;;-1:-1:-1;;;;;6362:58:5;;;6378:8;6362:58;;7955:18:8;6362:58:5;;;;;;;5352:1075;;;;;;;:::o;6802:1197::-;6905:29;6937:22;;;:11;:22;;;;;7032:23;;;:32;;6937:22;;7059:5;;7032:32;;7059:5;;7032:32;:::i;:::-;;;;-1:-1:-1;;7822:23:5;;;;7815:78;;-1:-1:-1;;;7815:78:5;;7860:10;7815:78;;;9803:34:8;7880:4:5;9853:18:8;;;9846:43;9905:18;;;9898:34;;;-1:-1:-1;;;;;7822:23:5;;;;7815:44;;9738:18:8;;7815:78:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7807:112;;;;-1:-1:-1;;;7807:112:5;;10145:2:8;7807:112:5;;;10127:21:8;10184:2;10164:18;;;10157:30;-1:-1:-1;;;10203:18:8;;;10196:51;10264:18;;7807:112:5;9943:345:8;7807:112:5;7961:23;;;;7934:58;;597:25:8;;;-1:-1:-1;;;;;7961:23:5;;;;7950:9;;7934:58;;585:2:8;570:18;7934:58:5;;;;;;;6860:1139;6802:1197;;:::o;8943:1972::-;9172:10;-1:-1:-1;;;;;9172:25:5;;;9164:74;;;;-1:-1:-1;;;9164:74:5;;10495:2:8;9164:74:5;;;10477:21:8;10534:2;10514:18;;;10507:30;10573:34;10553:18;;;10546:62;-1:-1:-1;;;10624:18:8;;;10617:34;10668:19;;9164:74:5;10293:400:8;9164:74:5;-1:-1:-1;;;;;9293:24:5;;;;;;:11;:24;;;;;;;;:35;;;;;;;;;;;9292:36;9284:68;;;;-1:-1:-1;;;9284:68:5;;10900:2:8;9284:68:5;;;10882:21:8;10939:2;10919:18;;;10912:30;-1:-1:-1;;;10958:18:8;;;10951:49;11017:18;;9284:68:5;10698:343:8;9284:68:5;9450:59;;;-1:-1:-1;;;;;11266:32:8;;9450:59:5;;;11248:51:8;11315:18;;;11308:34;;;11358:18;;;11351:34;;;9425:12:5;;11221:18:8;;9450:59:5;;;-1:-1:-1;;9450:59:5;;;;;;;;;9440:70;;9450:59;9440:70;;;;9561:22;9586;;;:11;:22;;;;;;;9561:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9561:47:5;;;;;;;;;;;;;;9704:40;;-1:-1:-1;;;9704:40:5;;9440:70;;-1:-1:-1;9704:27:5;;;;:40;;9561:47;;9440:70;;9738:5;;9704:40;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9696:85;;;;-1:-1:-1;;;9696:85:5;;12386:2:8;9696:85:5;;;12368:21:8;;;12405:18;;;12398:30;12464:34;12444:18;;;12437:62;12516:18;;9696:85:5;12184:356:8;9696:85:5;-1:-1:-1;;;;;9879:24:5;;;;;;9917:4;9879:24;;;;;;;;:35;;;;;;;;:42;;-1:-1:-1;;9879:42:5;;;;;;:24;;;10001:81;9904:9;10034:11;10047:16;10065;10001:21;:81::i;:::-;9932:150;;;;;;;;10100:5;10092:42;;;;-1:-1:-1;;;10092:42:5;;12747:2:8;10092:42:5;;;12729:21:8;12786:2;12766:18;;;12759:30;12825:26;12805:18;;;12798:54;12869:18;;10092:42:5;12545:348:8;10092:42:5;10363:503;;;;;;;;10384:10;10363:503;;;;10460:10;10363:503;;;;10506:9;10363:503;;;;10612:11;10594:15;:29;;;;:::i;:::-;10363:503;;;;10681:14;10363:503;;;;10749:9;10363:503;;;10328:8;:21;10337:11;-1:-1:-1;;;;;10328:21:5;-1:-1:-1;;;;;10328:21:5;;;;;;;;;;;;:32;10350:9;10328:32;;;;;;;;;;;:538;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10876:32;10885:9;10896:11;10876:8;:32::i;:::-;9097:1818;;;;;;8943:1972;;;;;;:::o;14:173:8:-;82:20;;-1:-1:-1;;;;;131:31:8;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;373:9;360:23;350:33;;402:38;436:2;425:9;421:18;402:38;:::i;:::-;392:48;;192:254;;;;;:::o;633:385::-;719:6;727;735;743;796:3;784:9;775:7;771:23;767:33;764:53;;;813:1;810;803:12;764:53;-1:-1:-1;;836:23:8;;;906:2;891:18;;878:32;;-1:-1:-1;957:2:8;942:18;;929:32;;1008:2;993:18;980:32;;-1:-1:-1;633:385:8;-1:-1:-1;633:385:8:o;1429:180::-;1488:6;1541:2;1529:9;1520:7;1516:23;1512:32;1509:52;;;1557:1;1554;1547:12;1509:52;-1:-1:-1;1580:23:8;;1429:180;-1:-1:-1;1429:180:8:o;2252:254::-;2320:6;2328;2381:2;2369:9;2360:7;2356:23;2352:32;2349:52;;;2397:1;2394;2387:12;2349:52;2420:29;2439:9;2420:29;:::i;:::-;2410:39;2496:2;2481:18;;;;2468:32;;-1:-1:-1;;;2252:254:8:o;3243:598::-;3356:6;3364;3372;3380;3388;3396;3404;3457:3;3445:9;3436:7;3432:23;3428:33;3425:53;;;3474:1;3471;3464:12;3425:53;3510:9;3497:23;3487:33;;3567:2;3556:9;3552:18;3539:32;3529:42;;3618:2;3607:9;3603:18;3590:32;3580:42;;3669:2;3658:9;3654:18;3641:32;3631:42;;3720:3;3709:9;3705:19;3692:33;3682:43;;3744:39;3778:3;3767:9;3763:19;3744:39;:::i;:::-;3734:49;;3830:3;3819:9;3815:19;3802:33;3792:43;;3243:598;;;;;;;;;;:::o;3846:248::-;3914:6;3922;3975:2;3963:9;3954:7;3950:23;3946:32;3943:52;;;3991:1;3988;3981:12;3943:52;-1:-1:-1;;4014:23:8;;;4084:2;4069:18;;;4056:32;;-1:-1:-1;3846:248:8:o;4099:127::-;4160:10;4155:3;4151:20;4148:1;4141:31;4191:4;4188:1;4181:15;4215:4;4212:1;4205:15;4231:1464;4360:6;4368;4376;4384;4392;4400;4453:3;4441:9;4432:7;4428:23;4424:33;4421:53;;;4470:1;4467;4460:12;4421:53;4506:9;4493:23;4483:33;;4535:2;4556:38;4590:2;4579:9;4575:18;4556:38;:::i;:::-;4546:48;;4641:2;4630:9;4626:18;4613:32;4603:42;;4692:2;4681:9;4677:18;4664:32;4654:42;;4743:3;4732:9;4728:19;4715:33;4705:43;;4799:3;4788:9;4784:19;4771:33;4823:18;4864:2;4856:6;4853:14;4850:34;;;4880:1;4877;4870:12;4850:34;4918:6;4907:9;4903:22;4893:32;;4963:7;4956:4;4952:2;4948:13;4944:27;4934:55;;4985:1;4982;4975:12;4934:55;5021:2;5008:16;5043:2;5039;5036:10;5033:36;;;5049:18;;:::i;:::-;5095:2;5092:1;5088:10;5127:2;5121:9;5190:2;5186:7;5181:2;5177;5173:11;5169:25;5161:6;5157:38;5245:6;5233:10;5230:22;5225:2;5213:10;5210:18;5207:46;5204:72;;;5256:18;;:::i;:::-;5292:2;5285:22;5342:18;;;5376:15;;;;-1:-1:-1;5418:11:8;;;5414:20;;;5446:19;;;5443:39;;;5478:1;5475;5468:12;5443:39;5502:11;;;;5522:142;5538:6;5533:3;5530:15;5522:142;;;5604:17;;5592:30;;5555:12;;;;5642;;;;5522:142;;;5683:6;5673:16;;;;;;;;4231:1464;;;;;;;;:::o;6462:127::-;6523:10;6518:3;6514:20;6511:1;6504:31;6554:4;6551:1;6544:15;6578:4;6575:1;6568:15;6594:125;6634:4;6662:1;6659;6656:8;6653:34;;;6667:18;;:::i;:::-;-1:-1:-1;6704:9:8;;6594:125::o;6724:168::-;6764:7;6830:1;6826;6822:6;6818:14;6815:1;6812:21;6807:1;6800:9;6793:17;6789:45;6786:71;;;6837:18;;:::i;:::-;-1:-1:-1;6877:9:8;;6724:168::o;7176:277::-;7243:6;7296:2;7284:9;7275:7;7271:23;7267:32;7264:52;;;7312:1;7309;7302:12;7264:52;7344:9;7338:16;7397:5;7390:13;7383:21;7376:5;7373:32;7363:60;;7419:1;7416;7409:12;7363:60;7442:5;7176:277;-1:-1:-1;;;7176:277:8:o;8061:217::-;8101:1;8127;8117:132;;8171:10;8166:3;8162:20;8159:1;8152:31;8206:4;8203:1;8196:15;8234:4;8231:1;8224:15;8117:132;-1:-1:-1;8263:9:8;;8061:217::o;8283:128::-;8323:3;8354:1;8350:6;8347:1;8344:13;8341:39;;;8360:18;;:::i;:::-;-1:-1:-1;8396:9:8;;8283:128::o;9170:135::-;9209:3;-1:-1:-1;;9230:17:8;;9227:43;;;9250:18;;:::i;:::-;-1:-1:-1;9297:1:8;9286:13;;9170:135::o;11396:783::-;11602:4;11650:2;11639:9;11635:18;11680:6;11669:9;11662:25;11706:2;11744:6;11739:2;11728:9;11724:18;11717:34;11787:2;11782;11771:9;11767:18;11760:30;11810:6;11845;11839:13;11876:6;11868;11861:22;11914:3;11903:9;11899:19;11892:26;;11953:2;11945:6;11941:15;11927:29;;11974:1;11984:169;11998:6;11995:1;11992:13;11984:169;;;12059:13;;12047:26;;12128:15;;;;12093:12;;;;12020:1;12013:9;11984:169;;;-1:-1:-1;12170:3:8;;11396:783;-1:-1:-1;;;;;;;;11396:783:8:o",
  "language": "Solidity",
  "natspec": {
    "author": "metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki",
    "details": "The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof.User chosen vesting schedules means the contract has parameters that define a line segment thatdescribes a range of vesting-schedule parameters within which the user can negotiate tradeoffsMore tokens => longer vesting time && slower drip, when used correctly, but the contract does not enforcecoherence of vesting schedules, so someone could make a range of vesting schedules in whichmore tokens => longer vesting time && faster drip, but this is a user error, also we wouldn't catch it untilafter the tree has been initialized and funded, so we just let them do it.The choice of which parameters to initialize at tree-creation-time versus at schedule-initialization-time issomewhat arbitrary, but we choose to have min/max end times at tree scope and min/max total payments at first-withdrawal-time",
    "kind": "dev",
    "methods": {
      "addMerkleTree(bytes32,bytes32,uint256,uint256,uint256,address,uint256)": {
        "details": "Anyone may call this function, therefore we must make sure trees cannot affect each otherRoot hash should be built from (destination, minTotalPayments, maxTotalPayments)",
        "notice": "Add a new merkle tree to the contract, creating a new merkle-vesting-schedule-range",
        "params": {
          "ipfsHash": "the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable",
          "maxEndTime": "a continuous range of possible end times are specified, this is the maximum",
          "minEndTime": "a continuous range of possible end times are specified, this is the minimum",
          "newRoot": "root hash of merkle tree representing vesting schedule ranges",
          "pctUpFront": "the percent of tokens user will get at initialization time (note this implies no lock time)",
          "tokenAddress": "the address of the token contract that is being distributed",
          "tokenBalance": "the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
        }
      },
      "depositTokens(uint256,uint256)": {
        "details": "Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious",
        "notice": "Add funds to an existing merkle-tree",
        "params": {
          "treeIndex": "index into array-like map of merkleTrees",
          "value": "the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
        }
      },
      "initialize(uint256,address,uint256,uint256,uint256,bytes32[])": {
        "details": "Only the recipient can initialize their own schedule here, because a meaningful choice is madeIf the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree stats",
        "notice": "Called once per recipient of a vesting schedule to initialize the vesting schedule and fix the parameters",
        "params": {
          "destination": "address that will receive tokens",
          "maxTotalPayments": "the maximum amount of tokens they will receive, if they choose maxEndTime as vestingTime",
          "minTotalPayments": "the minimum amount of tokens they will receive, if they choose minEndTime as vestingTime",
          "proof": "array of hashes linking leaf hash of (destination, minTotalPayments, maxTotalPayments) to root",
          "treeIndex": "index into array-like map of merkleTrees",
          "vestingTime": "the actual length of the vesting schedule, chosen by the user"
        }
      },
      "verifyVestingSchedule(uint256,uint256,uint256,uint256)": {
        "details": "Anyone may call this to check, but it also returns values used in the initialization of vesting schedules",
        "notice": "Determine if the proposed vesting schedule is legit",
        "params": {
          "maxTotalPayments": "pre-committed (in the root hash) maximum of possible totalCoins",
          "minTotalPayments": "pre-committed (in the root hash) minimum of possible totalCoins",
          "treeIndex": "index into array-like map of merkleTrees, which tree are we talking about?",
          "vestingTime": "user chosen length of vesting schedule"
        },
        "returns": {
          "_0": "valid is the proposed vesting-schedule valid",
          "_1": "totalCoins amount of coins allocated in the vesting schedule",
          "_2": "coinsPerSecond amount of coins released every second, in the proposed vesting schedule",
          "_3": "startTime start time of vesting schedule implied by supplied parameters, will always be <= block.timestamp"
        }
      },
      "withdraw(uint256,address)": {
        "details": "Anyone may call this function for anyone else, funds go to destination regardless, it's just a question ofwho provides the proof and pays the gas, msg.sender is not used in this function",
        "notice": "Move unlocked funds to the destination",
        "params": {
          "destination": "recipient of tokens",
          "treeIndex": "index into array-like map of merkleTrees, which tree should we apply the proof to?"
        }
      }
    },
    "notice": "This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.",
    "title": "A factory pattern for user-chosen vesting-schedules, that is, a time release schedule for tokens, using merkle proofs to scale",
    "version": 1
  },
  "offset": [
    1454,
    17683
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAAF5EB68 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xAAF5EB68 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0xC26CB54F EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0xD71383ED EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0xF16AD51E EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0xF287AD04 EQ PUSH2 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xF714CE EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x390B7C66 EQ PUSH2 0xB7 JUMPI DUP1 PUSH4 0x6FB6EC41 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x85D88CB1 EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x86BB8249 EQ PUSH2 0x19D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5 PUSH2 0xB0 CALLDATASIZE PUSH1 0x4 PUSH2 0xD73 JUMP JUMPDEST PUSH2 0x299 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC0 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH2 0xE1 CALLDATASIZE PUSH1 0x4 PUSH2 0xD9F JUMP JUMPDEST PUSH2 0x52D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 ISZERO ISZERO DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0x15F PUSH2 0x116 CALLDATASIZE PUSH1 0x4 PUSH2 0xDD1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 SWAP1 SWAP6 ADD SLOAD SWAP4 SWAP6 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP5 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0x1CB PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0xDEA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0xC0 PUSH3 0xF4240 DUP2 JUMP JUMPDEST PUSH2 0x233 PUSH2 0x1F3 CALLDATASIZE PUSH1 0x4 PUSH2 0xDEA JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD SWAP4 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP5 SWAP2 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x26E CALLDATASIZE PUSH1 0x4 PUSH2 0xE14 JUMP JUMPDEST PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x281 CALLDATASIZE PUSH1 0x4 PUSH2 0xE70 JUMP JUMPDEST PUSH2 0x898 JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x294 CALLDATASIZE PUSH1 0x4 PUSH2 0xEA8 JUMP JUMPDEST PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x321 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75206D75737420696E697469616C697A6520796F7572206163636F756E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x103334B939BA17 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x395 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F20636F696E73206C65667420746F20776974686472617700000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x3AD JUMPI POP PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x3CE JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x5 DUP4 ADD SLOAD PUSH2 0x3C1 SWAP1 TIMESTAMP PUSH2 0xFB4 JUMP JUMPDEST PUSH2 0x3CB SWAP2 SWAP1 PUSH2 0xFCB JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP5 ADD DUP1 SLOAD SWAP2 SWAP3 DUP5 SWAP3 PUSH2 0x3F1 SWAP1 DUP5 SWAP1 PUSH2 0xFB4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP TIMESTAMP PUSH1 0x5 DUP5 ADD SSTORE PUSH1 0x6 DUP2 ADD DUP1 SLOAD DUP4 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x413 SWAP1 DUP5 SWAP1 PUSH2 0xFB4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x46D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x491 SWAP2 SWAP1 PUSH2 0xFEA JUMP JUMPDEST PUSH2 0x4D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x151BDAD95B881D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x1680E4CFE90468085407EF2B599DBE94B0AA30FF9F180F0E41D22EB71C872872 DUP5 DUP7 PUSH1 0x1 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x51E SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 SLOAD DUP9 GT ISZERO PUSH2 0x54E JUMPI POP PUSH1 0x0 SWAP3 POP DUP3 SWAP2 POP DUP2 SWAP1 POP DUP1 PUSH2 0x6C9 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0xE0 DUP2 ADD DUP6 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 SWAP1 SWAP2 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE DUP9 GT DUP1 PUSH2 0x5C7 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD DUP9 LT JUMPDEST ISZERO PUSH2 0x5E0 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP POP PUSH2 0x6C9 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 ADD MLOAD DUP10 EQ ISZERO PUSH2 0x5F5 JUMPI POP DUP6 PUSH2 0x666 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0x60B SWAP2 SWAP1 PUSH2 0xFB4 JUMP JUMPDEST PUSH3 0xF4240 PUSH2 0x619 DUP12 DUP12 PUSH2 0xFB4 JUMP JUMPDEST PUSH2 0x623 SWAP2 SWAP1 PUSH2 0xFCB JUMP JUMPDEST PUSH2 0x62D SWAP2 SWAP1 PUSH2 0x1013 JUMP JUMPDEST SWAP1 POP DUP9 PUSH3 0xF4240 DUP5 PUSH1 0x40 ADD MLOAD DUP13 PUSH2 0x644 SWAP2 SWAP1 PUSH2 0xFB4 JUMP JUMPDEST PUSH2 0x64E SWAP1 DUP5 PUSH2 0xFCB JUMP JUMPDEST PUSH2 0x658 SWAP2 SWAP1 PUSH2 0x1013 JUMP JUMPDEST PUSH2 0x662 SWAP2 SWAP1 PUSH2 0x1035 JUMP JUMPDEST SWAP2 POP POP JUMPDEST PUSH1 0x0 PUSH2 0x673 DUP11 PUSH1 0x64 PUSH2 0xFCB JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x683 SWAP1 PUSH1 0x64 PUSH2 0xFB4 JUMP JUMPDEST PUSH2 0x68D SWAP1 DUP5 PUSH2 0xFCB JUMP JUMPDEST PUSH2 0x697 SWAP2 SWAP1 PUSH2 0x1013 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6A5 DUP3 DUP5 PUSH2 0x1013 JUMP JUMPDEST PUSH2 0x6AF DUP13 TIMESTAMP PUSH2 0x1035 JUMP JUMPDEST PUSH2 0x6B9 SWAP2 SWAP1 PUSH2 0xFB4 JUMP JUMPDEST PUSH1 0x1 SWAP9 POP SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP1 SWAP3 POP POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x718 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x706374557046726F6E74203E3D2031303 PUSH1 0x7C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST DUP4 DUP6 LT PUSH2 0x777 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D696E456E6454696D65206D757374206265206C657373207468616E206D6178 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x456E6454696D65 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x7C6 SWAP1 PUSH2 0x104D JUMP JUMPDEST SWAP2 DUP3 SWAP1 SSTORE POP DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP5 MLOAD DUP2 SSTORE SWAP3 DUP5 ADD MLOAD PUSH1 0x1 DUP5 ADD SSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD SSTORE SLOAD PUSH2 0x847 SWAP1 DUP3 PUSH2 0x898 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP3 SWAP2 PUSH32 0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x6 DUP2 ADD DUP1 SLOAD SWAP2 SWAP3 DUP5 SWAP3 PUSH2 0x8BB SWAP1 DUP5 SWAP1 PUSH2 0x1035 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x919 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x93D SWAP2 SWAP1 PUSH2 0xFEA JUMP JUMPDEST PUSH2 0x981 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x115490CC8C081D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP5 SWAP1 PUSH32 0xB162210DA7D23D82C18CFF5AF46D3562661D26B42A6848FA28D64A6BDC70386A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ PUSH2 0xA30 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x43616E206F6E6C7920696E697469616C697A6520796F7572206F776E20747261 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x6E636865 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xA9A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x105B1C9958591E481A5B9A5D1A585B1A5E9959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x2 DUP1 DUP5 MSTORE SWAP1 DUP5 SWAP1 KECCAK256 PUSH1 0xE0 DUP7 ADD DUP6 MSTORE DUP1 SLOAD DUP1 DUP8 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP5 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 DUP2 ADD SLOAD DUP6 DUP6 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x4 DUP1 DUP3 ADD SLOAD PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0x6 SWAP1 SWAP2 ADD SLOAD PUSH1 0xC0 DUP7 ADD MSTORE SWAP3 MLOAD PUSH4 0x2769CD1F PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP5 POP PUSH20 0x0 SWAP3 PUSH4 0x9DA7347C SWAP3 PUSH2 0xB73 SWAP3 SWAP1 SWAP2 DUP8 SWAP2 DUP10 SWAP2 ADD PUSH2 0x1068 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xB90 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBB4 SWAP2 SWAP1 PUSH2 0xFEA JUMP JUMPDEST PUSH2 0xC00 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652070726F6F6620636F756C64206E6F742062652076657269666965642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP13 DUP6 MSTORE SWAP1 SWAP2 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 DUP1 DUP1 PUSH2 0xC3D DUP13 DUP12 DUP12 DUP12 PUSH2 0x52D JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP4 PUSH2 0xC92 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642076657374696E67207363686564756C650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD DUP12 TIMESTAMP PUSH2 0xCBB SWAP2 SWAP1 PUSH2 0x1035 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP PUSH1 0x3 PUSH1 0x0 DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP15 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE SWAP1 POP POP PUSH2 0xD49 DUP13 DUP13 PUSH2 0x299 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xD96 PUSH1 0x20 DUP5 ADD PUSH2 0xD57 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xDB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE06 DUP4 PUSH2 0xD57 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xE2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH2 0xE5B PUSH1 0xA0 DUP10 ADD PUSH2 0xD57 JUMP JUMPDEST SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xEC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 PUSH2 0xED2 DUP2 DUP10 ADD PUSH2 0xD57 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP11 ADD SWAP2 POP DUP11 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xF18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xF2A JUMPI PUSH2 0xF2A PUSH2 0xE92 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xF4F JUMPI PUSH2 0xF4F PUSH2 0xE92 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP14 DUP4 GT ISZERO PUSH2 0xF6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xF8B JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xF72 JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xFC6 JUMPI PUSH2 0xFC6 PUSH2 0xF9E JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xFE5 JUMPI PUSH2 0xFE5 PUSH2 0xF9E JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x100C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1030 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1048 JUMPI PUSH2 0x1048 PUSH2 0xF9E JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x1061 JUMPI PUSH2 0x1061 PUSH2 0xF9E JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP6 DUP4 MSTORE PUSH1 0x20 DUP6 DUP2 DUP6 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 POP DUP3 DUP8 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10AF JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1093 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NOT DUP16 INVALID DUP3 0x2C SHR NOT 0x4D SWAP7 0x49 SWAP12 0xEA 0x21 SWAP7 SLT 0xD8 KECCAK256 0xD1 CALLER 0xB2 DUP2 0xE6 PUSH30 0x5819FB658313D30DFB64736F6C634300080C003300000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "5": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "CALLVALUE",
      "path": "5"
    },
    "6": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "7": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "8": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "12": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "REVERT",
      "path": "5"
    },
    "16": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "17": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "POP",
      "path": "5"
    },
    "18": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "21": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "LT",
      "path": "5"
    },
    "22": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x9D"
    },
    "25": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "26": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "CALLDATALOAD",
      "path": "5"
    },
    "29": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "SHR",
      "path": "5"
    },
    "32": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "33": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xAAF5EB68"
    },
    "38": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "GT",
      "path": "5"
    },
    "39": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x66"
    },
    "42": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "43": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "44": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xAAF5EB68"
    },
    "49": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "EQ",
      "path": "5"
    },
    "50": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1DB"
    },
    "53": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "54": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "55": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xC26CB54F"
    },
    "60": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "EQ",
      "path": "5"
    },
    "61": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1E5"
    },
    "64": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "65": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "66": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xD71383ED"
    },
    "71": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "EQ",
      "path": "5"
    },
    "72": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x260"
    },
    "75": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "76": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "77": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xF16AD51E"
    },
    "82": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "EQ",
      "path": "5"
    },
    "83": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x273"
    },
    "86": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "87": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "88": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xF287AD04"
    },
    "93": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "EQ",
      "path": "5"
    },
    "94": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x286"
    },
    "97": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "98": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "100": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "101": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "REVERT",
      "path": "5"
    },
    "102": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "103": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "104": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH3",
      "path": "5",
      "value": "0xF714CE"
    },
    "108": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "EQ",
      "path": "5"
    },
    "109": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xA2"
    },
    "112": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "113": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "114": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0x390B7C66"
    },
    "119": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "EQ",
      "path": "5"
    },
    "120": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xB7"
    },
    "123": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "124": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "125": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0x6FB6EC41"
    },
    "130": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "EQ",
      "path": "5"
    },
    "131": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xD3"
    },
    "134": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "135": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "136": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0x85D88CB1"
    },
    "141": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "EQ",
      "path": "5"
    },
    "142": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x108"
    },
    "145": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "146": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "147": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0x86BB8249"
    },
    "152": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "EQ",
      "path": "5"
    },
    "153": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x19D"
    },
    "156": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "157": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "158": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "160": {
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "DUP1",
      "path": "5"
    },
    "161": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1454,
        17683
      ],
      "op": "REVERT",
      "path": "5"
    },
    "162": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11345,
        13828
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "163": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11345,
        13828
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xB5"
    },
    "166": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11345,
        13828
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xB0"
    },
    "169": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11345,
        13828
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "170": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11345,
        13828
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "172": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11345,
        13828
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xD73"
    },
    "175": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        11345,
        13828
      ],
      "op": "JUMP",
      "path": "5"
    },
    "176": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11345,
        13828
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "177": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11345,
        13828
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x299"
    },
    "180": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        11345,
        13828
      ],
      "op": "JUMP",
      "path": "5"
    },
    "181": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11345,
        13828
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "182": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11345,
        13828
      ],
      "op": "STOP",
      "path": "5"
    },
    "183": {
      "offset": [
        1557,
        1581
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "184": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xC0"
    },
    "187": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "189": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "190": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "DUP2",
      "path": "5"
    },
    "191": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "JUMP",
      "path": "5"
    },
    "192": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "193": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "195": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "196": {
      "op": "SWAP1"
    },
    "197": {
      "op": "DUP2"
    },
    "198": {
      "op": "MSTORE"
    },
    "199": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "201": {
      "op": "ADD"
    },
    "202": {
      "offset": [
        1557,
        1581
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "203": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "205": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "206": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "DUP1",
      "path": "5"
    },
    "207": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "208": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "SUB",
      "path": "5"
    },
    "209": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "210": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1557,
        1581
      ],
      "op": "RETURN",
      "path": "5"
    },
    "211": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "212": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE6"
    },
    "215": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE1"
    },
    "218": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "219": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "221": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xD9F"
    },
    "224": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        14743,
        17680
      ],
      "op": "JUMP",
      "path": "5"
    },
    "225": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "226": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x52D"
    },
    "229": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        14743,
        17680
      ],
      "op": "JUMP",
      "path": "5"
    },
    "230": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "231": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "233": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "DUP1",
      "path": "5"
    },
    "234": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "235": {
      "op": "SWAP5"
    },
    "236": {
      "op": "ISZERO"
    },
    "237": {
      "op": "ISZERO"
    },
    "238": {
      "op": "DUP6"
    },
    "239": {
      "op": "MSTORE"
    },
    "240": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "242": {
      "op": "DUP6"
    },
    "243": {
      "op": "ADD"
    },
    "244": {
      "op": "SWAP4"
    },
    "245": {
      "op": "SWAP1"
    },
    "246": {
      "op": "SWAP4"
    },
    "247": {
      "op": "MSTORE"
    },
    "248": {
      "op": "SWAP2"
    },
    "249": {
      "op": "DUP4"
    },
    "250": {
      "op": "ADD"
    },
    "251": {
      "op": "MSTORE"
    },
    "252": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "254": {
      "op": "DUP3"
    },
    "255": {
      "op": "ADD"
    },
    "256": {
      "op": "MSTORE"
    },
    "257": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "259": {
      "op": "ADD"
    },
    "260": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xCA"
    },
    "263": {
      "op": "JUMP"
    },
    "264": {
      "offset": [
        3557,
        3604
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "265": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x15F"
    },
    "268": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x116"
    },
    "271": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "272": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "274": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xDD1"
    },
    "277": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        3557,
        3604
      ],
      "op": "JUMP",
      "path": "5"
    },
    "278": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "279": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "281": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "283": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "DUP2",
      "path": "5"
    },
    "284": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "285": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "286": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "288": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "289": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "DUP3",
      "path": "5"
    },
    "290": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "291": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "293": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "294": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "295": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "296": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "DUP1",
      "path": "5"
    },
    "297": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "298": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "300": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "DUP3",
      "path": "5"
    },
    "301": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "ADD",
      "path": "5"
    },
    "302": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "303": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "304": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "DUP3",
      "path": "5"
    },
    "305": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "ADD",
      "path": "5"
    },
    "306": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "307": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "309": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "DUP4",
      "path": "5"
    },
    "310": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "ADD",
      "path": "5"
    },
    "311": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "312": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "314": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "DUP5",
      "path": "5"
    },
    "315": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "ADD",
      "path": "5"
    },
    "316": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "317": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "319": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "DUP6",
      "path": "5"
    },
    "320": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "ADD",
      "path": "5"
    },
    "321": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "322": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "324": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "325": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP6",
      "path": "5"
    },
    "326": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "ADD",
      "path": "5"
    },
    "327": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "328": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "329": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP6",
      "path": "5"
    },
    "330": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "331": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "332": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "333": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "334": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "335": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "336": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "337": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "339": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "341": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "343": {
      "op": "SHL"
    },
    "344": {
      "op": "SUB"
    },
    "345": {
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "346": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "347": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "AND",
      "path": "5"
    },
    "348": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "349": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "DUP8",
      "path": "5"
    },
    "350": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "JUMP",
      "path": "5"
    },
    "351": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "352": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "354": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "DUP1",
      "path": "5"
    },
    "355": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3557,
        3604
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "356": {
      "op": "SWAP8"
    },
    "357": {
      "op": "DUP9"
    },
    "358": {
      "op": "MSTORE"
    },
    "359": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "361": {
      "op": "DUP9"
    },
    "362": {
      "op": "ADD"
    },
    "363": {
      "op": "SWAP7"
    },
    "364": {
      "op": "SWAP1"
    },
    "365": {
      "op": "SWAP7"
    },
    "366": {
      "op": "MSTORE"
    },
    "367": {
      "op": "SWAP5"
    },
    "368": {
      "op": "DUP7"
    },
    "369": {
      "op": "ADD"
    },
    "370": {
      "op": "SWAP4"
    },
    "371": {
      "op": "SWAP1"
    },
    "372": {
      "op": "SWAP4"
    },
    "373": {
      "op": "MSTORE"
    },
    "374": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "376": {
      "op": "DUP6"
    },
    "377": {
      "op": "ADD"
    },
    "378": {
      "op": "SWAP2"
    },
    "379": {
      "op": "SWAP1"
    },
    "380": {
      "op": "SWAP2"
    },
    "381": {
      "op": "MSTORE"
    },
    "382": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "384": {
      "op": "DUP5"
    },
    "385": {
      "op": "ADD"
    },
    "386": {
      "op": "MSTORE"
    },
    "387": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "389": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "391": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "393": {
      "op": "SHL"
    },
    "394": {
      "op": "SUB"
    },
    "395": {
      "op": "AND"
    },
    "396": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "398": {
      "op": "DUP4"
    },
    "399": {
      "op": "ADD"
    },
    "400": {
      "op": "MSTORE"
    },
    "401": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "403": {
      "op": "DUP3"
    },
    "404": {
      "op": "ADD"
    },
    "405": {
      "op": "MSTORE"
    },
    "406": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "408": {
      "op": "ADD"
    },
    "409": {
      "offset": [
        3557,
        3604
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xCA"
    },
    "412": {
      "op": "JUMP"
    },
    "413": {
      "offset": [
        3397,
        3459
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "414": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1CB"
    },
    "417": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1AB"
    },
    "420": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "421": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "423": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xDEA"
    },
    "426": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        3397,
        3459
      ],
      "op": "JUMP",
      "path": "5"
    },
    "427": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "428": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "430": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "432": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "433": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "DUP2",
      "path": "5"
    },
    "434": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "435": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "437": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "438": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "DUP4",
      "path": "5"
    },
    "439": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "440": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "442": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "DUP1",
      "path": "5"
    },
    "443": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "DUP5",
      "path": "5"
    },
    "444": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "445": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "446": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "447": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "448": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "449": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "DUP3",
      "path": "5"
    },
    "450": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "451": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "452": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "453": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "454": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "456": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "AND",
      "path": "5"
    },
    "457": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "DUP2",
      "path": "5"
    },
    "458": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "JUMP",
      "path": "5"
    },
    "459": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "460": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "462": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3397,
        3459
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "463": {
      "op": "SWAP1"
    },
    "464": {
      "op": "ISZERO"
    },
    "465": {
      "op": "ISZERO"
    },
    "466": {
      "op": "DUP2"
    },
    "467": {
      "op": "MSTORE"
    },
    "468": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "470": {
      "op": "ADD"
    },
    "471": {
      "offset": [
        3397,
        3459
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xCA"
    },
    "474": {
      "op": "JUMP"
    },
    "475": {
      "offset": [
        3808,
        3848
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "476": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3808,
        3848
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xC0"
    },
    "479": {
      "offset": [
        3841,
        3848
      ],
      "op": "PUSH3",
      "path": "5",
      "value": "0xF4240"
    },
    "483": {
      "offset": [
        3808,
        3848
      ],
      "op": "DUP2",
      "path": "5"
    },
    "484": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3808,
        3848
      ],
      "op": "JUMP",
      "path": "5"
    },
    "485": {
      "offset": [
        3673,
        3735
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "486": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x233"
    },
    "489": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1F3"
    },
    "492": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "493": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "495": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xDEA"
    },
    "498": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        3673,
        3735
      ],
      "op": "JUMP",
      "path": "5"
    },
    "499": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "500": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "502": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "504": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "DUP2",
      "path": "5"
    },
    "505": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "DUP2",
      "path": "5"
    },
    "506": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "507": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "509": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "510": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "DUP5",
      "path": "5"
    },
    "511": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "512": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "514": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "DUP1",
      "path": "5"
    },
    "515": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "DUP6",
      "path": "5"
    },
    "516": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "517": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "518": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "519": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "520": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "521": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "DUP4",
      "path": "5"
    },
    "522": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "523": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "524": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "525": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "DUP1",
      "path": "5"
    },
    "526": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "527": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "529": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "DUP3",
      "path": "5"
    },
    "530": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "ADD",
      "path": "5"
    },
    "531": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "532": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "534": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "DUP4",
      "path": "5"
    },
    "535": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "ADD",
      "path": "5"
    },
    "536": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "537": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "538": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "DUP4",
      "path": "5"
    },
    "539": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "ADD",
      "path": "5"
    },
    "540": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "541": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "543": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "DUP5",
      "path": "5"
    },
    "544": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "ADD",
      "path": "5"
    },
    "545": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "546": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "548": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "549": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "550": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "ADD",
      "path": "5"
    },
    "551": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "552": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "553": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "554": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "555": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "556": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "557": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "558": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "559": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "560": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "561": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "DUP7",
      "path": "5"
    },
    "562": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "JUMP",
      "path": "5"
    },
    "563": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "564": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "566": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "DUP1",
      "path": "5"
    },
    "567": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3673,
        3735
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "568": {
      "op": "SWAP7"
    },
    "569": {
      "op": "DUP8"
    },
    "570": {
      "op": "MSTORE"
    },
    "571": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "573": {
      "op": "DUP8"
    },
    "574": {
      "op": "ADD"
    },
    "575": {
      "op": "SWAP6"
    },
    "576": {
      "op": "SWAP1"
    },
    "577": {
      "op": "SWAP6"
    },
    "578": {
      "op": "MSTORE"
    },
    "579": {
      "op": "SWAP4"
    },
    "580": {
      "op": "DUP6"
    },
    "581": {
      "op": "ADD"
    },
    "582": {
      "op": "SWAP3"
    },
    "583": {
      "op": "SWAP1"
    },
    "584": {
      "op": "SWAP3"
    },
    "585": {
      "op": "MSTORE"
    },
    "586": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "588": {
      "op": "DUP5"
    },
    "589": {
      "op": "ADD"
    },
    "590": {
      "op": "MSTORE"
    },
    "591": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "593": {
      "op": "DUP4"
    },
    "594": {
      "op": "ADD"
    },
    "595": {
      "op": "MSTORE"
    },
    "596": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "598": {
      "op": "DUP3"
    },
    "599": {
      "op": "ADD"
    },
    "600": {
      "op": "MSTORE"
    },
    "601": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "603": {
      "op": "ADD"
    },
    "604": {
      "offset": [
        3673,
        3735
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xCA"
    },
    "607": {
      "op": "JUMP"
    },
    "608": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "609": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xB5"
    },
    "612": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x26E"
    },
    "615": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "616": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "618": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE14"
    },
    "621": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        5352,
        6427
      ],
      "op": "JUMP",
      "path": "5"
    },
    "622": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "623": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x6D4"
    },
    "626": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        5352,
        6427
      ],
      "op": "JUMP",
      "path": "5"
    },
    "627": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6802,
        7999
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "628": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6802,
        7999
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xB5"
    },
    "631": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6802,
        7999
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x281"
    },
    "634": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6802,
        7999
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "635": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6802,
        7999
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "637": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6802,
        7999
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE70"
    },
    "640": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        6802,
        7999
      ],
      "op": "JUMP",
      "path": "5"
    },
    "641": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6802,
        7999
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "642": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6802,
        7999
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x898"
    },
    "645": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        6802,
        7999
      ],
      "op": "JUMP",
      "path": "5"
    },
    "646": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "647": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xB5"
    },
    "650": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x294"
    },
    "653": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "654": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "656": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xEA8"
    },
    "659": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        8943,
        10915
      ],
      "op": "JUMP",
      "path": "5"
    },
    "660": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "661": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x9CC"
    },
    "664": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        8943,
        10915
      ],
      "op": "JUMP",
      "path": "5"
    },
    "665": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11345,
        13828
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "666": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "668": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "670": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "672": {
      "op": "SHL"
    },
    "673": {
      "op": "SUB"
    },
    "674": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11557
      ],
      "op": "DUP2",
      "path": "5",
      "statement": 0
    },
    "675": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11557
      ],
      "op": "AND",
      "path": "5"
    },
    "676": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11557
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "678": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11557
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "679": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11557
      ],
      "op": "DUP2",
      "path": "5"
    },
    "680": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11557
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "681": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11544
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "683": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11557
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "685": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11557
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "686": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11557
      ],
      "op": "DUP2",
      "path": "5"
    },
    "687": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11557
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "688": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11557
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "690": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11557
      ],
      "op": "DUP1",
      "path": "5"
    },
    "691": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11557
      ],
      "op": "DUP4",
      "path": "5"
    },
    "692": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11557
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "693": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11568
      ],
      "op": "DUP6",
      "path": "5"
    },
    "694": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11568
      ],
      "op": "DUP5",
      "path": "5"
    },
    "695": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11568
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "696": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11568
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "697": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11568
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "698": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11568
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "699": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11568
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "700": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11568
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "701": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11568
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "702": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11568
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "704": {
      "branch": 29,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11533,
        11568
      ],
      "op": "AND",
      "path": "5"
    },
    "705": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x321"
    },
    "708": {
      "branch": 29,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "709": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "711": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "712": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "716": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "718": {
      "op": "SHL"
    },
    "719": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "DUP2",
      "path": "5"
    },
    "720": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "721": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "723": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "725": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "DUP3",
      "path": "5"
    },
    "726": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "ADD",
      "path": "5"
    },
    "727": {
      "op": "MSTORE"
    },
    "728": {
      "op": "PUSH1",
      "value": "0x27"
    },
    "730": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "732": {
      "op": "DUP3"
    },
    "733": {
      "op": "ADD"
    },
    "734": {
      "op": "MSTORE"
    },
    "735": {
      "op": "PUSH32",
      "value": "0x596F75206D75737420696E697469616C697A6520796F7572206163636F756E74"
    },
    "768": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "770": {
      "op": "DUP3"
    },
    "771": {
      "op": "ADD"
    },
    "772": {
      "op": "MSTORE"
    },
    "773": {
      "op": "PUSH7",
      "value": "0x103334B939BA17"
    },
    "781": {
      "op": "PUSH1",
      "value": "0xC9"
    },
    "783": {
      "op": "SHL"
    },
    "784": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "786": {
      "op": "DUP3"
    },
    "787": {
      "op": "ADD"
    },
    "788": {
      "op": "MSTORE"
    },
    "789": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "791": {
      "op": "ADD"
    },
    "792": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "793": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "795": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "796": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "DUP1",
      "path": "5"
    },
    "797": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "798": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "SUB",
      "path": "5"
    },
    "799": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "800": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "5"
    },
    "801": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11525,
        11612
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "802": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "804": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "806": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "808": {
      "op": "SHL"
    },
    "809": {
      "op": "SUB"
    },
    "810": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11710
      ],
      "op": "DUP2",
      "path": "5"
    },
    "811": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11710
      ],
      "op": "AND",
      "path": "5"
    },
    "812": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11663,
        11686
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "814": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11710
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "815": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11710
      ],
      "op": "DUP2",
      "path": "5"
    },
    "816": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11710
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "817": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11697
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "819": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11710
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "821": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11710
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "822": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11710
      ],
      "op": "DUP2",
      "path": "5"
    },
    "823": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11710
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "824": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11710
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "826": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11710
      ],
      "op": "DUP1",
      "path": "5"
    },
    "827": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11710
      ],
      "op": "DUP4",
      "path": "5"
    },
    "828": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11710
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "829": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11721
      ],
      "op": "DUP6",
      "path": "5"
    },
    "830": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11721
      ],
      "op": "DUP5",
      "path": "5"
    },
    "831": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11721
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "832": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11721
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "833": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11721
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "834": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11721
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "835": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11721
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "836": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11689,
        11721
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "837": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11778,
        11798
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 1,
      "value": "0x1"
    },
    "839": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11778,
        11798
      ],
      "op": "DUP2",
      "path": "5"
    },
    "840": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11778,
        11798
      ],
      "op": "ADD",
      "path": "5"
    },
    "841": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11778,
        11798
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "842": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11770,
        11833
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x395"
    },
    "845": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11770,
        11833
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "846": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11770,
        11833
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "848": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11770,
        11833
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "849": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "853": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "855": {
      "op": "SHL"
    },
    "856": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11770,
        11833
      ],
      "op": "DUP2",
      "path": "5"
    },
    "857": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11770,
        11833
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "858": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "860": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11770,
        11833
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "862": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11770,
        11833
      ],
      "op": "DUP3",
      "path": "5"
    },
    "863": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11770,
        11833
      ],
      "op": "ADD",
      "path": "5"
    },
    "864": {
      "op": "MSTORE"
    },
    "865": {
      "op": "PUSH1",
      "value": "0x19"
    },
    "867": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "869": {
      "op": "DUP3"
    },
    "870": {
      "op": "ADD"
    },
    "871": {
      "op": "MSTORE"
    },
    "872": {
      "op": "PUSH32",
      "value": "0x4E6F20636F696E73206C65667420746F20776974686472617700000000000000"
    },
    "905": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "907": {
      "op": "DUP3"
    },
    "908": {
      "op": "ADD"
    },
    "909": {
      "op": "MSTORE"
    },
    "910": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "912": {
      "op": "ADD"
    },
    "913": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11770,
        11833
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x318"
    },
    "916": {
      "op": "JUMP"
    },
    "917": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11770,
        11833
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "918": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11843,
        11865
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "920": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12013,
        12020
      ],
      "op": "DUP2",
      "path": "5"
    },
    "921": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12013,
        12028
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "923": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12013,
        12028
      ],
      "op": "ADD",
      "path": "5"
    },
    "924": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12013,
        12028
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "925": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11994,
        12009
      ],
      "op": "TIMESTAMP",
      "path": "5"
    },
    "926": {
      "branch": 30,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11994,
        12028
      ],
      "op": "LT",
      "path": "5"
    },
    "927": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11990,
        12364
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x3AD"
    },
    "930": {
      "branch": 30,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11990,
        12364
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "931": {
      "op": "POP"
    },
    "932": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12064,
        12084
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 2,
      "value": "0x1"
    },
    "934": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12064,
        12084
      ],
      "op": "DUP2",
      "path": "5"
    },
    "935": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12064,
        12084
      ],
      "op": "ADD",
      "path": "5"
    },
    "936": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12064,
        12084
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "937": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11990,
        12364
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x3CE"
    },
    "940": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11990,
        12364
      ],
      "op": "JUMP",
      "path": "5"
    },
    "941": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11990,
        12364
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "942": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12331,
        12353
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 3,
      "value": "0x4"
    },
    "944": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12331,
        12353
      ],
      "op": "DUP3",
      "path": "5"
    },
    "945": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12331,
        12353
      ],
      "op": "ADD",
      "path": "5"
    },
    "946": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12331,
        12353
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "947": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12301,
        12327
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "949": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12301,
        12327
      ],
      "op": "DUP4",
      "path": "5"
    },
    "950": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12301,
        12327
      ],
      "op": "ADD",
      "path": "5"
    },
    "951": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12301,
        12327
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "952": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12283,
        12327
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x3C1"
    },
    "955": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12283,
        12327
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "956": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12283,
        12298
      ],
      "op": "TIMESTAMP",
      "path": "5"
    },
    "957": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12283,
        12327
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFB4"
    },
    "960": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        12283,
        12327
      ],
      "op": "JUMP",
      "path": "5"
    },
    "961": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12283,
        12327
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "962": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12282,
        12353
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x3CB"
    },
    "965": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12282,
        12353
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "966": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12282,
        12353
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "967": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12282,
        12353
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFCB"
    },
    "970": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        12282,
        12353
      ],
      "op": "JUMP",
      "path": "5"
    },
    "971": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12282,
        12353
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "972": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12262,
        12353
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "973": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12262,
        12353
      ],
      "op": "POP",
      "path": "5"
    },
    "974": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11990,
        12364
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "975": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12396,
        12419
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "977": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12422,
        12444
      ],
      "op": "DUP5",
      "path": "5"
    },
    "978": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12422,
        12444
      ],
      "op": "DUP2",
      "path": "5"
    },
    "979": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12422,
        12444
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "980": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12422,
        12433
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "982": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12422,
        12444
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "984": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12422,
        12444
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "985": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12422,
        12444
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "987": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12422,
        12444
      ],
      "op": "DUP2",
      "path": "5"
    },
    "988": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12422,
        12444
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "989": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12643,
        12663
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 4,
      "value": "0x1"
    },
    "991": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12643,
        12663
      ],
      "op": "DUP5",
      "path": "5"
    },
    "992": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12643,
        12663
      ],
      "op": "ADD",
      "path": "5"
    },
    "993": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12643,
        12684
      ],
      "op": "DUP1",
      "path": "5"
    },
    "994": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12643,
        12684
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "995": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12422,
        12444
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "996": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12422,
        12444
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "997": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12667,
        12684
      ],
      "op": "DUP5",
      "path": "5"
    },
    "998": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12667,
        12684
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "999": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12643,
        12684
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x3F1"
    },
    "1002": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12643,
        12684
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1003": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12667,
        12684
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1004": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12667,
        12684
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1005": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12643,
        12684
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFB4"
    },
    "1008": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        12643,
        12684
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1009": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12643,
        12684
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1010": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12643,
        12684
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1011": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12643,
        12684
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1012": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12643,
        12684
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "1013": {
      "op": "POP"
    },
    "1014": {
      "op": "POP"
    },
    "1015": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12905,
        12920
      ],
      "op": "TIMESTAMP",
      "path": "5",
      "statement": 5
    },
    "1016": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12876,
        12902
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "1018": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12876,
        12902
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1019": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12876,
        12902
      ],
      "op": "ADD",
      "path": "5"
    },
    "1020": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12876,
        12920
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "1021": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13072
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 6,
      "value": "0x6"
    },
    "1023": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13072
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1024": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13072
      ],
      "op": "ADD",
      "path": "5"
    },
    "1025": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13093
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1026": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13093
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1027": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13076,
        13093
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1028": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13076,
        13093
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1029": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13072
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1030": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13072
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1032": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13072
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1033": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13093
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x413"
    },
    "1036": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13093
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1037": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13076,
        13093
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1038": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13076,
        13093
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1039": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13093
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFB4"
    },
    "1042": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        13055,
        13093
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1043": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13093
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1044": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13093
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1045": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13093
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1046": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13055,
        13093
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "1047": {
      "op": "POP"
    },
    "1048": {
      "op": "POP"
    },
    "1049": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13638,
        13655
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 7,
      "value": "0x5"
    },
    "1051": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13638,
        13655
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1052": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13638,
        13655
      ],
      "op": "ADD",
      "path": "5"
    },
    "1053": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13638,
        13655
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1054": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1056": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1057": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "1062": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1064": {
      "op": "SHL"
    },
    "1065": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1066": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1067": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1069": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1071": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1073": {
      "op": "SHL"
    },
    "1074": {
      "op": "SUB"
    },
    "1075": {
      "op": "DUP7"
    },
    "1076": {
      "op": "DUP2"
    },
    "1077": {
      "op": "AND"
    },
    "1078": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "1080": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1081": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "ADD",
      "path": "5"
    },
    "1082": {
      "op": "MSTORE"
    },
    "1083": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1085": {
      "op": "DUP3"
    },
    "1086": {
      "op": "ADD"
    },
    "1087": {
      "op": "DUP6"
    },
    "1088": {
      "op": "SWAP1"
    },
    "1089": {
      "op": "MSTORE"
    },
    "1090": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13638,
        13655
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1091": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13638,
        13655
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1092": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13638,
        13655
      ],
      "op": "AND",
      "path": "5"
    },
    "1093": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13638,
        13655
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1094": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13665
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xA9059CBB"
    },
    "1099": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13665
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1100": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1102": {
      "op": "ADD"
    },
    "1103": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1105": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1107": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1108": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1109": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1110": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "SUB",
      "path": "5"
    },
    "1111": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1112": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1114": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "DUP8",
      "path": "5"
    },
    "1115": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "GAS",
      "path": "5"
    },
    "1116": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "CALL",
      "path": "5"
    },
    "1117": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1118": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1119": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1120": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x46D"
    },
    "1123": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1124": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "1125": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1127": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1128": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "RETURNDATACOPY",
      "path": "5"
    },
    "1129": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "1130": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1132": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "REVERT",
      "path": "5"
    },
    "1133": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1134": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "POP",
      "path": "5"
    },
    "1135": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "POP",
      "path": "5"
    },
    "1136": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "POP",
      "path": "5"
    },
    "1137": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "POP",
      "path": "5"
    },
    "1138": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1140": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1141": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "1142": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "1144": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "NOT",
      "path": "5"
    },
    "1145": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "1147": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1148": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "ADD",
      "path": "5"
    },
    "1149": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "AND",
      "path": "5"
    },
    "1150": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1151": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "ADD",
      "path": "5"
    },
    "1152": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1153": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1155": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1156": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "POP",
      "path": "5"
    },
    "1157": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1158": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "ADD",
      "path": "5"
    },
    "1159": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1160": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x491"
    },
    "1163": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1164": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1165": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFEA"
    },
    "1168": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        13631,
        13697
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1169": {
      "branch": 31,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13631,
        13697
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1170": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13623,
        13723
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x4D5"
    },
    "1173": {
      "branch": 31,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13623,
        13723
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1174": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13623,
        13723
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1176": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13623,
        13723
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1177": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1181": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1183": {
      "op": "SHL"
    },
    "1184": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13623,
        13723
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1185": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13623,
        13723
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1186": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1188": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13623,
        13723
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "1190": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13623,
        13723
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1191": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13623,
        13723
      ],
      "op": "ADD",
      "path": "5"
    },
    "1192": {
      "op": "MSTORE"
    },
    "1193": {
      "op": "PUSH1",
      "value": "0x15"
    },
    "1195": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1197": {
      "op": "DUP3"
    },
    "1198": {
      "op": "ADD"
    },
    "1199": {
      "op": "MSTORE"
    },
    "1200": {
      "op": "PUSH21",
      "value": "0x151BDAD95B881D1C985B9CD9995C8819985A5B1959"
    },
    "1222": {
      "op": "PUSH1",
      "value": "0x5A"
    },
    "1224": {
      "op": "SHL"
    },
    "1225": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1227": {
      "op": "DUP3"
    },
    "1228": {
      "op": "ADD"
    },
    "1229": {
      "op": "MSTORE"
    },
    "1230": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1232": {
      "op": "ADD"
    },
    "1233": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13623,
        13723
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x318"
    },
    "1236": {
      "op": "JUMP"
    },
    "1237": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13623,
        13723
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1238": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13768,
        13779
      ],
      "op": "DUP4",
      "path": "5",
      "statement": 8
    },
    "1239": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1241": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1243": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1245": {
      "op": "SHL"
    },
    "1246": {
      "op": "SUB"
    },
    "1247": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "AND",
      "path": "5"
    },
    "1248": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13757,
        13766
      ],
      "op": "DUP6",
      "path": "5"
    },
    "1249": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "PUSH32",
      "path": "5",
      "value": "0x1680E4CFE90468085407EF2B599DBE94B0AA30FF9F180F0E41D22EB71C872872"
    },
    "1282": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13781,
        13798
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1283": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13800,
        13807
      ],
      "op": "DUP7",
      "path": "5"
    },
    "1284": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13800,
        13820
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1286": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13800,
        13820
      ],
      "op": "ADD",
      "path": "5"
    },
    "1287": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13800,
        13820
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1288": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1290": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1291": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x51E"
    },
    "1294": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1295": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1296": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1297": {
      "op": "SWAP2"
    },
    "1298": {
      "op": "DUP3"
    },
    "1299": {
      "op": "MSTORE"
    },
    "1300": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1302": {
      "op": "DUP3"
    },
    "1303": {
      "op": "ADD"
    },
    "1304": {
      "op": "MSTORE"
    },
    "1305": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1307": {
      "op": "ADD"
    },
    "1308": {
      "op": "SWAP1"
    },
    "1309": {
      "op": "JUMP"
    },
    "1310": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1311": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1313": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1314": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1315": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1316": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "SUB",
      "path": "5"
    },
    "1317": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1318": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13738,
        13821
      ],
      "op": "LOG3",
      "path": "5"
    },
    "1319": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11407,
        13828
      ],
      "op": "POP",
      "path": "5"
    },
    "1320": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11407,
        13828
      ],
      "op": "POP",
      "path": "5"
    },
    "1321": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11407,
        13828
      ],
      "op": "POP",
      "path": "5"
    },
    "1322": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11345,
        13828
      ],
      "op": "POP",
      "path": "5"
    },
    "1323": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11345,
        13828
      ],
      "op": "POP",
      "path": "5"
    },
    "1324": {
      "fn": "MerkleResistor.withdraw",
      "jump": "o",
      "offset": [
        11345,
        13828
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1325": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1326": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14875,
        14879
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1328": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14881,
        14885
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1329": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14887,
        14891
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1331": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14893,
        14897
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1332": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15043,
        15051
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1334": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15043,
        15051
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1335": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15031,
        15040
      ],
      "op": "DUP9",
      "path": "5"
    },
    "1336": {
      "branch": 32,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15031,
        15051
      ],
      "op": "GT",
      "path": "5"
    },
    "1337": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15027,
        15101
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1338": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15027,
        15101
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x54E"
    },
    "1341": {
      "branch": 32,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15027,
        15101
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1342": {
      "op": "POP"
    },
    "1343": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15075,
        15080
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 9,
      "value": "0x0"
    },
    "1345": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15075,
        15080
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1346": {
      "op": "POP"
    },
    "1347": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15075,
        15080
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1348": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15075,
        15080
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1349": {
      "op": "POP"
    },
    "1350": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15075,
        15080
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1351": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15075,
        15080
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1352": {
      "op": "POP"
    },
    "1353": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15075,
        15080
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1354": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15067,
        15090
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x6C9"
    },
    "1357": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15067,
        15090
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1358": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15027,
        15101
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1359": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15228
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1361": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15231,
        15253
      ],
      "op": "DUP9",
      "path": "5"
    },
    "1362": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15231,
        15253
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1363": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15231,
        15253
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1364": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15231,
        15242
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "1366": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15231,
        15253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1368": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15231,
        15253
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1369": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15231,
        15253
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1370": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15231,
        15253
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1371": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15231,
        15253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1373": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15231,
        15253
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1374": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15231,
        15253
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1375": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15231,
        15253
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1376": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15231,
        15253
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "1377": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1378": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1379": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xE0"
    },
    "1381": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1382": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1383": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP6",
      "path": "5"
    },
    "1384": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1385": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1386": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1387": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1388": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1389": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1391": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1392": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1393": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1394": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1395": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1396": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1397": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1398": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1399": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1400": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1401": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1402": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1403": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1404": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1405": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1406": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1407": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1408": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1409": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1410": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1411": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1412": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "1414": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1415": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1416": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1417": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "1419": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1420": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1421": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1422": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1423": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1424": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "1426": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1427": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1428": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1429": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x80"
    },
    "1431": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1432": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1433": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1434": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "1436": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1437": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1438": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1439": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1441": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1443": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1445": {
      "op": "SHL"
    },
    "1446": {
      "op": "SUB"
    },
    "1447": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "AND",
      "path": "5"
    },
    "1448": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xA0"
    },
    "1450": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1451": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1452": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1453": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "1455": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1456": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1457": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1458": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1459": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xC0"
    },
    "1461": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1462": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1463": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15206,
        15253
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1464": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15356,
        15385
      ],
      "op": "DUP9",
      "path": "5"
    },
    "1465": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15356,
        15385
      ],
      "op": "GT",
      "path": "5"
    },
    "1466": {
      "branch": 33,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15356,
        15385
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1467": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15356,
        15418
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x5C7"
    },
    "1470": {
      "branch": 33,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15356,
        15418
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1471": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15356,
        15418
      ],
      "op": "POP",
      "path": "5"
    },
    "1472": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15403,
        15407
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1473": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15403,
        15418
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1475": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15403,
        15418
      ],
      "op": "ADD",
      "path": "5"
    },
    "1476": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15403,
        15418
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1477": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15389,
        15400
      ],
      "op": "DUP9",
      "path": "5"
    },
    "1478": {
      "branch": 34,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15389,
        15418
      ],
      "op": "LT",
      "path": "5"
    },
    "1479": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15356,
        15418
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1480": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15352,
        15468
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1481": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15352,
        15468
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x5E0"
    },
    "1484": {
      "branch": 34,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15352,
        15468
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1485": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15442,
        15447
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 10,
      "value": "0x0"
    },
    "1487": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15449,
        15450
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1488": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15452,
        15453
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1490": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15455,
        15456
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1491": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15434,
        15457
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "1492": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15434,
        15457
      ],
      "op": "POP",
      "path": "5"
    },
    "1493": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15434,
        15457
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "1494": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15434,
        15457
      ],
      "op": "POP",
      "path": "5"
    },
    "1495": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15434,
        15457
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "1496": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15434,
        15457
      ],
      "op": "POP",
      "path": "5"
    },
    "1497": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15434,
        15457
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "1498": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15434,
        15457
      ],
      "op": "POP",
      "path": "5"
    },
    "1499": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15434,
        15457
      ],
      "op": "POP",
      "path": "5"
    },
    "1500": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15434,
        15457
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x6C9"
    },
    "1503": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15434,
        15457
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1504": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15352,
        15468
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1505": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15478,
        15493
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1507": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15522,
        15526
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1508": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15522,
        15537
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "1510": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15522,
        15537
      ],
      "op": "ADD",
      "path": "5"
    },
    "1511": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15522,
        15537
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1512": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15507,
        15518
      ],
      "op": "DUP10",
      "path": "5"
    },
    "1513": {
      "branch": 35,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15507,
        15537
      ],
      "op": "EQ",
      "path": "5"
    },
    "1514": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15503,
        16807
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1515": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15503,
        16807
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x5F5"
    },
    "1518": {
      "branch": 35,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15503,
        16807
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1519": {
      "op": "POP"
    },
    "1520": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15723,
        15739
      ],
      "op": "DUP6",
      "path": "5",
      "statement": 11
    },
    "1521": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15503,
        16807
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x666"
    },
    "1524": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15503,
        16807
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1525": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15503,
        16807
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1526": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16414,
        16431
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1528": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16505,
        16509
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1529": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16505,
        16520
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1531": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16505,
        16520
      ],
      "op": "ADD",
      "path": "5"
    },
    "1532": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16505,
        16520
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1533": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16487,
        16491
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1534": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16487,
        16502
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "1536": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16487,
        16502
      ],
      "op": "ADD",
      "path": "5"
    },
    "1537": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16487,
        16502
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1538": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16487,
        16520
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x60B"
    },
    "1541": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16487,
        16520
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1542": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16487,
        16520
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1543": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16487,
        16520
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFB4"
    },
    "1546": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16487,
        16520
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1547": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16487,
        16520
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1548": {
      "offset": [
        3841,
        3848
      ],
      "op": "PUSH3",
      "path": "5",
      "value": "0xF4240"
    },
    "1552": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16435,
        16470
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x619"
    },
    "1555": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16454,
        16470
      ],
      "op": "DUP12",
      "path": "5"
    },
    "1556": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16435,
        16451
      ],
      "op": "DUP12",
      "path": "5"
    },
    "1557": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16435,
        16470
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFB4"
    },
    "1560": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16435,
        16470
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1561": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16435,
        16470
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1562": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16483
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x623"
    },
    "1565": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16483
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1566": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16483
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1567": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16483
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFCB"
    },
    "1570": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16434,
        16483
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1571": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16483
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1572": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16521
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x62D"
    },
    "1575": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16521
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1576": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16521
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1577": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16521
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1013"
    },
    "1580": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16434,
        16521
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1581": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16521
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1582": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16414,
        16521
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1583": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16414,
        16521
      ],
      "op": "POP",
      "path": "5"
    },
    "1584": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16780,
        16796
      ],
      "op": "DUP9",
      "path": "5",
      "statement": 12
    },
    "1585": {
      "offset": [
        3841,
        3848
      ],
      "op": "PUSH3",
      "path": "5",
      "value": "0xF4240"
    },
    "1589": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16748,
        16752
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1590": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16748,
        16763
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1592": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16748,
        16763
      ],
      "op": "ADD",
      "path": "5"
    },
    "1593": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16748,
        16763
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1594": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16734,
        16745
      ],
      "op": "DUP13",
      "path": "5"
    },
    "1595": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16734,
        16763
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x644"
    },
    "1598": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16734,
        16763
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1599": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16734,
        16763
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1600": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16734,
        16763
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFB4"
    },
    "1603": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16734,
        16763
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1604": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16734,
        16763
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1605": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16718,
        16764
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x64E"
    },
    "1608": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16718,
        16764
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1609": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16718,
        16730
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1610": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16718,
        16764
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFCB"
    },
    "1613": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16718,
        16764
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1614": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16718,
        16764
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1615": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16718,
        16776
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x658"
    },
    "1618": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16718,
        16776
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1619": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16718,
        16776
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1620": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16718,
        16776
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1013"
    },
    "1623": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16718,
        16776
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1624": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16718,
        16776
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1625": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16796
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x662"
    },
    "1628": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16796
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1629": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16796
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1630": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16796
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1035"
    },
    "1633": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16717,
        16796
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1634": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16796
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1635": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16704,
        16796
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1636": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16704,
        16796
      ],
      "op": "POP",
      "path": "5"
    },
    "1637": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15756,
        16807
      ],
      "op": "POP",
      "path": "5"
    },
    "1638": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15503,
        16807
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1639": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17268,
        17287
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1641": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17338,
        17355
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x673"
    },
    "1644": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17338,
        17349
      ],
      "op": "DUP11",
      "path": "5"
    },
    "1645": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17352,
        17355
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x64"
    },
    "1647": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17338,
        17355
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFCB"
    },
    "1650": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17338,
        17355
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1651": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17338,
        17355
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1652": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17317,
        17332
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x80"
    },
    "1654": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17317,
        17332
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1655": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17317,
        17332
      ],
      "op": "ADD",
      "path": "5"
    },
    "1656": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17317,
        17332
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1657": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17305,
        17332
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x683"
    },
    "1660": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17305,
        17332
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1661": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17310,
        17313
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x64"
    },
    "1663": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17305,
        17332
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFB4"
    },
    "1666": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17305,
        17332
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1667": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17305,
        17332
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1668": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17291,
        17333
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x68D"
    },
    "1671": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17291,
        17333
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1672": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17291,
        17301
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1673": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17291,
        17333
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFCB"
    },
    "1676": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17291,
        17333
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1677": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17291,
        17333
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1678": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17290,
        17356
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x697"
    },
    "1681": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17290,
        17356
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1682": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17290,
        17356
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1683": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17290,
        17356
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1013"
    },
    "1686": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17290,
        17356
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1687": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17290,
        17356
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1688": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17268,
        17356
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1689": {
      "op": "POP"
    },
    "1690": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17532,
        17546
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1692": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17582,
        17609
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x6A5"
    },
    "1695": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17268,
        17356
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1696": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17582,
        17592
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1697": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17582,
        17609
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1013"
    },
    "1700": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17582,
        17609
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1701": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17582,
        17609
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1702": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17549,
        17578
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x6AF"
    },
    "1705": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17567,
        17578
      ],
      "op": "DUP13",
      "path": "5"
    },
    "1706": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17549,
        17564
      ],
      "op": "TIMESTAMP",
      "path": "5"
    },
    "1707": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17549,
        17578
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1035"
    },
    "1710": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17549,
        17578
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1711": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17549,
        17578
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1712": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17549,
        17610
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x6B9"
    },
    "1715": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17549,
        17610
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1716": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17549,
        17610
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1717": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17549,
        17610
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFB4"
    },
    "1720": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17549,
        17610
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1721": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17549,
        17610
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1722": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17629,
        17633
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 13,
      "value": "0x1"
    },
    "1724": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17629,
        17633
      ],
      "op": "SWAP9",
      "path": "5"
    },
    "1725": {
      "op": "POP"
    },
    "1726": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17635,
        17645
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1727": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17635,
        17645
      ],
      "op": "SWAP7",
      "path": "5"
    },
    "1728": {
      "op": "POP"
    },
    "1729": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17647,
        17661
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1730": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17647,
        17661
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "1731": {
      "op": "POP"
    },
    "1732": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17532,
        17610
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1733": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17532,
        17610
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1734": {
      "op": "POP"
    },
    "1735": {
      "op": "POP"
    },
    "1736": {
      "op": "POP"
    },
    "1737": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1738": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "1739": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "POP",
      "path": "5"
    },
    "1740": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "1741": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "POP",
      "path": "5"
    },
    "1742": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "1743": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "POP",
      "path": "5"
    },
    "1744": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "1745": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1746": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14743,
        17680
      ],
      "op": "POP",
      "path": "5"
    },
    "1747": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "o",
      "offset": [
        14743,
        17680
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1748": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1749": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5584,
        5587
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 14,
      "value": "0x64"
    },
    "1751": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5571,
        5581
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1752": {
      "branch": 36,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5571,
        5587
      ],
      "op": "LT",
      "path": "5"
    },
    "1753": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5563,
        5609
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x718"
    },
    "1756": {
      "branch": 36,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5563,
        5609
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1757": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5563,
        5609
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1759": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5563,
        5609
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1760": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1764": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1766": {
      "op": "SHL"
    },
    "1767": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5563,
        5609
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1768": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5563,
        5609
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1769": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1771": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5563,
        5609
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "1773": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5563,
        5609
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1774": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5563,
        5609
      ],
      "op": "ADD",
      "path": "5"
    },
    "1775": {
      "op": "MSTORE"
    },
    "1776": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "1778": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1780": {
      "op": "DUP3"
    },
    "1781": {
      "op": "ADD"
    },
    "1782": {
      "op": "MSTORE"
    },
    "1783": {
      "op": "PUSH17",
      "value": "0x706374557046726F6E74203E3D2031303"
    },
    "1801": {
      "op": "PUSH1",
      "value": "0x7C"
    },
    "1803": {
      "op": "SHL"
    },
    "1804": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1806": {
      "op": "DUP3"
    },
    "1807": {
      "op": "ADD"
    },
    "1808": {
      "op": "MSTORE"
    },
    "1809": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1811": {
      "op": "ADD"
    },
    "1812": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5563,
        5609
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x318"
    },
    "1815": {
      "op": "JUMP"
    },
    "1816": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5563,
        5609
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1817": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5640,
        5650
      ],
      "op": "DUP4",
      "path": "5",
      "statement": 15
    },
    "1818": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5627,
        5637
      ],
      "op": "DUP6",
      "path": "5"
    },
    "1819": {
      "branch": 37,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5627,
        5650
      ],
      "op": "LT",
      "path": "5"
    },
    "1820": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5619,
        5694
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x777"
    },
    "1823": {
      "branch": 37,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5619,
        5694
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1824": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5619,
        5694
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1826": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5619,
        5694
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1827": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1831": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1833": {
      "op": "SHL"
    },
    "1834": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5619,
        5694
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1835": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5619,
        5694
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1836": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1838": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5619,
        5694
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "1840": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5619,
        5694
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1841": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5619,
        5694
      ],
      "op": "ADD",
      "path": "5"
    },
    "1842": {
      "op": "MSTORE"
    },
    "1843": {
      "op": "PUSH1",
      "value": "0x27"
    },
    "1845": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1847": {
      "op": "DUP3"
    },
    "1848": {
      "op": "ADD"
    },
    "1849": {
      "op": "MSTORE"
    },
    "1850": {
      "op": "PUSH32",
      "value": "0x6D696E456E6454696D65206D757374206265206C657373207468616E206D6178"
    },
    "1883": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1885": {
      "op": "DUP3"
    },
    "1886": {
      "op": "ADD"
    },
    "1887": {
      "op": "MSTORE"
    },
    "1888": {
      "op": "PUSH7",
      "value": "0x456E6454696D65"
    },
    "1896": {
      "op": "PUSH1",
      "value": "0xC8"
    },
    "1898": {
      "op": "SHL"
    },
    "1899": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1901": {
      "op": "DUP3"
    },
    "1902": {
      "op": "ADD"
    },
    "1903": {
      "op": "MSTORE"
    },
    "1904": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1906": {
      "op": "ADD"
    },
    "1907": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5619,
        5694
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x318"
    },
    "1910": {
      "op": "JUMP"
    },
    "1911": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5619,
        5694
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1912": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 16,
      "value": "0x40"
    },
    "1914": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1915": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1916": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xE0"
    },
    "1918": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "1919": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1921": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1922": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1923": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5811,
        5818
      ],
      "op": "DUP9",
      "path": "5"
    },
    "1924": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1925": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1926": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1928": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "1929": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5832,
        5840
      ],
      "op": "DUP8",
      "path": "5"
    },
    "1930": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1931": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1932": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1934": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "1935": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5854,
        5864
      ],
      "op": "DUP7",
      "path": "5"
    },
    "1936": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1937": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1938": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1940": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "1941": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5878,
        5888
      ],
      "op": "DUP6",
      "path": "5"
    },
    "1942": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1943": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1944": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1946": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "1947": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5902,
        5912
      ],
      "op": "DUP5",
      "path": "5"
    },
    "1948": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1949": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1950": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1952": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "1953": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5926,
        5938
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1954": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1956": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1958": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1960": {
      "op": "SHL"
    },
    "1961": {
      "op": "SUB"
    },
    "1962": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "AND",
      "path": "5"
    },
    "1963": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1964": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1965": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1967": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "1968": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5952,
        5953
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1970": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1971": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1972": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5787,
        6034
      ],
      "op": "POP",
      "path": "5"
    },
    "1973": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5772
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "1975": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1977": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5775,
        5783
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1978": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5775,
        5783
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1980": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5773,
        5783
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1981": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5773,
        5783
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1982": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5773,
        5783
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x7C6"
    },
    "1985": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5773,
        5783
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1986": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5773,
        5783
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x104D"
    },
    "1989": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        5773,
        5783
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1990": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5773,
        5783
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1991": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5773,
        5783
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1992": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5773,
        5783
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1993": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5773,
        5783
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1994": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5773,
        5783
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "1995": {
      "op": "POP"
    },
    "1996": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1997": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1998": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2000": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2001": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2002": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "ADD",
      "path": "5"
    },
    "2003": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2004": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2005": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2006": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2007": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2009": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2010": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2011": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "ADD",
      "path": "5"
    },
    "2012": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2014": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2015": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2016": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        5784
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "2017": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2018": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2019": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2020": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "2021": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2022": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2023": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "2024": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2025": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "2027": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2028": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "2029": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "2030": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2031": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2032": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "2033": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2034": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "2036": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2037": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "2038": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "2039": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "2041": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2042": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "2043": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2044": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "2046": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2047": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "2048": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "2049": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x80"
    },
    "2051": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2052": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "2053": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2054": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2056": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2057": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "2058": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "2059": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xA0"
    },
    "2061": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2062": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "2063": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2064": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "2066": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2067": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "2068": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2069": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2070": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2072": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2074": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2076": {
      "op": "SHL"
    },
    "2077": {
      "op": "SUB"
    },
    "2078": {
      "op": "NOT"
    },
    "2079": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "AND",
      "path": "5"
    },
    "2080": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2082": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2084": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2086": {
      "op": "SHL"
    },
    "2087": {
      "op": "SUB"
    },
    "2088": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2089": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2090": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "AND",
      "path": "5"
    },
    "2091": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2092": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2093": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2094": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "OR",
      "path": "5"
    },
    "2095": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2096": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "2097": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xC0"
    },
    "2099": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2100": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2101": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "2102": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2103": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "2105": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2106": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2107": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "ADD",
      "path": "5"
    },
    "2108": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5761,
        6034
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "2109": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6324,
        6332
      ],
      "op": "SLOAD",
      "path": "5",
      "statement": 17
    },
    "2110": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6310,
        6347
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x847"
    },
    "2113": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6310,
        6347
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2114": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6334,
        6346
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2115": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6310,
        6323
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x898"
    },
    "2118": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        6310,
        6347
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2119": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6310,
        6347
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2120": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6378,
        6386
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 18,
      "value": "0x0"
    },
    "2122": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6378,
        6386
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2123": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2125": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2126": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2127": {
      "op": "DUP10"
    },
    "2128": {
      "op": "DUP2"
    },
    "2129": {
      "op": "MSTORE"
    },
    "2130": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2132": {
      "op": "DUP2"
    },
    "2133": {
      "op": "ADD"
    },
    "2134": {
      "op": "DUP10"
    },
    "2135": {
      "op": "SWAP1"
    },
    "2136": {
      "op": "MSTORE"
    },
    "2137": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2139": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2141": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2143": {
      "op": "SHL"
    },
    "2144": {
      "op": "SUB"
    },
    "2145": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "DUP6",
      "path": "5"
    },
    "2146": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "AND",
      "path": "5"
    },
    "2147": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2148": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6378,
        6386
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2149": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "PUSH32",
      "path": "5",
      "value": "0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45"
    },
    "2182": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2183": {
      "op": "ADD"
    },
    "2184": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2186": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2187": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2188": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2189": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "SUB",
      "path": "5"
    },
    "2190": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2191": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6362,
        6420
      ],
      "op": "LOG3",
      "path": "5"
    },
    "2192": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "POP",
      "path": "5"
    },
    "2193": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "POP",
      "path": "5"
    },
    "2194": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "POP",
      "path": "5"
    },
    "2195": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "POP",
      "path": "5"
    },
    "2196": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "POP",
      "path": "5"
    },
    "2197": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "POP",
      "path": "5"
    },
    "2198": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5352,
        6427
      ],
      "op": "POP",
      "path": "5"
    },
    "2199": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "o",
      "offset": [
        5352,
        6427
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2200": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6802,
        7999
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2201": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6905,
        6934
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2203": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6937,
        6959
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2204": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6937,
        6959
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2205": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6937,
        6959
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2206": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6937,
        6948
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "2208": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6937,
        6959
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2210": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6937,
        6959
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2211": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6937,
        6959
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2213": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6937,
        6959
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2214": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6937,
        6959
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "2215": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7032,
        7055
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 19,
      "value": "0x6"
    },
    "2217": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7032,
        7055
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2218": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7032,
        7055
      ],
      "op": "ADD",
      "path": "5"
    },
    "2219": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7032,
        7064
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2220": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7032,
        7064
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2221": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6937,
        6959
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2222": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6937,
        6959
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2223": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7059,
        7064
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2224": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7059,
        7064
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2225": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7032,
        7064
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x8BB"
    },
    "2228": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7032,
        7064
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2229": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7059,
        7064
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2230": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7059,
        7064
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2231": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7032,
        7064
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1035"
    },
    "2234": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        7032,
        7064
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2235": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7032,
        7064
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2236": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7032,
        7064
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2237": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7032,
        7064
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2238": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7032,
        7064
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "2239": {
      "op": "POP"
    },
    "2240": {
      "op": "POP"
    },
    "2241": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7822,
        7845
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 20,
      "value": "0x5"
    },
    "2243": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7822,
        7845
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2244": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7822,
        7845
      ],
      "op": "ADD",
      "path": "5"
    },
    "2245": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7822,
        7845
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2246": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2248": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2249": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "2254": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2256": {
      "op": "SHL"
    },
    "2257": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2258": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2259": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7860,
        7870
      ],
      "op": "CALLER",
      "path": "5"
    },
    "2260": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2262": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2263": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "ADD",
      "path": "5"
    },
    "2264": {
      "op": "MSTORE"
    },
    "2265": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7880,
        7884
      ],
      "op": "ADDRESS",
      "path": "5"
    },
    "2266": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2268": {
      "op": "DUP3"
    },
    "2269": {
      "op": "ADD"
    },
    "2270": {
      "op": "MSTORE"
    },
    "2271": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2273": {
      "op": "DUP2"
    },
    "2274": {
      "op": "ADD"
    },
    "2275": {
      "op": "DUP5"
    },
    "2276": {
      "op": "SWAP1"
    },
    "2277": {
      "op": "MSTORE"
    },
    "2278": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2280": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2282": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2284": {
      "op": "SHL"
    },
    "2285": {
      "op": "SUB"
    },
    "2286": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7822,
        7845
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2287": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7822,
        7845
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2288": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7822,
        7845
      ],
      "op": "AND",
      "path": "5"
    },
    "2289": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7822,
        7845
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2290": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7859
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0x23B872DD"
    },
    "2295": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7859
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2296": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2298": {
      "op": "ADD"
    },
    "2299": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2301": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2303": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2304": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2305": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2306": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "SUB",
      "path": "5"
    },
    "2307": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2308": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2310": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "DUP8",
      "path": "5"
    },
    "2311": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "GAS",
      "path": "5"
    },
    "2312": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "CALL",
      "path": "5"
    },
    "2313": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2314": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2315": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2316": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x919"
    },
    "2319": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2320": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "2321": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2323": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2324": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "RETURNDATACOPY",
      "path": "5"
    },
    "2325": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "2326": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2328": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "REVERT",
      "path": "5"
    },
    "2329": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2330": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "POP",
      "path": "5"
    },
    "2331": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "POP",
      "path": "5"
    },
    "2332": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "POP",
      "path": "5"
    },
    "2333": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "POP",
      "path": "5"
    },
    "2334": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2336": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2337": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "2338": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "2340": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "NOT",
      "path": "5"
    },
    "2341": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "2343": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2344": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "ADD",
      "path": "5"
    },
    "2345": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "AND",
      "path": "5"
    },
    "2346": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2347": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "ADD",
      "path": "5"
    },
    "2348": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2349": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2351": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2352": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "POP",
      "path": "5"
    },
    "2353": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2354": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "ADD",
      "path": "5"
    },
    "2355": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2356": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x93D"
    },
    "2359": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2360": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2361": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFEA"
    },
    "2364": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        7815,
        7893
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2365": {
      "branch": 38,
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7815,
        7893
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2366": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7807,
        7919
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x981"
    },
    "2369": {
      "branch": 38,
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7807,
        7919
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2370": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7807,
        7919
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2372": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7807,
        7919
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2373": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2377": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2379": {
      "op": "SHL"
    },
    "2380": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7807,
        7919
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2381": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7807,
        7919
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2382": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2384": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7807,
        7919
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2386": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7807,
        7919
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2387": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7807,
        7919
      ],
      "op": "ADD",
      "path": "5"
    },
    "2388": {
      "op": "MSTORE"
    },
    "2389": {
      "op": "PUSH1",
      "value": "0x15"
    },
    "2391": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2393": {
      "op": "DUP3"
    },
    "2394": {
      "op": "ADD"
    },
    "2395": {
      "op": "MSTORE"
    },
    "2396": {
      "op": "PUSH21",
      "value": "0x115490CC8C081D1C985B9CD9995C8819985A5B1959"
    },
    "2418": {
      "op": "PUSH1",
      "value": "0x5A"
    },
    "2420": {
      "op": "SHL"
    },
    "2421": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2423": {
      "op": "DUP3"
    },
    "2424": {
      "op": "ADD"
    },
    "2425": {
      "op": "MSTORE"
    },
    "2426": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2428": {
      "op": "ADD"
    },
    "2429": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7807,
        7919
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x318"
    },
    "2432": {
      "op": "JUMP"
    },
    "2433": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7807,
        7919
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2434": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7961,
        7984
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 21,
      "value": "0x5"
    },
    "2436": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7961,
        7984
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2437": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7961,
        7984
      ],
      "op": "ADD",
      "path": "5"
    },
    "2438": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7961,
        7984
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2439": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7934,
        7992
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2441": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7934,
        7992
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2442": {
      "op": "DUP4"
    },
    "2443": {
      "op": "DUP2"
    },
    "2444": {
      "op": "MSTORE"
    },
    "2445": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2447": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2449": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2451": {
      "op": "SHL"
    },
    "2452": {
      "op": "SUB"
    },
    "2453": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7961,
        7984
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2454": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7961,
        7984
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2455": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7961,
        7984
      ],
      "op": "AND",
      "path": "5"
    },
    "2456": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7961,
        7984
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2457": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7950,
        7959
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2458": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7950,
        7959
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2459": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7934,
        7992
      ],
      "op": "PUSH32",
      "path": "5",
      "value": "0xB162210DA7D23D82C18CFF5AF46D3562661D26B42A6848FA28D64A6BDC70386A"
    },
    "2492": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7934,
        7992
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2493": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2495": {
      "op": "ADD"
    },
    "2496": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7934,
        7992
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2498": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7934,
        7992
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2499": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7934,
        7992
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2500": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7934,
        7992
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2501": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7934,
        7992
      ],
      "op": "SUB",
      "path": "5"
    },
    "2502": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7934,
        7992
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2503": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7934,
        7992
      ],
      "op": "LOG3",
      "path": "5"
    },
    "2504": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6860,
        7999
      ],
      "op": "POP",
      "path": "5"
    },
    "2505": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6802,
        7999
      ],
      "op": "POP",
      "path": "5"
    },
    "2506": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6802,
        7999
      ],
      "op": "POP",
      "path": "5"
    },
    "2507": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "o",
      "offset": [
        6802,
        7999
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2508": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2509": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9172,
        9182
      ],
      "op": "CALLER",
      "path": "5",
      "statement": 22
    },
    "2510": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2512": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2514": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2516": {
      "op": "SHL"
    },
    "2517": {
      "op": "SUB"
    },
    "2518": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9172,
        9197
      ],
      "op": "DUP7",
      "path": "5"
    },
    "2519": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9172,
        9197
      ],
      "op": "AND",
      "path": "5"
    },
    "2520": {
      "branch": 39,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9172,
        9197
      ],
      "op": "EQ",
      "path": "5"
    },
    "2521": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9164,
        9238
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xA30"
    },
    "2524": {
      "branch": 39,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9164,
        9238
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2525": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9164,
        9238
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2527": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9164,
        9238
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2528": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2532": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2534": {
      "op": "SHL"
    },
    "2535": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9164,
        9238
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2536": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9164,
        9238
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2537": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2539": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9164,
        9238
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2541": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9164,
        9238
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2542": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9164,
        9238
      ],
      "op": "ADD",
      "path": "5"
    },
    "2543": {
      "op": "MSTORE"
    },
    "2544": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2546": {
      "op": "DUP1"
    },
    "2547": {
      "op": "DUP3"
    },
    "2548": {
      "op": "ADD"
    },
    "2549": {
      "op": "MSTORE"
    },
    "2550": {
      "op": "PUSH32",
      "value": "0x43616E206F6E6C7920696E697469616C697A6520796F7572206F776E20747261"
    },
    "2583": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2585": {
      "op": "DUP3"
    },
    "2586": {
      "op": "ADD"
    },
    "2587": {
      "op": "MSTORE"
    },
    "2588": {
      "op": "PUSH4",
      "value": "0x6E636865"
    },
    "2593": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2595": {
      "op": "SHL"
    },
    "2596": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2598": {
      "op": "DUP3"
    },
    "2599": {
      "op": "ADD"
    },
    "2600": {
      "op": "MSTORE"
    },
    "2601": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2603": {
      "op": "ADD"
    },
    "2604": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9164,
        9238
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x318"
    },
    "2607": {
      "op": "JUMP"
    },
    "2608": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9164,
        9238
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2609": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2611": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2613": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2615": {
      "op": "SHL"
    },
    "2616": {
      "op": "SUB"
    },
    "2617": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9317
      ],
      "op": "DUP6",
      "path": "5",
      "statement": 23
    },
    "2618": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9317
      ],
      "op": "AND",
      "path": "5"
    },
    "2619": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9317
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2621": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9317
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2622": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9317
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2623": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9317
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2624": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9304
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "2626": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9317
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2628": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9317
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2629": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9317
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2630": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9317
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2631": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9317
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2633": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9317
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2634": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9317
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2635": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9317
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "2636": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9328
      ],
      "op": "DUP10",
      "path": "5"
    },
    "2637": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9328
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2638": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9328
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2639": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9328
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2640": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9328
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2641": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9328
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2642": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9328
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2643": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9328
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "2644": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9328
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2645": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9328
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "2647": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9293,
        9328
      ],
      "op": "AND",
      "path": "5"
    },
    "2648": {
      "branch": 40,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9328
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2649": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9284,
        9352
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xA9A"
    },
    "2652": {
      "branch": 40,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9284,
        9352
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2653": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9284,
        9352
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2655": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9284,
        9352
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2656": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2660": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2662": {
      "op": "SHL"
    },
    "2663": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9284,
        9352
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2664": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9284,
        9352
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2665": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2667": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9284,
        9352
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2669": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9284,
        9352
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2670": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9284,
        9352
      ],
      "op": "ADD",
      "path": "5"
    },
    "2671": {
      "op": "MSTORE"
    },
    "2672": {
      "op": "PUSH1",
      "value": "0x13"
    },
    "2674": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2676": {
      "op": "DUP3"
    },
    "2677": {
      "op": "ADD"
    },
    "2678": {
      "op": "MSTORE"
    },
    "2679": {
      "op": "PUSH19",
      "value": "0x105B1C9958591E481A5B9A5D1A585B1A5E9959"
    },
    "2699": {
      "op": "PUSH1",
      "value": "0x6A"
    },
    "2701": {
      "op": "SHL"
    },
    "2702": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2704": {
      "op": "DUP3"
    },
    "2705": {
      "op": "ADD"
    },
    "2706": {
      "op": "MSTORE"
    },
    "2707": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2709": {
      "op": "ADD"
    },
    "2710": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9284,
        9352
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x318"
    },
    "2713": {
      "op": "JUMP"
    },
    "2714": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9284,
        9352
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2715": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2717": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2718": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2719": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2721": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2723": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2725": {
      "op": "SHL"
    },
    "2726": {
      "op": "SUB"
    },
    "2727": {
      "op": "DUP8"
    },
    "2728": {
      "op": "AND"
    },
    "2729": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2731": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2732": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "ADD",
      "path": "5"
    },
    "2733": {
      "op": "MSTORE"
    },
    "2734": {
      "op": "SWAP1"
    },
    "2735": {
      "op": "DUP2"
    },
    "2736": {
      "op": "ADD"
    },
    "2737": {
      "op": "DUP5"
    },
    "2738": {
      "op": "SWAP1"
    },
    "2739": {
      "op": "MSTORE"
    },
    "2740": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2742": {
      "op": "DUP2"
    },
    "2743": {
      "op": "ADD"
    },
    "2744": {
      "op": "DUP4"
    },
    "2745": {
      "op": "SWAP1"
    },
    "2746": {
      "op": "MSTORE"
    },
    "2747": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9425,
        9437
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2749": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9425,
        9437
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2750": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2752": {
      "op": "ADD"
    },
    "2753": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2755": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2756": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2757": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2759": {
      "op": "NOT"
    },
    "2760": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2761": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2762": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "SUB",
      "path": "5"
    },
    "2763": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "ADD",
      "path": "5"
    },
    "2764": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2765": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2766": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2767": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2768": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2769": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9440,
        9510
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2770": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9440,
        9510
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2771": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9450,
        9509
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2773": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9440,
        9510
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2774": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9440,
        9510
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2775": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9440,
        9510
      ],
      "op": "ADD",
      "path": "5"
    },
    "2776": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9440,
        9510
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "2777": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9583
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2779": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9586,
        9608
      ],
      "op": "DUP12",
      "path": "5"
    },
    "2780": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9586,
        9608
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2781": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9586,
        9608
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2782": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9586,
        9597
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "2784": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9586,
        9608
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2785": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9586,
        9608
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2786": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9586,
        9608
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2787": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9586,
        9608
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2788": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9586,
        9608
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2789": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9586,
        9608
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2790": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9586,
        9608
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "2791": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xE0"
    },
    "2793": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP7",
      "path": "5"
    },
    "2794": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "ADD",
      "path": "5"
    },
    "2795": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP6",
      "path": "5"
    },
    "2796": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2797": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2798": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2799": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2800": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP8",
      "path": "5"
    },
    "2801": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2802": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "2804": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2805": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "ADD",
      "path": "5"
    },
    "2806": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2807": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "2808": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP8",
      "path": "5"
    },
    "2809": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "ADD",
      "path": "5"
    },
    "2810": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "2811": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2812": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "2813": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2814": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2815": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2816": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "ADD",
      "path": "5"
    },
    "2817": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2818": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP6",
      "path": "5"
    },
    "2819": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP6",
      "path": "5"
    },
    "2820": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "ADD",
      "path": "5"
    },
    "2821": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2822": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "2824": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2825": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "ADD",
      "path": "5"
    },
    "2826": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2827": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "2829": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP7",
      "path": "5"
    },
    "2830": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "ADD",
      "path": "5"
    },
    "2831": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2832": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2834": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2835": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2836": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "ADD",
      "path": "5"
    },
    "2837": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2838": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x80"
    },
    "2840": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP8",
      "path": "5"
    },
    "2841": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "ADD",
      "path": "5"
    },
    "2842": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2843": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "2845": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2846": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "ADD",
      "path": "5"
    },
    "2847": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2848": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2850": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2852": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2854": {
      "op": "SHL"
    },
    "2855": {
      "op": "SUB"
    },
    "2856": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "AND",
      "path": "5"
    },
    "2857": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xA0"
    },
    "2859": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP8",
      "path": "5"
    },
    "2860": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "ADD",
      "path": "5"
    },
    "2861": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2862": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "2864": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2865": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2866": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "ADD",
      "path": "5"
    },
    "2867": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2868": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xC0"
    },
    "2870": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "DUP7",
      "path": "5"
    },
    "2871": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "ADD",
      "path": "5"
    },
    "2872": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2873": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "SWAP3",
      "path": "5",
      "statement": 24
    },
    "2874": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2875": {
      "op": "PUSH4",
      "value": "0x2769CD1F"
    },
    "2880": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "2882": {
      "op": "SHL"
    },
    "2883": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2884": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2885": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9440,
        9510
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2886": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9440,
        9510
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "2887": {
      "op": "POP"
    },
    "2888": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9731
      ],
      "op": "PUSH20",
      "path": "5",
      "value": "0x0"
    },
    "2909": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9731
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2910": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9731
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0x9DA7347C"
    },
    "2915": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9731
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2916": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xB73"
    },
    "2919": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2920": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2921": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9561,
        9608
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2922": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9440,
        9510
      ],
      "op": "DUP8",
      "path": "5"
    },
    "2923": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9440,
        9510
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2924": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9738,
        9743
      ],
      "op": "DUP10",
      "path": "5"
    },
    "2925": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9738,
        9743
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2926": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "ADD",
      "path": "5"
    },
    "2927": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1068"
    },
    "2930": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        9704,
        9744
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2931": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2932": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2934": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2936": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2937": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2938": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2939": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "SUB",
      "path": "5"
    },
    "2940": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2941": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "DUP7",
      "path": "5"
    },
    "2942": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "GAS",
      "path": "5"
    },
    "2943": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "DELEGATECALL",
      "path": "5"
    },
    "2944": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2945": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2946": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2947": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xB90"
    },
    "2950": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2951": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "2952": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2954": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2955": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "RETURNDATACOPY",
      "path": "5"
    },
    "2956": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "2957": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2959": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "REVERT",
      "path": "5"
    },
    "2960": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2961": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "POP",
      "path": "5"
    },
    "2962": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "POP",
      "path": "5"
    },
    "2963": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "POP",
      "path": "5"
    },
    "2964": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "POP",
      "path": "5"
    },
    "2965": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2967": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2968": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "2969": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "2971": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "NOT",
      "path": "5"
    },
    "2972": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "2974": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2975": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "ADD",
      "path": "5"
    },
    "2976": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "AND",
      "path": "5"
    },
    "2977": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2978": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "ADD",
      "path": "5"
    },
    "2979": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2980": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2982": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2983": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "POP",
      "path": "5"
    },
    "2984": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2985": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "ADD",
      "path": "5"
    },
    "2986": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2987": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xBB4"
    },
    "2990": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2991": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2992": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFEA"
    },
    "2995": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        9704,
        9744
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2996": {
      "branch": 41,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9704,
        9744
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2997": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9696,
        9781
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xC00"
    },
    "3000": {
      "branch": 41,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9696,
        9781
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3001": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9696,
        9781
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "3003": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9696,
        9781
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "3004": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3008": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3010": {
      "op": "SHL"
    },
    "3011": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9696,
        9781
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3012": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9696,
        9781
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3013": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3015": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9696,
        9781
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "3017": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9696,
        9781
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3018": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9696,
        9781
      ],
      "op": "ADD",
      "path": "5"
    },
    "3019": {
      "op": "DUP2"
    },
    "3020": {
      "op": "SWAP1"
    },
    "3021": {
      "op": "MSTORE"
    },
    "3022": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3024": {
      "op": "DUP3"
    },
    "3025": {
      "op": "ADD"
    },
    "3026": {
      "op": "MSTORE"
    },
    "3027": {
      "op": "PUSH32",
      "value": "0x5468652070726F6F6620636F756C64206E6F742062652076657269666965642E"
    },
    "3060": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3062": {
      "op": "DUP3"
    },
    "3063": {
      "op": "ADD"
    },
    "3064": {
      "op": "MSTORE"
    },
    "3065": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3067": {
      "op": "ADD"
    },
    "3068": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9696,
        9781
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x318"
    },
    "3071": {
      "op": "JUMP"
    },
    "3072": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9696,
        9781
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3073": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3075": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3077": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3079": {
      "op": "SHL"
    },
    "3080": {
      "op": "SUB"
    },
    "3081": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "DUP8",
      "path": "5",
      "statement": 25
    },
    "3082": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "AND",
      "path": "5"
    },
    "3083": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3085": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3086": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3087": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3088": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9917,
        9921
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "3090": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3092": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3093": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3094": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3095": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "3097": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3098": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "DUP5",
      "path": "5"
    },
    "3099": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "3100": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9914
      ],
      "op": "DUP13",
      "path": "5"
    },
    "3101": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9914
      ],
      "op": "DUP6",
      "path": "5"
    },
    "3102": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9914
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3103": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9914
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3104": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9914
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3105": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9914
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3106": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9914
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3107": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9914
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "3108": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9921
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3109": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9921
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3110": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3112": {
      "op": "NOT"
    },
    "3113": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9921
      ],
      "op": "AND",
      "path": "5"
    },
    "3114": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9921
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3115": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9921
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3116": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9921
      ],
      "op": "OR",
      "path": "5"
    },
    "3117": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9921
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3118": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9921
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "3119": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3120": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3121": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9879,
        9903
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3122": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10001,
        10082
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xC3D"
    },
    "3125": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9904,
        9913
      ],
      "op": "DUP13",
      "path": "5"
    },
    "3126": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10034,
        10045
      ],
      "op": "DUP12",
      "path": "5"
    },
    "3127": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10047,
        10063
      ],
      "op": "DUP12",
      "path": "5"
    },
    "3128": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10065,
        10081
      ],
      "op": "DUP12",
      "path": "5"
    },
    "3129": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10001,
        10022
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x52D"
    },
    "3132": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        10001,
        10082
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3133": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10001,
        10082
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3134": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9932,
        10082
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "3135": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9932,
        10082
      ],
      "op": "POP",
      "path": "5"
    },
    "3136": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9932,
        10082
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "3137": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9932,
        10082
      ],
      "op": "POP",
      "path": "5"
    },
    "3138": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9932,
        10082
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "3139": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9932,
        10082
      ],
      "op": "POP",
      "path": "5"
    },
    "3140": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9932,
        10082
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "3141": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9932,
        10082
      ],
      "op": "POP",
      "path": "5"
    },
    "3142": {
      "branch": 42,
      "fn": "MerkleResistor.initialize",
      "offset": [
        10100,
        10105
      ],
      "op": "DUP4",
      "path": "5",
      "statement": 26
    },
    "3143": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10092,
        10134
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xC92"
    },
    "3146": {
      "branch": 42,
      "fn": "MerkleResistor.initialize",
      "offset": [
        10092,
        10134
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3147": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10092,
        10134
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "3149": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10092,
        10134
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "3150": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3154": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3156": {
      "op": "SHL"
    },
    "3157": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10092,
        10134
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3158": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10092,
        10134
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3159": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3161": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10092,
        10134
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "3163": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10092,
        10134
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3164": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10092,
        10134
      ],
      "op": "ADD",
      "path": "5"
    },
    "3165": {
      "op": "MSTORE"
    },
    "3166": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "3168": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3170": {
      "op": "DUP3"
    },
    "3171": {
      "op": "ADD"
    },
    "3172": {
      "op": "MSTORE"
    },
    "3173": {
      "op": "PUSH32",
      "value": "0x496E76616C69642076657374696E67207363686564756C650000000000000000"
    },
    "3206": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3208": {
      "op": "DUP3"
    },
    "3209": {
      "op": "ADD"
    },
    "3210": {
      "op": "MSTORE"
    },
    "3211": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3213": {
      "op": "ADD"
    },
    "3214": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10092,
        10134
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x318"
    },
    "3217": {
      "op": "JUMP"
    },
    "3218": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10092,
        10134
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3219": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 27,
      "value": "0x40"
    },
    "3221": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "3222": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3223": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xC0"
    },
    "3225": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3226": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "3228": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3229": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3230": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10384,
        10394
      ],
      "op": "DUP5",
      "path": "5"
    },
    "3231": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3232": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3233": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3235": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3236": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10460,
        10470
      ],
      "op": "DUP5",
      "path": "5"
    },
    "3237": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3238": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3239": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3241": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3242": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10506,
        10515
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3243": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3244": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3245": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3247": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3248": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10612,
        10623
      ],
      "op": "DUP12",
      "path": "5"
    },
    "3249": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10594,
        10609
      ],
      "op": "TIMESTAMP",
      "path": "5"
    },
    "3250": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10594,
        10623
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xCBB"
    },
    "3253": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10594,
        10623
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3254": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10594,
        10623
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3255": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10594,
        10623
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1035"
    },
    "3258": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        10594,
        10623
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3259": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10594,
        10623
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3260": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3261": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3262": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3264": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3265": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10681,
        10695
      ],
      "op": "DUP4",
      "path": "5"
    },
    "3266": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3267": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3268": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3270": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3271": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10749,
        10758
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3272": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3273": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3274": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10363,
        10866
      ],
      "op": "POP",
      "path": "5"
    },
    "3275": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10336
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "3277": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10349
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3279": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10337,
        10348
      ],
      "op": "DUP14",
      "path": "5"
    },
    "3280": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3282": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3284": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3286": {
      "op": "SHL"
    },
    "3287": {
      "op": "SUB"
    },
    "3288": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10349
      ],
      "op": "AND",
      "path": "5"
    },
    "3289": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3291": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3293": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3295": {
      "op": "SHL"
    },
    "3296": {
      "op": "SUB"
    },
    "3297": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10349
      ],
      "op": "AND",
      "path": "5"
    },
    "3298": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10349
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3299": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10349
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3300": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10349
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3302": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10349
      ],
      "op": "ADD",
      "path": "5"
    },
    "3303": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10349
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3304": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10349
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3305": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10349
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3306": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10349
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3308": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10349
      ],
      "op": "ADD",
      "path": "5"
    },
    "3309": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10349
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3311": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10349
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "3312": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10360
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3314": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10350,
        10359
      ],
      "op": "DUP15",
      "path": "5"
    },
    "3315": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10360
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3316": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10360
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3317": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10360
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3319": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10360
      ],
      "op": "ADD",
      "path": "5"
    },
    "3320": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10360
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3321": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10360
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3322": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10360
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3323": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10360
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3325": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10360
      ],
      "op": "ADD",
      "path": "5"
    },
    "3326": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10360
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3328": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10360
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "3329": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3331": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3332": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3333": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "3334": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3335": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3337": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3338": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "3339": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3341": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3342": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3343": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "3344": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3345": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "3347": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3348": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "3349": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "3351": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3352": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3353": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "3354": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3355": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "3357": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3358": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "3359": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "3361": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3362": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3363": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "3364": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3365": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "3367": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3368": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "3369": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x80"
    },
    "3371": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3372": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3373": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "3374": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3375": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "3377": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3378": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "3379": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xA0"
    },
    "3381": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3382": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3383": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "3384": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3385": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "3387": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "ADD",
      "path": "5"
    },
    "3388": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "3389": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3390": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "POP",
      "path": "5"
    },
    "3391": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10328,
        10866
      ],
      "op": "POP",
      "path": "5"
    },
    "3392": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10876,
        10908
      ],
      "op": "PUSH2",
      "path": "5",
      "statement": 28,
      "value": "0xD49"
    },
    "3395": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10885,
        10894
      ],
      "op": "DUP13",
      "path": "5"
    },
    "3396": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10896,
        10907
      ],
      "op": "DUP13",
      "path": "5"
    },
    "3397": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10876,
        10884
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x299"
    },
    "3400": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        10876,
        10908
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3401": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10876,
        10908
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3402": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9097,
        10915
      ],
      "op": "POP",
      "path": "5"
    },
    "3403": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9097,
        10915
      ],
      "op": "POP",
      "path": "5"
    },
    "3404": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9097,
        10915
      ],
      "op": "POP",
      "path": "5"
    },
    "3405": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9097,
        10915
      ],
      "op": "POP",
      "path": "5"
    },
    "3406": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9097,
        10915
      ],
      "op": "POP",
      "path": "5"
    },
    "3407": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9097,
        10915
      ],
      "op": "POP",
      "path": "5"
    },
    "3408": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "POP",
      "path": "5"
    },
    "3409": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "POP",
      "path": "5"
    },
    "3410": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "POP",
      "path": "5"
    },
    "3411": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "POP",
      "path": "5"
    },
    "3412": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "POP",
      "path": "5"
    },
    "3413": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8943,
        10915
      ],
      "op": "POP",
      "path": "5"
    },
    "3414": {
      "fn": "MerkleResistor.initialize",
      "jump": "o",
      "offset": [
        8943,
        10915
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3415": {
      "op": "JUMPDEST"
    },
    "3416": {
      "op": "DUP1"
    },
    "3417": {
      "op": "CALLDATALOAD"
    },
    "3418": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3420": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3422": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3424": {
      "op": "SHL"
    },
    "3425": {
      "op": "SUB"
    },
    "3426": {
      "op": "DUP2"
    },
    "3427": {
      "op": "AND"
    },
    "3428": {
      "op": "DUP2"
    },
    "3429": {
      "op": "EQ"
    },
    "3430": {
      "op": "PUSH2",
      "value": "0xD6E"
    },
    "3433": {
      "op": "JUMPI"
    },
    "3434": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3436": {
      "op": "DUP1"
    },
    "3437": {
      "op": "REVERT"
    },
    "3438": {
      "op": "JUMPDEST"
    },
    "3439": {
      "op": "SWAP2"
    },
    "3440": {
      "op": "SWAP1"
    },
    "3441": {
      "op": "POP"
    },
    "3442": {
      "jump": "o",
      "op": "JUMP"
    },
    "3443": {
      "op": "JUMPDEST"
    },
    "3444": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3446": {
      "op": "DUP1"
    },
    "3447": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3449": {
      "op": "DUP4"
    },
    "3450": {
      "op": "DUP6"
    },
    "3451": {
      "op": "SUB"
    },
    "3452": {
      "op": "SLT"
    },
    "3453": {
      "op": "ISZERO"
    },
    "3454": {
      "op": "PUSH2",
      "value": "0xD86"
    },
    "3457": {
      "op": "JUMPI"
    },
    "3458": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3460": {
      "op": "DUP1"
    },
    "3461": {
      "op": "REVERT"
    },
    "3462": {
      "op": "JUMPDEST"
    },
    "3463": {
      "op": "DUP3"
    },
    "3464": {
      "op": "CALLDATALOAD"
    },
    "3465": {
      "op": "SWAP2"
    },
    "3466": {
      "op": "POP"
    },
    "3467": {
      "op": "PUSH2",
      "value": "0xD96"
    },
    "3470": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3472": {
      "op": "DUP5"
    },
    "3473": {
      "op": "ADD"
    },
    "3474": {
      "op": "PUSH2",
      "value": "0xD57"
    },
    "3477": {
      "jump": "i",
      "op": "JUMP"
    },
    "3478": {
      "op": "JUMPDEST"
    },
    "3479": {
      "op": "SWAP1"
    },
    "3480": {
      "op": "POP"
    },
    "3481": {
      "op": "SWAP3"
    },
    "3482": {
      "op": "POP"
    },
    "3483": {
      "op": "SWAP3"
    },
    "3484": {
      "op": "SWAP1"
    },
    "3485": {
      "op": "POP"
    },
    "3486": {
      "jump": "o",
      "op": "JUMP"
    },
    "3487": {
      "op": "JUMPDEST"
    },
    "3488": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3490": {
      "op": "DUP1"
    },
    "3491": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3493": {
      "op": "DUP1"
    },
    "3494": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3496": {
      "op": "DUP6"
    },
    "3497": {
      "op": "DUP8"
    },
    "3498": {
      "op": "SUB"
    },
    "3499": {
      "op": "SLT"
    },
    "3500": {
      "op": "ISZERO"
    },
    "3501": {
      "op": "PUSH2",
      "value": "0xDB5"
    },
    "3504": {
      "op": "JUMPI"
    },
    "3505": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3507": {
      "op": "DUP1"
    },
    "3508": {
      "op": "REVERT"
    },
    "3509": {
      "op": "JUMPDEST"
    },
    "3510": {
      "op": "POP"
    },
    "3511": {
      "op": "POP"
    },
    "3512": {
      "op": "DUP3"
    },
    "3513": {
      "op": "CALLDATALOAD"
    },
    "3514": {
      "op": "SWAP5"
    },
    "3515": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3517": {
      "op": "DUP5"
    },
    "3518": {
      "op": "ADD"
    },
    "3519": {
      "op": "CALLDATALOAD"
    },
    "3520": {
      "op": "SWAP5"
    },
    "3521": {
      "op": "POP"
    },
    "3522": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3524": {
      "op": "DUP5"
    },
    "3525": {
      "op": "ADD"
    },
    "3526": {
      "op": "CALLDATALOAD"
    },
    "3527": {
      "op": "SWAP4"
    },
    "3528": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3530": {
      "op": "ADD"
    },
    "3531": {
      "op": "CALLDATALOAD"
    },
    "3532": {
      "op": "SWAP3"
    },
    "3533": {
      "op": "POP"
    },
    "3534": {
      "op": "SWAP1"
    },
    "3535": {
      "op": "POP"
    },
    "3536": {
      "jump": "o",
      "op": "JUMP"
    },
    "3537": {
      "op": "JUMPDEST"
    },
    "3538": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3540": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3542": {
      "op": "DUP3"
    },
    "3543": {
      "op": "DUP5"
    },
    "3544": {
      "op": "SUB"
    },
    "3545": {
      "op": "SLT"
    },
    "3546": {
      "op": "ISZERO"
    },
    "3547": {
      "op": "PUSH2",
      "value": "0xDE3"
    },
    "3550": {
      "op": "JUMPI"
    },
    "3551": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3553": {
      "op": "DUP1"
    },
    "3554": {
      "op": "REVERT"
    },
    "3555": {
      "op": "JUMPDEST"
    },
    "3556": {
      "op": "POP"
    },
    "3557": {
      "op": "CALLDATALOAD"
    },
    "3558": {
      "op": "SWAP2"
    },
    "3559": {
      "op": "SWAP1"
    },
    "3560": {
      "op": "POP"
    },
    "3561": {
      "jump": "o",
      "op": "JUMP"
    },
    "3562": {
      "op": "JUMPDEST"
    },
    "3563": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3565": {
      "op": "DUP1"
    },
    "3566": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3568": {
      "op": "DUP4"
    },
    "3569": {
      "op": "DUP6"
    },
    "3570": {
      "op": "SUB"
    },
    "3571": {
      "op": "SLT"
    },
    "3572": {
      "op": "ISZERO"
    },
    "3573": {
      "op": "PUSH2",
      "value": "0xDFD"
    },
    "3576": {
      "op": "JUMPI"
    },
    "3577": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3579": {
      "op": "DUP1"
    },
    "3580": {
      "op": "REVERT"
    },
    "3581": {
      "op": "JUMPDEST"
    },
    "3582": {
      "op": "PUSH2",
      "value": "0xE06"
    },
    "3585": {
      "op": "DUP4"
    },
    "3586": {
      "op": "PUSH2",
      "value": "0xD57"
    },
    "3589": {
      "jump": "i",
      "op": "JUMP"
    },
    "3590": {
      "op": "JUMPDEST"
    },
    "3591": {
      "op": "SWAP5"
    },
    "3592": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3594": {
      "op": "SWAP4"
    },
    "3595": {
      "op": "SWAP1"
    },
    "3596": {
      "op": "SWAP4"
    },
    "3597": {
      "op": "ADD"
    },
    "3598": {
      "op": "CALLDATALOAD"
    },
    "3599": {
      "op": "SWAP4"
    },
    "3600": {
      "op": "POP"
    },
    "3601": {
      "op": "POP"
    },
    "3602": {
      "op": "POP"
    },
    "3603": {
      "jump": "o",
      "op": "JUMP"
    },
    "3604": {
      "op": "JUMPDEST"
    },
    "3605": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3607": {
      "op": "DUP1"
    },
    "3608": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3610": {
      "op": "DUP1"
    },
    "3611": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3613": {
      "op": "DUP1"
    },
    "3614": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3616": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3618": {
      "op": "DUP9"
    },
    "3619": {
      "op": "DUP11"
    },
    "3620": {
      "op": "SUB"
    },
    "3621": {
      "op": "SLT"
    },
    "3622": {
      "op": "ISZERO"
    },
    "3623": {
      "op": "PUSH2",
      "value": "0xE2F"
    },
    "3626": {
      "op": "JUMPI"
    },
    "3627": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3629": {
      "op": "DUP1"
    },
    "3630": {
      "op": "REVERT"
    },
    "3631": {
      "op": "JUMPDEST"
    },
    "3632": {
      "op": "DUP8"
    },
    "3633": {
      "op": "CALLDATALOAD"
    },
    "3634": {
      "op": "SWAP7"
    },
    "3635": {
      "op": "POP"
    },
    "3636": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3638": {
      "op": "DUP9"
    },
    "3639": {
      "op": "ADD"
    },
    "3640": {
      "op": "CALLDATALOAD"
    },
    "3641": {
      "op": "SWAP6"
    },
    "3642": {
      "op": "POP"
    },
    "3643": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3645": {
      "op": "DUP9"
    },
    "3646": {
      "op": "ADD"
    },
    "3647": {
      "op": "CALLDATALOAD"
    },
    "3648": {
      "op": "SWAP5"
    },
    "3649": {
      "op": "POP"
    },
    "3650": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3652": {
      "op": "DUP9"
    },
    "3653": {
      "op": "ADD"
    },
    "3654": {
      "op": "CALLDATALOAD"
    },
    "3655": {
      "op": "SWAP4"
    },
    "3656": {
      "op": "POP"
    },
    "3657": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3659": {
      "op": "DUP9"
    },
    "3660": {
      "op": "ADD"
    },
    "3661": {
      "op": "CALLDATALOAD"
    },
    "3662": {
      "op": "SWAP3"
    },
    "3663": {
      "op": "POP"
    },
    "3664": {
      "op": "PUSH2",
      "value": "0xE5B"
    },
    "3667": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3669": {
      "op": "DUP10"
    },
    "3670": {
      "op": "ADD"
    },
    "3671": {
      "op": "PUSH2",
      "value": "0xD57"
    },
    "3674": {
      "jump": "i",
      "op": "JUMP"
    },
    "3675": {
      "op": "JUMPDEST"
    },
    "3676": {
      "op": "SWAP2"
    },
    "3677": {
      "op": "POP"
    },
    "3678": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "3680": {
      "op": "DUP9"
    },
    "3681": {
      "op": "ADD"
    },
    "3682": {
      "op": "CALLDATALOAD"
    },
    "3683": {
      "op": "SWAP1"
    },
    "3684": {
      "op": "POP"
    },
    "3685": {
      "op": "SWAP3"
    },
    "3686": {
      "op": "SWAP6"
    },
    "3687": {
      "op": "SWAP9"
    },
    "3688": {
      "op": "SWAP2"
    },
    "3689": {
      "op": "SWAP5"
    },
    "3690": {
      "op": "SWAP8"
    },
    "3691": {
      "op": "POP"
    },
    "3692": {
      "op": "SWAP3"
    },
    "3693": {
      "op": "SWAP6"
    },
    "3694": {
      "op": "POP"
    },
    "3695": {
      "jump": "o",
      "op": "JUMP"
    },
    "3696": {
      "op": "JUMPDEST"
    },
    "3697": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3699": {
      "op": "DUP1"
    },
    "3700": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3702": {
      "op": "DUP4"
    },
    "3703": {
      "op": "DUP6"
    },
    "3704": {
      "op": "SUB"
    },
    "3705": {
      "op": "SLT"
    },
    "3706": {
      "op": "ISZERO"
    },
    "3707": {
      "op": "PUSH2",
      "value": "0xE83"
    },
    "3710": {
      "op": "JUMPI"
    },
    "3711": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3713": {
      "op": "DUP1"
    },
    "3714": {
      "op": "REVERT"
    },
    "3715": {
      "op": "JUMPDEST"
    },
    "3716": {
      "op": "POP"
    },
    "3717": {
      "op": "POP"
    },
    "3718": {
      "op": "DUP1"
    },
    "3719": {
      "op": "CALLDATALOAD"
    },
    "3720": {
      "op": "SWAP3"
    },
    "3721": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3723": {
      "op": "SWAP1"
    },
    "3724": {
      "op": "SWAP2"
    },
    "3725": {
      "op": "ADD"
    },
    "3726": {
      "op": "CALLDATALOAD"
    },
    "3727": {
      "op": "SWAP2"
    },
    "3728": {
      "op": "POP"
    },
    "3729": {
      "jump": "o",
      "op": "JUMP"
    },
    "3730": {
      "op": "JUMPDEST"
    },
    "3731": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3736": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3738": {
      "op": "SHL"
    },
    "3739": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3741": {
      "op": "MSTORE"
    },
    "3742": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "3744": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3746": {
      "op": "MSTORE"
    },
    "3747": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3749": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3751": {
      "op": "REVERT"
    },
    "3752": {
      "op": "JUMPDEST"
    },
    "3753": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3755": {
      "op": "DUP1"
    },
    "3756": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3758": {
      "op": "DUP1"
    },
    "3759": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3761": {
      "op": "DUP1"
    },
    "3762": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "3764": {
      "op": "DUP8"
    },
    "3765": {
      "op": "DUP10"
    },
    "3766": {
      "op": "SUB"
    },
    "3767": {
      "op": "SLT"
    },
    "3768": {
      "op": "ISZERO"
    },
    "3769": {
      "op": "PUSH2",
      "value": "0xEC1"
    },
    "3772": {
      "op": "JUMPI"
    },
    "3773": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3775": {
      "op": "DUP1"
    },
    "3776": {
      "op": "REVERT"
    },
    "3777": {
      "op": "JUMPDEST"
    },
    "3778": {
      "op": "DUP7"
    },
    "3779": {
      "op": "CALLDATALOAD"
    },
    "3780": {
      "op": "SWAP6"
    },
    "3781": {
      "op": "POP"
    },
    "3782": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3784": {
      "op": "PUSH2",
      "value": "0xED2"
    },
    "3787": {
      "op": "DUP2"
    },
    "3788": {
      "op": "DUP10"
    },
    "3789": {
      "op": "ADD"
    },
    "3790": {
      "op": "PUSH2",
      "value": "0xD57"
    },
    "3793": {
      "jump": "i",
      "op": "JUMP"
    },
    "3794": {
      "op": "JUMPDEST"
    },
    "3795": {
      "op": "SWAP6"
    },
    "3796": {
      "op": "POP"
    },
    "3797": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3799": {
      "op": "DUP9"
    },
    "3800": {
      "op": "ADD"
    },
    "3801": {
      "op": "CALLDATALOAD"
    },
    "3802": {
      "op": "SWAP5"
    },
    "3803": {
      "op": "POP"
    },
    "3804": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3806": {
      "op": "DUP9"
    },
    "3807": {
      "op": "ADD"
    },
    "3808": {
      "op": "CALLDATALOAD"
    },
    "3809": {
      "op": "SWAP4"
    },
    "3810": {
      "op": "POP"
    },
    "3811": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3813": {
      "op": "DUP9"
    },
    "3814": {
      "op": "ADD"
    },
    "3815": {
      "op": "CALLDATALOAD"
    },
    "3816": {
      "op": "SWAP3"
    },
    "3817": {
      "op": "POP"
    },
    "3818": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3820": {
      "op": "DUP9"
    },
    "3821": {
      "op": "ADD"
    },
    "3822": {
      "op": "CALLDATALOAD"
    },
    "3823": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3832": {
      "op": "DUP1"
    },
    "3833": {
      "op": "DUP3"
    },
    "3834": {
      "op": "GT"
    },
    "3835": {
      "op": "ISZERO"
    },
    "3836": {
      "op": "PUSH2",
      "value": "0xF04"
    },
    "3839": {
      "op": "JUMPI"
    },
    "3840": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3842": {
      "op": "DUP1"
    },
    "3843": {
      "op": "REVERT"
    },
    "3844": {
      "op": "JUMPDEST"
    },
    "3845": {
      "op": "DUP2"
    },
    "3846": {
      "op": "DUP11"
    },
    "3847": {
      "op": "ADD"
    },
    "3848": {
      "op": "SWAP2"
    },
    "3849": {
      "op": "POP"
    },
    "3850": {
      "op": "DUP11"
    },
    "3851": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3853": {
      "op": "DUP4"
    },
    "3854": {
      "op": "ADD"
    },
    "3855": {
      "op": "SLT"
    },
    "3856": {
      "op": "PUSH2",
      "value": "0xF18"
    },
    "3859": {
      "op": "JUMPI"
    },
    "3860": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3862": {
      "op": "DUP1"
    },
    "3863": {
      "op": "REVERT"
    },
    "3864": {
      "op": "JUMPDEST"
    },
    "3865": {
      "op": "DUP2"
    },
    "3866": {
      "op": "CALLDATALOAD"
    },
    "3867": {
      "op": "DUP2"
    },
    "3868": {
      "op": "DUP2"
    },
    "3869": {
      "op": "GT"
    },
    "3870": {
      "op": "ISZERO"
    },
    "3871": {
      "op": "PUSH2",
      "value": "0xF2A"
    },
    "3874": {
      "op": "JUMPI"
    },
    "3875": {
      "op": "PUSH2",
      "value": "0xF2A"
    },
    "3878": {
      "op": "PUSH2",
      "value": "0xE92"
    },
    "3881": {
      "jump": "i",
      "op": "JUMP"
    },
    "3882": {
      "op": "JUMPDEST"
    },
    "3883": {
      "op": "DUP1"
    },
    "3884": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "3886": {
      "op": "SHL"
    },
    "3887": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3889": {
      "op": "MLOAD"
    },
    "3890": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3892": {
      "op": "NOT"
    },
    "3893": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "3895": {
      "op": "DUP4"
    },
    "3896": {
      "op": "ADD"
    },
    "3897": {
      "op": "AND"
    },
    "3898": {
      "op": "DUP2"
    },
    "3899": {
      "op": "ADD"
    },
    "3900": {
      "op": "DUP2"
    },
    "3901": {
      "op": "DUP2"
    },
    "3902": {
      "op": "LT"
    },
    "3903": {
      "op": "DUP6"
    },
    "3904": {
      "op": "DUP3"
    },
    "3905": {
      "op": "GT"
    },
    "3906": {
      "op": "OR"
    },
    "3907": {
      "op": "ISZERO"
    },
    "3908": {
      "op": "PUSH2",
      "value": "0xF4F"
    },
    "3911": {
      "op": "JUMPI"
    },
    "3912": {
      "op": "PUSH2",
      "value": "0xF4F"
    },
    "3915": {
      "op": "PUSH2",
      "value": "0xE92"
    },
    "3918": {
      "jump": "i",
      "op": "JUMP"
    },
    "3919": {
      "op": "JUMPDEST"
    },
    "3920": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3922": {
      "op": "MSTORE"
    },
    "3923": {
      "op": "SWAP2"
    },
    "3924": {
      "op": "DUP3"
    },
    "3925": {
      "op": "MSTORE"
    },
    "3926": {
      "op": "DUP5"
    },
    "3927": {
      "op": "DUP3"
    },
    "3928": {
      "op": "ADD"
    },
    "3929": {
      "op": "SWAP3"
    },
    "3930": {
      "op": "POP"
    },
    "3931": {
      "op": "DUP4"
    },
    "3932": {
      "op": "DUP2"
    },
    "3933": {
      "op": "ADD"
    },
    "3934": {
      "op": "DUP6"
    },
    "3935": {
      "op": "ADD"
    },
    "3936": {
      "op": "SWAP2"
    },
    "3937": {
      "op": "DUP14"
    },
    "3938": {
      "op": "DUP4"
    },
    "3939": {
      "op": "GT"
    },
    "3940": {
      "op": "ISZERO"
    },
    "3941": {
      "op": "PUSH2",
      "value": "0xF6D"
    },
    "3944": {
      "op": "JUMPI"
    },
    "3945": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3947": {
      "op": "DUP1"
    },
    "3948": {
      "op": "REVERT"
    },
    "3949": {
      "op": "JUMPDEST"
    },
    "3950": {
      "op": "SWAP4"
    },
    "3951": {
      "op": "DUP6"
    },
    "3952": {
      "op": "ADD"
    },
    "3953": {
      "op": "SWAP4"
    },
    "3954": {
      "op": "JUMPDEST"
    },
    "3955": {
      "op": "DUP3"
    },
    "3956": {
      "op": "DUP6"
    },
    "3957": {
      "op": "LT"
    },
    "3958": {
      "op": "ISZERO"
    },
    "3959": {
      "op": "PUSH2",
      "value": "0xF8B"
    },
    "3962": {
      "op": "JUMPI"
    },
    "3963": {
      "op": "DUP5"
    },
    "3964": {
      "op": "CALLDATALOAD"
    },
    "3965": {
      "op": "DUP5"
    },
    "3966": {
      "op": "MSTORE"
    },
    "3967": {
      "op": "SWAP4"
    },
    "3968": {
      "op": "DUP6"
    },
    "3969": {
      "op": "ADD"
    },
    "3970": {
      "op": "SWAP4"
    },
    "3971": {
      "op": "SWAP3"
    },
    "3972": {
      "op": "DUP6"
    },
    "3973": {
      "op": "ADD"
    },
    "3974": {
      "op": "SWAP3"
    },
    "3975": {
      "op": "PUSH2",
      "value": "0xF72"
    },
    "3978": {
      "op": "JUMP"
    },
    "3979": {
      "op": "JUMPDEST"
    },
    "3980": {
      "op": "DUP1"
    },
    "3981": {
      "op": "SWAP7"
    },
    "3982": {
      "op": "POP"
    },
    "3983": {
      "op": "POP"
    },
    "3984": {
      "op": "POP"
    },
    "3985": {
      "op": "POP"
    },
    "3986": {
      "op": "POP"
    },
    "3987": {
      "op": "POP"
    },
    "3988": {
      "op": "POP"
    },
    "3989": {
      "op": "SWAP3"
    },
    "3990": {
      "op": "SWAP6"
    },
    "3991": {
      "op": "POP"
    },
    "3992": {
      "op": "SWAP3"
    },
    "3993": {
      "op": "SWAP6"
    },
    "3994": {
      "op": "POP"
    },
    "3995": {
      "op": "SWAP3"
    },
    "3996": {
      "op": "SWAP6"
    },
    "3997": {
      "jump": "o",
      "op": "JUMP"
    },
    "3998": {
      "op": "JUMPDEST"
    },
    "3999": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4004": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4006": {
      "op": "SHL"
    },
    "4007": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4009": {
      "op": "MSTORE"
    },
    "4010": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "4012": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4014": {
      "op": "MSTORE"
    },
    "4015": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4017": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4019": {
      "op": "REVERT"
    },
    "4020": {
      "op": "JUMPDEST"
    },
    "4021": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4023": {
      "op": "DUP3"
    },
    "4024": {
      "op": "DUP3"
    },
    "4025": {
      "op": "LT"
    },
    "4026": {
      "op": "ISZERO"
    },
    "4027": {
      "op": "PUSH2",
      "value": "0xFC6"
    },
    "4030": {
      "op": "JUMPI"
    },
    "4031": {
      "op": "PUSH2",
      "value": "0xFC6"
    },
    "4034": {
      "op": "PUSH2",
      "value": "0xF9E"
    },
    "4037": {
      "jump": "i",
      "op": "JUMP"
    },
    "4038": {
      "op": "JUMPDEST"
    },
    "4039": {
      "op": "POP"
    },
    "4040": {
      "op": "SUB"
    },
    "4041": {
      "op": "SWAP1"
    },
    "4042": {
      "jump": "o",
      "op": "JUMP"
    },
    "4043": {
      "op": "JUMPDEST"
    },
    "4044": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4046": {
      "op": "DUP2"
    },
    "4047": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4049": {
      "op": "NOT"
    },
    "4050": {
      "op": "DIV"
    },
    "4051": {
      "op": "DUP4"
    },
    "4052": {
      "op": "GT"
    },
    "4053": {
      "op": "DUP3"
    },
    "4054": {
      "op": "ISZERO"
    },
    "4055": {
      "op": "ISZERO"
    },
    "4056": {
      "op": "AND"
    },
    "4057": {
      "op": "ISZERO"
    },
    "4058": {
      "op": "PUSH2",
      "value": "0xFE5"
    },
    "4061": {
      "op": "JUMPI"
    },
    "4062": {
      "op": "PUSH2",
      "value": "0xFE5"
    },
    "4065": {
      "op": "PUSH2",
      "value": "0xF9E"
    },
    "4068": {
      "jump": "i",
      "op": "JUMP"
    },
    "4069": {
      "op": "JUMPDEST"
    },
    "4070": {
      "op": "POP"
    },
    "4071": {
      "op": "MUL"
    },
    "4072": {
      "op": "SWAP1"
    },
    "4073": {
      "jump": "o",
      "op": "JUMP"
    },
    "4074": {
      "op": "JUMPDEST"
    },
    "4075": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4077": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4079": {
      "op": "DUP3"
    },
    "4080": {
      "op": "DUP5"
    },
    "4081": {
      "op": "SUB"
    },
    "4082": {
      "op": "SLT"
    },
    "4083": {
      "op": "ISZERO"
    },
    "4084": {
      "op": "PUSH2",
      "value": "0xFFC"
    },
    "4087": {
      "op": "JUMPI"
    },
    "4088": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4090": {
      "op": "DUP1"
    },
    "4091": {
      "op": "REVERT"
    },
    "4092": {
      "op": "JUMPDEST"
    },
    "4093": {
      "op": "DUP2"
    },
    "4094": {
      "op": "MLOAD"
    },
    "4095": {
      "op": "DUP1"
    },
    "4096": {
      "op": "ISZERO"
    },
    "4097": {
      "op": "ISZERO"
    },
    "4098": {
      "op": "DUP2"
    },
    "4099": {
      "op": "EQ"
    },
    "4100": {
      "op": "PUSH2",
      "value": "0x100C"
    },
    "4103": {
      "op": "JUMPI"
    },
    "4104": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4106": {
      "op": "DUP1"
    },
    "4107": {
      "op": "REVERT"
    },
    "4108": {
      "op": "JUMPDEST"
    },
    "4109": {
      "op": "SWAP4"
    },
    "4110": {
      "op": "SWAP3"
    },
    "4111": {
      "op": "POP"
    },
    "4112": {
      "op": "POP"
    },
    "4113": {
      "op": "POP"
    },
    "4114": {
      "jump": "o",
      "op": "JUMP"
    },
    "4115": {
      "op": "JUMPDEST"
    },
    "4116": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4118": {
      "op": "DUP3"
    },
    "4119": {
      "op": "PUSH2",
      "value": "0x1030"
    },
    "4122": {
      "op": "JUMPI"
    },
    "4123": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4128": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4130": {
      "op": "SHL"
    },
    "4131": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4133": {
      "op": "MSTORE"
    },
    "4134": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "4136": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4138": {
      "op": "MSTORE"
    },
    "4139": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4141": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4143": {
      "op": "REVERT"
    },
    "4144": {
      "op": "JUMPDEST"
    },
    "4145": {
      "op": "POP"
    },
    "4146": {
      "op": "DIV"
    },
    "4147": {
      "op": "SWAP1"
    },
    "4148": {
      "jump": "o",
      "op": "JUMP"
    },
    "4149": {
      "op": "JUMPDEST"
    },
    "4150": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4152": {
      "op": "DUP3"
    },
    "4153": {
      "op": "NOT"
    },
    "4154": {
      "op": "DUP3"
    },
    "4155": {
      "op": "GT"
    },
    "4156": {
      "op": "ISZERO"
    },
    "4157": {
      "op": "PUSH2",
      "value": "0x1048"
    },
    "4160": {
      "op": "JUMPI"
    },
    "4161": {
      "op": "PUSH2",
      "value": "0x1048"
    },
    "4164": {
      "op": "PUSH2",
      "value": "0xF9E"
    },
    "4167": {
      "jump": "i",
      "op": "JUMP"
    },
    "4168": {
      "op": "JUMPDEST"
    },
    "4169": {
      "op": "POP"
    },
    "4170": {
      "op": "ADD"
    },
    "4171": {
      "op": "SWAP1"
    },
    "4172": {
      "jump": "o",
      "op": "JUMP"
    },
    "4173": {
      "op": "JUMPDEST"
    },
    "4174": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4176": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4178": {
      "op": "NOT"
    },
    "4179": {
      "op": "DUP3"
    },
    "4180": {
      "op": "EQ"
    },
    "4181": {
      "op": "ISZERO"
    },
    "4182": {
      "op": "PUSH2",
      "value": "0x1061"
    },
    "4185": {
      "op": "JUMPI"
    },
    "4186": {
      "op": "PUSH2",
      "value": "0x1061"
    },
    "4189": {
      "op": "PUSH2",
      "value": "0xF9E"
    },
    "4192": {
      "jump": "i",
      "op": "JUMP"
    },
    "4193": {
      "op": "JUMPDEST"
    },
    "4194": {
      "op": "POP"
    },
    "4195": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4197": {
      "op": "ADD"
    },
    "4198": {
      "op": "SWAP1"
    },
    "4199": {
      "jump": "o",
      "op": "JUMP"
    },
    "4200": {
      "op": "JUMPDEST"
    },
    "4201": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4203": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4205": {
      "op": "DUP3"
    },
    "4206": {
      "op": "ADD"
    },
    "4207": {
      "op": "DUP6"
    },
    "4208": {
      "op": "DUP4"
    },
    "4209": {
      "op": "MSTORE"
    },
    "4210": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4212": {
      "op": "DUP6"
    },
    "4213": {
      "op": "DUP2"
    },
    "4214": {
      "op": "DUP6"
    },
    "4215": {
      "op": "ADD"
    },
    "4216": {
      "op": "MSTORE"
    },
    "4217": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4219": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4221": {
      "op": "DUP6"
    },
    "4222": {
      "op": "ADD"
    },
    "4223": {
      "op": "MSTORE"
    },
    "4224": {
      "op": "DUP2"
    },
    "4225": {
      "op": "DUP6"
    },
    "4226": {
      "op": "MLOAD"
    },
    "4227": {
      "op": "DUP1"
    },
    "4228": {
      "op": "DUP5"
    },
    "4229": {
      "op": "MSTORE"
    },
    "4230": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4232": {
      "op": "DUP7"
    },
    "4233": {
      "op": "ADD"
    },
    "4234": {
      "op": "SWAP2"
    },
    "4235": {
      "op": "POP"
    },
    "4236": {
      "op": "DUP3"
    },
    "4237": {
      "op": "DUP8"
    },
    "4238": {
      "op": "ADD"
    },
    "4239": {
      "op": "SWAP4"
    },
    "4240": {
      "op": "POP"
    },
    "4241": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4243": {
      "op": "JUMPDEST"
    },
    "4244": {
      "op": "DUP2"
    },
    "4245": {
      "op": "DUP2"
    },
    "4246": {
      "op": "LT"
    },
    "4247": {
      "op": "ISZERO"
    },
    "4248": {
      "op": "PUSH2",
      "value": "0x10AF"
    },
    "4251": {
      "op": "JUMPI"
    },
    "4252": {
      "op": "DUP5"
    },
    "4253": {
      "op": "MLOAD"
    },
    "4254": {
      "op": "DUP4"
    },
    "4255": {
      "op": "MSTORE"
    },
    "4256": {
      "op": "SWAP4"
    },
    "4257": {
      "op": "DUP4"
    },
    "4258": {
      "op": "ADD"
    },
    "4259": {
      "op": "SWAP4"
    },
    "4260": {
      "op": "SWAP2"
    },
    "4261": {
      "op": "DUP4"
    },
    "4262": {
      "op": "ADD"
    },
    "4263": {
      "op": "SWAP2"
    },
    "4264": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4266": {
      "op": "ADD"
    },
    "4267": {
      "op": "PUSH2",
      "value": "0x1093"
    },
    "4270": {
      "op": "JUMP"
    },
    "4271": {
      "op": "JUMPDEST"
    },
    "4272": {
      "op": "POP"
    },
    "4273": {
      "op": "SWAP1"
    },
    "4274": {
      "op": "SWAP9"
    },
    "4275": {
      "op": "SWAP8"
    },
    "4276": {
      "op": "POP"
    },
    "4277": {
      "op": "POP"
    },
    "4278": {
      "op": "POP"
    },
    "4279": {
      "op": "POP"
    },
    "4280": {
      "op": "POP"
    },
    "4281": {
      "op": "POP"
    },
    "4282": {
      "op": "POP"
    },
    "4283": {
      "op": "POP"
    },
    "4284": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "61d6bb4681c8f333bb8ea1968f0d66be69f3c2c7",
  "source": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.12;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./MerkleLib.sol\";\n\n/// @title A factory pattern for user-chosen vesting-schedules, that is, a time release schedule for tokens, using merkle proofs to scale\n/// @author metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki\n/// @notice This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.\n/// @dev The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof.\n/// @dev User chosen vesting schedules means the contract has parameters that define a line segment that\n/// @dev describes a range of vesting-schedule parameters within which the user can negotiate tradeoffs\n/// @dev More tokens => longer vesting time && slower drip, when used correctly, but the contract does not enforce\n/// @dev coherence of vesting schedules, so someone could make a range of vesting schedules in which\n/// @dev more tokens => longer vesting time && faster drip, but this is a user error, also we wouldn't catch it until\n/// @dev after the tree has been initialized and funded, so we just let them do it.\n/// @dev The choice of which parameters to initialize at tree-creation-time versus at schedule-initialization-time is\n/// @dev somewhat arbitrary, but we choose to have min/max end times at tree scope and min/max total payments at first-withdrawal-time\ncontract MerkleResistor {\n    using MerkleLib for bytes32;\n\n    // tree (vesting schedule) counter\n    uint public numTrees = 0;\n\n    // this represents a user chosen vesting schedule, post initiation\n    struct Tranche {\n        uint totalCoins; // total coins released after vesting complete\n        uint currentCoins; // unclaimed coins remaining in the contract, waiting to be vested\n        uint startTime; // start time of the vesting schedule\n        uint endTime;   // end time of the vesting schedule\n        uint coinsPerSecond;  // how many coins are emitted per second, this value is cached to avoid recomputing it\n        uint lastWithdrawalTime; // keep track of last time user claimed coins to compute coins owed for this withdrawal\n    }\n\n    // this represents an arbitrarily large set of token recipients with partially-initialized vesting schedules\n    struct MerkleTree {\n        bytes32 merkleRoot; // merkle root of tree whose leaves are ranges of vesting schedules for each recipient\n        bytes32 ipfsHash; // ipfs hash of the entire data set represented by the merkle root, in case our servers go down\n        uint minEndTime; // minimum length (offset, not absolute) of vesting schedule in seconds\n        uint maxEndTime; // maximum length (offset, not absolute) of vesting schedule in seconds\n        uint pctUpFront; // percent of vested coins that will be available and withdrawn upon initialization\n        address tokenAddress; // address of token to be distributed\n        uint tokenBalance; // amount of tokens allocated to this tree (this prevents trees from sharing tokens)\n    }\n\n    // initialized[recipient][treeIndex] = hasUserChosenVestingSchedule\n    // could have reused tranches (see below) for this but loading a bool is cheaper than loading an entire struct\n    // NOTE: if a user appears in the same tree multiple times, the first leaf initialized will prevent the others from initializing\n    mapping (address => mapping (uint => bool)) public initialized;\n\n    // basically an array of vesting schedules, but without annoying solidity array syntax\n    mapping (uint => MerkleTree) public merkleTrees;\n\n    // tranches[recipient][treeIndex] = chosenVestingSchedule\n    mapping (address => mapping (uint => Tranche)) public tranches;\n\n    // precision factory used to handle floating point arithmetic\n    uint constant public PRECISION = 1000000;\n\n    // every time a withdrawal occurs\n    event WithdrawalOccurred(uint indexed treeIndex, address indexed destination, uint numTokens, uint tokensLeft);\n\n    // every time a tree is added\n    event MerkleTreeAdded(uint indexed treeIndex, address indexed tokenAddress, bytes32 newRoot, bytes32 ipfsHash);\n\n    // every time a tree is topped up\n    event TokensDeposited(uint indexed treeIndex, address indexed tokenAddress, uint amount);\n\n    /// @notice Add a new merkle tree to the contract, creating a new merkle-vesting-schedule-range\n    /// @dev Anyone may call this function, therefore we must make sure trees cannot affect each other\n    /// @dev Root hash should be built from (destination, minTotalPayments, maxTotalPayments)\n    /// @param newRoot root hash of merkle tree representing vesting schedule ranges\n    /// @param ipfsHash the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable\n    /// @param minEndTime a continuous range of possible end times are specified, this is the minimum\n    /// @param maxEndTime a continuous range of possible end times are specified, this is the maximum\n    /// @param pctUpFront the percent of tokens user will get at initialization time (note this implies no lock time)\n    /// @param tokenAddress the address of the token contract that is being distributed\n    /// @param tokenBalance the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded\n    function addMerkleTree(bytes32 newRoot, bytes32 ipfsHash, uint minEndTime, uint maxEndTime, uint pctUpFront, address tokenAddress, uint tokenBalance) public {\n        // check basic coherence of request\n        require(pctUpFront < 100, 'pctUpFront >= 100');\n        require(minEndTime < maxEndTime, 'minEndTime must be less than maxEndTime');\n\n        // prefix operator ++ increments then evaluates\n        merkleTrees[++numTrees] = MerkleTree(\n            newRoot,\n            ipfsHash,\n            minEndTime,\n            maxEndTime,\n            pctUpFront,\n            tokenAddress,\n            0    // tokenBalance is 0 at first because no tokens have been deposited\n        );\n\n        // pull tokens from user to fund the tree\n        // if tree is insufficiently funded, then some users may not be able to be paid out, this is the responsibility\n        // of the tree creator, if trees are not funded, then the UI will not display the tree\n        depositTokens(numTrees, tokenBalance);\n        emit MerkleTreeAdded(numTrees, tokenAddress, newRoot, ipfsHash);\n    }\n\n    /// @notice Add funds to an existing merkle-tree\n    /// @dev Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious\n    /// @param treeIndex index into array-like map of merkleTrees\n    /// @param value the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded\n    function depositTokens(uint treeIndex, uint value) public {\n        // storage because we edit\n        MerkleTree storage merkleTree = merkleTrees[treeIndex];\n\n        // bookkeeping to make sure trees do not share tokens\n        merkleTree.tokenBalance += value;\n\n        // do the transfer from the caller\n        // NOTE: it is possible for user to overfund the tree and there is no mechanism to reclaim excess tokens\n        // this is because there is no way for the contract to know when a tree has had all leaves claimed.\n        // There is also no way for the contract to know the minimum or maximum liabilities represented by the leaves\n        // in short, there is no on-chain inspection of any of the leaf data except at initialization time\n        // NOTE: a malicious token contract could cause merkleTree.tokenBalance to be out of sync with the token contract\n        // this is an unavoidable possibility, and it could render the tree unusable, while leaving other trees unharmed\n        require(IERC20(merkleTree.tokenAddress).transferFrom(msg.sender, address(this), value), \"ERC20 transfer failed\");\n        emit TokensDeposited(treeIndex, merkleTree.tokenAddress, value);\n    }\n\n    /// @notice Called once per recipient of a vesting schedule to initialize the vesting schedule and fix the parameters\n    /// @dev Only the recipient can initialize their own schedule here, because a meaningful choice is made\n    /// @dev If the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree stats\n    /// @param treeIndex index into array-like map of merkleTrees\n    /// @param destination address that will receive tokens\n    /// @param vestingTime the actual length of the vesting schedule, chosen by the user\n    /// @param minTotalPayments the minimum amount of tokens they will receive, if they choose minEndTime as vestingTime\n    /// @param maxTotalPayments the maximum amount of tokens they will receive, if they choose maxEndTime as vestingTime\n    /// @param proof array of hashes linking leaf hash of (destination, minTotalPayments, maxTotalPayments) to root\n    function initialize(uint treeIndex, address destination, uint vestingTime, uint minTotalPayments, uint maxTotalPayments, bytes32[] memory proof) external {\n        // user selects own vesting schedule, not others\n        require(msg.sender == destination, 'Can only initialize your own tranche');\n        // can only initialize once\n        require(!initialized[destination][treeIndex], \"Already initialized\");\n        // compute merkle leaf, this is first element of proof\n        bytes32 leaf = keccak256(abi.encode(destination, minTotalPayments, maxTotalPayments));\n        // memory because we do not edit\n        MerkleTree memory tree = merkleTrees[treeIndex];\n        // this calls into MerkleLib, super cheap ~1000 gas per proof element\n        require(tree.merkleRoot.verifyProof(leaf, proof), \"The proof could not be verified.\");\n        // mark tree as initialized, preventing re-entrance or multiple initializations\n        initialized[destination][treeIndex] = true;\n\n        (bool valid, uint totalCoins, uint coinsPerSecond, uint startTime) = verifyVestingSchedule(treeIndex, vestingTime, minTotalPayments, maxTotalPayments);\n        require(valid, 'Invalid vesting schedule');\n\n        // fill out the struct for the address' vesting schedule\n        // don't have to mark as storage here, it's implied (why isn't it always implied when written to? solc-devs?)\n        tranches[destination][treeIndex] = Tranche(\n            totalCoins,    // this is just a cached number for UI, not used\n            totalCoins,    // starts out full\n            startTime,     // start time will usually be in the past, if pctUpFront > 0\n            block.timestamp + vestingTime,  // vesting starts from initialization time\n            coinsPerSecond,  // cached value to avoid recomputation\n            startTime      // this is lastWithdrawalTime, set to startTime to indicate no withdrawals have occurred yet\n        );\n        withdraw(treeIndex, destination);\n    }\n\n    /// @notice Move unlocked funds to the destination\n    /// @dev Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of\n    /// @dev who provides the proof and pays the gas, msg.sender is not used in this function\n    /// @param treeIndex index into array-like map of merkleTrees, which tree should we apply the proof to?\n    /// @param destination recipient of tokens\n    function withdraw(uint treeIndex, address destination) public {\n        // initialize first, no operations on empty structs, I don't care if the values are \"probably zero\"\n        require(initialized[destination][treeIndex], \"You must initialize your account first.\");\n        // storage, since we are editing\n        Tranche storage tranche = tranches[destination][treeIndex];\n        // if it's empty, don't bother\n        require(tranche.currentCoins >  0, 'No coins left to withdraw');\n        uint currentWithdrawal = 0;\n\n        // if after vesting period ends, give them the remaining coins, also avoids dust from rounding errors\n        if (block.timestamp >= tranche.endTime) {\n            currentWithdrawal = tranche.currentCoins;\n        } else {\n            // compute allowed withdrawal\n            // secondsElapsedSinceLastWithdrawal * coinsPerSecond == coinsAccumulatedSinceLastWithdrawal\n            currentWithdrawal = (block.timestamp - tranche.lastWithdrawalTime) * tranche.coinsPerSecond;\n        }\n        // muto? servo\n        MerkleTree storage tree = merkleTrees[treeIndex];\n\n        // update struct, modern solidity will catch underflow and prevent currentWithdrawal from exceeding currentCoins\n        // but it's computed internally anyway, not user generated\n        tranche.currentCoins -= currentWithdrawal;\n        // move the time counter up so users can't double-withdraw allocated coins\n        // this also works as a re-entrance gate, so currentWithdrawal would be 0 upon re-entrance\n        tranche.lastWithdrawalTime = block.timestamp;\n        // handle the bookkeeping so trees don't share tokens, do it before transferring to create one more re-entrance gate\n        tree.tokenBalance -= currentWithdrawal;\n\n        // transfer the tokens, brah\n        // NOTE: if this is a malicious token, what could happen?\n        // 1/ token doesn't transfer given amount to recipient, this is bad for user, but does not effect other trees\n        // 2/ token fails for some reason, again bad for user, but this does not effect other trees\n        // 3/ token re-enters this function (or other, but this is the only one that transfers tokens out)\n        // in which case, lastWithdrawalTime == block.timestamp, so currentWithdrawal == 0\n        require(IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal), 'Token transfer failed');\n        emit WithdrawalOccurred(treeIndex, destination, currentWithdrawal, tranche.currentCoins);\n    }\n\n    /// @notice Determine if the proposed vesting schedule is legit\n    /// @dev Anyone may call this to check, but it also returns values used in the initialization of vesting schedules\n    /// @param treeIndex index into array-like map of merkleTrees, which tree are we talking about?\n    /// @param vestingTime user chosen length of vesting schedule\n    /// @param minTotalPayments pre-committed (in the root hash) minimum of possible totalCoins\n    /// @param maxTotalPayments pre-committed (in the root hash) maximum of possible totalCoins\n    /// @return valid is the proposed vesting-schedule valid\n    /// @return totalCoins amount of coins allocated in the vesting schedule\n    /// @return coinsPerSecond amount of coins released every second, in the proposed vesting schedule\n    /// @return startTime start time of vesting schedule implied by supplied parameters, will always be <= block.timestamp\n    function verifyVestingSchedule(uint treeIndex, uint vestingTime, uint minTotalPayments, uint maxTotalPayments) public view returns (bool, uint, uint, uint) {\n        // vesting schedules for non-existing trees are invalid, I don't care how much you like uninitialized structs\n        if (treeIndex > numTrees) {\n            return (false, 0, 0, 0);\n        }\n\n        // memory not storage, since we do not edit the tree, and it's a view function anyways\n        MerkleTree memory tree = merkleTrees[treeIndex];\n\n        // vesting time must sit within the closed interval of [minEndTime, maxEndTime]\n        if (vestingTime > tree.maxEndTime || vestingTime < tree.minEndTime) {\n            return (false, 0, 0, 0);\n        }\n\n        uint totalCoins;\n        if (vestingTime == tree.maxEndTime) {\n            // this is to prevent dust accumulation from rounding errors\n            // maxEndTime results in max payments, no further computation necessary\n            totalCoins = maxTotalPayments;\n        } else {\n            // remember grade school algebra? slope = \u0394y / \u0394x\n            // this is the slope of eligible vesting schedules. In general, 0 < m < 1,\n            // (longer vesting schedules should result in less coins per second, hence \"resistor\")\n            // so we multiply by a precision factor to reduce rounding errors\n            // y axis = total coins released after vesting completed\n            // x axis = length of vesting schedule\n            // this is the line of valid end-points for the chosen vesting schedule line, see below\n            // NOTE: this reverts if minTotalPayments > maxTotalPayments, which is a good thing\n            uint paymentSlope = (maxTotalPayments - minTotalPayments) * PRECISION / (tree.maxEndTime - tree.minEndTime);\n\n            // y = mx + b = paymentSlope * (x - x0) + y0\n            // divide by precision factor here since we have completed the rounding error sensitive operations\n            totalCoins = (paymentSlope * (vestingTime - tree.minEndTime) / PRECISION) + minTotalPayments;\n        }\n\n        // this is a different slope, the slope of their chosen vesting schedule\n        // y axis = cumulative coins emitted\n        // x axis = time elapsed\n        // NOTE: vestingTime starts from block.timestamp, so doesn't include coins already available from pctUpFront\n        // totalCoins / vestingTime is wrong, we have to multiple by the proportion of the coins that are indexed\n        // by vestingTime, which is (100 - pctUpFront) / 100\n        uint coinsPerSecond = (totalCoins * (uint(100) - tree.pctUpFront)) / (vestingTime * 100);\n\n        // vestingTime is relative to initialization point\n        // endTime = block.timestamp + vestingTime\n        // vestingLength = totalCoins / coinsPerSecond\n        uint startTime = block.timestamp + vestingTime - (totalCoins / coinsPerSecond);\n\n        return (true, totalCoins, coinsPerSecond, startTime);\n    }\n\n}\n",
  "sourceMap": "1454:16229:5:-:0;;;1580:1;1557:24;;1454:16229;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/MerkleResistor.sol",
  "type": "contract"
}