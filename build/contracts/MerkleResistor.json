{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        }
      ],
      "name": "MerkleTreeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensLeft",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalOccurred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pctUpFront",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "name": "addMerkleTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "depositTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleTrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pctUpFront",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTrees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tranches",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coinsPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastWithdrawalTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalPayments",
          "type": "uint256"
        }
      ],
      "name": "verifyVestingSchedule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "contracts/MerkleLib.sol",
    "2": "contracts/MerkleResistor.sol",
    "4": "interfaces/IERC20.sol"
  },
  "ast": {
    "absolutePath": "contracts/MerkleResistor.sol",
    "exportedSymbols": {
      "IERC20": [
        1342
      ],
      "MerkleLib": [
        1264
      ],
      "MerkleResistor": [
        797
      ]
    },
    "id": 798,
    "license": "GPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 241,
        "literals": [
          "solidity",
          "0.8",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "42:22:2"
      },
      {
        "absolutePath": "interfaces/IERC20.sol",
        "file": "../interfaces/IERC20.sol",
        "id": 242,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 798,
        "sourceUnit": 1343,
        "src": "66:34:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/MerkleLib.sol",
        "file": "./MerkleLib.sol",
        "id": 243,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 798,
        "sourceUnit": 1265,
        "src": "101:25:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "MerkleResistor",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 244,
          "nodeType": "StructuredDocumentation",
          "src": "128:1325:2",
          "text": "@title A factory pattern for user-chosen vesting-schedules, that is, a time release schedule for tokens, using merkle proofs to scale\n @author metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki\n @notice This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.\n @dev The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof.\n @dev User chosen vesting schedules means the contract has parameters that define a line segment that\n @dev describes a range of vesting-schedule parameters within which the user can negotiate tradeoffs\n @dev More tokens => longer vesting time && slower drip, when used correctly, but the contract does not enforce\n @dev coherence of vesting schedules, so someone could make a range of vesting schedules in which\n @dev more tokens => longer vesting time && faster drip, but this is a user error, also we wouldn't catch it until\n @dev after the tree has been initialized and funded, so we just let them do it.\n @dev The choice of which parameters to initialize at tree-creation-time versus at schedule-initialization-time is\n @dev somewhat arbitrary, but we choose to have min/max end times at tree scope and min/max total payments at first-withdrawal-time"
        },
        "fullyImplemented": true,
        "id": 797,
        "linearizedBaseContracts": [
          797
        ],
        "name": "MerkleResistor",
        "nameLocation": "1462:14:2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 247,
            "libraryName": {
              "id": 245,
              "name": "MerkleLib",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1264,
              "src": "1489:9:2"
            },
            "nodeType": "UsingForDirective",
            "src": "1483:28:2",
            "typeName": {
              "id": 246,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1503:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "390b7c66",
            "id": 250,
            "mutability": "mutable",
            "name": "numTrees",
            "nameLocation": "1568:8:2",
            "nodeType": "VariableDeclaration",
            "scope": 797,
            "src": "1556:24:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 248,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "1556:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 249,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1579:1:2",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "canonicalName": "MerkleResistor.Tranche",
            "id": 263,
            "members": [
              {
                "constant": false,
                "id": 252,
                "mutability": "mutable",
                "name": "totalCoins",
                "nameLocation": "1688:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 263,
                "src": "1683:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 251,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1683:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 254,
                "mutability": "mutable",
                "name": "currentCoins",
                "nameLocation": "1760:12:2",
                "nodeType": "VariableDeclaration",
                "scope": 263,
                "src": "1755:17:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 253,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1755:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 256,
                "mutability": "mutable",
                "name": "startTime",
                "nameLocation": "1854:9:2",
                "nodeType": "VariableDeclaration",
                "scope": 263,
                "src": "1849:14:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 255,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1849:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 258,
                "mutability": "mutable",
                "name": "endTime",
                "nameLocation": "1916:7:2",
                "nodeType": "VariableDeclaration",
                "scope": 263,
                "src": "1911:12:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 257,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1911:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 260,
                "mutability": "mutable",
                "name": "coinsPerSecond",
                "nameLocation": "1976:14:2",
                "nodeType": "VariableDeclaration",
                "scope": 263,
                "src": "1971:19:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 259,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1971:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 262,
                "mutability": "mutable",
                "name": "lastWithdrawalTime",
                "nameLocation": "2093:18:2",
                "nodeType": "VariableDeclaration",
                "scope": 263,
                "src": "2088:23:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 261,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2088:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Tranche",
            "nameLocation": "1665:7:2",
            "nodeType": "StructDefinition",
            "scope": 797,
            "src": "1658:548:2",
            "visibility": "public"
          },
          {
            "canonicalName": "MerkleResistor.MerkleTree",
            "id": 278,
            "members": [
              {
                "constant": false,
                "id": 265,
                "mutability": "mutable",
                "name": "merkleRoot",
                "nameLocation": "2361:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 278,
                "src": "2353:18:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 264,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "2353:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 267,
                "mutability": "mutable",
                "name": "ipfsHash",
                "nameLocation": "2476:8:2",
                "nodeType": "VariableDeclaration",
                "scope": 278,
                "src": "2468:16:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 266,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "2468:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 269,
                "mutability": "mutable",
                "name": "minEndTime",
                "nameLocation": "2595:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 278,
                "src": "2590:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 268,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2590:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 271,
                "mutability": "mutable",
                "name": "maxEndTime",
                "nameLocation": "2692:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 278,
                "src": "2687:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 270,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2687:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 273,
                "mutability": "mutable",
                "name": "pctUpFront",
                "nameLocation": "2789:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 278,
                "src": "2784:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 272,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2784:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 275,
                "mutability": "mutable",
                "name": "tokenAddress",
                "nameLocation": "2901:12:2",
                "nodeType": "VariableDeclaration",
                "scope": 278,
                "src": "2893:20:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 274,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "2893:7:2",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 277,
                "mutability": "mutable",
                "name": "tokenBalance",
                "nameLocation": "2966:12:2",
                "nodeType": "VariableDeclaration",
                "scope": 278,
                "src": "2961:17:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 276,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2961:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "MerkleTree",
            "nameLocation": "2332:10:2",
            "nodeType": "StructDefinition",
            "scope": 797,
            "src": "2325:745:2",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "86bb8249",
            "id": 284,
            "mutability": "mutable",
            "name": "initialized",
            "nameLocation": "3447:11:2",
            "nodeType": "VariableDeclaration",
            "scope": 797,
            "src": "3396:62:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
              "typeString": "mapping(address => mapping(uint256 => bool))"
            },
            "typeName": {
              "id": 283,
              "keyType": {
                "id": 279,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "3405:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "3396:43:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                "typeString": "mapping(address => mapping(uint256 => bool))"
              },
              "valueType": {
                "id": 282,
                "keyType": {
                  "id": 280,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "3425:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "3416:22:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                  "typeString": "mapping(uint256 => bool)"
                },
                "valueType": {
                  "id": 281,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "3433:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "85d88cb1",
            "id": 289,
            "mutability": "mutable",
            "name": "merkleTrees",
            "nameLocation": "3592:11:2",
            "nodeType": "VariableDeclaration",
            "scope": 797,
            "src": "3556:47:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$278_storage_$",
              "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree)"
            },
            "typeName": {
              "id": 288,
              "keyType": {
                "id": 285,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "3565:4:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "3556:28:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$278_storage_$",
                "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree)"
              },
              "valueType": {
                "id": 287,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 286,
                  "name": "MerkleTree",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 278,
                  "src": "3573:10:2"
                },
                "referencedDeclaration": 278,
                "src": "3573:10:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_MerkleTree_$278_storage_ptr",
                  "typeString": "struct MerkleResistor.MerkleTree"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "c26cb54f",
            "id": 296,
            "mutability": "mutable",
            "name": "tranches",
            "nameLocation": "3726:8:2",
            "nodeType": "VariableDeclaration",
            "scope": 797,
            "src": "3672:62:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$263_storage_$_$",
              "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche))"
            },
            "typeName": {
              "id": 295,
              "keyType": {
                "id": 290,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "3681:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "3672:46:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$263_storage_$_$",
                "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche))"
              },
              "valueType": {
                "id": 294,
                "keyType": {
                  "id": 291,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "3701:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "3692:25:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$263_storage_$",
                  "typeString": "mapping(uint256 => struct MerkleResistor.Tranche)"
                },
                "valueType": {
                  "id": 293,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 292,
                    "name": "Tranche",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 263,
                    "src": "3709:7:2"
                  },
                  "referencedDeclaration": 263,
                  "src": "3709:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Tranche_$263_storage_ptr",
                    "typeString": "struct MerkleResistor.Tranche"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "aaf5eb68",
            "id": 299,
            "mutability": "constant",
            "name": "PRECISION",
            "nameLocation": "3828:9:2",
            "nodeType": "VariableDeclaration",
            "scope": 797,
            "src": "3807:40:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 297,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "3807:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31303030303030",
              "id": 298,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "3840:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              },
              "value": "1000000"
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 309,
            "name": "WithdrawalOccurred",
            "nameLocation": "3898:18:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 308,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 301,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "3930:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 309,
                  "src": "3917:22:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 300,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3917:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 303,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "3957:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 309,
                  "src": "3941:27:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 302,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3941:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 305,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "numTokens",
                  "nameLocation": "3975:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 309,
                  "src": "3970:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 304,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3970:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 307,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokensLeft",
                  "nameLocation": "3991:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 309,
                  "src": "3986:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 306,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3986:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3916:86:2"
            },
            "src": "3892:111:2"
          },
          {
            "anonymous": false,
            "id": 319,
            "name": "MerkleTreeAdded",
            "nameLocation": "4049:15:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 318,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 311,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4078:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 319,
                  "src": "4065:22:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 310,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4065:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 313,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "4105:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 319,
                  "src": "4089:28:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 312,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4089:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 315,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "4127:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 319,
                  "src": "4119:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 314,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4119:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 317,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "4144:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 319,
                  "src": "4136:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 316,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4136:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4064:89:2"
            },
            "src": "4043:111:2"
          },
          {
            "anonymous": false,
            "id": 327,
            "name": "TokensDeposited",
            "nameLocation": "4204:15:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 326,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 321,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4233:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 327,
                  "src": "4220:22:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 320,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4220:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 323,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "4260:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 327,
                  "src": "4244:28:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 322,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4244:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 325,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4279:6:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 327,
                  "src": "4274:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 324,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4274:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4219:67:2"
            },
            "src": "4198:89:2"
          },
          {
            "body": {
              "id": 386,
              "nodeType": "Block",
              "src": "5508:918:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 348,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 346,
                          "name": "pctUpFront",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 338,
                          "src": "5570:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "hexValue": "313030",
                          "id": 347,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5583:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_100_by_1",
                            "typeString": "int_const 100"
                          },
                          "value": "100"
                        },
                        "src": "5570:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "706374557046726f6e74203e3d20313030",
                        "id": 349,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5588:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5d62361d64e7f8cf4fff457bf47173a531e51b64da30badb8e72846a2642165f",
                          "typeString": "literal_string \"pctUpFront >= 100\""
                        },
                        "value": "pctUpFront >= 100"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5d62361d64e7f8cf4fff457bf47173a531e51b64da30badb8e72846a2642165f",
                          "typeString": "literal_string \"pctUpFront >= 100\""
                        }
                      ],
                      "id": 345,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5562:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 350,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5562:46:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 351,
                  "nodeType": "ExpressionStatement",
                  "src": "5562:46:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 355,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 353,
                          "name": "minEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 334,
                          "src": "5626:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "id": 354,
                          "name": "maxEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 336,
                          "src": "5639:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5626:23:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6d696e456e6454696d65206d757374206265206c657373207468616e206d6178456e6454696d65",
                        "id": 356,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5651:41:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b9f494a656d13b13a08d4cf899120fa0e5253d75c531a056af397669b40d9b3e",
                          "typeString": "literal_string \"minEndTime must be less than maxEndTime\""
                        },
                        "value": "minEndTime must be less than maxEndTime"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b9f494a656d13b13a08d4cf899120fa0e5253d75c531a056af397669b40d9b3e",
                          "typeString": "literal_string \"minEndTime must be less than maxEndTime\""
                        }
                      ],
                      "id": 352,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5618:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 357,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5618:75:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 358,
                  "nodeType": "ExpressionStatement",
                  "src": "5618:75:2"
                },
                {
                  "expression": {
                    "id": 372,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 359,
                        "name": "merkleTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 289,
                        "src": "5760:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$278_storage_$",
                          "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                        }
                      },
                      "id": 362,
                      "indexExpression": {
                        "id": 361,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "++",
                        "prefix": true,
                        "src": "5772:10:2",
                        "subExpression": {
                          "id": 360,
                          "name": "numTrees",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 250,
                          "src": "5774:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "5760:23:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$278_storage",
                        "typeString": "struct MerkleResistor.MerkleTree storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 364,
                          "name": "newRoot",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 330,
                          "src": "5810:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 365,
                          "name": "ipfsHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 332,
                          "src": "5831:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 366,
                          "name": "minEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 334,
                          "src": "5853:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 367,
                          "name": "maxEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 336,
                          "src": "5877:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 368,
                          "name": "pctUpFront",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 338,
                          "src": "5901:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 369,
                          "name": "tokenAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 340,
                          "src": "5925:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "hexValue": "30",
                          "id": 370,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5951:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 363,
                        "name": "MerkleTree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 278,
                        "src": "5786:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_MerkleTree_$278_storage_ptr_$",
                          "typeString": "type(struct MerkleResistor.MerkleTree storage pointer)"
                        }
                      },
                      "id": 371,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5786:247:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$278_memory_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree memory"
                      }
                    },
                    "src": "5760:273:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$278_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "id": 373,
                  "nodeType": "ExpressionStatement",
                  "src": "5760:273:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 375,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 250,
                        "src": "6323:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 376,
                        "name": "tokenBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 342,
                        "src": "6333:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 374,
                      "name": "depositTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 433,
                      "src": "6309:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 377,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6309:37:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 378,
                  "nodeType": "ExpressionStatement",
                  "src": "6309:37:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 380,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 250,
                        "src": "6377:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 381,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 340,
                        "src": "6387:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 382,
                        "name": "newRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 330,
                        "src": "6401:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 383,
                        "name": "ipfsHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 332,
                        "src": "6410:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 379,
                      "name": "MerkleTreeAdded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 319,
                      "src": "6361:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_bytes32_$_t_bytes32_$returns$__$",
                        "typeString": "function (uint256,address,bytes32,bytes32)"
                      }
                    },
                    "id": 384,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6361:58:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 385,
                  "nodeType": "EmitStatement",
                  "src": "6356:63:2"
                }
              ]
            },
            "documentation": {
              "id": 328,
              "nodeType": "StructuredDocumentation",
              "src": "4293:1053:2",
              "text": "@notice Add a new merkle tree to the contract, creating a new merkle-vesting-schedule-range\n @dev Anyone may call this function, therefore we must make sure trees cannot affect each other\n @dev Root hash should be built from (destination, minTotalPayments, maxTotalPayments)\n @param newRoot root hash of merkle tree representing vesting schedule ranges\n @param ipfsHash the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable\n @param minEndTime a continuous range of possible end times are specified, this is the minimum\n @param maxEndTime a continuous range of possible end times are specified, this is the maximum\n @param pctUpFront the percent of tokens user will get at initialization time (note this implies no lock time)\n @param tokenAddress the address of the token contract that is being distributed\n @param tokenBalance the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
            },
            "functionSelector": "d71383ed",
            "id": 387,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addMerkleTree",
            "nameLocation": "5360:13:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 343,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 330,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "5382:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 387,
                  "src": "5374:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 329,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5374:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 332,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "5399:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 387,
                  "src": "5391:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 331,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5391:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 334,
                  "mutability": "mutable",
                  "name": "minEndTime",
                  "nameLocation": "5414:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 387,
                  "src": "5409:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 333,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5409:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 336,
                  "mutability": "mutable",
                  "name": "maxEndTime",
                  "nameLocation": "5431:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 387,
                  "src": "5426:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 335,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5426:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 338,
                  "mutability": "mutable",
                  "name": "pctUpFront",
                  "nameLocation": "5448:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 387,
                  "src": "5443:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 337,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5443:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 340,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "5468:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 387,
                  "src": "5460:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 339,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5460:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 342,
                  "mutability": "mutable",
                  "name": "tokenBalance",
                  "nameLocation": "5487:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 387,
                  "src": "5482:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 341,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5482:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5373:127:2"
            },
            "returnParameters": {
              "id": 344,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5508:0:2"
            },
            "scope": 797,
            "src": "5351:1075:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 432,
              "nodeType": "Block",
              "src": "6859:1139:2",
              "statements": [
                {
                  "assignments": [
                    397
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 397,
                      "mutability": "mutable",
                      "name": "merkleTree",
                      "nameLocation": "6923:10:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 432,
                      "src": "6904:29:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$278_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 396,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 395,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 278,
                          "src": "6904:10:2"
                        },
                        "referencedDeclaration": 278,
                        "src": "6904:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$278_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 401,
                  "initialValue": {
                    "baseExpression": {
                      "id": 398,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 289,
                      "src": "6936:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$278_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 400,
                    "indexExpression": {
                      "id": 399,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 390,
                      "src": "6948:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "6936:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$278_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6904:54:2"
                },
                {
                  "expression": {
                    "id": 406,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 402,
                        "name": "merkleTree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 397,
                        "src": "7031:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$278_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 404,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 277,
                      "src": "7031:23:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 405,
                      "name": "value",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 392,
                      "src": "7058:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7031:32:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 407,
                  "nodeType": "ExpressionStatement",
                  "src": "7031:32:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 414,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "7859:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 415,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "7859:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "arguments": [
                              {
                                "id": 418,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "7879:4:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_MerkleResistor_$797",
                                  "typeString": "contract MerkleResistor"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_MerkleResistor_$797",
                                  "typeString": "contract MerkleResistor"
                                }
                              ],
                              "id": 417,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "7871:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 416,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "7871:7:2",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 419,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7871:13:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 420,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 392,
                            "src": "7886:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 410,
                                  "name": "merkleTree",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 397,
                                  "src": "7821:10:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_MerkleTree_$278_storage_ptr",
                                    "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                                  }
                                },
                                "id": 411,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "tokenAddress",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 275,
                                "src": "7821:23:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 409,
                              "name": "IERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1342,
                              "src": "7814:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC20_$1342_$",
                                "typeString": "type(contract IERC20)"
                              }
                            },
                            "id": 412,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7814:31:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$1342",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 413,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1323,
                          "src": "7814:44:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) external returns (bool)"
                          }
                        },
                        "id": 421,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7814:78:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4552433230207472616e73666572206661696c6564",
                        "id": 422,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7894:23:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff",
                          "typeString": "literal_string \"ERC20 transfer failed\""
                        },
                        "value": "ERC20 transfer failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff",
                          "typeString": "literal_string \"ERC20 transfer failed\""
                        }
                      ],
                      "id": 408,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7806:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 423,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7806:112:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 424,
                  "nodeType": "ExpressionStatement",
                  "src": "7806:112:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 426,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 390,
                        "src": "7949:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 427,
                          "name": "merkleTree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 397,
                          "src": "7960:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$278_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 428,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "tokenAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 275,
                        "src": "7960:23:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 429,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 392,
                        "src": "7985:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 425,
                      "name": "TokensDeposited",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 327,
                      "src": "7933:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,address,uint256)"
                      }
                    },
                    "id": 430,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7933:58:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 431,
                  "nodeType": "EmitStatement",
                  "src": "7928:63:2"
                }
              ]
            },
            "documentation": {
              "id": 388,
              "nodeType": "StructuredDocumentation",
              "src": "6432:364:2",
              "text": "@notice Add funds to an existing merkle-tree\n @dev Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious\n @param treeIndex index into array-like map of merkleTrees\n @param value the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
            },
            "functionSelector": "f16ad51e",
            "id": 433,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "depositTokens",
            "nameLocation": "6810:13:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 393,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 390,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "6829:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 433,
                  "src": "6824:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 389,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "6824:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 392,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "6845:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 433,
                  "src": "6840:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 391,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "6840:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6823:28:2"
            },
            "returnParameters": {
              "id": 394,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6859:0:2"
            },
            "scope": 797,
            "src": "6801:1197:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 547,
              "nodeType": "Block",
              "src": "9096:1818:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 454,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 451,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "9171:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 452,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "9171:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 453,
                          "name": "destination",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 438,
                          "src": "9185:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "9171:25:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616e636865",
                        "id": 455,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9198:38:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0d840bbe3638dabb5a6e726d796a00fcf265be6e5ba2e71e838f9bed65dfcb15",
                          "typeString": "literal_string \"Can only initialize your own tranche\""
                        },
                        "value": "Can only initialize your own tranche"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0d840bbe3638dabb5a6e726d796a00fcf265be6e5ba2e71e838f9bed65dfcb15",
                          "typeString": "literal_string \"Can only initialize your own tranche\""
                        }
                      ],
                      "id": 450,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9163:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 456,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9163:74:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 457,
                  "nodeType": "ExpressionStatement",
                  "src": "9163:74:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 464,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "9291:36:2",
                        "subExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 459,
                              "name": "initialized",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 284,
                              "src": "9292:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                                "typeString": "mapping(address => mapping(uint256 => bool))"
                              }
                            },
                            "id": 461,
                            "indexExpression": {
                              "id": 460,
                              "name": "destination",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 438,
                              "src": "9304:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "9292:24:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                              "typeString": "mapping(uint256 => bool)"
                            }
                          },
                          "id": 463,
                          "indexExpression": {
                            "id": 462,
                            "name": "treeIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 436,
                            "src": "9317:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "9292:35:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "416c726561647920696e697469616c697a6564",
                        "id": 465,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9329:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0",
                          "typeString": "literal_string \"Already initialized\""
                        },
                        "value": "Already initialized"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0",
                          "typeString": "literal_string \"Already initialized\""
                        }
                      ],
                      "id": 458,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9283:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 466,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9283:68:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 467,
                  "nodeType": "ExpressionStatement",
                  "src": "9283:68:2"
                },
                {
                  "assignments": [
                    469
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 469,
                      "mutability": "mutable",
                      "name": "leaf",
                      "nameLocation": "9432:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 547,
                      "src": "9424:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 468,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "9424:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 478,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 473,
                            "name": "destination",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 438,
                            "src": "9460:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 474,
                            "name": "minTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 442,
                            "src": "9473:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 475,
                            "name": "maxTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 444,
                            "src": "9491:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 471,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "9449:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 472,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "9449:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 476,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9449:59:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 470,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "9439:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 477,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9439:70:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9424:85:2"
                },
                {
                  "assignments": [
                    481
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 481,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "9578:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 547,
                      "src": "9560:22:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$278_memory_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 480,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 479,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 278,
                          "src": "9560:10:2"
                        },
                        "referencedDeclaration": 278,
                        "src": "9560:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$278_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 485,
                  "initialValue": {
                    "baseExpression": {
                      "id": 482,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 289,
                      "src": "9585:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$278_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 484,
                    "indexExpression": {
                      "id": 483,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 436,
                      "src": "9597:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "9585:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$278_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9560:47:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 490,
                            "name": "leaf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 469,
                            "src": "9731:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 491,
                            "name": "proof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 447,
                            "src": "9737:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          ],
                          "expression": {
                            "expression": {
                              "id": 487,
                              "name": "tree",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 481,
                              "src": "9703:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MerkleTree_$278_memory_ptr",
                                "typeString": "struct MerkleResistor.MerkleTree memory"
                              }
                            },
                            "id": 488,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "merkleRoot",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 265,
                            "src": "9703:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "id": 489,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "verifyProof",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1230,
                          "src": "9703:27:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_delegatecall_pure$_t_bytes32_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes32_$",
                            "typeString": "function (bytes32,bytes32,bytes32[] memory) pure returns (bool)"
                          }
                        },
                        "id": 492,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9703:40:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5468652070726f6f6620636f756c64206e6f742062652076657269666965642e",
                        "id": 493,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9745:34:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6befa95a15378f3fa320a9fc597710e04d31854374b1378d40ad4268234fd91c",
                          "typeString": "literal_string \"The proof could not be verified.\""
                        },
                        "value": "The proof could not be verified."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6befa95a15378f3fa320a9fc597710e04d31854374b1378d40ad4268234fd91c",
                          "typeString": "literal_string \"The proof could not be verified.\""
                        }
                      ],
                      "id": 486,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "9695:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 494,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9695:85:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 495,
                  "nodeType": "ExpressionStatement",
                  "src": "9695:85:2"
                },
                {
                  "expression": {
                    "id": 502,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 496,
                          "name": "initialized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 284,
                          "src": "9878:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                            "typeString": "mapping(address => mapping(uint256 => bool))"
                          }
                        },
                        "id": 499,
                        "indexExpression": {
                          "id": 497,
                          "name": "destination",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 438,
                          "src": "9890:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "9878:24:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                          "typeString": "mapping(uint256 => bool)"
                        }
                      },
                      "id": 500,
                      "indexExpression": {
                        "id": 498,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 436,
                        "src": "9903:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "9878:35:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 501,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "9916:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "9878:42:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 503,
                  "nodeType": "ExpressionStatement",
                  "src": "9878:42:2"
                },
                {
                  "assignments": [
                    505,
                    507,
                    509,
                    511
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 505,
                      "mutability": "mutable",
                      "name": "valid",
                      "nameLocation": "9937:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 547,
                      "src": "9932:10:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 504,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "9932:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 507,
                      "mutability": "mutable",
                      "name": "totalCoins",
                      "nameLocation": "9949:10:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 547,
                      "src": "9944:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 506,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "9944:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 509,
                      "mutability": "mutable",
                      "name": "coinsPerSecond",
                      "nameLocation": "9966:14:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 547,
                      "src": "9961:19:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 508,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "9961:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 511,
                      "mutability": "mutable",
                      "name": "startTime",
                      "nameLocation": "9987:9:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 547,
                      "src": "9982:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 510,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "9982:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 518,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 513,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 436,
                        "src": "10022:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 514,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 440,
                        "src": "10033:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 515,
                        "name": "minTotalPayments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 442,
                        "src": "10046:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 516,
                        "name": "maxTotalPayments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 444,
                        "src": "10064:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 512,
                      "name": "verifyVestingSchedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 796,
                      "src": "10000:21:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256,uint256) view returns (bool,uint256,uint256,uint256)"
                      }
                    },
                    "id": 517,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10000:81:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(bool,uint256,uint256,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9931:150:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 520,
                        "name": "valid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 505,
                        "src": "10099:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c69642076657374696e67207363686564756c65",
                        "id": 521,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10106:26:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e7aa6925863169bd8cb1c379b7045e79f109b7df282905e5a05c3523fee8c286",
                          "typeString": "literal_string \"Invalid vesting schedule\""
                        },
                        "value": "Invalid vesting schedule"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e7aa6925863169bd8cb1c379b7045e79f109b7df282905e5a05c3523fee8c286",
                          "typeString": "literal_string \"Invalid vesting schedule\""
                        }
                      ],
                      "id": 519,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "10091:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 522,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10091:42:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 523,
                  "nodeType": "ExpressionStatement",
                  "src": "10091:42:2"
                },
                {
                  "expression": {
                    "id": 540,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 524,
                          "name": "tranches",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 296,
                          "src": "10327:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$263_storage_$_$",
                            "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche storage ref))"
                          }
                        },
                        "id": 527,
                        "indexExpression": {
                          "id": 525,
                          "name": "destination",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 438,
                          "src": "10336:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "10327:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$263_storage_$",
                          "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"
                        }
                      },
                      "id": 528,
                      "indexExpression": {
                        "id": 526,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 436,
                        "src": "10349:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "10327:32:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$263_storage",
                        "typeString": "struct MerkleResistor.Tranche storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 530,
                          "name": "totalCoins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 507,
                          "src": "10383:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 531,
                          "name": "totalCoins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 507,
                          "src": "10459:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 532,
                          "name": "startTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 511,
                          "src": "10505:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 536,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 533,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "10593:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 534,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "10593:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 535,
                            "name": "vestingTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 440,
                            "src": "10611:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10593:29:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 537,
                          "name": "coinsPerSecond",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 509,
                          "src": "10680:14:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 538,
                          "name": "startTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 511,
                          "src": "10748:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 529,
                        "name": "Tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 263,
                        "src": "10362:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Tranche_$263_storage_ptr_$",
                          "typeString": "type(struct MerkleResistor.Tranche storage pointer)"
                        }
                      },
                      "id": 539,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10362:503:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$263_memory_ptr",
                        "typeString": "struct MerkleResistor.Tranche memory"
                      }
                    },
                    "src": "10327:538:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$263_storage",
                      "typeString": "struct MerkleResistor.Tranche storage ref"
                    }
                  },
                  "id": 541,
                  "nodeType": "ExpressionStatement",
                  "src": "10327:538:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 543,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 436,
                        "src": "10884:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 544,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 438,
                        "src": "10895:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 542,
                      "name": "withdraw",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 658,
                      "src": "10875:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$__$",
                        "typeString": "function (uint256,address)"
                      }
                    },
                    "id": 545,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10875:32:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 546,
                  "nodeType": "ExpressionStatement",
                  "src": "10875:32:2"
                }
              ]
            },
            "documentation": {
              "id": 434,
              "nodeType": "StructuredDocumentation",
              "src": "8004:933:2",
              "text": "@notice Called once per recipient of a vesting schedule to initialize the vesting schedule and fix the parameters\n @dev Only the recipient can initialize their own schedule here, because a meaningful choice is made\n @dev If the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree stats\n @param treeIndex index into array-like map of merkleTrees\n @param destination address that will receive tokens\n @param vestingTime the actual length of the vesting schedule, chosen by the user\n @param minTotalPayments the minimum amount of tokens they will receive, if they choose minEndTime as vestingTime\n @param maxTotalPayments the maximum amount of tokens they will receive, if they choose maxEndTime as vestingTime\n @param proof array of hashes linking leaf hash of (destination, minTotalPayments, maxTotalPayments) to root"
            },
            "functionSelector": "f287ad04",
            "id": 548,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "8951:10:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 448,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 436,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "8967:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 548,
                  "src": "8962:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 435,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "8962:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 438,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "8986:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 548,
                  "src": "8978:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 437,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8978:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 440,
                  "mutability": "mutable",
                  "name": "vestingTime",
                  "nameLocation": "9004:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 548,
                  "src": "8999:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 439,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "8999:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 442,
                  "mutability": "mutable",
                  "name": "minTotalPayments",
                  "nameLocation": "9022:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 548,
                  "src": "9017:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 441,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9017:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 444,
                  "mutability": "mutable",
                  "name": "maxTotalPayments",
                  "nameLocation": "9045:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 548,
                  "src": "9040:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 443,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9040:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 447,
                  "mutability": "mutable",
                  "name": "proof",
                  "nameLocation": "9080:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 548,
                  "src": "9063:22:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 445,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "9063:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 446,
                    "nodeType": "ArrayTypeName",
                    "src": "9063:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8961:125:2"
            },
            "returnParameters": {
              "id": 449,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9096:0:2"
            },
            "scope": 797,
            "src": "8942:1972:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 657,
              "nodeType": "Block",
              "src": "11406:2421:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "baseExpression": {
                            "id": 557,
                            "name": "initialized",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 284,
                            "src": "11532:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                              "typeString": "mapping(address => mapping(uint256 => bool))"
                            }
                          },
                          "id": 559,
                          "indexExpression": {
                            "id": 558,
                            "name": "destination",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 553,
                            "src": "11544:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "11532:24:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                            "typeString": "mapping(uint256 => bool)"
                          }
                        },
                        "id": 561,
                        "indexExpression": {
                          "id": 560,
                          "name": "treeIndex",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 551,
                          "src": "11557:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "11532:35:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f75206d75737420696e697469616c697a6520796f7572206163636f756e742066697273742e",
                        "id": 562,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11569:41:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4abd8331dd14b306cce990886a8c58b8be69cac04657ffd8c84a7e7c5940d2d1",
                          "typeString": "literal_string \"You must initialize your account first.\""
                        },
                        "value": "You must initialize your account first."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4abd8331dd14b306cce990886a8c58b8be69cac04657ffd8c84a7e7c5940d2d1",
                          "typeString": "literal_string \"You must initialize your account first.\""
                        }
                      ],
                      "id": 556,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "11524:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 563,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11524:87:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 564,
                  "nodeType": "ExpressionStatement",
                  "src": "11524:87:2"
                },
                {
                  "assignments": [
                    567
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 567,
                      "mutability": "mutable",
                      "name": "tranche",
                      "nameLocation": "11678:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 657,
                      "src": "11662:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$263_storage_ptr",
                        "typeString": "struct MerkleResistor.Tranche"
                      },
                      "typeName": {
                        "id": 566,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 565,
                          "name": "Tranche",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 263,
                          "src": "11662:7:2"
                        },
                        "referencedDeclaration": 263,
                        "src": "11662:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$263_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 573,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 568,
                        "name": "tranches",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 296,
                        "src": "11688:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$263_storage_$_$",
                          "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche storage ref))"
                        }
                      },
                      "id": 570,
                      "indexExpression": {
                        "id": 569,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 553,
                        "src": "11697:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "11688:21:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$263_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"
                      }
                    },
                    "id": 572,
                    "indexExpression": {
                      "id": 571,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 551,
                      "src": "11710:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "11688:32:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$263_storage",
                      "typeString": "struct MerkleResistor.Tranche storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11662:58:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 578,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 575,
                            "name": "tranche",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 567,
                            "src": "11777:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Tranche_$263_storage_ptr",
                              "typeString": "struct MerkleResistor.Tranche storage pointer"
                            }
                          },
                          "id": 576,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "currentCoins",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 254,
                          "src": "11777:20:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 577,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "11801:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "11777:25:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f20636f696e73206c65667420746f207769746864726177",
                        "id": 579,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11804:27:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f5408369ba8a5a8ab8865a5c8cf9d54818bf598d281aa43e2647b1ce4add273e",
                          "typeString": "literal_string \"No coins left to withdraw\""
                        },
                        "value": "No coins left to withdraw"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f5408369ba8a5a8ab8865a5c8cf9d54818bf598d281aa43e2647b1ce4add273e",
                          "typeString": "literal_string \"No coins left to withdraw\""
                        }
                      ],
                      "id": 574,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "11769:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 580,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11769:63:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 581,
                  "nodeType": "ExpressionStatement",
                  "src": "11769:63:2"
                },
                {
                  "assignments": [
                    583
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 583,
                      "mutability": "mutable",
                      "name": "currentWithdrawal",
                      "nameLocation": "11847:17:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 657,
                      "src": "11842:22:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 582,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "11842:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 585,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 584,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "11867:1:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11842:26:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 590,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 586,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "11993:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 587,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "11993:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "expression": {
                        "id": 588,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 567,
                        "src": "12012:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$263_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 589,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "endTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 258,
                      "src": "12012:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "11993:34:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 609,
                    "nodeType": "Block",
                    "src": "12100:263:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 607,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 597,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 583,
                            "src": "12261:17:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 606,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 602,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 598,
                                      "name": "block",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -4,
                                      "src": "12282:5:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_block",
                                        "typeString": "block"
                                      }
                                    },
                                    "id": 599,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "timestamp",
                                    "nodeType": "MemberAccess",
                                    "src": "12282:15:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 600,
                                      "name": "tranche",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 567,
                                      "src": "12300:7:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Tranche_$263_storage_ptr",
                                        "typeString": "struct MerkleResistor.Tranche storage pointer"
                                      }
                                    },
                                    "id": 601,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lastWithdrawalTime",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 262,
                                    "src": "12300:26:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "12282:44:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 603,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "12281:46:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "expression": {
                                "id": 604,
                                "name": "tranche",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 567,
                                "src": "12330:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Tranche_$263_storage_ptr",
                                  "typeString": "struct MerkleResistor.Tranche storage pointer"
                                }
                              },
                              "id": 605,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "coinsPerSecond",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 260,
                              "src": "12330:22:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "12281:71:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12261:91:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 608,
                        "nodeType": "ExpressionStatement",
                        "src": "12261:91:2"
                      }
                    ]
                  },
                  "id": 610,
                  "nodeType": "IfStatement",
                  "src": "11989:374:2",
                  "trueBody": {
                    "id": 596,
                    "nodeType": "Block",
                    "src": "12029:65:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 594,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 591,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 583,
                            "src": "12043:17:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 592,
                              "name": "tranche",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 567,
                              "src": "12063:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Tranche_$263_storage_ptr",
                                "typeString": "struct MerkleResistor.Tranche storage pointer"
                              }
                            },
                            "id": 593,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "currentCoins",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 254,
                            "src": "12063:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12043:40:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 595,
                        "nodeType": "ExpressionStatement",
                        "src": "12043:40:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    613
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 613,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "12414:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 657,
                      "src": "12395:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$278_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 612,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 611,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 278,
                          "src": "12395:10:2"
                        },
                        "referencedDeclaration": 278,
                        "src": "12395:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$278_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 617,
                  "initialValue": {
                    "baseExpression": {
                      "id": 614,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 289,
                      "src": "12421:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$278_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 616,
                    "indexExpression": {
                      "id": 615,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 551,
                      "src": "12433:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "12421:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$278_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12395:48:2"
                },
                {
                  "expression": {
                    "id": 622,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 618,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 567,
                        "src": "12642:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$263_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 620,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "currentCoins",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 254,
                      "src": "12642:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 621,
                      "name": "currentWithdrawal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 583,
                      "src": "12666:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12642:41:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 623,
                  "nodeType": "ExpressionStatement",
                  "src": "12642:41:2"
                },
                {
                  "expression": {
                    "id": 629,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 624,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 567,
                        "src": "12875:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$263_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 626,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "lastWithdrawalTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 262,
                      "src": "12875:26:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 627,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "12904:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 628,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "12904:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12875:44:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 630,
                  "nodeType": "ExpressionStatement",
                  "src": "12875:44:2"
                },
                {
                  "expression": {
                    "id": 635,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 631,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 613,
                        "src": "13054:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$278_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 633,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 277,
                      "src": "13054:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 634,
                      "name": "currentWithdrawal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 583,
                      "src": "13075:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "13054:38:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 636,
                  "nodeType": "ExpressionStatement",
                  "src": "13054:38:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 643,
                            "name": "destination",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 553,
                            "src": "13665:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 644,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 583,
                            "src": "13678:17:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 639,
                                  "name": "tree",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 613,
                                  "src": "13637:4:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_MerkleTree_$278_storage_ptr",
                                    "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                                  }
                                },
                                "id": 640,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "tokenAddress",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 275,
                                "src": "13637:17:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 638,
                              "name": "IERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1342,
                              "src": "13630:6:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC20_$1342_$",
                                "typeString": "type(contract IERC20)"
                              }
                            },
                            "id": 641,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13630:25:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$1342",
                              "typeString": "contract IERC20"
                            }
                          },
                          "id": 642,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1291,
                          "src": "13630:34:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 645,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13630:66:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "546f6b656e207472616e73666572206661696c6564",
                        "id": 646,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "13698:23:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4",
                          "typeString": "literal_string \"Token transfer failed\""
                        },
                        "value": "Token transfer failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4",
                          "typeString": "literal_string \"Token transfer failed\""
                        }
                      ],
                      "id": 637,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "13622:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 647,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13622:100:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 648,
                  "nodeType": "ExpressionStatement",
                  "src": "13622:100:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 650,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 551,
                        "src": "13756:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 651,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 553,
                        "src": "13767:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 652,
                        "name": "currentWithdrawal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 583,
                        "src": "13780:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 653,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 567,
                          "src": "13799:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$263_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 654,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "currentCoins",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 254,
                        "src": "13799:20:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 649,
                      "name": "WithdrawalOccurred",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 309,
                      "src": "13737:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,address,uint256,uint256)"
                      }
                    },
                    "id": 655,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13737:83:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 656,
                  "nodeType": "EmitStatement",
                  "src": "13732:88:2"
                }
              ]
            },
            "documentation": {
              "id": 549,
              "nodeType": "StructuredDocumentation",
              "src": "10920:419:2",
              "text": "@notice Move unlocked funds to the destination\n @dev Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of\n @dev who provides the proof and pays the gas, msg.sender is not used in this function\n @param treeIndex index into array-like map of merkleTrees, which tree should we apply the proof to?\n @param destination recipient of tokens"
            },
            "functionSelector": "00f714ce",
            "id": 658,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "11353:8:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 554,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 551,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "11367:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 658,
                  "src": "11362:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 550,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "11362:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 553,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "11386:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 658,
                  "src": "11378:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 552,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11378:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11361:37:2"
            },
            "returnParameters": {
              "id": 555,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11406:0:2"
            },
            "scope": 797,
            "src": "11344:2483:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 795,
              "nodeType": "Block",
              "src": "14898:2781:2",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 680,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 678,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 661,
                      "src": "15030:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 679,
                      "name": "numTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 250,
                      "src": "15042:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "15030:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 688,
                  "nodeType": "IfStatement",
                  "src": "15026:74:2",
                  "trueBody": {
                    "id": 687,
                    "nodeType": "Block",
                    "src": "15052:48:2",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "hexValue": "66616c7365",
                              "id": 681,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15074:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "hexValue": "30",
                              "id": 682,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15081:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 683,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15084:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 684,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15087:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "id": 685,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "15073:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$",
                            "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"
                          }
                        },
                        "functionReturnParameters": 677,
                        "id": 686,
                        "nodeType": "Return",
                        "src": "15066:23:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    691
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 691,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "15223:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 795,
                      "src": "15205:22:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$278_memory_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 690,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 689,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 278,
                          "src": "15205:10:2"
                        },
                        "referencedDeclaration": 278,
                        "src": "15205:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$278_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 695,
                  "initialValue": {
                    "baseExpression": {
                      "id": 692,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 289,
                      "src": "15230:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$278_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 694,
                    "indexExpression": {
                      "id": 693,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 661,
                      "src": "15242:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "15230:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$278_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15205:47:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 704,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 699,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 696,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 663,
                        "src": "15355:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "expression": {
                          "id": 697,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 691,
                          "src": "15369:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$278_memory_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree memory"
                          }
                        },
                        "id": 698,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "maxEndTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 271,
                        "src": "15369:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "15355:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 703,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 700,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 663,
                        "src": "15388:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "expression": {
                          "id": 701,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 691,
                          "src": "15402:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$278_memory_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree memory"
                          }
                        },
                        "id": 702,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "minEndTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 269,
                        "src": "15402:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "15388:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "15355:62:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 712,
                  "nodeType": "IfStatement",
                  "src": "15351:116:2",
                  "trueBody": {
                    "id": 711,
                    "nodeType": "Block",
                    "src": "15419:48:2",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "hexValue": "66616c7365",
                              "id": 705,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15441:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "hexValue": "30",
                              "id": 706,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15448:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 707,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15451:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 708,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15454:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "id": 709,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "15440:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$",
                            "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"
                          }
                        },
                        "functionReturnParameters": 677,
                        "id": 710,
                        "nodeType": "Return",
                        "src": "15433:23:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    714
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 714,
                      "mutability": "mutable",
                      "name": "totalCoins",
                      "nameLocation": "15482:10:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 795,
                      "src": "15477:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 713,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "15477:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 715,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15477:15:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 719,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 716,
                      "name": "vestingTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 663,
                      "src": "15506:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 717,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 691,
                        "src": "15521:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$278_memory_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree memory"
                        }
                      },
                      "id": 718,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "maxEndTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 271,
                      "src": "15521:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "15506:30:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 756,
                    "nodeType": "Block",
                    "src": "15755:1051:2",
                    "statements": [
                      {
                        "assignments": [
                          726
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 726,
                            "mutability": "mutable",
                            "name": "paymentSlope",
                            "nameLocation": "16418:12:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 756,
                            "src": "16413:17:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 725,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "16413:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 740,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 739,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 732,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 729,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 727,
                                    "name": "maxTotalPayments",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 667,
                                    "src": "16434:16:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "id": 728,
                                    "name": "minTotalPayments",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 665,
                                    "src": "16453:16:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "16434:35:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 730,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "16433:37:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "id": 731,
                              "name": "PRECISION",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 299,
                              "src": "16473:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "16433:49:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 737,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 733,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 691,
                                    "src": "16486:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$278_memory_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree memory"
                                    }
                                  },
                                  "id": 734,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "maxEndTime",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 271,
                                  "src": "16486:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "expression": {
                                    "id": 735,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 691,
                                    "src": "16504:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$278_memory_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree memory"
                                    }
                                  },
                                  "id": 736,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "minEndTime",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 269,
                                  "src": "16504:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "16486:33:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 738,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "16485:35:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16433:87:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "16413:107:2"
                      },
                      {
                        "expression": {
                          "id": 754,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 741,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 714,
                            "src": "16703:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 753,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 750,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 748,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 742,
                                      "name": "paymentSlope",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 726,
                                      "src": "16717:12:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 746,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 743,
                                            "name": "vestingTime",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 663,
                                            "src": "16733:11:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "-",
                                          "rightExpression": {
                                            "expression": {
                                              "id": 744,
                                              "name": "tree",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 691,
                                              "src": "16747:4:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_MerkleTree_$278_memory_ptr",
                                                "typeString": "struct MerkleResistor.MerkleTree memory"
                                              }
                                            },
                                            "id": 745,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "minEndTime",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 269,
                                            "src": "16747:15:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "16733:29:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 747,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "16732:31:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "16717:46:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "id": 749,
                                    "name": "PRECISION",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 299,
                                    "src": "16766:9:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "16717:58:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 751,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "16716:60:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "id": 752,
                              "name": "minTotalPayments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 665,
                              "src": "16779:16:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "16716:79:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16703:92:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 755,
                        "nodeType": "ExpressionStatement",
                        "src": "16703:92:2"
                      }
                    ]
                  },
                  "id": 757,
                  "nodeType": "IfStatement",
                  "src": "15502:1304:2",
                  "trueBody": {
                    "id": 724,
                    "nodeType": "Block",
                    "src": "15538:211:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 722,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 720,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 714,
                            "src": "15709:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 721,
                            "name": "maxTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 667,
                            "src": "15722:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "15709:29:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 723,
                        "nodeType": "ExpressionStatement",
                        "src": "15709:29:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    759
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 759,
                      "mutability": "mutable",
                      "name": "coinsPerSecond",
                      "nameLocation": "17272:14:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 795,
                      "src": "17267:19:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 758,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "17267:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 776,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 775,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 769,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 760,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 714,
                            "src": "17290:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 767,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "313030",
                                      "id": 763,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "17309:3:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      },
                                      "value": "100"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      }
                                    ],
                                    "id": 762,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "17304:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 761,
                                      "name": "uint",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "17304:4:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 764,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "17304:9:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "expression": {
                                    "id": 765,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 691,
                                    "src": "17316:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$278_memory_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree memory"
                                    }
                                  },
                                  "id": 766,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pctUpFront",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 273,
                                  "src": "17316:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "17304:27:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 768,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "17303:29:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "17290:42:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 770,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "17289:44:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 773,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 771,
                            "name": "vestingTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 663,
                            "src": "17337:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "hexValue": "313030",
                            "id": 772,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "17351:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_100_by_1",
                              "typeString": "int_const 100"
                            },
                            "value": "100"
                          },
                          "src": "17337:17:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 774,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "17336:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "17289:66:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "17267:88:2"
                },
                {
                  "assignments": [
                    778
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 778,
                      "mutability": "mutable",
                      "name": "startTime",
                      "nameLocation": "17536:9:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 795,
                      "src": "17531:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 777,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "17531:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 788,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 787,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 782,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 779,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "17548:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 780,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "17548:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "id": 781,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 663,
                        "src": "17566:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "17548:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 785,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 783,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 714,
                            "src": "17581:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 784,
                            "name": "coinsPerSecond",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 759,
                            "src": "17594:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "17581:27:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 786,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "17580:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "17548:61:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "17531:78:2"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "74727565",
                        "id": 789,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "17628:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      {
                        "id": 790,
                        "name": "totalCoins",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 714,
                        "src": "17634:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 791,
                        "name": "coinsPerSecond",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 759,
                        "src": "17646:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 792,
                        "name": "startTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 778,
                        "src": "17662:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 793,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "17627:45:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(bool,uint256,uint256,uint256)"
                    }
                  },
                  "functionReturnParameters": 677,
                  "id": 794,
                  "nodeType": "Return",
                  "src": "17620:52:2"
                }
              ]
            },
            "documentation": {
              "id": 659,
              "nodeType": "StructuredDocumentation",
              "src": "13833:904:2",
              "text": "@notice Determine if the proposed vesting schedule is legit\n @dev Anyone may call this to check, but it also returns values used in the initialization of vesting schedules\n @param treeIndex index into array-like map of merkleTrees, which tree are we talking about?\n @param vestingTime user chosen length of vesting schedule\n @param minTotalPayments pre-committed (in the root hash) minimum of possible totalCoins\n @param maxTotalPayments pre-committed (in the root hash) maximum of possible totalCoins\n @return valid is the proposed vesting-schedule valid\n @return totalCoins amount of coins allocated in the vesting schedule\n @return coinsPerSecond amount of coins released every second, in the proposed vesting schedule\n @return startTime start time of vesting schedule implied by supplied parameters, will always be <= block.timestamp"
            },
            "functionSelector": "6fb6ec41",
            "id": 796,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyVestingSchedule",
            "nameLocation": "14751:21:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 668,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 661,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "14778:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "14773:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 660,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "14773:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 663,
                  "mutability": "mutable",
                  "name": "vestingTime",
                  "nameLocation": "14794:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "14789:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 662,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "14789:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 665,
                  "mutability": "mutable",
                  "name": "minTotalPayments",
                  "nameLocation": "14812:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "14807:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 664,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "14807:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 667,
                  "mutability": "mutable",
                  "name": "maxTotalPayments",
                  "nameLocation": "14835:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "14830:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 666,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "14830:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14772:80:2"
            },
            "returnParameters": {
              "id": 677,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 670,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "14874:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 669,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "14874:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 672,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "14880:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 671,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "14880:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 674,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "14886:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 673,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "14886:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 676,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 796,
                  "src": "14892:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 675,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "14892:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "14873:24:2"
            },
            "scope": 797,
            "src": "14742:2937:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 798,
        "src": "1453:16229:2",
        "usedErrors": []
      }
    ],
    "src": "42:17641:2"
  },
  "bytecode": "60806040526000805534801561001457600080fd5b50611120806100246000396000f3fe608060405234801561001057600080fd5b506004361061009d5760003560e01c8063aaf5eb6811610066578063aaf5eb68146101db578063c26cb54f146101e5578063d71383ed14610260578063f16ad51e14610273578063f287ad041461028657600080fd5b8062f714ce146100a2578063390b7c66146100b75780636fb6ec41146100d357806385d88cb11461010857806386bb82491461019d575b600080fd5b6100b56100b0366004610da0565b610299565b005b6100c060005481565b6040519081526020015b60405180910390f35b6100e66100e1366004610dcc565b61053c565b60408051941515855260208501939093529183015260608201526080016100ca565b61015f610116366004610dfe565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006909501549395949293919290916001600160a01b039091169087565b60408051978852602088019690965294860193909352606085019190915260808401526001600160a01b031660a083015260c082015260e0016100ca565b6101cb6101ab366004610e17565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ca565b6100c0620f424081565b6102336101f3366004610e17565b6003602081815260009384526040808520909152918352912080546001820154600283015493830154600484015460059094015492949193919290919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100ca565b6100b561026e366004610e41565b6106e3565b6100b5610281366004610e9d565b6108a7565b6100b5610294366004610ed5565b6109ea565b6001600160a01b038116600090815260016020908152604080832085845290915290205460ff166103215760405162461bcd60e51b815260206004820152602760248201527f596f75206d75737420696e697469616c697a6520796f7572206163636f756e74604482015266103334b939ba1760c91b60648201526084015b60405180910390fd5b6001600160a01b0381166000908152600360209081526040808320858452909152902060018101546103955760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f696e73206c65667420746f207769746864726177000000000000006044820152606401610318565b6000816003015442106103ad575060018101546103ce565b600482015460058301546103c19042610fe1565b6103cb9190610ff8565b90505b6000848152600260205260408120600184018054919284926103f1908490610fe1565b9091555050426005840155600681018054839190600090610413908490610fe1565b9091555050600581015460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561046857600080fd5b505af115801561047c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a09190611017565b6104e45760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b836001600160a01b0316857f1680e4cfe90468085407ef2b599dbe94b0aa30ff9f180f0e41d22eb71c87287284866001015460405161052d929190918252602082015260400190565b60405180910390a35050505050565b60008060008060005488111561055d575060009250829150819050806106d8565b600088815260026020818152604092839020835160e0810185528154815260018201549281019290925291820154928101929092526003810154606083018190526004820154608084015260058201546001600160a01b031660a084015260069091015460c08301528811806105d65750806040015188105b156105ef576000806000809450945094509450506106d8565b60008160600151891415610604575085610675565b60008260400151836060015161061a9190610fe1565b620f42406106288b8b610fe1565b6106329190610ff8565b61063c9190611040565b905088620f424084604001518c6106539190610fe1565b61065d9084610ff8565b6106679190611040565b6106719190611062565b9150505b60006106828a6064610ff8565b6080840151610692906064610fe1565b61069c9084610ff8565b6106a69190611040565b905060006106b48284611040565b6106be8c42611062565b6106c89190610fe1565b6001985092965090945090925050505b945094509450949050565b606483106107275760405162461bcd60e51b81526020600482015260116024820152700706374557046726f6e74203e3d2031303607c1b6044820152606401610318565b8385106107865760405162461bcd60e51b815260206004820152602760248201527f6d696e456e6454696d65206d757374206265206c657373207468616e206d6178604482015266456e6454696d6560c81b6064820152608401610318565b6040518060e00160405280888152602001878152602001868152602001858152602001848152602001836001600160a01b0316815260200160008152506002600080600081546107d59061107a565b918290555081526020808201929092526040908101600090812084518155928401516001840155908301516002830155606083015160038301556080830151600483015560a08301516005830180546001600160a01b0319166001600160a01b0390921691909117905560c0909201516006909101555461085690826108a7565b60005460408051898152602081018990526001600160a01b03851692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a350505050505050565b6000828152600260205260408120600681018054919284926108ca908490611062565b909155505060058101546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561092357600080fd5b505af1158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b9190611017565b61099f5760405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b60058101546040518381526001600160a01b039091169084907fb162210da7d23d82c18cff5af46d3562661d26b42a6848fa28d64a6bdc70386a9060200160405180910390a3505050565b336001600160a01b03861614610a4e5760405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616044820152636e63686560e01b6064820152608401610318565b6001600160a01b038516600090815260016020908152604080832089845290915290205460ff1615610ab85760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610318565b604080516001600160a01b03871660208201529081018490526060810183905260009060800160408051601f19818403018152828252805160209182012060008b815260028084529084902060e0860185528054808752600182015494870194909452908101548585015260038101546060860152600480820154608087015260058201546001600160a01b031660a087015260069091015460c08601529251632769cd1f60e21b815290945073__MerkleLib_____________________________92639da7347c92610b919290918791899101611095565b60206040518083038186803b158015610ba957600080fd5b505af4158015610bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be19190611017565b610c2d5760405162461bcd60e51b815260206004820181905260248201527f5468652070726f6f6620636f756c64206e6f742062652076657269666965642e6044820152606401610318565b6001600160a01b03871660009081526001602081815260408084208c85529091528220805460ff19169091179055808080610c6a8c8b8b8b61053c565b935093509350935083610cbf5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67207363686564756c6500000000000000006044820152606401610318565b6040518060c001604052808481526020018481526020018281526020018b42610ce89190611062565b815260200183815260200182815250600360008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050610d768c8c610299565b505050505050505050505050565b80356001600160a01b0381168114610d9b57600080fd5b919050565b60008060408385031215610db357600080fd5b82359150610dc360208401610d84565b90509250929050565b60008060008060808587031215610de257600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215610e1057600080fd5b5035919050565b60008060408385031215610e2a57600080fd5b610e3383610d84565b946020939093013593505050565b600080600080600080600060e0888a031215610e5c57600080fd5b8735965060208801359550604088013594506060880135935060808801359250610e8860a08901610d84565b915060c0880135905092959891949750929550565b60008060408385031215610eb057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610eee57600080fd5b863595506020610eff818901610d84565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610f3157600080fd5b818a0191508a601f830112610f4557600080fd5b813581811115610f5757610f57610ebf565b8060051b604051601f19603f83011681018181108582111715610f7c57610f7c610ebf565b60405291825284820192508381018501918d831115610f9a57600080fd5b938501935b82851015610fb857843584529385019392850192610f9f565b8096505050505050509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015610ff357610ff3610fcb565b500390565b600081600019048311821515161561101257611012610fcb565b500290565b60006020828403121561102957600080fd5b8151801515811461103957600080fd5b9392505050565b60008261105d57634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561107557611075610fcb565b500190565b600060001982141561108e5761108e610fcb565b5060010190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b818110156110dc578451835293830193918301916001016110c0565b50909897505050505050505056fea264697066735822122015fb98eb60225174228df2d2ff0aa0c7eff12f384edd87349dea2de10a11468c64736f6c63430008090033",
  "bytecodeSha1": "fcbfd953caa1cc436f5e2a4a73972f1270b4059b",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.9+commit.e5eed63a"
  },
  "contractName": "MerkleResistor",
  "coverageMap": {
    "branches": {
      "1": {},
      "2": {
        "MerkleResistor.addMerkleTree": {
          "36": [
            5570,
            5586,
            true
          ],
          "37": [
            5626,
            5649,
            true
          ]
        },
        "MerkleResistor.depositTokens": {
          "38": [
            7814,
            7892,
            true
          ]
        },
        "MerkleResistor.initialize": {
          "39": [
            9171,
            9196,
            true
          ],
          "40": [
            9291,
            9327,
            true
          ],
          "41": [
            9703,
            9743,
            true
          ],
          "42": [
            10099,
            10104,
            true
          ]
        },
        "MerkleResistor.verifyVestingSchedule": {
          "32": [
            15030,
            15050,
            false
          ],
          "33": [
            15355,
            15384,
            true
          ],
          "34": [
            15388,
            15417,
            false
          ],
          "35": [
            15506,
            15536,
            false
          ]
        },
        "MerkleResistor.withdraw": {
          "29": [
            11532,
            11567,
            true
          ],
          "30": [
            11993,
            12027,
            false
          ],
          "31": [
            13630,
            13696,
            true
          ]
        }
      },
      "4": {}
    },
    "statements": {
      "1": {},
      "2": {
        "MerkleResistor.addMerkleTree": {
          "14": [
            5562,
            5608
          ],
          "15": [
            5618,
            5693
          ],
          "16": [
            5760,
            6033
          ],
          "17": [
            6309,
            6346
          ],
          "18": [
            6356,
            6419
          ]
        },
        "MerkleResistor.depositTokens": {
          "19": [
            7031,
            7063
          ],
          "20": [
            7806,
            7918
          ],
          "21": [
            7928,
            7991
          ]
        },
        "MerkleResistor.initialize": {
          "22": [
            9163,
            9237
          ],
          "23": [
            9283,
            9351
          ],
          "24": [
            9695,
            9780
          ],
          "25": [
            9878,
            9920
          ],
          "26": [
            10091,
            10133
          ],
          "27": [
            10327,
            10865
          ],
          "28": [
            10875,
            10907
          ]
        },
        "MerkleResistor.verifyVestingSchedule": {
          "9": [
            15066,
            15089
          ],
          "10": [
            15433,
            15456
          ],
          "11": [
            15709,
            15738
          ],
          "12": [
            16703,
            16795
          ],
          "13": [
            17620,
            17672
          ]
        },
        "MerkleResistor.withdraw": {
          "0": [
            11524,
            11611
          ],
          "1": [
            11769,
            11832
          ],
          "2": [
            12043,
            12083
          ],
          "3": [
            12261,
            12352
          ],
          "4": [
            12642,
            12683
          ],
          "5": [
            12875,
            12919
          ],
          "6": [
            13054,
            13092
          ],
          "7": [
            13622,
            13722
          ],
          "8": [
            13732,
            13820
          ]
        }
      },
      "4": {}
    }
  },
  "dependencies": [
    "IERC20",
    "MerkleLib"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061009d5760003560e01c8063aaf5eb6811610066578063aaf5eb68146101db578063c26cb54f146101e5578063d71383ed14610260578063f16ad51e14610273578063f287ad041461028657600080fd5b8062f714ce146100a2578063390b7c66146100b75780636fb6ec41146100d357806385d88cb11461010857806386bb82491461019d575b600080fd5b6100b56100b0366004610da0565b610299565b005b6100c060005481565b6040519081526020015b60405180910390f35b6100e66100e1366004610dcc565b61053c565b60408051941515855260208501939093529183015260608201526080016100ca565b61015f610116366004610dfe565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006909501549395949293919290916001600160a01b039091169087565b60408051978852602088019690965294860193909352606085019190915260808401526001600160a01b031660a083015260c082015260e0016100ca565b6101cb6101ab366004610e17565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ca565b6100c0620f424081565b6102336101f3366004610e17565b6003602081815260009384526040808520909152918352912080546001820154600283015493830154600484015460059094015492949193919290919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100ca565b6100b561026e366004610e41565b6106e3565b6100b5610281366004610e9d565b6108a7565b6100b5610294366004610ed5565b6109ea565b6001600160a01b038116600090815260016020908152604080832085845290915290205460ff166103215760405162461bcd60e51b815260206004820152602760248201527f596f75206d75737420696e697469616c697a6520796f7572206163636f756e74604482015266103334b939ba1760c91b60648201526084015b60405180910390fd5b6001600160a01b0381166000908152600360209081526040808320858452909152902060018101546103955760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f696e73206c65667420746f207769746864726177000000000000006044820152606401610318565b6000816003015442106103ad575060018101546103ce565b600482015460058301546103c19042610fe1565b6103cb9190610ff8565b90505b6000848152600260205260408120600184018054919284926103f1908490610fe1565b9091555050426005840155600681018054839190600090610413908490610fe1565b9091555050600581015460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561046857600080fd5b505af115801561047c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a09190611017565b6104e45760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b836001600160a01b0316857f1680e4cfe90468085407ef2b599dbe94b0aa30ff9f180f0e41d22eb71c87287284866001015460405161052d929190918252602082015260400190565b60405180910390a35050505050565b60008060008060005488111561055d575060009250829150819050806106d8565b600088815260026020818152604092839020835160e0810185528154815260018201549281019290925291820154928101929092526003810154606083018190526004820154608084015260058201546001600160a01b031660a084015260069091015460c08301528811806105d65750806040015188105b156105ef576000806000809450945094509450506106d8565b60008160600151891415610604575085610675565b60008260400151836060015161061a9190610fe1565b620f42406106288b8b610fe1565b6106329190610ff8565b61063c9190611040565b905088620f424084604001518c6106539190610fe1565b61065d9084610ff8565b6106679190611040565b6106719190611062565b9150505b60006106828a6064610ff8565b6080840151610692906064610fe1565b61069c9084610ff8565b6106a69190611040565b905060006106b48284611040565b6106be8c42611062565b6106c89190610fe1565b6001985092965090945090925050505b945094509450949050565b606483106107275760405162461bcd60e51b81526020600482015260116024820152700706374557046726f6e74203e3d2031303607c1b6044820152606401610318565b8385106107865760405162461bcd60e51b815260206004820152602760248201527f6d696e456e6454696d65206d757374206265206c657373207468616e206d6178604482015266456e6454696d6560c81b6064820152608401610318565b6040518060e00160405280888152602001878152602001868152602001858152602001848152602001836001600160a01b0316815260200160008152506002600080600081546107d59061107a565b918290555081526020808201929092526040908101600090812084518155928401516001840155908301516002830155606083015160038301556080830151600483015560a08301516005830180546001600160a01b0319166001600160a01b0390921691909117905560c0909201516006909101555461085690826108a7565b60005460408051898152602081018990526001600160a01b03851692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a350505050505050565b6000828152600260205260408120600681018054919284926108ca908490611062565b909155505060058101546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561092357600080fd5b505af1158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b9190611017565b61099f5760405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b60058101546040518381526001600160a01b039091169084907fb162210da7d23d82c18cff5af46d3562661d26b42a6848fa28d64a6bdc70386a9060200160405180910390a3505050565b336001600160a01b03861614610a4e5760405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616044820152636e63686560e01b6064820152608401610318565b6001600160a01b038516600090815260016020908152604080832089845290915290205460ff1615610ab85760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610318565b604080516001600160a01b03871660208201529081018490526060810183905260009060800160408051601f19818403018152828252805160209182012060008b815260028084529084902060e0860185528054808752600182015494870194909452908101548585015260038101546060860152600480820154608087015260058201546001600160a01b031660a087015260069091015460c08601529251632769cd1f60e21b815290945073__$61dd25696c02d5bd2863c8d2c1a2324a87$__92639da7347c92610b919290918791899101611095565b60206040518083038186803b158015610ba957600080fd5b505af4158015610bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be19190611017565b610c2d5760405162461bcd60e51b815260206004820181905260248201527f5468652070726f6f6620636f756c64206e6f742062652076657269666965642e6044820152606401610318565b6001600160a01b03871660009081526001602081815260408084208c85529091528220805460ff19169091179055808080610c6a8c8b8b8b61053c565b935093509350935083610cbf5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67207363686564756c6500000000000000006044820152606401610318565b6040518060c001604052808481526020018481526020018281526020018b42610ce89190611062565b815260200183815260200182815250600360008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050610d768c8c610299565b505050505050505050505050565b80356001600160a01b0381168114610d9b57600080fd5b919050565b60008060408385031215610db357600080fd5b82359150610dc360208401610d84565b90509250929050565b60008060008060808587031215610de257600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215610e1057600080fd5b5035919050565b60008060408385031215610e2a57600080fd5b610e3383610d84565b946020939093013593505050565b600080600080600080600060e0888a031215610e5c57600080fd5b8735965060208801359550604088013594506060880135935060808801359250610e8860a08901610d84565b915060c0880135905092959891949750929550565b60008060408385031215610eb057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610eee57600080fd5b863595506020610eff818901610d84565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610f3157600080fd5b818a0191508a601f830112610f4557600080fd5b813581811115610f5757610f57610ebf565b8060051b604051601f19603f83011681018181108582111715610f7c57610f7c610ebf565b60405291825284820192508381018501918d831115610f9a57600080fd5b938501935b82851015610fb857843584529385019392850192610f9f565b8096505050505050509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015610ff357610ff3610fcb565b500390565b600081600019048311821515161561101257611012610fcb565b500290565b60006020828403121561102957600080fd5b8151801515811461103957600080fd5b9392505050565b60008261105d57634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561107557611075610fcb565b500190565b600060001982141561108e5761108e610fcb565b5060010190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b818110156110dc578451835293830193918301916001016110c0565b50909897505050505050505056fea264697066735822122015fb98eb60225174228df2d2ff0aa0c7eff12f384edd87349dea2de10a11468c64736f6c63430008090033",
  "deployedSourceMap": "1453:16229:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11344:2483;;;;;;:::i;:::-;;:::i;:::-;;1556:24;;;;;;;;;597:25:5;;;585:2;570:18;1556:24:2;;;;;;;;14742:2937;;;;;;:::i;:::-;;:::i;:::-;;;;1273:14:5;;1266:22;1248:41;;1320:2;1305:18;;1298:34;;;;1348:18;;;1341:34;1406:2;1391:18;;1384:34;1235:3;1220:19;14742:2937:2;1023:401:5;3556:47:2;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3556:47:2;;;;;;;;;;1929:25:5;;;1985:2;1970:18;;1963:34;;;;2013:18;;;2006:34;;;;2071:2;2056:18;;2049:34;;;;2114:3;2099:19;;2092:35;-1:-1:-1;;;;;2164:32:5;2184:3;2143:19;;2136:61;2228:3;2213:19;;2206:35;1916:3;1901:19;3556:47:2;1614:633:5;3396:62:2;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2676:14:5;;2669:22;2651:41;;2639:2;2624:18;3396:62:2;2511:187:5;3807:40:2;;3840:7;3807:40;;3672:62;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2990:25:5;;;3046:2;3031:18;;3024:34;;;;3074:18;;;3067:34;;;;3132:2;3117:18;;3110:34;3175:3;3160:19;;3153:35;3219:3;3204:19;;3197:35;2977:3;2962:19;3672:62:2;2703:535:5;5351:1075:2;;;;;;:::i;:::-;;:::i;6801:1197::-;;;;;;:::i;:::-;;:::i;8942:1972::-;;;;;;:::i;:::-;;:::i;11344:2483::-;-1:-1:-1;;;;;11532:24:2;;;;;;:11;:24;;;;;;;;:35;;;;;;;;;;;11524:87;;;;-1:-1:-1;;;11524:87:2;;5902:2:5;11524:87:2;;;5884:21:5;5941:2;5921:18;;;5914:30;5980:34;5960:18;;;5953:62;-1:-1:-1;;;6031:18:5;;;6024:37;6078:19;;11524:87:2;;;;;;;;;-1:-1:-1;;;;;11688:21:2;;11662:23;11688:21;;;:8;:21;;;;;;;;:32;;;;;;;;11777:20;;;;11769:63;;;;-1:-1:-1;;;11769:63:2;;6310:2:5;11769:63:2;;;6292:21:5;6349:2;6329:18;;;6322:30;6388:27;6368:18;;;6361:55;6433:18;;11769:63:2;6108:349:5;11769:63:2;11842:22;12012:7;:15;;;11993;:34;11989:374;;-1:-1:-1;12063:20:2;;;;11989:374;;;12330:22;;;;12300:26;;;;12282:44;;:15;:44;:::i;:::-;12281:71;;;;:::i;:::-;12261:91;;11989:374;12395:23;12421:22;;;:11;:22;;;;;12642:20;;;:41;;12421:22;;12666:17;;12642:41;;12666:17;;12642:41;:::i;:::-;;;;-1:-1:-1;;12904:15:2;12875:26;;;:44;13054:17;;;:38;;13075:17;;13054;;;:38;;13075:17;;13054:38;:::i;:::-;;;;-1:-1:-1;;13637:17:2;;;;13630:66;;-1:-1:-1;;;13630:66:2;;-1:-1:-1;;;;;7089:32:5;;;13630:66:2;;;7071:51:5;7138:18;;;7131:34;;;13637:17:2;;;;13630:34;;7044:18:5;;13630:66:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13622:100;;;;-1:-1:-1;;;13622:100:2;;7660:2:5;13622:100:2;;;7642:21:5;7699:2;7679:18;;;7672:30;-1:-1:-1;;;7718:18:5;;;7711:51;7779:18;;13622:100:2;7458:345:5;13622:100:2;13767:11;-1:-1:-1;;;;;13737:83:2;13756:9;13737:83;13780:17;13799:7;:20;;;13737:83;;;;;;7982:25:5;;;8038:2;8023:18;;8016:34;7970:2;7955:18;;7808:248;13737:83:2;;;;;;;;11406:2421;;;11344:2483;;:::o;14742:2937::-;14874:4;14880;14886;14892;15042:8;;15030:9;:20;15026:74;;;-1:-1:-1;15074:5:2;;-1:-1:-1;15074:5:2;;-1:-1:-1;15074:5:2;;-1:-1:-1;15074:5:2;15066:23;;15026:74;15205:22;15230;;;:11;:22;;;;;;;;;15205:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;15205:47:2;;;;;;;;;;;;;;15355:29;;;:62;;;15402:4;:15;;;15388:11;:29;15355:62;15351:116;;;15441:5;15448:1;15451;15454;15433:23;;;;;;;;;;;15351:116;15477:15;15521:4;:15;;;15506:11;:30;15502:1304;;;-1:-1:-1;15722:16:2;15502:1304;;;16413:17;16504:4;:15;;;16486:4;:15;;;:33;;;;:::i;:::-;3840:7;16434:35;16453:16;16434;:35;:::i;:::-;16433:49;;;;:::i;:::-;:87;;;;:::i;:::-;16413:107;;16779:16;3840:7;16747:4;:15;;;16733:11;:29;;;;:::i;:::-;16717:46;;:12;:46;:::i;:::-;:58;;;;:::i;:::-;16716:79;;;;:::i;:::-;16703:92;;15755:1051;15502:1304;17267:19;17337:17;:11;17351:3;17337:17;:::i;:::-;17316:15;;;;17304:27;;17309:3;17304:27;:::i;:::-;17290:42;;:10;:42;:::i;:::-;17289:66;;;;:::i;:::-;17267:88;-1:-1:-1;17531:14:2;17581:27;17267:88;17581:10;:27;:::i;:::-;17548:29;17566:11;17548:15;:29;:::i;:::-;:61;;;;:::i;:::-;17628:4;;-1:-1:-1;17634:10:2;;-1:-1:-1;17646:14:2;;-1:-1:-1;17531:78:2;;-1:-1:-1;;;14742:2937:2;;;;;;;;;;:::o;5351:1075::-;5583:3;5570:10;:16;5562:46;;;;-1:-1:-1;;;5562:46:2;;8618:2:5;5562:46:2;;;8600:21:5;8657:2;8637:18;;;8630:30;-1:-1:-1;;;8676:18:5;;;8669:47;8733:18;;5562:46:2;8416:341:5;5562:46:2;5639:10;5626;:23;5618:75;;;;-1:-1:-1;;;5618:75:2;;8964:2:5;5618:75:2;;;8946:21:5;9003:2;8983:18;;;8976:30;9042:34;9022:18;;;9015:62;-1:-1:-1;;;9093:18:5;;;9086:37;9140:19;;5618:75:2;8762:403:5;5618:75:2;5786:247;;;;;;;;5810:7;5786:247;;;;5831:8;5786:247;;;;5853:10;5786:247;;;;5877:10;5786:247;;;;5901:10;5786:247;;;;5925:12;-1:-1:-1;;;;;5786:247:2;;;;;5951:1;5786:247;;;5760:11;:23;5774:8;;5772:10;;;;;:::i;:::-;;;;;-1:-1:-1;5760:23:2;;;;;;;;;;;;;;-1:-1:-1;5760:23:2;;;:273;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;5760:273:2;-1:-1:-1;;;;;5760:273:2;;;;;;;;;;;;;;;;;;;6323:8;6309:37;;6333:12;6309:13;:37::i;:::-;6377:8;;6361:58;;;7982:25:5;;;8038:2;8023:18;;8016:34;;;-1:-1:-1;;;;;6361:58:2;;;6377:8;6361:58;;7955:18:5;6361:58:2;;;;;;;5351:1075;;;;;;;:::o;6801:1197::-;6904:29;6936:22;;;:11;:22;;;;;7031:23;;;:32;;6936:22;;7058:5;;7031:32;;7058:5;;7031:32;:::i;:::-;;;;-1:-1:-1;;7821:23:2;;;;7814:78;;-1:-1:-1;;;7814:78:2;;7859:10;7814:78;;;9803:34:5;7879:4:2;9853:18:5;;;9846:43;9905:18;;;9898:34;;;-1:-1:-1;;;;;7821:23:2;;;;7814:44;;9738:18:5;;7814:78:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7806:112;;;;-1:-1:-1;;;7806:112:2;;10145:2:5;7806:112:2;;;10127:21:5;10184:2;10164:18;;;10157:30;-1:-1:-1;;;10203:18:5;;;10196:51;10264:18;;7806:112:2;9943:345:5;7806:112:2;7960:23;;;;7933:58;;597:25:5;;;-1:-1:-1;;;;;7960:23:2;;;;7949:9;;7933:58;;585:2:5;570:18;7933:58:2;;;;;;;6859:1139;6801:1197;;:::o;8942:1972::-;9171:10;-1:-1:-1;;;;;9171:25:2;;;9163:74;;;;-1:-1:-1;;;9163:74:2;;10495:2:5;9163:74:2;;;10477:21:5;10534:2;10514:18;;;10507:30;10573:34;10553:18;;;10546:62;-1:-1:-1;;;10624:18:5;;;10617:34;10668:19;;9163:74:2;10293:400:5;9163:74:2;-1:-1:-1;;;;;9292:24:2;;;;;;:11;:24;;;;;;;;:35;;;;;;;;;;;9291:36;9283:68;;;;-1:-1:-1;;;9283:68:2;;10900:2:5;9283:68:2;;;10882:21:5;10939:2;10919:18;;;10912:30;-1:-1:-1;;;10958:18:5;;;10951:49;11017:18;;9283:68:2;10698:343:5;9283:68:2;9449:59;;;-1:-1:-1;;;;;11266:32:5;;9449:59:2;;;11248:51:5;11315:18;;;11308:34;;;11358:18;;;11351:34;;;9424:12:2;;11221:18:5;;9449:59:2;;;-1:-1:-1;;9449:59:2;;;;;;;;;9439:70;;9449:59;9439:70;;;;9560:22;9585;;;:11;:22;;;;;;;9560:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9560:47:2;;;;;;;;;;;;;;9703:40;;-1:-1:-1;;;9703:40:2;;9439:70;;-1:-1:-1;9703:27:2;;;;:40;;9560:47;;9439:70;;9737:5;;9703:40;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9695:85;;;;-1:-1:-1;;;9695:85:2;;12386:2:5;9695:85:2;;;12368:21:5;;;12405:18;;;12398:30;12464:34;12444:18;;;12437:62;12516:18;;9695:85:2;12184:356:5;9695:85:2;-1:-1:-1;;;;;9878:24:2;;;;;;9916:4;9878:24;;;;;;;;:35;;;;;;;;:42;;-1:-1:-1;;9878:42:2;;;;;;:24;;;10000:81;9903:9;10033:11;10046:16;10064;10000:21;:81::i;:::-;9931:150;;;;;;;;10099:5;10091:42;;;;-1:-1:-1;;;10091:42:2;;12747:2:5;10091:42:2;;;12729:21:5;12786:2;12766:18;;;12759:30;12825:26;12805:18;;;12798:54;12869:18;;10091:42:2;12545:348:5;10091:42:2;10362:503;;;;;;;;10383:10;10362:503;;;;10459:10;10362:503;;;;10505:9;10362:503;;;;10611:11;10593:15;:29;;;;:::i;:::-;10362:503;;;;10680:14;10362:503;;;;10748:9;10362:503;;;10327:8;:21;10336:11;-1:-1:-1;;;;;10327:21:2;-1:-1:-1;;;;;10327:21:2;;;;;;;;;;;;:32;10349:9;10327:32;;;;;;;;;;;:538;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10875:32;10884:9;10895:11;10875:8;:32::i;:::-;9096:1818;;;;;;8942:1972;;;;;;:::o;14:173:5:-;82:20;;-1:-1:-1;;;;;131:31:5;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;373:9;360:23;350:33;;402:38;436:2;425:9;421:18;402:38;:::i;:::-;392:48;;192:254;;;;;:::o;633:385::-;719:6;727;735;743;796:3;784:9;775:7;771:23;767:33;764:53;;;813:1;810;803:12;764:53;-1:-1:-1;;836:23:5;;;906:2;891:18;;878:32;;-1:-1:-1;957:2:5;942:18;;929:32;;1008:2;993:18;980:32;;-1:-1:-1;633:385:5;-1:-1:-1;633:385:5:o;1429:180::-;1488:6;1541:2;1529:9;1520:7;1516:23;1512:32;1509:52;;;1557:1;1554;1547:12;1509:52;-1:-1:-1;1580:23:5;;1429:180;-1:-1:-1;1429:180:5:o;2252:254::-;2320:6;2328;2381:2;2369:9;2360:7;2356:23;2352:32;2349:52;;;2397:1;2394;2387:12;2349:52;2420:29;2439:9;2420:29;:::i;:::-;2410:39;2496:2;2481:18;;;;2468:32;;-1:-1:-1;;;2252:254:5:o;3243:598::-;3356:6;3364;3372;3380;3388;3396;3404;3457:3;3445:9;3436:7;3432:23;3428:33;3425:53;;;3474:1;3471;3464:12;3425:53;3510:9;3497:23;3487:33;;3567:2;3556:9;3552:18;3539:32;3529:42;;3618:2;3607:9;3603:18;3590:32;3580:42;;3669:2;3658:9;3654:18;3641:32;3631:42;;3720:3;3709:9;3705:19;3692:33;3682:43;;3744:39;3778:3;3767:9;3763:19;3744:39;:::i;:::-;3734:49;;3830:3;3819:9;3815:19;3802:33;3792:43;;3243:598;;;;;;;;;;:::o;3846:248::-;3914:6;3922;3975:2;3963:9;3954:7;3950:23;3946:32;3943:52;;;3991:1;3988;3981:12;3943:52;-1:-1:-1;;4014:23:5;;;4084:2;4069:18;;;4056:32;;-1:-1:-1;3846:248:5:o;4099:127::-;4160:10;4155:3;4151:20;4148:1;4141:31;4191:4;4188:1;4181:15;4215:4;4212:1;4205:15;4231:1464;4360:6;4368;4376;4384;4392;4400;4453:3;4441:9;4432:7;4428:23;4424:33;4421:53;;;4470:1;4467;4460:12;4421:53;4506:9;4493:23;4483:33;;4535:2;4556:38;4590:2;4579:9;4575:18;4556:38;:::i;:::-;4546:48;;4641:2;4630:9;4626:18;4613:32;4603:42;;4692:2;4681:9;4677:18;4664:32;4654:42;;4743:3;4732:9;4728:19;4715:33;4705:43;;4799:3;4788:9;4784:19;4771:33;4823:18;4864:2;4856:6;4853:14;4850:34;;;4880:1;4877;4870:12;4850:34;4918:6;4907:9;4903:22;4893:32;;4963:7;4956:4;4952:2;4948:13;4944:27;4934:55;;4985:1;4982;4975:12;4934:55;5021:2;5008:16;5043:2;5039;5036:10;5033:36;;;5049:18;;:::i;:::-;5095:2;5092:1;5088:10;5127:2;5121:9;5190:2;5186:7;5181:2;5177;5173:11;5169:25;5161:6;5157:38;5245:6;5233:10;5230:22;5225:2;5213:10;5210:18;5207:46;5204:72;;;5256:18;;:::i;:::-;5292:2;5285:22;5342:18;;;5376:15;;;;-1:-1:-1;5418:11:5;;;5414:20;;;5446:19;;;5443:39;;;5478:1;5475;5468:12;5443:39;5502:11;;;;5522:142;5538:6;5533:3;5530:15;5522:142;;;5604:17;;5592:30;;5555:12;;;;5642;;;;5522:142;;;5683:6;5673:16;;;;;;;;4231:1464;;;;;;;;:::o;6462:127::-;6523:10;6518:3;6514:20;6511:1;6504:31;6554:4;6551:1;6544:15;6578:4;6575:1;6568:15;6594:125;6634:4;6662:1;6659;6656:8;6653:34;;;6667:18;;:::i;:::-;-1:-1:-1;6704:9:5;;6594:125::o;6724:168::-;6764:7;6830:1;6826;6822:6;6818:14;6815:1;6812:21;6807:1;6800:9;6793:17;6789:45;6786:71;;;6837:18;;:::i;:::-;-1:-1:-1;6877:9:5;;6724:168::o;7176:277::-;7243:6;7296:2;7284:9;7275:7;7271:23;7267:32;7264:52;;;7312:1;7309;7302:12;7264:52;7344:9;7338:16;7397:5;7390:13;7383:21;7376:5;7373:32;7363:60;;7419:1;7416;7409:12;7363:60;7442:5;7176:277;-1:-1:-1;;;7176:277:5:o;8061:217::-;8101:1;8127;8117:132;;8171:10;8166:3;8162:20;8159:1;8152:31;8206:4;8203:1;8196:15;8234:4;8231:1;8224:15;8117:132;-1:-1:-1;8263:9:5;;8061:217::o;8283:128::-;8323:3;8354:1;8350:6;8347:1;8344:13;8341:39;;;8360:18;;:::i;:::-;-1:-1:-1;8396:9:5;;8283:128::o;9170:135::-;9209:3;-1:-1:-1;;9230:17:5;;9227:43;;;9250:18;;:::i;:::-;-1:-1:-1;9297:1:5;9286:13;;9170:135::o;11396:783::-;11602:4;11650:2;11639:9;11635:18;11680:6;11669:9;11662:25;11706:2;11744:6;11739:2;11728:9;11724:18;11717:34;11787:2;11782;11771:9;11767:18;11760:30;11810:6;11845;11839:13;11876:6;11868;11861:22;11914:3;11903:9;11899:19;11892:26;;11953:2;11945:6;11941:15;11927:29;;11974:1;11984:169;11998:6;11995:1;11992:13;11984:169;;;12059:13;;12047:26;;12128:15;;;;12093:12;;;;12020:1;12013:9;11984:169;;;-1:-1:-1;12170:3:5;;11396:783;-1:-1:-1;;;;;;;;11396:783:5:o",
  "language": "Solidity",
  "natspec": {
    "author": "metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki",
    "details": "The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof.User chosen vesting schedules means the contract has parameters that define a line segment thatdescribes a range of vesting-schedule parameters within which the user can negotiate tradeoffsMore tokens => longer vesting time && slower drip, when used correctly, but the contract does not enforcecoherence of vesting schedules, so someone could make a range of vesting schedules in whichmore tokens => longer vesting time && faster drip, but this is a user error, also we wouldn't catch it untilafter the tree has been initialized and funded, so we just let them do it.The choice of which parameters to initialize at tree-creation-time versus at schedule-initialization-time issomewhat arbitrary, but we choose to have min/max end times at tree scope and min/max total payments at first-withdrawal-time",
    "kind": "dev",
    "methods": {
      "addMerkleTree(bytes32,bytes32,uint256,uint256,uint256,address,uint256)": {
        "details": "Anyone may call this function, therefore we must make sure trees cannot affect each otherRoot hash should be built from (destination, minTotalPayments, maxTotalPayments)",
        "notice": "Add a new merkle tree to the contract, creating a new merkle-vesting-schedule-range",
        "params": {
          "ipfsHash": "the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable",
          "maxEndTime": "a continuous range of possible end times are specified, this is the maximum",
          "minEndTime": "a continuous range of possible end times are specified, this is the minimum",
          "newRoot": "root hash of merkle tree representing vesting schedule ranges",
          "pctUpFront": "the percent of tokens user will get at initialization time (note this implies no lock time)",
          "tokenAddress": "the address of the token contract that is being distributed",
          "tokenBalance": "the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
        }
      },
      "depositTokens(uint256,uint256)": {
        "details": "Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious",
        "notice": "Add funds to an existing merkle-tree",
        "params": {
          "treeIndex": "index into array-like map of merkleTrees",
          "value": "the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
        }
      },
      "initialize(uint256,address,uint256,uint256,uint256,bytes32[])": {
        "details": "Only the recipient can initialize their own schedule here, because a meaningful choice is madeIf the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree stats",
        "notice": "Called once per recipient of a vesting schedule to initialize the vesting schedule and fix the parameters",
        "params": {
          "destination": "address that will receive tokens",
          "maxTotalPayments": "the maximum amount of tokens they will receive, if they choose maxEndTime as vestingTime",
          "minTotalPayments": "the minimum amount of tokens they will receive, if they choose minEndTime as vestingTime",
          "proof": "array of hashes linking leaf hash of (destination, minTotalPayments, maxTotalPayments) to root",
          "treeIndex": "index into array-like map of merkleTrees",
          "vestingTime": "the actual length of the vesting schedule, chosen by the user"
        }
      },
      "verifyVestingSchedule(uint256,uint256,uint256,uint256)": {
        "details": "Anyone may call this to check, but it also returns values used in the initialization of vesting schedules",
        "notice": "Determine if the proposed vesting schedule is legit",
        "params": {
          "maxTotalPayments": "pre-committed (in the root hash) maximum of possible totalCoins",
          "minTotalPayments": "pre-committed (in the root hash) minimum of possible totalCoins",
          "treeIndex": "index into array-like map of merkleTrees, which tree are we talking about?",
          "vestingTime": "user chosen length of vesting schedule"
        },
        "returns": {
          "_0": "valid is the proposed vesting-schedule valid",
          "_1": "totalCoins amount of coins allocated in the vesting schedule",
          "_2": "coinsPerSecond amount of coins released every second, in the proposed vesting schedule",
          "_3": "startTime start time of vesting schedule implied by supplied parameters, will always be <= block.timestamp"
        }
      },
      "withdraw(uint256,address)": {
        "details": "Anyone may call this function for anyone else, funds go to destination regardless, it's just a question ofwho provides the proof and pays the gas, msg.sender is not used in this function",
        "notice": "Move unlocked funds to the destination",
        "params": {
          "destination": "recipient of tokens",
          "treeIndex": "index into array-like map of merkleTrees, which tree should we apply the proof to?"
        }
      }
    },
    "notice": "This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.",
    "title": "A factory pattern for user-chosen vesting-schedules, that is, a time release schedule for tokens, using merkle proofs to scale",
    "version": 1
  },
  "offset": [
    1453,
    17682
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAAF5EB68 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xAAF5EB68 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0xC26CB54F EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0xD71383ED EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0xF16AD51E EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0xF287AD04 EQ PUSH2 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xF714CE EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x390B7C66 EQ PUSH2 0xB7 JUMPI DUP1 PUSH4 0x6FB6EC41 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x85D88CB1 EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x86BB8249 EQ PUSH2 0x19D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5 PUSH2 0xB0 CALLDATASIZE PUSH1 0x4 PUSH2 0xDA0 JUMP JUMPDEST PUSH2 0x299 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC0 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH2 0xE1 CALLDATASIZE PUSH1 0x4 PUSH2 0xDCC JUMP JUMPDEST PUSH2 0x53C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 ISZERO ISZERO DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0x15F PUSH2 0x116 CALLDATASIZE PUSH1 0x4 PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 SWAP1 SWAP6 ADD SLOAD SWAP4 SWAP6 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP5 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0x1CB PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0xE17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0xC0 PUSH3 0xF4240 DUP2 JUMP JUMPDEST PUSH2 0x233 PUSH2 0x1F3 CALLDATASIZE PUSH1 0x4 PUSH2 0xE17 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD SWAP4 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP5 SWAP2 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x26E CALLDATASIZE PUSH1 0x4 PUSH2 0xE41 JUMP JUMPDEST PUSH2 0x6E3 JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x281 CALLDATASIZE PUSH1 0x4 PUSH2 0xE9D JUMP JUMPDEST PUSH2 0x8A7 JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x294 CALLDATASIZE PUSH1 0x4 PUSH2 0xED5 JUMP JUMPDEST PUSH2 0x9EA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x321 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75206D75737420696E697469616C697A6520796F7572206163636F756E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x103334B939BA17 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x395 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F20636F696E73206C65667420746F20776974686472617700000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x3AD JUMPI POP PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x3CE JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x5 DUP4 ADD SLOAD PUSH2 0x3C1 SWAP1 TIMESTAMP PUSH2 0xFE1 JUMP JUMPDEST PUSH2 0x3CB SWAP2 SWAP1 PUSH2 0xFF8 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP5 ADD DUP1 SLOAD SWAP2 SWAP3 DUP5 SWAP3 PUSH2 0x3F1 SWAP1 DUP5 SWAP1 PUSH2 0xFE1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP TIMESTAMP PUSH1 0x5 DUP5 ADD SSTORE PUSH1 0x6 DUP2 ADD DUP1 SLOAD DUP4 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x413 SWAP1 DUP5 SWAP1 PUSH2 0xFE1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x47C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A0 SWAP2 SWAP1 PUSH2 0x1017 JUMP JUMPDEST PUSH2 0x4E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x151BDAD95B881D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH32 0x1680E4CFE90468085407EF2B599DBE94B0AA30FF9F180F0E41D22EB71C872872 DUP5 DUP7 PUSH1 0x1 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x52D SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 SLOAD DUP9 GT ISZERO PUSH2 0x55D JUMPI POP PUSH1 0x0 SWAP3 POP DUP3 SWAP2 POP DUP2 SWAP1 POP DUP1 PUSH2 0x6D8 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0xE0 DUP2 ADD DUP6 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 SWAP1 SWAP2 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE DUP9 GT DUP1 PUSH2 0x5D6 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD DUP9 LT JUMPDEST ISZERO PUSH2 0x5EF JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP POP PUSH2 0x6D8 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 ADD MLOAD DUP10 EQ ISZERO PUSH2 0x604 JUMPI POP DUP6 PUSH2 0x675 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0x61A SWAP2 SWAP1 PUSH2 0xFE1 JUMP JUMPDEST PUSH3 0xF4240 PUSH2 0x628 DUP12 DUP12 PUSH2 0xFE1 JUMP JUMPDEST PUSH2 0x632 SWAP2 SWAP1 PUSH2 0xFF8 JUMP JUMPDEST PUSH2 0x63C SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST SWAP1 POP DUP9 PUSH3 0xF4240 DUP5 PUSH1 0x40 ADD MLOAD DUP13 PUSH2 0x653 SWAP2 SWAP1 PUSH2 0xFE1 JUMP JUMPDEST PUSH2 0x65D SWAP1 DUP5 PUSH2 0xFF8 JUMP JUMPDEST PUSH2 0x667 SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST PUSH2 0x671 SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST SWAP2 POP POP JUMPDEST PUSH1 0x0 PUSH2 0x682 DUP11 PUSH1 0x64 PUSH2 0xFF8 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x692 SWAP1 PUSH1 0x64 PUSH2 0xFE1 JUMP JUMPDEST PUSH2 0x69C SWAP1 DUP5 PUSH2 0xFF8 JUMP JUMPDEST PUSH2 0x6A6 SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6B4 DUP3 DUP5 PUSH2 0x1040 JUMP JUMPDEST PUSH2 0x6BE DUP13 TIMESTAMP PUSH2 0x1062 JUMP JUMPDEST PUSH2 0x6C8 SWAP2 SWAP1 PUSH2 0xFE1 JUMP JUMPDEST PUSH1 0x1 SWAP9 POP SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP1 SWAP3 POP POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x727 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x706374557046726F6E74203E3D2031303 PUSH1 0x7C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST DUP4 DUP6 LT PUSH2 0x786 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D696E456E6454696D65206D757374206265206C657373207468616E206D6178 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x456E6454696D65 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x7D5 SWAP1 PUSH2 0x107A JUMP JUMPDEST SWAP2 DUP3 SWAP1 SSTORE POP DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP5 MLOAD DUP2 SSTORE SWAP3 DUP5 ADD MLOAD PUSH1 0x1 DUP5 ADD SSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD SSTORE SLOAD PUSH2 0x856 SWAP1 DUP3 PUSH2 0x8A7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP3 SWAP2 PUSH32 0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x6 DUP2 ADD DUP1 SLOAD SWAP2 SWAP3 DUP5 SWAP3 PUSH2 0x8CA SWAP1 DUP5 SWAP1 PUSH2 0x1062 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x923 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x937 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x95B SWAP2 SWAP1 PUSH2 0x1017 JUMP JUMPDEST PUSH2 0x99F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x115490CC8C081D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP5 SWAP1 PUSH32 0xB162210DA7D23D82C18CFF5AF46D3562661D26B42A6848FA28D64A6BDC70386A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ PUSH2 0xA4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x43616E206F6E6C7920696E697469616C697A6520796F7572206F776E20747261 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x6E636865 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xAB8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x105B1C9958591E481A5B9A5D1A585B1A5E9959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x2 DUP1 DUP5 MSTORE SWAP1 DUP5 SWAP1 KECCAK256 PUSH1 0xE0 DUP7 ADD DUP6 MSTORE DUP1 SLOAD DUP1 DUP8 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP5 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 DUP2 ADD SLOAD DUP6 DUP6 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x4 DUP1 DUP3 ADD SLOAD PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0x6 SWAP1 SWAP2 ADD SLOAD PUSH1 0xC0 DUP7 ADD MSTORE SWAP3 MLOAD PUSH4 0x2769CD1F PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP5 POP PUSH20 0x0 SWAP3 PUSH4 0x9DA7347C SWAP3 PUSH2 0xB91 SWAP3 SWAP1 SWAP2 DUP8 SWAP2 DUP10 SWAP2 ADD PUSH2 0x1095 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xBBD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBE1 SWAP2 SWAP1 PUSH2 0x1017 JUMP JUMPDEST PUSH2 0xC2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652070726F6F6620636F756C64206E6F742062652076657269666965642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP13 DUP6 MSTORE SWAP1 SWAP2 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 DUP1 DUP1 PUSH2 0xC6A DUP13 DUP12 DUP12 DUP12 PUSH2 0x53C JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP4 PUSH2 0xCBF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642076657374696E67207363686564756C650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD DUP12 TIMESTAMP PUSH2 0xCE8 SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP PUSH1 0x3 PUSH1 0x0 DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP15 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE SWAP1 POP POP PUSH2 0xD76 DUP13 DUP13 PUSH2 0x299 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xDC3 PUSH1 0x20 DUP5 ADD PUSH2 0xD84 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xDE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE33 DUP4 PUSH2 0xD84 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xE5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH2 0xE88 PUSH1 0xA0 DUP10 ADD PUSH2 0xD84 JUMP JUMPDEST SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xEEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 PUSH2 0xEFF DUP2 DUP10 ADD PUSH2 0xD84 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP11 ADD SWAP2 POP DUP11 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xF45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xF57 JUMPI PUSH2 0xF57 PUSH2 0xEBF JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xF7C JUMPI PUSH2 0xF7C PUSH2 0xEBF JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP14 DUP4 GT ISZERO PUSH2 0xF9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xFB8 JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xF9F JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xFF3 JUMPI PUSH2 0xFF3 PUSH2 0xFCB JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1012 JUMPI PUSH2 0x1012 PUSH2 0xFCB JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1029 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1039 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x105D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1075 JUMPI PUSH2 0x1075 PUSH2 0xFCB JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x108E JUMPI PUSH2 0x108E PUSH2 0xFCB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP6 DUP4 MSTORE PUSH1 0x20 DUP6 DUP2 DUP6 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 POP DUP3 DUP8 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10DC JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x10C0 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO 0xFB SWAP9 0xEB PUSH1 0x22 MLOAD PUSH21 0x228DF2D2FF0AA0C7EFF12F384EDD87349DEA2DE10A GT CHAINID DUP13 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "6": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "7": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "8": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "12": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "REVERT",
      "path": "2"
    },
    "16": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "17": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "POP",
      "path": "2"
    },
    "18": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "21": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "LT",
      "path": "2"
    },
    "22": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9D"
    },
    "25": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "26": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "29": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "SHR",
      "path": "2"
    },
    "32": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "33": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xAAF5EB68"
    },
    "38": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "GT",
      "path": "2"
    },
    "39": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x66"
    },
    "42": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "43": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "44": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xAAF5EB68"
    },
    "49": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "EQ",
      "path": "2"
    },
    "50": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1DB"
    },
    "53": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "54": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "55": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xC26CB54F"
    },
    "60": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "EQ",
      "path": "2"
    },
    "61": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1E5"
    },
    "64": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "65": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "66": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xD71383ED"
    },
    "71": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "EQ",
      "path": "2"
    },
    "72": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x260"
    },
    "75": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "76": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "77": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xF16AD51E"
    },
    "82": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "EQ",
      "path": "2"
    },
    "83": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x273"
    },
    "86": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "87": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "88": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xF287AD04"
    },
    "93": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "EQ",
      "path": "2"
    },
    "94": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x286"
    },
    "97": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "98": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "100": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "101": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "REVERT",
      "path": "2"
    },
    "102": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "103": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "104": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0xF714CE"
    },
    "108": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "EQ",
      "path": "2"
    },
    "109": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA2"
    },
    "112": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "113": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "114": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x390B7C66"
    },
    "119": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "EQ",
      "path": "2"
    },
    "120": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB7"
    },
    "123": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "124": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "125": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x6FB6EC41"
    },
    "130": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "EQ",
      "path": "2"
    },
    "131": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD3"
    },
    "134": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "135": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "136": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x85D88CB1"
    },
    "141": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "EQ",
      "path": "2"
    },
    "142": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x108"
    },
    "145": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "146": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "147": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x86BB8249"
    },
    "152": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "EQ",
      "path": "2"
    },
    "153": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x19D"
    },
    "156": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "157": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "158": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "160": {
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "161": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1453,
        17682
      ],
      "op": "REVERT",
      "path": "2"
    },
    "162": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11344,
        13827
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "163": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11344,
        13827
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB5"
    },
    "166": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11344,
        13827
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB0"
    },
    "169": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11344,
        13827
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "170": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11344,
        13827
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "172": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11344,
        13827
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xDA0"
    },
    "175": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        11344,
        13827
      ],
      "op": "JUMP",
      "path": "2"
    },
    "176": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11344,
        13827
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "177": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11344,
        13827
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x299"
    },
    "180": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        11344,
        13827
      ],
      "op": "JUMP",
      "path": "2"
    },
    "181": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11344,
        13827
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "182": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11344,
        13827
      ],
      "op": "STOP",
      "path": "2"
    },
    "183": {
      "offset": [
        1556,
        1580
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "184": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC0"
    },
    "187": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "189": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "190": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "DUP2",
      "path": "2"
    },
    "191": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "JUMP",
      "path": "2"
    },
    "192": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "193": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "195": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "196": {
      "op": "SWAP1"
    },
    "197": {
      "op": "DUP2"
    },
    "198": {
      "op": "MSTORE"
    },
    "199": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "201": {
      "op": "ADD"
    },
    "202": {
      "offset": [
        1556,
        1580
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "203": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "205": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "206": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "DUP1",
      "path": "2"
    },
    "207": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "208": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "SUB",
      "path": "2"
    },
    "209": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "210": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        1556,
        1580
      ],
      "op": "RETURN",
      "path": "2"
    },
    "211": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "212": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE6"
    },
    "215": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE1"
    },
    "218": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "219": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "221": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xDCC"
    },
    "224": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        14742,
        17679
      ],
      "op": "JUMP",
      "path": "2"
    },
    "225": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "226": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x53C"
    },
    "229": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        14742,
        17679
      ],
      "op": "JUMP",
      "path": "2"
    },
    "230": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "231": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "233": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "DUP1",
      "path": "2"
    },
    "234": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "235": {
      "op": "SWAP5"
    },
    "236": {
      "op": "ISZERO"
    },
    "237": {
      "op": "ISZERO"
    },
    "238": {
      "op": "DUP6"
    },
    "239": {
      "op": "MSTORE"
    },
    "240": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "242": {
      "op": "DUP6"
    },
    "243": {
      "op": "ADD"
    },
    "244": {
      "op": "SWAP4"
    },
    "245": {
      "op": "SWAP1"
    },
    "246": {
      "op": "SWAP4"
    },
    "247": {
      "op": "MSTORE"
    },
    "248": {
      "op": "SWAP2"
    },
    "249": {
      "op": "DUP4"
    },
    "250": {
      "op": "ADD"
    },
    "251": {
      "op": "MSTORE"
    },
    "252": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "254": {
      "op": "DUP3"
    },
    "255": {
      "op": "ADD"
    },
    "256": {
      "op": "MSTORE"
    },
    "257": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "259": {
      "op": "ADD"
    },
    "260": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCA"
    },
    "263": {
      "op": "JUMP"
    },
    "264": {
      "offset": [
        3556,
        3603
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "265": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x15F"
    },
    "268": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x116"
    },
    "271": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "272": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "274": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xDFE"
    },
    "277": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        3556,
        3603
      ],
      "op": "JUMP",
      "path": "2"
    },
    "278": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "279": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "281": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "283": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "DUP2",
      "path": "2"
    },
    "284": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "285": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "286": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "288": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "289": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "DUP3",
      "path": "2"
    },
    "290": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "291": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "293": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "294": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "295": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "296": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "DUP1",
      "path": "2"
    },
    "297": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "298": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "300": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "DUP3",
      "path": "2"
    },
    "301": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "ADD",
      "path": "2"
    },
    "302": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "303": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "304": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "DUP3",
      "path": "2"
    },
    "305": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "ADD",
      "path": "2"
    },
    "306": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "307": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "309": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "DUP4",
      "path": "2"
    },
    "310": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "ADD",
      "path": "2"
    },
    "311": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "312": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "314": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "DUP5",
      "path": "2"
    },
    "315": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "ADD",
      "path": "2"
    },
    "316": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "317": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "319": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "DUP6",
      "path": "2"
    },
    "320": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "ADD",
      "path": "2"
    },
    "321": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "322": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "324": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "325": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "326": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "ADD",
      "path": "2"
    },
    "327": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "328": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "329": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "330": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "331": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "332": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "333": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "334": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "335": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "336": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "337": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "339": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "341": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "343": {
      "op": "SHL"
    },
    "344": {
      "op": "SUB"
    },
    "345": {
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "346": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "347": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "AND",
      "path": "2"
    },
    "348": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "349": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "DUP8",
      "path": "2"
    },
    "350": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "JUMP",
      "path": "2"
    },
    "351": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "352": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "354": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "DUP1",
      "path": "2"
    },
    "355": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3556,
        3603
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "356": {
      "op": "SWAP8"
    },
    "357": {
      "op": "DUP9"
    },
    "358": {
      "op": "MSTORE"
    },
    "359": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "361": {
      "op": "DUP9"
    },
    "362": {
      "op": "ADD"
    },
    "363": {
      "op": "SWAP7"
    },
    "364": {
      "op": "SWAP1"
    },
    "365": {
      "op": "SWAP7"
    },
    "366": {
      "op": "MSTORE"
    },
    "367": {
      "op": "SWAP5"
    },
    "368": {
      "op": "DUP7"
    },
    "369": {
      "op": "ADD"
    },
    "370": {
      "op": "SWAP4"
    },
    "371": {
      "op": "SWAP1"
    },
    "372": {
      "op": "SWAP4"
    },
    "373": {
      "op": "MSTORE"
    },
    "374": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "376": {
      "op": "DUP6"
    },
    "377": {
      "op": "ADD"
    },
    "378": {
      "op": "SWAP2"
    },
    "379": {
      "op": "SWAP1"
    },
    "380": {
      "op": "SWAP2"
    },
    "381": {
      "op": "MSTORE"
    },
    "382": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "384": {
      "op": "DUP5"
    },
    "385": {
      "op": "ADD"
    },
    "386": {
      "op": "MSTORE"
    },
    "387": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "389": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "391": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "393": {
      "op": "SHL"
    },
    "394": {
      "op": "SUB"
    },
    "395": {
      "op": "AND"
    },
    "396": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "398": {
      "op": "DUP4"
    },
    "399": {
      "op": "ADD"
    },
    "400": {
      "op": "MSTORE"
    },
    "401": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "403": {
      "op": "DUP3"
    },
    "404": {
      "op": "ADD"
    },
    "405": {
      "op": "MSTORE"
    },
    "406": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "408": {
      "op": "ADD"
    },
    "409": {
      "offset": [
        3556,
        3603
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCA"
    },
    "412": {
      "op": "JUMP"
    },
    "413": {
      "offset": [
        3396,
        3458
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "414": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1CB"
    },
    "417": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1AB"
    },
    "420": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "421": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "423": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE17"
    },
    "426": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        3396,
        3458
      ],
      "op": "JUMP",
      "path": "2"
    },
    "427": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "428": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "430": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "432": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "433": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "DUP2",
      "path": "2"
    },
    "434": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "435": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "437": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "438": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "DUP4",
      "path": "2"
    },
    "439": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "440": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "442": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "DUP1",
      "path": "2"
    },
    "443": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "DUP5",
      "path": "2"
    },
    "444": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "445": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "446": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "447": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "448": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "449": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "DUP3",
      "path": "2"
    },
    "450": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "451": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "452": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "453": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "454": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "456": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "AND",
      "path": "2"
    },
    "457": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "DUP2",
      "path": "2"
    },
    "458": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "JUMP",
      "path": "2"
    },
    "459": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "460": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "462": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3396,
        3458
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "463": {
      "op": "SWAP1"
    },
    "464": {
      "op": "ISZERO"
    },
    "465": {
      "op": "ISZERO"
    },
    "466": {
      "op": "DUP2"
    },
    "467": {
      "op": "MSTORE"
    },
    "468": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "470": {
      "op": "ADD"
    },
    "471": {
      "offset": [
        3396,
        3458
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCA"
    },
    "474": {
      "op": "JUMP"
    },
    "475": {
      "offset": [
        3807,
        3847
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "476": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3807,
        3847
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC0"
    },
    "479": {
      "offset": [
        3840,
        3847
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0xF4240"
    },
    "483": {
      "offset": [
        3807,
        3847
      ],
      "op": "DUP2",
      "path": "2"
    },
    "484": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3807,
        3847
      ],
      "op": "JUMP",
      "path": "2"
    },
    "485": {
      "offset": [
        3672,
        3734
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "486": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x233"
    },
    "489": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1F3"
    },
    "492": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "493": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "495": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE17"
    },
    "498": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        3672,
        3734
      ],
      "op": "JUMP",
      "path": "2"
    },
    "499": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "500": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "502": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "504": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "DUP2",
      "path": "2"
    },
    "505": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "DUP2",
      "path": "2"
    },
    "506": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "507": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "509": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "510": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "DUP5",
      "path": "2"
    },
    "511": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "512": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "514": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "DUP1",
      "path": "2"
    },
    "515": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "DUP6",
      "path": "2"
    },
    "516": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "517": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "518": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "519": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "520": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "521": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "DUP4",
      "path": "2"
    },
    "522": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "523": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "524": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "525": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "DUP1",
      "path": "2"
    },
    "526": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "527": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "529": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "DUP3",
      "path": "2"
    },
    "530": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "ADD",
      "path": "2"
    },
    "531": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "532": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "534": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "DUP4",
      "path": "2"
    },
    "535": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "ADD",
      "path": "2"
    },
    "536": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "537": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "538": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "DUP4",
      "path": "2"
    },
    "539": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "ADD",
      "path": "2"
    },
    "540": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "541": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "543": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "DUP5",
      "path": "2"
    },
    "544": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "ADD",
      "path": "2"
    },
    "545": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "546": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "548": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "549": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "550": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "ADD",
      "path": "2"
    },
    "551": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "552": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "553": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "554": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "555": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "556": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "557": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "558": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "559": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "560": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "561": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "DUP7",
      "path": "2"
    },
    "562": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "JUMP",
      "path": "2"
    },
    "563": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "564": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "566": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "DUP1",
      "path": "2"
    },
    "567": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        3672,
        3734
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "568": {
      "op": "SWAP7"
    },
    "569": {
      "op": "DUP8"
    },
    "570": {
      "op": "MSTORE"
    },
    "571": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "573": {
      "op": "DUP8"
    },
    "574": {
      "op": "ADD"
    },
    "575": {
      "op": "SWAP6"
    },
    "576": {
      "op": "SWAP1"
    },
    "577": {
      "op": "SWAP6"
    },
    "578": {
      "op": "MSTORE"
    },
    "579": {
      "op": "SWAP4"
    },
    "580": {
      "op": "DUP6"
    },
    "581": {
      "op": "ADD"
    },
    "582": {
      "op": "SWAP3"
    },
    "583": {
      "op": "SWAP1"
    },
    "584": {
      "op": "SWAP3"
    },
    "585": {
      "op": "MSTORE"
    },
    "586": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "588": {
      "op": "DUP5"
    },
    "589": {
      "op": "ADD"
    },
    "590": {
      "op": "MSTORE"
    },
    "591": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "593": {
      "op": "DUP4"
    },
    "594": {
      "op": "ADD"
    },
    "595": {
      "op": "MSTORE"
    },
    "596": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "598": {
      "op": "DUP3"
    },
    "599": {
      "op": "ADD"
    },
    "600": {
      "op": "MSTORE"
    },
    "601": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "603": {
      "op": "ADD"
    },
    "604": {
      "offset": [
        3672,
        3734
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCA"
    },
    "607": {
      "op": "JUMP"
    },
    "608": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "609": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB5"
    },
    "612": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x26E"
    },
    "615": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "616": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "618": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE41"
    },
    "621": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        5351,
        6426
      ],
      "op": "JUMP",
      "path": "2"
    },
    "622": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "623": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6E3"
    },
    "626": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        5351,
        6426
      ],
      "op": "JUMP",
      "path": "2"
    },
    "627": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6801,
        7998
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "628": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6801,
        7998
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB5"
    },
    "631": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6801,
        7998
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x281"
    },
    "634": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6801,
        7998
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "635": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6801,
        7998
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "637": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6801,
        7998
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE9D"
    },
    "640": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        6801,
        7998
      ],
      "op": "JUMP",
      "path": "2"
    },
    "641": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6801,
        7998
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "642": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6801,
        7998
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8A7"
    },
    "645": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        6801,
        7998
      ],
      "op": "JUMP",
      "path": "2"
    },
    "646": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "647": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB5"
    },
    "650": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x294"
    },
    "653": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "654": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "656": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xED5"
    },
    "659": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        8942,
        10914
      ],
      "op": "JUMP",
      "path": "2"
    },
    "660": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "661": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9EA"
    },
    "664": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        8942,
        10914
      ],
      "op": "JUMP",
      "path": "2"
    },
    "665": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11344,
        13827
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "666": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "668": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "670": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "672": {
      "op": "SHL"
    },
    "673": {
      "op": "SUB"
    },
    "674": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11556
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 0
    },
    "675": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11556
      ],
      "op": "AND",
      "path": "2"
    },
    "676": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11556
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "678": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11556
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "679": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11556
      ],
      "op": "DUP2",
      "path": "2"
    },
    "680": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11556
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "681": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11543
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "683": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11556
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "685": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11556
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "686": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11556
      ],
      "op": "DUP2",
      "path": "2"
    },
    "687": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11556
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "688": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11556
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "690": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11556
      ],
      "op": "DUP1",
      "path": "2"
    },
    "691": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11556
      ],
      "op": "DUP4",
      "path": "2"
    },
    "692": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11556
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "693": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11567
      ],
      "op": "DUP6",
      "path": "2"
    },
    "694": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11567
      ],
      "op": "DUP5",
      "path": "2"
    },
    "695": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11567
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "696": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11567
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "697": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11567
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "698": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11567
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "699": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11567
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "700": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11567
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "701": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11567
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "702": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11567
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "704": {
      "branch": 29,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11532,
        11567
      ],
      "op": "AND",
      "path": "2"
    },
    "705": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x321"
    },
    "708": {
      "branch": 29,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "709": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "711": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "712": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "716": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "718": {
      "op": "SHL"
    },
    "719": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "DUP2",
      "path": "2"
    },
    "720": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "721": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "723": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "725": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "DUP3",
      "path": "2"
    },
    "726": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "ADD",
      "path": "2"
    },
    "727": {
      "op": "MSTORE"
    },
    "728": {
      "op": "PUSH1",
      "value": "0x27"
    },
    "730": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "732": {
      "op": "DUP3"
    },
    "733": {
      "op": "ADD"
    },
    "734": {
      "op": "MSTORE"
    },
    "735": {
      "op": "PUSH32",
      "value": "0x596F75206D75737420696E697469616C697A6520796F7572206163636F756E74"
    },
    "768": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "770": {
      "op": "DUP3"
    },
    "771": {
      "op": "ADD"
    },
    "772": {
      "op": "MSTORE"
    },
    "773": {
      "op": "PUSH7",
      "value": "0x103334B939BA17"
    },
    "781": {
      "op": "PUSH1",
      "value": "0xC9"
    },
    "783": {
      "op": "SHL"
    },
    "784": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "786": {
      "op": "DUP3"
    },
    "787": {
      "op": "ADD"
    },
    "788": {
      "op": "MSTORE"
    },
    "789": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "791": {
      "op": "ADD"
    },
    "792": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "793": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "795": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "796": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "DUP1",
      "path": "2"
    },
    "797": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "798": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "SUB",
      "path": "2"
    },
    "799": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "800": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "2"
    },
    "801": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11524,
        11611
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "802": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "804": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "806": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "808": {
      "op": "SHL"
    },
    "809": {
      "op": "SUB"
    },
    "810": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11709
      ],
      "op": "DUP2",
      "path": "2"
    },
    "811": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11709
      ],
      "op": "AND",
      "path": "2"
    },
    "812": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11662,
        11685
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "814": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11709
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "815": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11709
      ],
      "op": "DUP2",
      "path": "2"
    },
    "816": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11709
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "817": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11696
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "819": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11709
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "821": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11709
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "822": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11709
      ],
      "op": "DUP2",
      "path": "2"
    },
    "823": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11709
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "824": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11709
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "826": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11709
      ],
      "op": "DUP1",
      "path": "2"
    },
    "827": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11709
      ],
      "op": "DUP4",
      "path": "2"
    },
    "828": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11709
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "829": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11720
      ],
      "op": "DUP6",
      "path": "2"
    },
    "830": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11720
      ],
      "op": "DUP5",
      "path": "2"
    },
    "831": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11720
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "832": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11720
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "833": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11720
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "834": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11720
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "835": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11720
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "836": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11688,
        11720
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "837": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11777,
        11797
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 1,
      "value": "0x1"
    },
    "839": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11777,
        11797
      ],
      "op": "DUP2",
      "path": "2"
    },
    "840": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11777,
        11797
      ],
      "op": "ADD",
      "path": "2"
    },
    "841": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11777,
        11797
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "842": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11769,
        11832
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x395"
    },
    "845": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11769,
        11832
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "846": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11769,
        11832
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "848": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11769,
        11832
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "849": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "853": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "855": {
      "op": "SHL"
    },
    "856": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11769,
        11832
      ],
      "op": "DUP2",
      "path": "2"
    },
    "857": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11769,
        11832
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "858": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "860": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11769,
        11832
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "862": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11769,
        11832
      ],
      "op": "DUP3",
      "path": "2"
    },
    "863": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11769,
        11832
      ],
      "op": "ADD",
      "path": "2"
    },
    "864": {
      "op": "MSTORE"
    },
    "865": {
      "op": "PUSH1",
      "value": "0x19"
    },
    "867": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "869": {
      "op": "DUP3"
    },
    "870": {
      "op": "ADD"
    },
    "871": {
      "op": "MSTORE"
    },
    "872": {
      "op": "PUSH32",
      "value": "0x4E6F20636F696E73206C65667420746F20776974686472617700000000000000"
    },
    "905": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "907": {
      "op": "DUP3"
    },
    "908": {
      "op": "ADD"
    },
    "909": {
      "op": "MSTORE"
    },
    "910": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "912": {
      "op": "ADD"
    },
    "913": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11769,
        11832
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x318"
    },
    "916": {
      "op": "JUMP"
    },
    "917": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11769,
        11832
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "918": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11842,
        11864
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "920": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12012,
        12019
      ],
      "op": "DUP2",
      "path": "2"
    },
    "921": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12012,
        12027
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "923": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12012,
        12027
      ],
      "op": "ADD",
      "path": "2"
    },
    "924": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12012,
        12027
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "925": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11993,
        12008
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "926": {
      "branch": 30,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11993,
        12027
      ],
      "op": "LT",
      "path": "2"
    },
    "927": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11989,
        12363
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3AD"
    },
    "930": {
      "branch": 30,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11989,
        12363
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "931": {
      "op": "POP"
    },
    "932": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12063,
        12083
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 2,
      "value": "0x1"
    },
    "934": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12063,
        12083
      ],
      "op": "DUP2",
      "path": "2"
    },
    "935": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12063,
        12083
      ],
      "op": "ADD",
      "path": "2"
    },
    "936": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12063,
        12083
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "937": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11989,
        12363
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3CE"
    },
    "940": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11989,
        12363
      ],
      "op": "JUMP",
      "path": "2"
    },
    "941": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11989,
        12363
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "942": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12330,
        12352
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 3,
      "value": "0x4"
    },
    "944": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12330,
        12352
      ],
      "op": "DUP3",
      "path": "2"
    },
    "945": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12330,
        12352
      ],
      "op": "ADD",
      "path": "2"
    },
    "946": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12330,
        12352
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "947": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12300,
        12326
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "949": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12300,
        12326
      ],
      "op": "DUP4",
      "path": "2"
    },
    "950": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12300,
        12326
      ],
      "op": "ADD",
      "path": "2"
    },
    "951": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12300,
        12326
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "952": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12282,
        12326
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3C1"
    },
    "955": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12282,
        12326
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "956": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12282,
        12297
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "957": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12282,
        12326
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE1"
    },
    "960": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        12282,
        12326
      ],
      "op": "JUMP",
      "path": "2"
    },
    "961": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12282,
        12326
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "962": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12281,
        12352
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3CB"
    },
    "965": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12281,
        12352
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "966": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12281,
        12352
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "967": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12281,
        12352
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFF8"
    },
    "970": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        12281,
        12352
      ],
      "op": "JUMP",
      "path": "2"
    },
    "971": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12281,
        12352
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "972": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12261,
        12352
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "973": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12261,
        12352
      ],
      "op": "POP",
      "path": "2"
    },
    "974": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11989,
        12363
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "975": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12395,
        12418
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "977": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12421,
        12443
      ],
      "op": "DUP5",
      "path": "2"
    },
    "978": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12421,
        12443
      ],
      "op": "DUP2",
      "path": "2"
    },
    "979": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12421,
        12443
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "980": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12421,
        12432
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "982": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12421,
        12443
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "984": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12421,
        12443
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "985": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12421,
        12443
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "987": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12421,
        12443
      ],
      "op": "DUP2",
      "path": "2"
    },
    "988": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12421,
        12443
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "989": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12642,
        12662
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 4,
      "value": "0x1"
    },
    "991": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12642,
        12662
      ],
      "op": "DUP5",
      "path": "2"
    },
    "992": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12642,
        12662
      ],
      "op": "ADD",
      "path": "2"
    },
    "993": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12642,
        12683
      ],
      "op": "DUP1",
      "path": "2"
    },
    "994": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12642,
        12683
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "995": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12421,
        12443
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "996": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12421,
        12443
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "997": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12666,
        12683
      ],
      "op": "DUP5",
      "path": "2"
    },
    "998": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12666,
        12683
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "999": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12642,
        12683
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3F1"
    },
    "1002": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12642,
        12683
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1003": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12666,
        12683
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1004": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12666,
        12683
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1005": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12642,
        12683
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE1"
    },
    "1008": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        12642,
        12683
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1009": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12642,
        12683
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1010": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12642,
        12683
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1011": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12642,
        12683
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1012": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12642,
        12683
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1013": {
      "op": "POP"
    },
    "1014": {
      "op": "POP"
    },
    "1015": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12904,
        12919
      ],
      "op": "TIMESTAMP",
      "path": "2",
      "statement": 5
    },
    "1016": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12875,
        12901
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "1018": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12875,
        12901
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1019": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12875,
        12901
      ],
      "op": "ADD",
      "path": "2"
    },
    "1020": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12875,
        12919
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1021": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13071
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 6,
      "value": "0x6"
    },
    "1023": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13071
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1024": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13071
      ],
      "op": "ADD",
      "path": "2"
    },
    "1025": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13092
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1026": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13092
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1027": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13075,
        13092
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1028": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13075,
        13092
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1029": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13071
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1030": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13071
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1032": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13071
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1033": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13092
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x413"
    },
    "1036": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13092
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1037": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13075,
        13092
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1038": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13075,
        13092
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1039": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13092
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE1"
    },
    "1042": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        13054,
        13092
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1043": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13092
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1044": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13092
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1045": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13092
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1046": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13054,
        13092
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1047": {
      "op": "POP"
    },
    "1048": {
      "op": "POP"
    },
    "1049": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13637,
        13654
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 7,
      "value": "0x5"
    },
    "1051": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13637,
        13654
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1052": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13637,
        13654
      ],
      "op": "ADD",
      "path": "2"
    },
    "1053": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13637,
        13654
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1054": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1056": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1057": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "1062": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1064": {
      "op": "SHL"
    },
    "1065": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1066": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1067": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1069": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1071": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1073": {
      "op": "SHL"
    },
    "1074": {
      "op": "SUB"
    },
    "1075": {
      "op": "DUP7"
    },
    "1076": {
      "op": "DUP2"
    },
    "1077": {
      "op": "AND"
    },
    "1078": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1080": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1081": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "ADD",
      "path": "2"
    },
    "1082": {
      "op": "MSTORE"
    },
    "1083": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1085": {
      "op": "DUP3"
    },
    "1086": {
      "op": "ADD"
    },
    "1087": {
      "op": "DUP6"
    },
    "1088": {
      "op": "SWAP1"
    },
    "1089": {
      "op": "MSTORE"
    },
    "1090": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13637,
        13654
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1091": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13637,
        13654
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1092": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13637,
        13654
      ],
      "op": "AND",
      "path": "2"
    },
    "1093": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13637,
        13654
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1094": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13664
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xA9059CBB"
    },
    "1099": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13664
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1100": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1102": {
      "op": "ADD"
    },
    "1103": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1105": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1107": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1108": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1109": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1110": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "SUB",
      "path": "2"
    },
    "1111": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1112": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1114": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1115": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1116": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "EXTCODESIZE",
      "path": "2"
    },
    "1117": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1118": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1119": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1120": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x468"
    },
    "1123": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1124": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1126": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1127": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1128": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1129": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "POP",
      "path": "2"
    },
    "1130": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "GAS",
      "path": "2"
    },
    "1131": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "CALL",
      "path": "2"
    },
    "1132": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1133": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1134": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1135": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x47C"
    },
    "1138": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1139": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1140": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1142": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1143": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "1144": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1145": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1147": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1148": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1149": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "POP",
      "path": "2"
    },
    "1150": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "POP",
      "path": "2"
    },
    "1151": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "POP",
      "path": "2"
    },
    "1152": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "POP",
      "path": "2"
    },
    "1153": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1155": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1156": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1157": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1159": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "NOT",
      "path": "2"
    },
    "1160": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1162": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1163": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "ADD",
      "path": "2"
    },
    "1164": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "AND",
      "path": "2"
    },
    "1165": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1166": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "ADD",
      "path": "2"
    },
    "1167": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1168": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1170": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1171": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "POP",
      "path": "2"
    },
    "1172": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1173": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "ADD",
      "path": "2"
    },
    "1174": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1175": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4A0"
    },
    "1178": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1179": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1180": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1017"
    },
    "1183": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        13630,
        13696
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1184": {
      "branch": 31,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13630,
        13696
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1185": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13622,
        13722
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4E4"
    },
    "1188": {
      "branch": 31,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13622,
        13722
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1189": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13622,
        13722
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1191": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13622,
        13722
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1192": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1196": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1198": {
      "op": "SHL"
    },
    "1199": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13622,
        13722
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1200": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13622,
        13722
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1201": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1203": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13622,
        13722
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1205": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13622,
        13722
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1206": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13622,
        13722
      ],
      "op": "ADD",
      "path": "2"
    },
    "1207": {
      "op": "MSTORE"
    },
    "1208": {
      "op": "PUSH1",
      "value": "0x15"
    },
    "1210": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1212": {
      "op": "DUP3"
    },
    "1213": {
      "op": "ADD"
    },
    "1214": {
      "op": "MSTORE"
    },
    "1215": {
      "op": "PUSH21",
      "value": "0x151BDAD95B881D1C985B9CD9995C8819985A5B1959"
    },
    "1237": {
      "op": "PUSH1",
      "value": "0x5A"
    },
    "1239": {
      "op": "SHL"
    },
    "1240": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1242": {
      "op": "DUP3"
    },
    "1243": {
      "op": "ADD"
    },
    "1244": {
      "op": "MSTORE"
    },
    "1245": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1247": {
      "op": "ADD"
    },
    "1248": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13622,
        13722
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x318"
    },
    "1251": {
      "op": "JUMP"
    },
    "1252": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13622,
        13722
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1253": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13767,
        13778
      ],
      "op": "DUP4",
      "path": "2",
      "statement": 8
    },
    "1254": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1256": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1258": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1260": {
      "op": "SHL"
    },
    "1261": {
      "op": "SUB"
    },
    "1262": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "AND",
      "path": "2"
    },
    "1263": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13756,
        13765
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1264": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x1680E4CFE90468085407EF2B599DBE94B0AA30FF9F180F0E41D22EB71C872872"
    },
    "1297": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13780,
        13797
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1298": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13799,
        13806
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1299": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13799,
        13819
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1301": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13799,
        13819
      ],
      "op": "ADD",
      "path": "2"
    },
    "1302": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13799,
        13819
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1303": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1305": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1306": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x52D"
    },
    "1309": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1310": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1311": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1312": {
      "op": "SWAP2"
    },
    "1313": {
      "op": "DUP3"
    },
    "1314": {
      "op": "MSTORE"
    },
    "1315": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1317": {
      "op": "DUP3"
    },
    "1318": {
      "op": "ADD"
    },
    "1319": {
      "op": "MSTORE"
    },
    "1320": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1322": {
      "op": "ADD"
    },
    "1323": {
      "op": "SWAP1"
    },
    "1324": {
      "op": "JUMP"
    },
    "1325": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1326": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1328": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1329": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1330": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1331": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "SUB",
      "path": "2"
    },
    "1332": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1333": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13737,
        13820
      ],
      "op": "LOG3",
      "path": "2"
    },
    "1334": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11406,
        13827
      ],
      "op": "POP",
      "path": "2"
    },
    "1335": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11406,
        13827
      ],
      "op": "POP",
      "path": "2"
    },
    "1336": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11406,
        13827
      ],
      "op": "POP",
      "path": "2"
    },
    "1337": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11344,
        13827
      ],
      "op": "POP",
      "path": "2"
    },
    "1338": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11344,
        13827
      ],
      "op": "POP",
      "path": "2"
    },
    "1339": {
      "fn": "MerkleResistor.withdraw",
      "jump": "o",
      "offset": [
        11344,
        13827
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1340": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1341": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14874,
        14878
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1343": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14880,
        14884
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1344": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14886,
        14890
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1346": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14892,
        14896
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1347": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15042,
        15050
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1349": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15042,
        15050
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1350": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15030,
        15039
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1351": {
      "branch": 32,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15030,
        15050
      ],
      "op": "GT",
      "path": "2"
    },
    "1352": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15026,
        15100
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1353": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15026,
        15100
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x55D"
    },
    "1356": {
      "branch": 32,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15026,
        15100
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1357": {
      "op": "POP"
    },
    "1358": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15074,
        15079
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 9,
      "value": "0x0"
    },
    "1360": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15074,
        15079
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1361": {
      "op": "POP"
    },
    "1362": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15074,
        15079
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1363": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15074,
        15079
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1364": {
      "op": "POP"
    },
    "1365": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15074,
        15079
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1366": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15074,
        15079
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1367": {
      "op": "POP"
    },
    "1368": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15074,
        15079
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1369": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15066,
        15089
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6D8"
    },
    "1372": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15066,
        15089
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1373": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15026,
        15100
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1374": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15227
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1376": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15230,
        15252
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1377": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15230,
        15252
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1378": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15230,
        15252
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1379": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15230,
        15241
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1381": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15230,
        15252
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1383": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15230,
        15252
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1384": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15230,
        15252
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1385": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15230,
        15252
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1386": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15230,
        15252
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1388": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15230,
        15252
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1389": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15230,
        15252
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1390": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15230,
        15252
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1391": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15230,
        15252
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1392": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1393": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1394": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "1396": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1397": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "ADD",
      "path": "2"
    },
    "1398": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1399": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1400": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1401": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1402": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1403": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1404": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1406": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1407": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "ADD",
      "path": "2"
    },
    "1408": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1409": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1410": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1411": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "ADD",
      "path": "2"
    },
    "1412": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1413": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1414": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1415": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1416": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1417": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1418": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "ADD",
      "path": "2"
    },
    "1419": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1420": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1421": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1422": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "ADD",
      "path": "2"
    },
    "1423": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1424": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1425": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1426": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1427": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "1429": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1430": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "ADD",
      "path": "2"
    },
    "1431": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1432": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "1434": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1435": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "ADD",
      "path": "2"
    },
    "1436": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1437": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1438": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1439": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1441": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1442": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "ADD",
      "path": "2"
    },
    "1443": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1444": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "1446": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1447": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "ADD",
      "path": "2"
    },
    "1448": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1449": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "1451": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1452": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "ADD",
      "path": "2"
    },
    "1453": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1454": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1456": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1458": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1460": {
      "op": "SHL"
    },
    "1461": {
      "op": "SUB"
    },
    "1462": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "AND",
      "path": "2"
    },
    "1463": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA0"
    },
    "1465": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1466": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "ADD",
      "path": "2"
    },
    "1467": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1468": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "1470": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1471": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1472": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "ADD",
      "path": "2"
    },
    "1473": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1474": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC0"
    },
    "1476": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1477": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "ADD",
      "path": "2"
    },
    "1478": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15205,
        15252
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1479": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15355,
        15384
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1480": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15355,
        15384
      ],
      "op": "GT",
      "path": "2"
    },
    "1481": {
      "branch": 33,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15355,
        15384
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1482": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15355,
        15417
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5D6"
    },
    "1485": {
      "branch": 33,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15355,
        15417
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1486": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15355,
        15417
      ],
      "op": "POP",
      "path": "2"
    },
    "1487": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15402,
        15406
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1488": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15402,
        15417
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1490": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15402,
        15417
      ],
      "op": "ADD",
      "path": "2"
    },
    "1491": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15402,
        15417
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1492": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15388,
        15399
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1493": {
      "branch": 34,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15388,
        15417
      ],
      "op": "LT",
      "path": "2"
    },
    "1494": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15355,
        15417
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1495": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15351,
        15467
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1496": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15351,
        15467
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5EF"
    },
    "1499": {
      "branch": 34,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15351,
        15467
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1500": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15441,
        15446
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 10,
      "value": "0x0"
    },
    "1502": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15448,
        15449
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1503": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15451,
        15452
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1505": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15454,
        15455
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1506": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15433,
        15456
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1507": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15433,
        15456
      ],
      "op": "POP",
      "path": "2"
    },
    "1508": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15433,
        15456
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1509": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15433,
        15456
      ],
      "op": "POP",
      "path": "2"
    },
    "1510": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15433,
        15456
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1511": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15433,
        15456
      ],
      "op": "POP",
      "path": "2"
    },
    "1512": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15433,
        15456
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1513": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15433,
        15456
      ],
      "op": "POP",
      "path": "2"
    },
    "1514": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15433,
        15456
      ],
      "op": "POP",
      "path": "2"
    },
    "1515": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15433,
        15456
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6D8"
    },
    "1518": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15433,
        15456
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1519": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15351,
        15467
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1520": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15477,
        15492
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1522": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15521,
        15525
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1523": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15521,
        15536
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "1525": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15521,
        15536
      ],
      "op": "ADD",
      "path": "2"
    },
    "1526": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15521,
        15536
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1527": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15506,
        15517
      ],
      "op": "DUP10",
      "path": "2"
    },
    "1528": {
      "branch": 35,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15506,
        15536
      ],
      "op": "EQ",
      "path": "2"
    },
    "1529": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15502,
        16806
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1530": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15502,
        16806
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x604"
    },
    "1533": {
      "branch": 35,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15502,
        16806
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1534": {
      "op": "POP"
    },
    "1535": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15722,
        15738
      ],
      "op": "DUP6",
      "path": "2",
      "statement": 11
    },
    "1536": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15502,
        16806
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x675"
    },
    "1539": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15502,
        16806
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1540": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15502,
        16806
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1541": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16413,
        16430
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1543": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16504,
        16508
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1544": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16504,
        16519
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1546": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16504,
        16519
      ],
      "op": "ADD",
      "path": "2"
    },
    "1547": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16504,
        16519
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1548": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16486,
        16490
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1549": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16486,
        16501
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "1551": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16486,
        16501
      ],
      "op": "ADD",
      "path": "2"
    },
    "1552": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16486,
        16501
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1553": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16486,
        16519
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x61A"
    },
    "1556": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16486,
        16519
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1557": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16486,
        16519
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1558": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16486,
        16519
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE1"
    },
    "1561": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16486,
        16519
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1562": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16486,
        16519
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1563": {
      "offset": [
        3840,
        3847
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0xF4240"
    },
    "1567": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16469
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x628"
    },
    "1570": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16453,
        16469
      ],
      "op": "DUP12",
      "path": "2"
    },
    "1571": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16450
      ],
      "op": "DUP12",
      "path": "2"
    },
    "1572": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16469
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE1"
    },
    "1575": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16434,
        16469
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1576": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16434,
        16469
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1577": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16433,
        16482
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x632"
    },
    "1580": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16433,
        16482
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1581": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16433,
        16482
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1582": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16433,
        16482
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFF8"
    },
    "1585": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16433,
        16482
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1586": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16433,
        16482
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1587": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16433,
        16520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x63C"
    },
    "1590": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16433,
        16520
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1591": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16433,
        16520
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1592": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16433,
        16520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1040"
    },
    "1595": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16433,
        16520
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1596": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16433,
        16520
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1597": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16413,
        16520
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1598": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16413,
        16520
      ],
      "op": "POP",
      "path": "2"
    },
    "1599": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16779,
        16795
      ],
      "op": "DUP9",
      "path": "2",
      "statement": 12
    },
    "1600": {
      "offset": [
        3840,
        3847
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0xF4240"
    },
    "1604": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16747,
        16751
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1605": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16747,
        16762
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1607": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16747,
        16762
      ],
      "op": "ADD",
      "path": "2"
    },
    "1608": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16747,
        16762
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1609": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16733,
        16744
      ],
      "op": "DUP13",
      "path": "2"
    },
    "1610": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16733,
        16762
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x653"
    },
    "1613": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16733,
        16762
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1614": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16733,
        16762
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1615": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16733,
        16762
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE1"
    },
    "1618": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16733,
        16762
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1619": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16733,
        16762
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1620": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16763
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x65D"
    },
    "1623": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16763
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1624": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16729
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1625": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16763
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFF8"
    },
    "1628": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16717,
        16763
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1629": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16763
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1630": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16775
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x667"
    },
    "1633": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16775
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1634": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16775
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1635": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16775
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1040"
    },
    "1638": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16717,
        16775
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1639": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16717,
        16775
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1640": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16716,
        16795
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x671"
    },
    "1643": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16716,
        16795
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1644": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16716,
        16795
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1645": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16716,
        16795
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1062"
    },
    "1648": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        16716,
        16795
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1649": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16716,
        16795
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1650": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16703,
        16795
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1651": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16703,
        16795
      ],
      "op": "POP",
      "path": "2"
    },
    "1652": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15755,
        16806
      ],
      "op": "POP",
      "path": "2"
    },
    "1653": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15502,
        16806
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1654": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17267,
        17286
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1656": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17337,
        17354
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x682"
    },
    "1659": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17337,
        17348
      ],
      "op": "DUP11",
      "path": "2"
    },
    "1660": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17351,
        17354
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "1662": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17337,
        17354
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFF8"
    },
    "1665": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17337,
        17354
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1666": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17337,
        17354
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1667": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17316,
        17331
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "1669": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17316,
        17331
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1670": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17316,
        17331
      ],
      "op": "ADD",
      "path": "2"
    },
    "1671": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17316,
        17331
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1672": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17304,
        17331
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x692"
    },
    "1675": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17304,
        17331
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1676": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17309,
        17312
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "1678": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17304,
        17331
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE1"
    },
    "1681": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17304,
        17331
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1682": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17304,
        17331
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1683": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17290,
        17332
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x69C"
    },
    "1686": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17290,
        17332
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1687": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17290,
        17300
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1688": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17290,
        17332
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFF8"
    },
    "1691": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17290,
        17332
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1692": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17290,
        17332
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1693": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17289,
        17355
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6A6"
    },
    "1696": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17289,
        17355
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1697": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17289,
        17355
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1698": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17289,
        17355
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1040"
    },
    "1701": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17289,
        17355
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1702": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17289,
        17355
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1703": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17267,
        17355
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1704": {
      "op": "POP"
    },
    "1705": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17531,
        17545
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1707": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17581,
        17608
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6B4"
    },
    "1710": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17267,
        17355
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1711": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17581,
        17591
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1712": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17581,
        17608
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1040"
    },
    "1715": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17581,
        17608
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1716": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17581,
        17608
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1717": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17548,
        17577
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6BE"
    },
    "1720": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17566,
        17577
      ],
      "op": "DUP13",
      "path": "2"
    },
    "1721": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17548,
        17563
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "1722": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17548,
        17577
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1062"
    },
    "1725": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17548,
        17577
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1726": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17548,
        17577
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1727": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17548,
        17609
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6C8"
    },
    "1730": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17548,
        17609
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1731": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17548,
        17609
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1732": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17548,
        17609
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFE1"
    },
    "1735": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17548,
        17609
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1736": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17548,
        17609
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1737": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17628,
        17632
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 13,
      "value": "0x1"
    },
    "1739": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17628,
        17632
      ],
      "op": "SWAP9",
      "path": "2"
    },
    "1740": {
      "op": "POP"
    },
    "1741": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17634,
        17644
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1742": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17634,
        17644
      ],
      "op": "SWAP7",
      "path": "2"
    },
    "1743": {
      "op": "POP"
    },
    "1744": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17646,
        17660
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1745": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17646,
        17660
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1746": {
      "op": "POP"
    },
    "1747": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17531,
        17609
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1748": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17531,
        17609
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1749": {
      "op": "POP"
    },
    "1750": {
      "op": "POP"
    },
    "1751": {
      "op": "POP"
    },
    "1752": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1753": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1754": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "POP",
      "path": "2"
    },
    "1755": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1756": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "POP",
      "path": "2"
    },
    "1757": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1758": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "POP",
      "path": "2"
    },
    "1759": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1760": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1761": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        14742,
        17679
      ],
      "op": "POP",
      "path": "2"
    },
    "1762": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "o",
      "offset": [
        14742,
        17679
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1763": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1764": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5583,
        5586
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 14,
      "value": "0x64"
    },
    "1766": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5570,
        5580
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1767": {
      "branch": 36,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5570,
        5586
      ],
      "op": "LT",
      "path": "2"
    },
    "1768": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5562,
        5608
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x727"
    },
    "1771": {
      "branch": 36,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5562,
        5608
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1772": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5562,
        5608
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1774": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5562,
        5608
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1775": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1779": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1781": {
      "op": "SHL"
    },
    "1782": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5562,
        5608
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1783": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5562,
        5608
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1784": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1786": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5562,
        5608
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1788": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5562,
        5608
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1789": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5562,
        5608
      ],
      "op": "ADD",
      "path": "2"
    },
    "1790": {
      "op": "MSTORE"
    },
    "1791": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "1793": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1795": {
      "op": "DUP3"
    },
    "1796": {
      "op": "ADD"
    },
    "1797": {
      "op": "MSTORE"
    },
    "1798": {
      "op": "PUSH17",
      "value": "0x706374557046726F6E74203E3D2031303"
    },
    "1816": {
      "op": "PUSH1",
      "value": "0x7C"
    },
    "1818": {
      "op": "SHL"
    },
    "1819": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1821": {
      "op": "DUP3"
    },
    "1822": {
      "op": "ADD"
    },
    "1823": {
      "op": "MSTORE"
    },
    "1824": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1826": {
      "op": "ADD"
    },
    "1827": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5562,
        5608
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x318"
    },
    "1830": {
      "op": "JUMP"
    },
    "1831": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5562,
        5608
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1832": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5639,
        5649
      ],
      "op": "DUP4",
      "path": "2",
      "statement": 15
    },
    "1833": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5626,
        5636
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1834": {
      "branch": 37,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5626,
        5649
      ],
      "op": "LT",
      "path": "2"
    },
    "1835": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5618,
        5693
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x786"
    },
    "1838": {
      "branch": 37,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5618,
        5693
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1839": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5618,
        5693
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1841": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5618,
        5693
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1842": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1846": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1848": {
      "op": "SHL"
    },
    "1849": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5618,
        5693
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1850": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5618,
        5693
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1851": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1853": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5618,
        5693
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1855": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5618,
        5693
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1856": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5618,
        5693
      ],
      "op": "ADD",
      "path": "2"
    },
    "1857": {
      "op": "MSTORE"
    },
    "1858": {
      "op": "PUSH1",
      "value": "0x27"
    },
    "1860": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1862": {
      "op": "DUP3"
    },
    "1863": {
      "op": "ADD"
    },
    "1864": {
      "op": "MSTORE"
    },
    "1865": {
      "op": "PUSH32",
      "value": "0x6D696E456E6454696D65206D757374206265206C657373207468616E206D6178"
    },
    "1898": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1900": {
      "op": "DUP3"
    },
    "1901": {
      "op": "ADD"
    },
    "1902": {
      "op": "MSTORE"
    },
    "1903": {
      "op": "PUSH7",
      "value": "0x456E6454696D65"
    },
    "1911": {
      "op": "PUSH1",
      "value": "0xC8"
    },
    "1913": {
      "op": "SHL"
    },
    "1914": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1916": {
      "op": "DUP3"
    },
    "1917": {
      "op": "ADD"
    },
    "1918": {
      "op": "MSTORE"
    },
    "1919": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1921": {
      "op": "ADD"
    },
    "1922": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5618,
        5693
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x318"
    },
    "1925": {
      "op": "JUMP"
    },
    "1926": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5618,
        5693
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1927": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 16,
      "value": "0x40"
    },
    "1929": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1930": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1931": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "1933": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "1934": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1936": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1937": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1938": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5810,
        5817
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1939": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1940": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1941": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1943": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "1944": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5831,
        5839
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1945": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1946": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1947": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1949": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "1950": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5853,
        5863
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1951": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1952": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1953": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1955": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "1956": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5877,
        5887
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1957": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1958": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1959": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1961": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "1962": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5901,
        5911
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1963": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1964": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1965": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1967": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "1968": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5925,
        5937
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1969": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1971": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1973": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1975": {
      "op": "SHL"
    },
    "1976": {
      "op": "SUB"
    },
    "1977": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "AND",
      "path": "2"
    },
    "1978": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1979": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1980": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1982": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "1983": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5951,
        5952
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1985": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1986": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1987": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5786,
        6033
      ],
      "op": "POP",
      "path": "2"
    },
    "1988": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5771
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1990": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1992": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5774,
        5782
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1993": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5774,
        5782
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1995": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5772,
        5782
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1996": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5772,
        5782
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1997": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5772,
        5782
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7D5"
    },
    "2000": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5772,
        5782
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2001": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5772,
        5782
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x107A"
    },
    "2004": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        5772,
        5782
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2005": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5772,
        5782
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2006": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5772,
        5782
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2007": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5772,
        5782
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2008": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5772,
        5782
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2009": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5772,
        5782
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2010": {
      "op": "POP"
    },
    "2011": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2012": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2013": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2015": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2016": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2017": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "ADD",
      "path": "2"
    },
    "2018": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2019": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2020": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2021": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2022": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2024": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2025": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2026": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "ADD",
      "path": "2"
    },
    "2027": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2029": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2030": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2031": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        5783
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2032": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2033": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2034": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2035": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2036": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2037": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2038": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "2039": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2040": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2042": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2043": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "2044": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2045": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2046": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2047": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "2048": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2049": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2051": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2052": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "2053": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2054": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "2056": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2057": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "2058": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2059": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "2061": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2062": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "2063": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2064": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2066": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2067": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "2068": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2069": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2071": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2072": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "2073": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2074": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA0"
    },
    "2076": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2077": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "2078": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2079": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "2081": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2082": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "2083": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2084": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2085": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2087": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2089": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2091": {
      "op": "SHL"
    },
    "2092": {
      "op": "SUB"
    },
    "2093": {
      "op": "NOT"
    },
    "2094": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "AND",
      "path": "2"
    },
    "2095": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2097": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2099": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2101": {
      "op": "SHL"
    },
    "2102": {
      "op": "SUB"
    },
    "2103": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2104": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2105": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "AND",
      "path": "2"
    },
    "2106": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2107": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2108": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2109": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "OR",
      "path": "2"
    },
    "2110": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2111": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2112": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC0"
    },
    "2114": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2115": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2116": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "2117": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2118": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "2120": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2121": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2122": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "ADD",
      "path": "2"
    },
    "2123": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5760,
        6033
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2124": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6323,
        6331
      ],
      "op": "SLOAD",
      "path": "2",
      "statement": 17
    },
    "2125": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6309,
        6346
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x856"
    },
    "2128": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6309,
        6346
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2129": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6333,
        6345
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2130": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6309,
        6322
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8A7"
    },
    "2133": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        6309,
        6346
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2134": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6309,
        6346
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2135": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6377,
        6385
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 18,
      "value": "0x0"
    },
    "2137": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6377,
        6385
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2138": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2140": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2141": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2142": {
      "op": "DUP10"
    },
    "2143": {
      "op": "DUP2"
    },
    "2144": {
      "op": "MSTORE"
    },
    "2145": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2147": {
      "op": "DUP2"
    },
    "2148": {
      "op": "ADD"
    },
    "2149": {
      "op": "DUP10"
    },
    "2150": {
      "op": "SWAP1"
    },
    "2151": {
      "op": "MSTORE"
    },
    "2152": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2154": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2156": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2158": {
      "op": "SHL"
    },
    "2159": {
      "op": "SUB"
    },
    "2160": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2161": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "AND",
      "path": "2"
    },
    "2162": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2163": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6377,
        6385
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2164": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45"
    },
    "2197": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2198": {
      "op": "ADD"
    },
    "2199": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2201": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2202": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2203": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2204": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "SUB",
      "path": "2"
    },
    "2205": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2206": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6361,
        6419
      ],
      "op": "LOG3",
      "path": "2"
    },
    "2207": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "POP",
      "path": "2"
    },
    "2208": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "POP",
      "path": "2"
    },
    "2209": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "POP",
      "path": "2"
    },
    "2210": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "POP",
      "path": "2"
    },
    "2211": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "POP",
      "path": "2"
    },
    "2212": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "POP",
      "path": "2"
    },
    "2213": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5351,
        6426
      ],
      "op": "POP",
      "path": "2"
    },
    "2214": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "o",
      "offset": [
        5351,
        6426
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2215": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6801,
        7998
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2216": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6904,
        6933
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2218": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6936,
        6958
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2219": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6936,
        6958
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2220": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6936,
        6958
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2221": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6936,
        6947
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2223": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6936,
        6958
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2225": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6936,
        6958
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2226": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6936,
        6958
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2228": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6936,
        6958
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2229": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6936,
        6958
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2230": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7031,
        7054
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 19,
      "value": "0x6"
    },
    "2232": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7031,
        7054
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2233": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7031,
        7054
      ],
      "op": "ADD",
      "path": "2"
    },
    "2234": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7031,
        7063
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2235": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7031,
        7063
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2236": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6936,
        6958
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2237": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6936,
        6958
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2238": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7058,
        7063
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2239": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7058,
        7063
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2240": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7031,
        7063
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8CA"
    },
    "2243": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7031,
        7063
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2244": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7058,
        7063
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2245": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7058,
        7063
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2246": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7031,
        7063
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1062"
    },
    "2249": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        7031,
        7063
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2250": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7031,
        7063
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2251": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7031,
        7063
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2252": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7031,
        7063
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2253": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7031,
        7063
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2254": {
      "op": "POP"
    },
    "2255": {
      "op": "POP"
    },
    "2256": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7821,
        7844
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 20,
      "value": "0x5"
    },
    "2258": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7821,
        7844
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2259": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7821,
        7844
      ],
      "op": "ADD",
      "path": "2"
    },
    "2260": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7821,
        7844
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2261": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2263": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2264": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "2269": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2271": {
      "op": "SHL"
    },
    "2272": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2273": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2274": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7859,
        7869
      ],
      "op": "CALLER",
      "path": "2"
    },
    "2275": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2277": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2278": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "ADD",
      "path": "2"
    },
    "2279": {
      "op": "MSTORE"
    },
    "2280": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7879,
        7883
      ],
      "op": "ADDRESS",
      "path": "2"
    },
    "2281": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2283": {
      "op": "DUP3"
    },
    "2284": {
      "op": "ADD"
    },
    "2285": {
      "op": "MSTORE"
    },
    "2286": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2288": {
      "op": "DUP2"
    },
    "2289": {
      "op": "ADD"
    },
    "2290": {
      "op": "DUP5"
    },
    "2291": {
      "op": "SWAP1"
    },
    "2292": {
      "op": "MSTORE"
    },
    "2293": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2295": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2297": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2299": {
      "op": "SHL"
    },
    "2300": {
      "op": "SUB"
    },
    "2301": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7821,
        7844
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2302": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7821,
        7844
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2303": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7821,
        7844
      ],
      "op": "AND",
      "path": "2"
    },
    "2304": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7821,
        7844
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2305": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7858
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x23B872DD"
    },
    "2310": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7858
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2311": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2313": {
      "op": "ADD"
    },
    "2314": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2316": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2318": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2319": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2320": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2321": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "SUB",
      "path": "2"
    },
    "2322": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2323": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2325": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2326": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2327": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "EXTCODESIZE",
      "path": "2"
    },
    "2328": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2329": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2330": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2331": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x923"
    },
    "2334": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2335": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2337": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2338": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2339": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2340": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "POP",
      "path": "2"
    },
    "2341": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "GAS",
      "path": "2"
    },
    "2342": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "CALL",
      "path": "2"
    },
    "2343": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2344": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2345": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2346": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x937"
    },
    "2349": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2350": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2351": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2353": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2354": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "2355": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2356": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2358": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2359": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2360": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "POP",
      "path": "2"
    },
    "2361": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "POP",
      "path": "2"
    },
    "2362": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "POP",
      "path": "2"
    },
    "2363": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "POP",
      "path": "2"
    },
    "2364": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2366": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2367": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2368": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2370": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "NOT",
      "path": "2"
    },
    "2371": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2373": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2374": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "ADD",
      "path": "2"
    },
    "2375": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "AND",
      "path": "2"
    },
    "2376": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2377": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "ADD",
      "path": "2"
    },
    "2378": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2379": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2381": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2382": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "POP",
      "path": "2"
    },
    "2383": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2384": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "ADD",
      "path": "2"
    },
    "2385": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2386": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x95B"
    },
    "2389": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2390": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2391": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1017"
    },
    "2394": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        7814,
        7892
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2395": {
      "branch": 38,
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7814,
        7892
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2396": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7806,
        7918
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x99F"
    },
    "2399": {
      "branch": 38,
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7806,
        7918
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2400": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7806,
        7918
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2402": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7806,
        7918
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2403": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2407": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2409": {
      "op": "SHL"
    },
    "2410": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7806,
        7918
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2411": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7806,
        7918
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2412": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2414": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7806,
        7918
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2416": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7806,
        7918
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2417": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7806,
        7918
      ],
      "op": "ADD",
      "path": "2"
    },
    "2418": {
      "op": "MSTORE"
    },
    "2419": {
      "op": "PUSH1",
      "value": "0x15"
    },
    "2421": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2423": {
      "op": "DUP3"
    },
    "2424": {
      "op": "ADD"
    },
    "2425": {
      "op": "MSTORE"
    },
    "2426": {
      "op": "PUSH21",
      "value": "0x115490CC8C081D1C985B9CD9995C8819985A5B1959"
    },
    "2448": {
      "op": "PUSH1",
      "value": "0x5A"
    },
    "2450": {
      "op": "SHL"
    },
    "2451": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2453": {
      "op": "DUP3"
    },
    "2454": {
      "op": "ADD"
    },
    "2455": {
      "op": "MSTORE"
    },
    "2456": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2458": {
      "op": "ADD"
    },
    "2459": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7806,
        7918
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x318"
    },
    "2462": {
      "op": "JUMP"
    },
    "2463": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7806,
        7918
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2464": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7960,
        7983
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 21,
      "value": "0x5"
    },
    "2466": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7960,
        7983
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2467": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7960,
        7983
      ],
      "op": "ADD",
      "path": "2"
    },
    "2468": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7960,
        7983
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2469": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7933,
        7991
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2471": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7933,
        7991
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2472": {
      "op": "DUP4"
    },
    "2473": {
      "op": "DUP2"
    },
    "2474": {
      "op": "MSTORE"
    },
    "2475": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2477": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2479": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2481": {
      "op": "SHL"
    },
    "2482": {
      "op": "SUB"
    },
    "2483": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7960,
        7983
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2484": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7960,
        7983
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2485": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7960,
        7983
      ],
      "op": "AND",
      "path": "2"
    },
    "2486": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7960,
        7983
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2487": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7949,
        7958
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2488": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7949,
        7958
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2489": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7933,
        7991
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0xB162210DA7D23D82C18CFF5AF46D3562661D26B42A6848FA28D64A6BDC70386A"
    },
    "2522": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7933,
        7991
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2523": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2525": {
      "op": "ADD"
    },
    "2526": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7933,
        7991
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2528": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7933,
        7991
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2529": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7933,
        7991
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2530": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7933,
        7991
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2531": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7933,
        7991
      ],
      "op": "SUB",
      "path": "2"
    },
    "2532": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7933,
        7991
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2533": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7933,
        7991
      ],
      "op": "LOG3",
      "path": "2"
    },
    "2534": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6859,
        7998
      ],
      "op": "POP",
      "path": "2"
    },
    "2535": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6801,
        7998
      ],
      "op": "POP",
      "path": "2"
    },
    "2536": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6801,
        7998
      ],
      "op": "POP",
      "path": "2"
    },
    "2537": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "o",
      "offset": [
        6801,
        7998
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2538": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2539": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9171,
        9181
      ],
      "op": "CALLER",
      "path": "2",
      "statement": 22
    },
    "2540": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2542": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2544": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2546": {
      "op": "SHL"
    },
    "2547": {
      "op": "SUB"
    },
    "2548": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9171,
        9196
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2549": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9171,
        9196
      ],
      "op": "AND",
      "path": "2"
    },
    "2550": {
      "branch": 39,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9171,
        9196
      ],
      "op": "EQ",
      "path": "2"
    },
    "2551": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9163,
        9237
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA4E"
    },
    "2554": {
      "branch": 39,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9163,
        9237
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2555": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9163,
        9237
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2557": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9163,
        9237
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2558": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2562": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2564": {
      "op": "SHL"
    },
    "2565": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9163,
        9237
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2566": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9163,
        9237
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2567": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2569": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9163,
        9237
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2571": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9163,
        9237
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2572": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9163,
        9237
      ],
      "op": "ADD",
      "path": "2"
    },
    "2573": {
      "op": "MSTORE"
    },
    "2574": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2576": {
      "op": "DUP1"
    },
    "2577": {
      "op": "DUP3"
    },
    "2578": {
      "op": "ADD"
    },
    "2579": {
      "op": "MSTORE"
    },
    "2580": {
      "op": "PUSH32",
      "value": "0x43616E206F6E6C7920696E697469616C697A6520796F7572206F776E20747261"
    },
    "2613": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2615": {
      "op": "DUP3"
    },
    "2616": {
      "op": "ADD"
    },
    "2617": {
      "op": "MSTORE"
    },
    "2618": {
      "op": "PUSH4",
      "value": "0x6E636865"
    },
    "2623": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2625": {
      "op": "SHL"
    },
    "2626": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2628": {
      "op": "DUP3"
    },
    "2629": {
      "op": "ADD"
    },
    "2630": {
      "op": "MSTORE"
    },
    "2631": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2633": {
      "op": "ADD"
    },
    "2634": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9163,
        9237
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x318"
    },
    "2637": {
      "op": "JUMP"
    },
    "2638": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9163,
        9237
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2639": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2641": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2643": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2645": {
      "op": "SHL"
    },
    "2646": {
      "op": "SUB"
    },
    "2647": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9316
      ],
      "op": "DUP6",
      "path": "2",
      "statement": 23
    },
    "2648": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9316
      ],
      "op": "AND",
      "path": "2"
    },
    "2649": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9316
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2651": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9316
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2652": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9316
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2653": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9316
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2654": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2656": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9316
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2658": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9316
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2659": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9316
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2660": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9316
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2661": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9316
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2663": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9316
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2664": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9316
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2665": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9316
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2666": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9327
      ],
      "op": "DUP10",
      "path": "2"
    },
    "2667": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9327
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2668": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9327
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2669": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9327
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2670": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9327
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2671": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9327
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2672": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9327
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2673": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9327
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2674": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9327
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2675": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9327
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "2677": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9292,
        9327
      ],
      "op": "AND",
      "path": "2"
    },
    "2678": {
      "branch": 40,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9291,
        9327
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2679": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9283,
        9351
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAB8"
    },
    "2682": {
      "branch": 40,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9283,
        9351
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2683": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9283,
        9351
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2685": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9283,
        9351
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2686": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2690": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2692": {
      "op": "SHL"
    },
    "2693": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9283,
        9351
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2694": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9283,
        9351
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2695": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2697": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9283,
        9351
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2699": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9283,
        9351
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2700": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9283,
        9351
      ],
      "op": "ADD",
      "path": "2"
    },
    "2701": {
      "op": "MSTORE"
    },
    "2702": {
      "op": "PUSH1",
      "value": "0x13"
    },
    "2704": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2706": {
      "op": "DUP3"
    },
    "2707": {
      "op": "ADD"
    },
    "2708": {
      "op": "MSTORE"
    },
    "2709": {
      "op": "PUSH19",
      "value": "0x105B1C9958591E481A5B9A5D1A585B1A5E9959"
    },
    "2729": {
      "op": "PUSH1",
      "value": "0x6A"
    },
    "2731": {
      "op": "SHL"
    },
    "2732": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2734": {
      "op": "DUP3"
    },
    "2735": {
      "op": "ADD"
    },
    "2736": {
      "op": "MSTORE"
    },
    "2737": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2739": {
      "op": "ADD"
    },
    "2740": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9283,
        9351
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x318"
    },
    "2743": {
      "op": "JUMP"
    },
    "2744": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9283,
        9351
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2745": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2747": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2748": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2749": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2751": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2753": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2755": {
      "op": "SHL"
    },
    "2756": {
      "op": "SUB"
    },
    "2757": {
      "op": "DUP8"
    },
    "2758": {
      "op": "AND"
    },
    "2759": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2761": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2762": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "ADD",
      "path": "2"
    },
    "2763": {
      "op": "MSTORE"
    },
    "2764": {
      "op": "SWAP1"
    },
    "2765": {
      "op": "DUP2"
    },
    "2766": {
      "op": "ADD"
    },
    "2767": {
      "op": "DUP5"
    },
    "2768": {
      "op": "SWAP1"
    },
    "2769": {
      "op": "MSTORE"
    },
    "2770": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2772": {
      "op": "DUP2"
    },
    "2773": {
      "op": "ADD"
    },
    "2774": {
      "op": "DUP4"
    },
    "2775": {
      "op": "SWAP1"
    },
    "2776": {
      "op": "MSTORE"
    },
    "2777": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9424,
        9436
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2779": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9424,
        9436
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2780": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2782": {
      "op": "ADD"
    },
    "2783": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2785": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2786": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2787": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2789": {
      "op": "NOT"
    },
    "2790": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2791": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2792": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "SUB",
      "path": "2"
    },
    "2793": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "ADD",
      "path": "2"
    },
    "2794": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2795": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2796": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2797": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2798": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2799": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9439,
        9509
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2800": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9439,
        9509
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2801": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9449,
        9508
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2803": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9439,
        9509
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2804": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9439,
        9509
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2805": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9439,
        9509
      ],
      "op": "ADD",
      "path": "2"
    },
    "2806": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9439,
        9509
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2807": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9582
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2809": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9585,
        9607
      ],
      "op": "DUP12",
      "path": "2"
    },
    "2810": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9585,
        9607
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2811": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9585,
        9607
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2812": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9585,
        9596
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2814": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9585,
        9607
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2815": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9585,
        9607
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2816": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9585,
        9607
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2817": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9585,
        9607
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2818": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9585,
        9607
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2819": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9585,
        9607
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2820": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9585,
        9607
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2821": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "2823": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2824": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "ADD",
      "path": "2"
    },
    "2825": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2826": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2827": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2828": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2829": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2830": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2831": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2832": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2834": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2835": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "ADD",
      "path": "2"
    },
    "2836": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2837": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2838": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2839": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "ADD",
      "path": "2"
    },
    "2840": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2841": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2842": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2843": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2844": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2845": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2846": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "ADD",
      "path": "2"
    },
    "2847": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2848": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2849": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2850": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "ADD",
      "path": "2"
    },
    "2851": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2852": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "2854": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2855": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "ADD",
      "path": "2"
    },
    "2856": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2857": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "2859": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2860": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "ADD",
      "path": "2"
    },
    "2861": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2862": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2864": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2865": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2866": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "ADD",
      "path": "2"
    },
    "2867": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2868": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2870": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2871": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "ADD",
      "path": "2"
    },
    "2872": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2873": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "2875": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2876": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "ADD",
      "path": "2"
    },
    "2877": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2878": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2880": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2882": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2884": {
      "op": "SHL"
    },
    "2885": {
      "op": "SUB"
    },
    "2886": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "AND",
      "path": "2"
    },
    "2887": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA0"
    },
    "2889": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2890": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "ADD",
      "path": "2"
    },
    "2891": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2892": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "2894": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2895": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2896": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "ADD",
      "path": "2"
    },
    "2897": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2898": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC0"
    },
    "2900": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2901": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "ADD",
      "path": "2"
    },
    "2902": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2903": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "SWAP3",
      "path": "2",
      "statement": 24
    },
    "2904": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2905": {
      "op": "PUSH4",
      "value": "0x2769CD1F"
    },
    "2910": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "2912": {
      "op": "SHL"
    },
    "2913": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2914": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2915": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9439,
        9509
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2916": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9439,
        9509
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2917": {
      "op": "POP"
    },
    "2918": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9730
      ],
      "op": "PUSH20",
      "path": "2",
      "value": "0x0"
    },
    "2939": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9730
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2940": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9730
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x9DA7347C"
    },
    "2945": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9730
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2946": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB91"
    },
    "2949": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2950": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2951": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9607
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2952": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9439,
        9509
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2953": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9439,
        9509
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2954": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9737,
        9742
      ],
      "op": "DUP10",
      "path": "2"
    },
    "2955": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9737,
        9742
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2956": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "ADD",
      "path": "2"
    },
    "2957": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1095"
    },
    "2960": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        9703,
        9743
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2961": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2962": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2964": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2966": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2967": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2968": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2969": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "SUB",
      "path": "2"
    },
    "2970": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2971": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2972": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2973": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "EXTCODESIZE",
      "path": "2"
    },
    "2974": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2975": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2976": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2977": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBA9"
    },
    "2980": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2981": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2983": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2984": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2985": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2986": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "POP",
      "path": "2"
    },
    "2987": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "GAS",
      "path": "2"
    },
    "2988": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DELEGATECALL",
      "path": "2"
    },
    "2989": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2990": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2991": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2992": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBBD"
    },
    "2995": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2996": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2997": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2999": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3000": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "3001": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "3002": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3004": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "REVERT",
      "path": "2"
    },
    "3005": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3006": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "POP",
      "path": "2"
    },
    "3007": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "POP",
      "path": "2"
    },
    "3008": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "POP",
      "path": "2"
    },
    "3009": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "POP",
      "path": "2"
    },
    "3010": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3012": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3013": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "3014": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "3016": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "NOT",
      "path": "2"
    },
    "3017": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "3019": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3020": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "ADD",
      "path": "2"
    },
    "3021": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "AND",
      "path": "2"
    },
    "3022": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3023": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "ADD",
      "path": "2"
    },
    "3024": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3025": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3027": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3028": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "POP",
      "path": "2"
    },
    "3029": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3030": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "ADD",
      "path": "2"
    },
    "3031": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3032": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBE1"
    },
    "3035": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3036": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3037": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1017"
    },
    "3040": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        9703,
        9743
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3041": {
      "branch": 41,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9703,
        9743
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3042": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9695,
        9780
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC2D"
    },
    "3045": {
      "branch": 41,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9695,
        9780
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "3046": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9695,
        9780
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3048": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9695,
        9780
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3049": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3053": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3055": {
      "op": "SHL"
    },
    "3056": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9695,
        9780
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3057": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9695,
        9780
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3058": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3060": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9695,
        9780
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "3062": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9695,
        9780
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3063": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9695,
        9780
      ],
      "op": "ADD",
      "path": "2"
    },
    "3064": {
      "op": "DUP2"
    },
    "3065": {
      "op": "SWAP1"
    },
    "3066": {
      "op": "MSTORE"
    },
    "3067": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3069": {
      "op": "DUP3"
    },
    "3070": {
      "op": "ADD"
    },
    "3071": {
      "op": "MSTORE"
    },
    "3072": {
      "op": "PUSH32",
      "value": "0x5468652070726F6F6620636F756C64206E6F742062652076657269666965642E"
    },
    "3105": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3107": {
      "op": "DUP3"
    },
    "3108": {
      "op": "ADD"
    },
    "3109": {
      "op": "MSTORE"
    },
    "3110": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3112": {
      "op": "ADD"
    },
    "3113": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9695,
        9780
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x318"
    },
    "3116": {
      "op": "JUMP"
    },
    "3117": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9695,
        9780
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3118": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3120": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3122": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3124": {
      "op": "SHL"
    },
    "3125": {
      "op": "SUB"
    },
    "3126": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "DUP8",
      "path": "2",
      "statement": 25
    },
    "3127": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "AND",
      "path": "2"
    },
    "3128": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3130": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3131": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3132": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3133": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9916,
        9920
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "3135": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3137": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3138": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3139": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3140": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3142": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3143": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3144": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "3145": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9913
      ],
      "op": "DUP13",
      "path": "2"
    },
    "3146": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9913
      ],
      "op": "DUP6",
      "path": "2"
    },
    "3147": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9913
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3148": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9913
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3149": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9913
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3150": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9913
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3151": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9913
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3152": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9913
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "3153": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9920
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3154": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9920
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "3155": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3157": {
      "op": "NOT"
    },
    "3158": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9920
      ],
      "op": "AND",
      "path": "2"
    },
    "3159": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9920
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3160": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9920
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3161": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9920
      ],
      "op": "OR",
      "path": "2"
    },
    "3162": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9920
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3163": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9920
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3164": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3165": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3166": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9878,
        9902
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3167": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10000,
        10081
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC6A"
    },
    "3170": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9903,
        9912
      ],
      "op": "DUP13",
      "path": "2"
    },
    "3171": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10033,
        10044
      ],
      "op": "DUP12",
      "path": "2"
    },
    "3172": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10046,
        10062
      ],
      "op": "DUP12",
      "path": "2"
    },
    "3173": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10064,
        10080
      ],
      "op": "DUP12",
      "path": "2"
    },
    "3174": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10000,
        10021
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x53C"
    },
    "3177": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        10000,
        10081
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3178": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10000,
        10081
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3179": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        10081
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "3180": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        10081
      ],
      "op": "POP",
      "path": "2"
    },
    "3181": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        10081
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "3182": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        10081
      ],
      "op": "POP",
      "path": "2"
    },
    "3183": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        10081
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "3184": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        10081
      ],
      "op": "POP",
      "path": "2"
    },
    "3185": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        10081
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "3186": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        10081
      ],
      "op": "POP",
      "path": "2"
    },
    "3187": {
      "branch": 42,
      "fn": "MerkleResistor.initialize",
      "offset": [
        10099,
        10104
      ],
      "op": "DUP4",
      "path": "2",
      "statement": 26
    },
    "3188": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10091,
        10133
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCBF"
    },
    "3191": {
      "branch": 42,
      "fn": "MerkleResistor.initialize",
      "offset": [
        10091,
        10133
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "3192": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10091,
        10133
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3194": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10091,
        10133
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3195": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3199": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3201": {
      "op": "SHL"
    },
    "3202": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10091,
        10133
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3203": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10091,
        10133
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3204": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3206": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10091,
        10133
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "3208": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10091,
        10133
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3209": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10091,
        10133
      ],
      "op": "ADD",
      "path": "2"
    },
    "3210": {
      "op": "MSTORE"
    },
    "3211": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "3213": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3215": {
      "op": "DUP3"
    },
    "3216": {
      "op": "ADD"
    },
    "3217": {
      "op": "MSTORE"
    },
    "3218": {
      "op": "PUSH32",
      "value": "0x496E76616C69642076657374696E67207363686564756C650000000000000000"
    },
    "3251": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3253": {
      "op": "DUP3"
    },
    "3254": {
      "op": "ADD"
    },
    "3255": {
      "op": "MSTORE"
    },
    "3256": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3258": {
      "op": "ADD"
    },
    "3259": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10091,
        10133
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x318"
    },
    "3262": {
      "op": "JUMP"
    },
    "3263": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10091,
        10133
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3264": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 27,
      "value": "0x40"
    },
    "3266": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3267": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3268": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC0"
    },
    "3270": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3271": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3273": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3274": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3275": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10383,
        10393
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3276": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3277": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3278": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3280": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3281": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10459,
        10469
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3282": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3283": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3284": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3286": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3287": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10505,
        10514
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3288": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3289": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3290": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3292": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3293": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10611,
        10622
      ],
      "op": "DUP12",
      "path": "2"
    },
    "3294": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10593,
        10608
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "3295": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10593,
        10622
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCE8"
    },
    "3298": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10593,
        10622
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3299": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10593,
        10622
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3300": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10593,
        10622
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1062"
    },
    "3303": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        10593,
        10622
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3304": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10593,
        10622
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3305": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3306": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3307": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3309": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3310": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10680,
        10694
      ],
      "op": "DUP4",
      "path": "2"
    },
    "3311": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3312": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3313": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3315": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3316": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10748,
        10757
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3317": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3318": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3319": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10362,
        10865
      ],
      "op": "POP",
      "path": "2"
    },
    "3320": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10335
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "3322": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10348
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3324": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10336,
        10347
      ],
      "op": "DUP14",
      "path": "2"
    },
    "3325": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3327": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3329": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3331": {
      "op": "SHL"
    },
    "3332": {
      "op": "SUB"
    },
    "3333": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10348
      ],
      "op": "AND",
      "path": "2"
    },
    "3334": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3336": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3338": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3340": {
      "op": "SHL"
    },
    "3341": {
      "op": "SUB"
    },
    "3342": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10348
      ],
      "op": "AND",
      "path": "2"
    },
    "3343": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10348
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3344": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10348
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3345": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10348
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3347": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10348
      ],
      "op": "ADD",
      "path": "2"
    },
    "3348": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10348
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3349": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10348
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3350": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10348
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3351": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10348
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3353": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10348
      ],
      "op": "ADD",
      "path": "2"
    },
    "3354": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10348
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3356": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10348
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "3357": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10359
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3359": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10349,
        10358
      ],
      "op": "DUP15",
      "path": "2"
    },
    "3360": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10359
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3361": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10359
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3362": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10359
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3364": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10359
      ],
      "op": "ADD",
      "path": "2"
    },
    "3365": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10359
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3366": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10359
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3367": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10359
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3368": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10359
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3370": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10359
      ],
      "op": "ADD",
      "path": "2"
    },
    "3371": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10359
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3373": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10359
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "3374": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3376": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3377": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3378": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3379": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3380": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3382": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3383": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3384": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3386": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3387": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3388": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3389": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3390": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "3392": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3393": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3394": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3396": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3397": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3398": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3399": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3400": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "3402": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3403": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3404": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "3406": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3407": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3408": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3409": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3410": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "3412": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3413": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3414": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "3416": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3417": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3418": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3419": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3420": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "3422": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3423": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3424": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA0"
    },
    "3426": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3427": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3428": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3429": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3430": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "3432": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "ADD",
      "path": "2"
    },
    "3433": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3434": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3435": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "POP",
      "path": "2"
    },
    "3436": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10327,
        10865
      ],
      "op": "POP",
      "path": "2"
    },
    "3437": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10875,
        10907
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 28,
      "value": "0xD76"
    },
    "3440": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10884,
        10893
      ],
      "op": "DUP13",
      "path": "2"
    },
    "3441": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10895,
        10906
      ],
      "op": "DUP13",
      "path": "2"
    },
    "3442": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10875,
        10883
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x299"
    },
    "3445": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        10875,
        10907
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3446": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10875,
        10907
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3447": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9096,
        10914
      ],
      "op": "POP",
      "path": "2"
    },
    "3448": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9096,
        10914
      ],
      "op": "POP",
      "path": "2"
    },
    "3449": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9096,
        10914
      ],
      "op": "POP",
      "path": "2"
    },
    "3450": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9096,
        10914
      ],
      "op": "POP",
      "path": "2"
    },
    "3451": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9096,
        10914
      ],
      "op": "POP",
      "path": "2"
    },
    "3452": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9096,
        10914
      ],
      "op": "POP",
      "path": "2"
    },
    "3453": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "POP",
      "path": "2"
    },
    "3454": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "POP",
      "path": "2"
    },
    "3455": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "POP",
      "path": "2"
    },
    "3456": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "POP",
      "path": "2"
    },
    "3457": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "POP",
      "path": "2"
    },
    "3458": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        8942,
        10914
      ],
      "op": "POP",
      "path": "2"
    },
    "3459": {
      "fn": "MerkleResistor.initialize",
      "jump": "o",
      "offset": [
        8942,
        10914
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3460": {
      "op": "JUMPDEST"
    },
    "3461": {
      "op": "DUP1"
    },
    "3462": {
      "op": "CALLDATALOAD"
    },
    "3463": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3465": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3467": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3469": {
      "op": "SHL"
    },
    "3470": {
      "op": "SUB"
    },
    "3471": {
      "op": "DUP2"
    },
    "3472": {
      "op": "AND"
    },
    "3473": {
      "op": "DUP2"
    },
    "3474": {
      "op": "EQ"
    },
    "3475": {
      "op": "PUSH2",
      "value": "0xD9B"
    },
    "3478": {
      "op": "JUMPI"
    },
    "3479": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3481": {
      "op": "DUP1"
    },
    "3482": {
      "op": "REVERT"
    },
    "3483": {
      "op": "JUMPDEST"
    },
    "3484": {
      "op": "SWAP2"
    },
    "3485": {
      "op": "SWAP1"
    },
    "3486": {
      "op": "POP"
    },
    "3487": {
      "jump": "o",
      "op": "JUMP"
    },
    "3488": {
      "op": "JUMPDEST"
    },
    "3489": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3491": {
      "op": "DUP1"
    },
    "3492": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3494": {
      "op": "DUP4"
    },
    "3495": {
      "op": "DUP6"
    },
    "3496": {
      "op": "SUB"
    },
    "3497": {
      "op": "SLT"
    },
    "3498": {
      "op": "ISZERO"
    },
    "3499": {
      "op": "PUSH2",
      "value": "0xDB3"
    },
    "3502": {
      "op": "JUMPI"
    },
    "3503": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3505": {
      "op": "DUP1"
    },
    "3506": {
      "op": "REVERT"
    },
    "3507": {
      "op": "JUMPDEST"
    },
    "3508": {
      "op": "DUP3"
    },
    "3509": {
      "op": "CALLDATALOAD"
    },
    "3510": {
      "op": "SWAP2"
    },
    "3511": {
      "op": "POP"
    },
    "3512": {
      "op": "PUSH2",
      "value": "0xDC3"
    },
    "3515": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3517": {
      "op": "DUP5"
    },
    "3518": {
      "op": "ADD"
    },
    "3519": {
      "op": "PUSH2",
      "value": "0xD84"
    },
    "3522": {
      "jump": "i",
      "op": "JUMP"
    },
    "3523": {
      "op": "JUMPDEST"
    },
    "3524": {
      "op": "SWAP1"
    },
    "3525": {
      "op": "POP"
    },
    "3526": {
      "op": "SWAP3"
    },
    "3527": {
      "op": "POP"
    },
    "3528": {
      "op": "SWAP3"
    },
    "3529": {
      "op": "SWAP1"
    },
    "3530": {
      "op": "POP"
    },
    "3531": {
      "jump": "o",
      "op": "JUMP"
    },
    "3532": {
      "op": "JUMPDEST"
    },
    "3533": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3535": {
      "op": "DUP1"
    },
    "3536": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3538": {
      "op": "DUP1"
    },
    "3539": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3541": {
      "op": "DUP6"
    },
    "3542": {
      "op": "DUP8"
    },
    "3543": {
      "op": "SUB"
    },
    "3544": {
      "op": "SLT"
    },
    "3545": {
      "op": "ISZERO"
    },
    "3546": {
      "op": "PUSH2",
      "value": "0xDE2"
    },
    "3549": {
      "op": "JUMPI"
    },
    "3550": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3552": {
      "op": "DUP1"
    },
    "3553": {
      "op": "REVERT"
    },
    "3554": {
      "op": "JUMPDEST"
    },
    "3555": {
      "op": "POP"
    },
    "3556": {
      "op": "POP"
    },
    "3557": {
      "op": "DUP3"
    },
    "3558": {
      "op": "CALLDATALOAD"
    },
    "3559": {
      "op": "SWAP5"
    },
    "3560": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3562": {
      "op": "DUP5"
    },
    "3563": {
      "op": "ADD"
    },
    "3564": {
      "op": "CALLDATALOAD"
    },
    "3565": {
      "op": "SWAP5"
    },
    "3566": {
      "op": "POP"
    },
    "3567": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3569": {
      "op": "DUP5"
    },
    "3570": {
      "op": "ADD"
    },
    "3571": {
      "op": "CALLDATALOAD"
    },
    "3572": {
      "op": "SWAP4"
    },
    "3573": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3575": {
      "op": "ADD"
    },
    "3576": {
      "op": "CALLDATALOAD"
    },
    "3577": {
      "op": "SWAP3"
    },
    "3578": {
      "op": "POP"
    },
    "3579": {
      "op": "SWAP1"
    },
    "3580": {
      "op": "POP"
    },
    "3581": {
      "jump": "o",
      "op": "JUMP"
    },
    "3582": {
      "op": "JUMPDEST"
    },
    "3583": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3585": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3587": {
      "op": "DUP3"
    },
    "3588": {
      "op": "DUP5"
    },
    "3589": {
      "op": "SUB"
    },
    "3590": {
      "op": "SLT"
    },
    "3591": {
      "op": "ISZERO"
    },
    "3592": {
      "op": "PUSH2",
      "value": "0xE10"
    },
    "3595": {
      "op": "JUMPI"
    },
    "3596": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3598": {
      "op": "DUP1"
    },
    "3599": {
      "op": "REVERT"
    },
    "3600": {
      "op": "JUMPDEST"
    },
    "3601": {
      "op": "POP"
    },
    "3602": {
      "op": "CALLDATALOAD"
    },
    "3603": {
      "op": "SWAP2"
    },
    "3604": {
      "op": "SWAP1"
    },
    "3605": {
      "op": "POP"
    },
    "3606": {
      "jump": "o",
      "op": "JUMP"
    },
    "3607": {
      "op": "JUMPDEST"
    },
    "3608": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3610": {
      "op": "DUP1"
    },
    "3611": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3613": {
      "op": "DUP4"
    },
    "3614": {
      "op": "DUP6"
    },
    "3615": {
      "op": "SUB"
    },
    "3616": {
      "op": "SLT"
    },
    "3617": {
      "op": "ISZERO"
    },
    "3618": {
      "op": "PUSH2",
      "value": "0xE2A"
    },
    "3621": {
      "op": "JUMPI"
    },
    "3622": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3624": {
      "op": "DUP1"
    },
    "3625": {
      "op": "REVERT"
    },
    "3626": {
      "op": "JUMPDEST"
    },
    "3627": {
      "op": "PUSH2",
      "value": "0xE33"
    },
    "3630": {
      "op": "DUP4"
    },
    "3631": {
      "op": "PUSH2",
      "value": "0xD84"
    },
    "3634": {
      "jump": "i",
      "op": "JUMP"
    },
    "3635": {
      "op": "JUMPDEST"
    },
    "3636": {
      "op": "SWAP5"
    },
    "3637": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3639": {
      "op": "SWAP4"
    },
    "3640": {
      "op": "SWAP1"
    },
    "3641": {
      "op": "SWAP4"
    },
    "3642": {
      "op": "ADD"
    },
    "3643": {
      "op": "CALLDATALOAD"
    },
    "3644": {
      "op": "SWAP4"
    },
    "3645": {
      "op": "POP"
    },
    "3646": {
      "op": "POP"
    },
    "3647": {
      "op": "POP"
    },
    "3648": {
      "jump": "o",
      "op": "JUMP"
    },
    "3649": {
      "op": "JUMPDEST"
    },
    "3650": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3652": {
      "op": "DUP1"
    },
    "3653": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3655": {
      "op": "DUP1"
    },
    "3656": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3658": {
      "op": "DUP1"
    },
    "3659": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3661": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3663": {
      "op": "DUP9"
    },
    "3664": {
      "op": "DUP11"
    },
    "3665": {
      "op": "SUB"
    },
    "3666": {
      "op": "SLT"
    },
    "3667": {
      "op": "ISZERO"
    },
    "3668": {
      "op": "PUSH2",
      "value": "0xE5C"
    },
    "3671": {
      "op": "JUMPI"
    },
    "3672": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3674": {
      "op": "DUP1"
    },
    "3675": {
      "op": "REVERT"
    },
    "3676": {
      "op": "JUMPDEST"
    },
    "3677": {
      "op": "DUP8"
    },
    "3678": {
      "op": "CALLDATALOAD"
    },
    "3679": {
      "op": "SWAP7"
    },
    "3680": {
      "op": "POP"
    },
    "3681": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3683": {
      "op": "DUP9"
    },
    "3684": {
      "op": "ADD"
    },
    "3685": {
      "op": "CALLDATALOAD"
    },
    "3686": {
      "op": "SWAP6"
    },
    "3687": {
      "op": "POP"
    },
    "3688": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3690": {
      "op": "DUP9"
    },
    "3691": {
      "op": "ADD"
    },
    "3692": {
      "op": "CALLDATALOAD"
    },
    "3693": {
      "op": "SWAP5"
    },
    "3694": {
      "op": "POP"
    },
    "3695": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3697": {
      "op": "DUP9"
    },
    "3698": {
      "op": "ADD"
    },
    "3699": {
      "op": "CALLDATALOAD"
    },
    "3700": {
      "op": "SWAP4"
    },
    "3701": {
      "op": "POP"
    },
    "3702": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3704": {
      "op": "DUP9"
    },
    "3705": {
      "op": "ADD"
    },
    "3706": {
      "op": "CALLDATALOAD"
    },
    "3707": {
      "op": "SWAP3"
    },
    "3708": {
      "op": "POP"
    },
    "3709": {
      "op": "PUSH2",
      "value": "0xE88"
    },
    "3712": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3714": {
      "op": "DUP10"
    },
    "3715": {
      "op": "ADD"
    },
    "3716": {
      "op": "PUSH2",
      "value": "0xD84"
    },
    "3719": {
      "jump": "i",
      "op": "JUMP"
    },
    "3720": {
      "op": "JUMPDEST"
    },
    "3721": {
      "op": "SWAP2"
    },
    "3722": {
      "op": "POP"
    },
    "3723": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "3725": {
      "op": "DUP9"
    },
    "3726": {
      "op": "ADD"
    },
    "3727": {
      "op": "CALLDATALOAD"
    },
    "3728": {
      "op": "SWAP1"
    },
    "3729": {
      "op": "POP"
    },
    "3730": {
      "op": "SWAP3"
    },
    "3731": {
      "op": "SWAP6"
    },
    "3732": {
      "op": "SWAP9"
    },
    "3733": {
      "op": "SWAP2"
    },
    "3734": {
      "op": "SWAP5"
    },
    "3735": {
      "op": "SWAP8"
    },
    "3736": {
      "op": "POP"
    },
    "3737": {
      "op": "SWAP3"
    },
    "3738": {
      "op": "SWAP6"
    },
    "3739": {
      "op": "POP"
    },
    "3740": {
      "jump": "o",
      "op": "JUMP"
    },
    "3741": {
      "op": "JUMPDEST"
    },
    "3742": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3744": {
      "op": "DUP1"
    },
    "3745": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3747": {
      "op": "DUP4"
    },
    "3748": {
      "op": "DUP6"
    },
    "3749": {
      "op": "SUB"
    },
    "3750": {
      "op": "SLT"
    },
    "3751": {
      "op": "ISZERO"
    },
    "3752": {
      "op": "PUSH2",
      "value": "0xEB0"
    },
    "3755": {
      "op": "JUMPI"
    },
    "3756": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3758": {
      "op": "DUP1"
    },
    "3759": {
      "op": "REVERT"
    },
    "3760": {
      "op": "JUMPDEST"
    },
    "3761": {
      "op": "POP"
    },
    "3762": {
      "op": "POP"
    },
    "3763": {
      "op": "DUP1"
    },
    "3764": {
      "op": "CALLDATALOAD"
    },
    "3765": {
      "op": "SWAP3"
    },
    "3766": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3768": {
      "op": "SWAP1"
    },
    "3769": {
      "op": "SWAP2"
    },
    "3770": {
      "op": "ADD"
    },
    "3771": {
      "op": "CALLDATALOAD"
    },
    "3772": {
      "op": "SWAP2"
    },
    "3773": {
      "op": "POP"
    },
    "3774": {
      "jump": "o",
      "op": "JUMP"
    },
    "3775": {
      "op": "JUMPDEST"
    },
    "3776": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3781": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3783": {
      "op": "SHL"
    },
    "3784": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3786": {
      "op": "MSTORE"
    },
    "3787": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "3789": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3791": {
      "op": "MSTORE"
    },
    "3792": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3794": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3796": {
      "op": "REVERT"
    },
    "3797": {
      "op": "JUMPDEST"
    },
    "3798": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3800": {
      "op": "DUP1"
    },
    "3801": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3803": {
      "op": "DUP1"
    },
    "3804": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3806": {
      "op": "DUP1"
    },
    "3807": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "3809": {
      "op": "DUP8"
    },
    "3810": {
      "op": "DUP10"
    },
    "3811": {
      "op": "SUB"
    },
    "3812": {
      "op": "SLT"
    },
    "3813": {
      "op": "ISZERO"
    },
    "3814": {
      "op": "PUSH2",
      "value": "0xEEE"
    },
    "3817": {
      "op": "JUMPI"
    },
    "3818": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3820": {
      "op": "DUP1"
    },
    "3821": {
      "op": "REVERT"
    },
    "3822": {
      "op": "JUMPDEST"
    },
    "3823": {
      "op": "DUP7"
    },
    "3824": {
      "op": "CALLDATALOAD"
    },
    "3825": {
      "op": "SWAP6"
    },
    "3826": {
      "op": "POP"
    },
    "3827": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3829": {
      "op": "PUSH2",
      "value": "0xEFF"
    },
    "3832": {
      "op": "DUP2"
    },
    "3833": {
      "op": "DUP10"
    },
    "3834": {
      "op": "ADD"
    },
    "3835": {
      "op": "PUSH2",
      "value": "0xD84"
    },
    "3838": {
      "jump": "i",
      "op": "JUMP"
    },
    "3839": {
      "op": "JUMPDEST"
    },
    "3840": {
      "op": "SWAP6"
    },
    "3841": {
      "op": "POP"
    },
    "3842": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3844": {
      "op": "DUP9"
    },
    "3845": {
      "op": "ADD"
    },
    "3846": {
      "op": "CALLDATALOAD"
    },
    "3847": {
      "op": "SWAP5"
    },
    "3848": {
      "op": "POP"
    },
    "3849": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3851": {
      "op": "DUP9"
    },
    "3852": {
      "op": "ADD"
    },
    "3853": {
      "op": "CALLDATALOAD"
    },
    "3854": {
      "op": "SWAP4"
    },
    "3855": {
      "op": "POP"
    },
    "3856": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3858": {
      "op": "DUP9"
    },
    "3859": {
      "op": "ADD"
    },
    "3860": {
      "op": "CALLDATALOAD"
    },
    "3861": {
      "op": "SWAP3"
    },
    "3862": {
      "op": "POP"
    },
    "3863": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3865": {
      "op": "DUP9"
    },
    "3866": {
      "op": "ADD"
    },
    "3867": {
      "op": "CALLDATALOAD"
    },
    "3868": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3877": {
      "op": "DUP1"
    },
    "3878": {
      "op": "DUP3"
    },
    "3879": {
      "op": "GT"
    },
    "3880": {
      "op": "ISZERO"
    },
    "3881": {
      "op": "PUSH2",
      "value": "0xF31"
    },
    "3884": {
      "op": "JUMPI"
    },
    "3885": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3887": {
      "op": "DUP1"
    },
    "3888": {
      "op": "REVERT"
    },
    "3889": {
      "op": "JUMPDEST"
    },
    "3890": {
      "op": "DUP2"
    },
    "3891": {
      "op": "DUP11"
    },
    "3892": {
      "op": "ADD"
    },
    "3893": {
      "op": "SWAP2"
    },
    "3894": {
      "op": "POP"
    },
    "3895": {
      "op": "DUP11"
    },
    "3896": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3898": {
      "op": "DUP4"
    },
    "3899": {
      "op": "ADD"
    },
    "3900": {
      "op": "SLT"
    },
    "3901": {
      "op": "PUSH2",
      "value": "0xF45"
    },
    "3904": {
      "op": "JUMPI"
    },
    "3905": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3907": {
      "op": "DUP1"
    },
    "3908": {
      "op": "REVERT"
    },
    "3909": {
      "op": "JUMPDEST"
    },
    "3910": {
      "op": "DUP2"
    },
    "3911": {
      "op": "CALLDATALOAD"
    },
    "3912": {
      "op": "DUP2"
    },
    "3913": {
      "op": "DUP2"
    },
    "3914": {
      "op": "GT"
    },
    "3915": {
      "op": "ISZERO"
    },
    "3916": {
      "op": "PUSH2",
      "value": "0xF57"
    },
    "3919": {
      "op": "JUMPI"
    },
    "3920": {
      "op": "PUSH2",
      "value": "0xF57"
    },
    "3923": {
      "op": "PUSH2",
      "value": "0xEBF"
    },
    "3926": {
      "jump": "i",
      "op": "JUMP"
    },
    "3927": {
      "op": "JUMPDEST"
    },
    "3928": {
      "op": "DUP1"
    },
    "3929": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "3931": {
      "op": "SHL"
    },
    "3932": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3934": {
      "op": "MLOAD"
    },
    "3935": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3937": {
      "op": "NOT"
    },
    "3938": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "3940": {
      "op": "DUP4"
    },
    "3941": {
      "op": "ADD"
    },
    "3942": {
      "op": "AND"
    },
    "3943": {
      "op": "DUP2"
    },
    "3944": {
      "op": "ADD"
    },
    "3945": {
      "op": "DUP2"
    },
    "3946": {
      "op": "DUP2"
    },
    "3947": {
      "op": "LT"
    },
    "3948": {
      "op": "DUP6"
    },
    "3949": {
      "op": "DUP3"
    },
    "3950": {
      "op": "GT"
    },
    "3951": {
      "op": "OR"
    },
    "3952": {
      "op": "ISZERO"
    },
    "3953": {
      "op": "PUSH2",
      "value": "0xF7C"
    },
    "3956": {
      "op": "JUMPI"
    },
    "3957": {
      "op": "PUSH2",
      "value": "0xF7C"
    },
    "3960": {
      "op": "PUSH2",
      "value": "0xEBF"
    },
    "3963": {
      "jump": "i",
      "op": "JUMP"
    },
    "3964": {
      "op": "JUMPDEST"
    },
    "3965": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3967": {
      "op": "MSTORE"
    },
    "3968": {
      "op": "SWAP2"
    },
    "3969": {
      "op": "DUP3"
    },
    "3970": {
      "op": "MSTORE"
    },
    "3971": {
      "op": "DUP5"
    },
    "3972": {
      "op": "DUP3"
    },
    "3973": {
      "op": "ADD"
    },
    "3974": {
      "op": "SWAP3"
    },
    "3975": {
      "op": "POP"
    },
    "3976": {
      "op": "DUP4"
    },
    "3977": {
      "op": "DUP2"
    },
    "3978": {
      "op": "ADD"
    },
    "3979": {
      "op": "DUP6"
    },
    "3980": {
      "op": "ADD"
    },
    "3981": {
      "op": "SWAP2"
    },
    "3982": {
      "op": "DUP14"
    },
    "3983": {
      "op": "DUP4"
    },
    "3984": {
      "op": "GT"
    },
    "3985": {
      "op": "ISZERO"
    },
    "3986": {
      "op": "PUSH2",
      "value": "0xF9A"
    },
    "3989": {
      "op": "JUMPI"
    },
    "3990": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3992": {
      "op": "DUP1"
    },
    "3993": {
      "op": "REVERT"
    },
    "3994": {
      "op": "JUMPDEST"
    },
    "3995": {
      "op": "SWAP4"
    },
    "3996": {
      "op": "DUP6"
    },
    "3997": {
      "op": "ADD"
    },
    "3998": {
      "op": "SWAP4"
    },
    "3999": {
      "op": "JUMPDEST"
    },
    "4000": {
      "op": "DUP3"
    },
    "4001": {
      "op": "DUP6"
    },
    "4002": {
      "op": "LT"
    },
    "4003": {
      "op": "ISZERO"
    },
    "4004": {
      "op": "PUSH2",
      "value": "0xFB8"
    },
    "4007": {
      "op": "JUMPI"
    },
    "4008": {
      "op": "DUP5"
    },
    "4009": {
      "op": "CALLDATALOAD"
    },
    "4010": {
      "op": "DUP5"
    },
    "4011": {
      "op": "MSTORE"
    },
    "4012": {
      "op": "SWAP4"
    },
    "4013": {
      "op": "DUP6"
    },
    "4014": {
      "op": "ADD"
    },
    "4015": {
      "op": "SWAP4"
    },
    "4016": {
      "op": "SWAP3"
    },
    "4017": {
      "op": "DUP6"
    },
    "4018": {
      "op": "ADD"
    },
    "4019": {
      "op": "SWAP3"
    },
    "4020": {
      "op": "PUSH2",
      "value": "0xF9F"
    },
    "4023": {
      "op": "JUMP"
    },
    "4024": {
      "op": "JUMPDEST"
    },
    "4025": {
      "op": "DUP1"
    },
    "4026": {
      "op": "SWAP7"
    },
    "4027": {
      "op": "POP"
    },
    "4028": {
      "op": "POP"
    },
    "4029": {
      "op": "POP"
    },
    "4030": {
      "op": "POP"
    },
    "4031": {
      "op": "POP"
    },
    "4032": {
      "op": "POP"
    },
    "4033": {
      "op": "POP"
    },
    "4034": {
      "op": "SWAP3"
    },
    "4035": {
      "op": "SWAP6"
    },
    "4036": {
      "op": "POP"
    },
    "4037": {
      "op": "SWAP3"
    },
    "4038": {
      "op": "SWAP6"
    },
    "4039": {
      "op": "POP"
    },
    "4040": {
      "op": "SWAP3"
    },
    "4041": {
      "op": "SWAP6"
    },
    "4042": {
      "jump": "o",
      "op": "JUMP"
    },
    "4043": {
      "op": "JUMPDEST"
    },
    "4044": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4049": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4051": {
      "op": "SHL"
    },
    "4052": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4054": {
      "op": "MSTORE"
    },
    "4055": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "4057": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4059": {
      "op": "MSTORE"
    },
    "4060": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4062": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4064": {
      "op": "REVERT"
    },
    "4065": {
      "op": "JUMPDEST"
    },
    "4066": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4068": {
      "op": "DUP3"
    },
    "4069": {
      "op": "DUP3"
    },
    "4070": {
      "op": "LT"
    },
    "4071": {
      "op": "ISZERO"
    },
    "4072": {
      "op": "PUSH2",
      "value": "0xFF3"
    },
    "4075": {
      "op": "JUMPI"
    },
    "4076": {
      "op": "PUSH2",
      "value": "0xFF3"
    },
    "4079": {
      "op": "PUSH2",
      "value": "0xFCB"
    },
    "4082": {
      "jump": "i",
      "op": "JUMP"
    },
    "4083": {
      "op": "JUMPDEST"
    },
    "4084": {
      "op": "POP"
    },
    "4085": {
      "op": "SUB"
    },
    "4086": {
      "op": "SWAP1"
    },
    "4087": {
      "jump": "o",
      "op": "JUMP"
    },
    "4088": {
      "op": "JUMPDEST"
    },
    "4089": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4091": {
      "op": "DUP2"
    },
    "4092": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4094": {
      "op": "NOT"
    },
    "4095": {
      "op": "DIV"
    },
    "4096": {
      "op": "DUP4"
    },
    "4097": {
      "op": "GT"
    },
    "4098": {
      "op": "DUP3"
    },
    "4099": {
      "op": "ISZERO"
    },
    "4100": {
      "op": "ISZERO"
    },
    "4101": {
      "op": "AND"
    },
    "4102": {
      "op": "ISZERO"
    },
    "4103": {
      "op": "PUSH2",
      "value": "0x1012"
    },
    "4106": {
      "op": "JUMPI"
    },
    "4107": {
      "op": "PUSH2",
      "value": "0x1012"
    },
    "4110": {
      "op": "PUSH2",
      "value": "0xFCB"
    },
    "4113": {
      "jump": "i",
      "op": "JUMP"
    },
    "4114": {
      "op": "JUMPDEST"
    },
    "4115": {
      "op": "POP"
    },
    "4116": {
      "op": "MUL"
    },
    "4117": {
      "op": "SWAP1"
    },
    "4118": {
      "jump": "o",
      "op": "JUMP"
    },
    "4119": {
      "op": "JUMPDEST"
    },
    "4120": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4122": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4124": {
      "op": "DUP3"
    },
    "4125": {
      "op": "DUP5"
    },
    "4126": {
      "op": "SUB"
    },
    "4127": {
      "op": "SLT"
    },
    "4128": {
      "op": "ISZERO"
    },
    "4129": {
      "op": "PUSH2",
      "value": "0x1029"
    },
    "4132": {
      "op": "JUMPI"
    },
    "4133": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4135": {
      "op": "DUP1"
    },
    "4136": {
      "op": "REVERT"
    },
    "4137": {
      "op": "JUMPDEST"
    },
    "4138": {
      "op": "DUP2"
    },
    "4139": {
      "op": "MLOAD"
    },
    "4140": {
      "op": "DUP1"
    },
    "4141": {
      "op": "ISZERO"
    },
    "4142": {
      "op": "ISZERO"
    },
    "4143": {
      "op": "DUP2"
    },
    "4144": {
      "op": "EQ"
    },
    "4145": {
      "op": "PUSH2",
      "value": "0x1039"
    },
    "4148": {
      "op": "JUMPI"
    },
    "4149": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4151": {
      "op": "DUP1"
    },
    "4152": {
      "op": "REVERT"
    },
    "4153": {
      "op": "JUMPDEST"
    },
    "4154": {
      "op": "SWAP4"
    },
    "4155": {
      "op": "SWAP3"
    },
    "4156": {
      "op": "POP"
    },
    "4157": {
      "op": "POP"
    },
    "4158": {
      "op": "POP"
    },
    "4159": {
      "jump": "o",
      "op": "JUMP"
    },
    "4160": {
      "op": "JUMPDEST"
    },
    "4161": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4163": {
      "op": "DUP3"
    },
    "4164": {
      "op": "PUSH2",
      "value": "0x105D"
    },
    "4167": {
      "op": "JUMPI"
    },
    "4168": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4173": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4175": {
      "op": "SHL"
    },
    "4176": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4178": {
      "op": "MSTORE"
    },
    "4179": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "4181": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4183": {
      "op": "MSTORE"
    },
    "4184": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4186": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4188": {
      "op": "REVERT"
    },
    "4189": {
      "op": "JUMPDEST"
    },
    "4190": {
      "op": "POP"
    },
    "4191": {
      "op": "DIV"
    },
    "4192": {
      "op": "SWAP1"
    },
    "4193": {
      "jump": "o",
      "op": "JUMP"
    },
    "4194": {
      "op": "JUMPDEST"
    },
    "4195": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4197": {
      "op": "DUP3"
    },
    "4198": {
      "op": "NOT"
    },
    "4199": {
      "op": "DUP3"
    },
    "4200": {
      "op": "GT"
    },
    "4201": {
      "op": "ISZERO"
    },
    "4202": {
      "op": "PUSH2",
      "value": "0x1075"
    },
    "4205": {
      "op": "JUMPI"
    },
    "4206": {
      "op": "PUSH2",
      "value": "0x1075"
    },
    "4209": {
      "op": "PUSH2",
      "value": "0xFCB"
    },
    "4212": {
      "jump": "i",
      "op": "JUMP"
    },
    "4213": {
      "op": "JUMPDEST"
    },
    "4214": {
      "op": "POP"
    },
    "4215": {
      "op": "ADD"
    },
    "4216": {
      "op": "SWAP1"
    },
    "4217": {
      "jump": "o",
      "op": "JUMP"
    },
    "4218": {
      "op": "JUMPDEST"
    },
    "4219": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4221": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4223": {
      "op": "NOT"
    },
    "4224": {
      "op": "DUP3"
    },
    "4225": {
      "op": "EQ"
    },
    "4226": {
      "op": "ISZERO"
    },
    "4227": {
      "op": "PUSH2",
      "value": "0x108E"
    },
    "4230": {
      "op": "JUMPI"
    },
    "4231": {
      "op": "PUSH2",
      "value": "0x108E"
    },
    "4234": {
      "op": "PUSH2",
      "value": "0xFCB"
    },
    "4237": {
      "jump": "i",
      "op": "JUMP"
    },
    "4238": {
      "op": "JUMPDEST"
    },
    "4239": {
      "op": "POP"
    },
    "4240": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4242": {
      "op": "ADD"
    },
    "4243": {
      "op": "SWAP1"
    },
    "4244": {
      "jump": "o",
      "op": "JUMP"
    },
    "4245": {
      "op": "JUMPDEST"
    },
    "4246": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4248": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4250": {
      "op": "DUP3"
    },
    "4251": {
      "op": "ADD"
    },
    "4252": {
      "op": "DUP6"
    },
    "4253": {
      "op": "DUP4"
    },
    "4254": {
      "op": "MSTORE"
    },
    "4255": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4257": {
      "op": "DUP6"
    },
    "4258": {
      "op": "DUP2"
    },
    "4259": {
      "op": "DUP6"
    },
    "4260": {
      "op": "ADD"
    },
    "4261": {
      "op": "MSTORE"
    },
    "4262": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4264": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4266": {
      "op": "DUP6"
    },
    "4267": {
      "op": "ADD"
    },
    "4268": {
      "op": "MSTORE"
    },
    "4269": {
      "op": "DUP2"
    },
    "4270": {
      "op": "DUP6"
    },
    "4271": {
      "op": "MLOAD"
    },
    "4272": {
      "op": "DUP1"
    },
    "4273": {
      "op": "DUP5"
    },
    "4274": {
      "op": "MSTORE"
    },
    "4275": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4277": {
      "op": "DUP7"
    },
    "4278": {
      "op": "ADD"
    },
    "4279": {
      "op": "SWAP2"
    },
    "4280": {
      "op": "POP"
    },
    "4281": {
      "op": "DUP3"
    },
    "4282": {
      "op": "DUP8"
    },
    "4283": {
      "op": "ADD"
    },
    "4284": {
      "op": "SWAP4"
    },
    "4285": {
      "op": "POP"
    },
    "4286": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4288": {
      "op": "JUMPDEST"
    },
    "4289": {
      "op": "DUP2"
    },
    "4290": {
      "op": "DUP2"
    },
    "4291": {
      "op": "LT"
    },
    "4292": {
      "op": "ISZERO"
    },
    "4293": {
      "op": "PUSH2",
      "value": "0x10DC"
    },
    "4296": {
      "op": "JUMPI"
    },
    "4297": {
      "op": "DUP5"
    },
    "4298": {
      "op": "MLOAD"
    },
    "4299": {
      "op": "DUP4"
    },
    "4300": {
      "op": "MSTORE"
    },
    "4301": {
      "op": "SWAP4"
    },
    "4302": {
      "op": "DUP4"
    },
    "4303": {
      "op": "ADD"
    },
    "4304": {
      "op": "SWAP4"
    },
    "4305": {
      "op": "SWAP2"
    },
    "4306": {
      "op": "DUP4"
    },
    "4307": {
      "op": "ADD"
    },
    "4308": {
      "op": "SWAP2"
    },
    "4309": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4311": {
      "op": "ADD"
    },
    "4312": {
      "op": "PUSH2",
      "value": "0x10C0"
    },
    "4315": {
      "op": "JUMP"
    },
    "4316": {
      "op": "JUMPDEST"
    },
    "4317": {
      "op": "POP"
    },
    "4318": {
      "op": "SWAP1"
    },
    "4319": {
      "op": "SWAP9"
    },
    "4320": {
      "op": "SWAP8"
    },
    "4321": {
      "op": "POP"
    },
    "4322": {
      "op": "POP"
    },
    "4323": {
      "op": "POP"
    },
    "4324": {
      "op": "POP"
    },
    "4325": {
      "op": "POP"
    },
    "4326": {
      "op": "POP"
    },
    "4327": {
      "op": "POP"
    },
    "4328": {
      "op": "POP"
    },
    "4329": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "120498ef1a0e41c7a1d069807612130b985de907",
  "source": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./MerkleLib.sol\";\n\n/// @title A factory pattern for user-chosen vesting-schedules, that is, a time release schedule for tokens, using merkle proofs to scale\n/// @author metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki\n/// @notice This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.\n/// @dev The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof.\n/// @dev User chosen vesting schedules means the contract has parameters that define a line segment that\n/// @dev describes a range of vesting-schedule parameters within which the user can negotiate tradeoffs\n/// @dev More tokens => longer vesting time && slower drip, when used correctly, but the contract does not enforce\n/// @dev coherence of vesting schedules, so someone could make a range of vesting schedules in which\n/// @dev more tokens => longer vesting time && faster drip, but this is a user error, also we wouldn't catch it until\n/// @dev after the tree has been initialized and funded, so we just let them do it.\n/// @dev The choice of which parameters to initialize at tree-creation-time versus at schedule-initialization-time is\n/// @dev somewhat arbitrary, but we choose to have min/max end times at tree scope and min/max total payments at first-withdrawal-time\ncontract MerkleResistor {\n    using MerkleLib for bytes32;\n\n    // tree (vesting schedule) counter\n    uint public numTrees = 0;\n\n    // this represents a user chosen vesting schedule, post initiation\n    struct Tranche {\n        uint totalCoins; // total coins released after vesting complete\n        uint currentCoins; // unclaimed coins remaining in the contract, waiting to be vested\n        uint startTime; // start time of the vesting schedule\n        uint endTime;   // end time of the vesting schedule\n        uint coinsPerSecond;  // how many coins are emitted per second, this value is cached to avoid recomputing it\n        uint lastWithdrawalTime; // keep track of last time user claimed coins to compute coins owed for this withdrawal\n    }\n\n    // this represents an arbitrarily large set of token recipients with partially-initialized vesting schedules\n    struct MerkleTree {\n        bytes32 merkleRoot; // merkle root of tree whose leaves are ranges of vesting schedules for each recipient\n        bytes32 ipfsHash; // ipfs hash of the entire data set represented by the merkle root, in case our servers go down\n        uint minEndTime; // minimum length (offset, not absolute) of vesting schedule in seconds\n        uint maxEndTime; // maximum length (offset, not absolute) of vesting schedule in seconds\n        uint pctUpFront; // percent of vested coins that will be available and withdrawn upon initialization\n        address tokenAddress; // address of token to be distributed\n        uint tokenBalance; // amount of tokens allocated to this tree (this prevents trees from sharing tokens)\n    }\n\n    // initialized[recipient][treeIndex] = hasUserChosenVestingSchedule\n    // could have reused tranches (see below) for this but loading a bool is cheaper than loading an entire struct\n    // NOTE: if a user appears in the same tree multiple times, the first leaf initialized will prevent the others from initializing\n    mapping (address => mapping (uint => bool)) public initialized;\n\n    // basically an array of vesting schedules, but without annoying solidity array syntax\n    mapping (uint => MerkleTree) public merkleTrees;\n\n    // tranches[recipient][treeIndex] = chosenVestingSchedule\n    mapping (address => mapping (uint => Tranche)) public tranches;\n\n    // precision factory used to handle floating point arithmetic\n    uint constant public PRECISION = 1000000;\n\n    // every time a withdrawal occurs\n    event WithdrawalOccurred(uint indexed treeIndex, address indexed destination, uint numTokens, uint tokensLeft);\n\n    // every time a tree is added\n    event MerkleTreeAdded(uint indexed treeIndex, address indexed tokenAddress, bytes32 newRoot, bytes32 ipfsHash);\n\n    // every time a tree is topped up\n    event TokensDeposited(uint indexed treeIndex, address indexed tokenAddress, uint amount);\n\n    /// @notice Add a new merkle tree to the contract, creating a new merkle-vesting-schedule-range\n    /// @dev Anyone may call this function, therefore we must make sure trees cannot affect each other\n    /// @dev Root hash should be built from (destination, minTotalPayments, maxTotalPayments)\n    /// @param newRoot root hash of merkle tree representing vesting schedule ranges\n    /// @param ipfsHash the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable\n    /// @param minEndTime a continuous range of possible end times are specified, this is the minimum\n    /// @param maxEndTime a continuous range of possible end times are specified, this is the maximum\n    /// @param pctUpFront the percent of tokens user will get at initialization time (note this implies no lock time)\n    /// @param tokenAddress the address of the token contract that is being distributed\n    /// @param tokenBalance the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded\n    function addMerkleTree(bytes32 newRoot, bytes32 ipfsHash, uint minEndTime, uint maxEndTime, uint pctUpFront, address tokenAddress, uint tokenBalance) public {\n        // check basic coherence of request\n        require(pctUpFront < 100, 'pctUpFront >= 100');\n        require(minEndTime < maxEndTime, 'minEndTime must be less than maxEndTime');\n\n        // prefix operator ++ increments then evaluates\n        merkleTrees[++numTrees] = MerkleTree(\n            newRoot,\n            ipfsHash,\n            minEndTime,\n            maxEndTime,\n            pctUpFront,\n            tokenAddress,\n            0    // tokenBalance is 0 at first because no tokens have been deposited\n        );\n\n        // pull tokens from user to fund the tree\n        // if tree is insufficiently funded, then some users may not be able to be paid out, this is the responsibility\n        // of the tree creator, if trees are not funded, then the UI will not display the tree\n        depositTokens(numTrees, tokenBalance);\n        emit MerkleTreeAdded(numTrees, tokenAddress, newRoot, ipfsHash);\n    }\n\n    /// @notice Add funds to an existing merkle-tree\n    /// @dev Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious\n    /// @param treeIndex index into array-like map of merkleTrees\n    /// @param value the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded\n    function depositTokens(uint treeIndex, uint value) public {\n        // storage because we edit\n        MerkleTree storage merkleTree = merkleTrees[treeIndex];\n\n        // bookkeeping to make sure trees do not share tokens\n        merkleTree.tokenBalance += value;\n\n        // do the transfer from the caller\n        // NOTE: it is possible for user to overfund the tree and there is no mechanism to reclaim excess tokens\n        // this is because there is no way for the contract to know when a tree has had all leaves claimed.\n        // There is also no way for the contract to know the minimum or maximum liabilities represented by the leaves\n        // in short, there is no on-chain inspection of any of the leaf data except at initialization time\n        // NOTE: a malicious token contract could cause merkleTree.tokenBalance to be out of sync with the token contract\n        // this is an unavoidable possibility, and it could render the tree unusable, while leaving other trees unharmed\n        require(IERC20(merkleTree.tokenAddress).transferFrom(msg.sender, address(this), value), \"ERC20 transfer failed\");\n        emit TokensDeposited(treeIndex, merkleTree.tokenAddress, value);\n    }\n\n    /// @notice Called once per recipient of a vesting schedule to initialize the vesting schedule and fix the parameters\n    /// @dev Only the recipient can initialize their own schedule here, because a meaningful choice is made\n    /// @dev If the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree stats\n    /// @param treeIndex index into array-like map of merkleTrees\n    /// @param destination address that will receive tokens\n    /// @param vestingTime the actual length of the vesting schedule, chosen by the user\n    /// @param minTotalPayments the minimum amount of tokens they will receive, if they choose minEndTime as vestingTime\n    /// @param maxTotalPayments the maximum amount of tokens they will receive, if they choose maxEndTime as vestingTime\n    /// @param proof array of hashes linking leaf hash of (destination, minTotalPayments, maxTotalPayments) to root\n    function initialize(uint treeIndex, address destination, uint vestingTime, uint minTotalPayments, uint maxTotalPayments, bytes32[] memory proof) external {\n        // user selects own vesting schedule, not others\n        require(msg.sender == destination, 'Can only initialize your own tranche');\n        // can only initialize once\n        require(!initialized[destination][treeIndex], \"Already initialized\");\n        // compute merkle leaf, this is first element of proof\n        bytes32 leaf = keccak256(abi.encode(destination, minTotalPayments, maxTotalPayments));\n        // memory because we do not edit\n        MerkleTree memory tree = merkleTrees[treeIndex];\n        // this calls into MerkleLib, super cheap ~1000 gas per proof element\n        require(tree.merkleRoot.verifyProof(leaf, proof), \"The proof could not be verified.\");\n        // mark tree as initialized, preventing re-entrance or multiple initializations\n        initialized[destination][treeIndex] = true;\n\n        (bool valid, uint totalCoins, uint coinsPerSecond, uint startTime) = verifyVestingSchedule(treeIndex, vestingTime, minTotalPayments, maxTotalPayments);\n        require(valid, 'Invalid vesting schedule');\n\n        // fill out the struct for the address' vesting schedule\n        // don't have to mark as storage here, it's implied (why isn't it always implied when written to? solc-devs?)\n        tranches[destination][treeIndex] = Tranche(\n            totalCoins,    // this is just a cached number for UI, not used\n            totalCoins,    // starts out full\n            startTime,     // start time will usually be in the past, if pctUpFront > 0\n            block.timestamp + vestingTime,  // vesting starts from initialization time\n            coinsPerSecond,  // cached value to avoid recomputation\n            startTime      // this is lastWithdrawalTime, set to startTime to indicate no withdrawals have occurred yet\n        );\n        withdraw(treeIndex, destination);\n    }\n\n    /// @notice Move unlocked funds to the destination\n    /// @dev Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of\n    /// @dev who provides the proof and pays the gas, msg.sender is not used in this function\n    /// @param treeIndex index into array-like map of merkleTrees, which tree should we apply the proof to?\n    /// @param destination recipient of tokens\n    function withdraw(uint treeIndex, address destination) public {\n        // initialize first, no operations on empty structs, I don't care if the values are \"probably zero\"\n        require(initialized[destination][treeIndex], \"You must initialize your account first.\");\n        // storage, since we are editing\n        Tranche storage tranche = tranches[destination][treeIndex];\n        // if it's empty, don't bother\n        require(tranche.currentCoins >  0, 'No coins left to withdraw');\n        uint currentWithdrawal = 0;\n\n        // if after vesting period ends, give them the remaining coins, also avoids dust from rounding errors\n        if (block.timestamp >= tranche.endTime) {\n            currentWithdrawal = tranche.currentCoins;\n        } else {\n            // compute allowed withdrawal\n            // secondsElapsedSinceLastWithdrawal * coinsPerSecond == coinsAccumulatedSinceLastWithdrawal\n            currentWithdrawal = (block.timestamp - tranche.lastWithdrawalTime) * tranche.coinsPerSecond;\n        }\n        // muto? servo\n        MerkleTree storage tree = merkleTrees[treeIndex];\n\n        // update struct, modern solidity will catch underflow and prevent currentWithdrawal from exceeding currentCoins\n        // but it's computed internally anyway, not user generated\n        tranche.currentCoins -= currentWithdrawal;\n        // move the time counter up so users can't double-withdraw allocated coins\n        // this also works as a re-entrance gate, so currentWithdrawal would be 0 upon re-entrance\n        tranche.lastWithdrawalTime = block.timestamp;\n        // handle the bookkeeping so trees don't share tokens, do it before transferring to create one more re-entrance gate\n        tree.tokenBalance -= currentWithdrawal;\n\n        // transfer the tokens, brah\n        // NOTE: if this is a malicious token, what could happen?\n        // 1/ token doesn't transfer given amount to recipient, this is bad for user, but does not effect other trees\n        // 2/ token fails for some reason, again bad for user, but this does not effect other trees\n        // 3/ token re-enters this function (or other, but this is the only one that transfers tokens out)\n        // in which case, lastWithdrawalTime == block.timestamp, so currentWithdrawal == 0\n        require(IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal), 'Token transfer failed');\n        emit WithdrawalOccurred(treeIndex, destination, currentWithdrawal, tranche.currentCoins);\n    }\n\n    /// @notice Determine if the proposed vesting schedule is legit\n    /// @dev Anyone may call this to check, but it also returns values used in the initialization of vesting schedules\n    /// @param treeIndex index into array-like map of merkleTrees, which tree are we talking about?\n    /// @param vestingTime user chosen length of vesting schedule\n    /// @param minTotalPayments pre-committed (in the root hash) minimum of possible totalCoins\n    /// @param maxTotalPayments pre-committed (in the root hash) maximum of possible totalCoins\n    /// @return valid is the proposed vesting-schedule valid\n    /// @return totalCoins amount of coins allocated in the vesting schedule\n    /// @return coinsPerSecond amount of coins released every second, in the proposed vesting schedule\n    /// @return startTime start time of vesting schedule implied by supplied parameters, will always be <= block.timestamp\n    function verifyVestingSchedule(uint treeIndex, uint vestingTime, uint minTotalPayments, uint maxTotalPayments) public view returns (bool, uint, uint, uint) {\n        // vesting schedules for non-existing trees are invalid, I don't care how much you like uninitialized structs\n        if (treeIndex > numTrees) {\n            return (false, 0, 0, 0);\n        }\n\n        // memory not storage, since we do not edit the tree, and it's a view function anyways\n        MerkleTree memory tree = merkleTrees[treeIndex];\n\n        // vesting time must sit within the closed interval of [minEndTime, maxEndTime]\n        if (vestingTime > tree.maxEndTime || vestingTime < tree.minEndTime) {\n            return (false, 0, 0, 0);\n        }\n\n        uint totalCoins;\n        if (vestingTime == tree.maxEndTime) {\n            // this is to prevent dust accumulation from rounding errors\n            // maxEndTime results in max payments, no further computation necessary\n            totalCoins = maxTotalPayments;\n        } else {\n            // remember grade school algebra? slope = \u0394y / \u0394x\n            // this is the slope of eligible vesting schedules. In general, 0 < m < 1,\n            // (longer vesting schedules should result in less coins per second, hence \"resistor\")\n            // so we multiply by a precision factor to reduce rounding errors\n            // y axis = total coins released after vesting completed\n            // x axis = length of vesting schedule\n            // this is the line of valid end-points for the chosen vesting schedule line, see below\n            // NOTE: this reverts if minTotalPayments > maxTotalPayments, which is a good thing\n            uint paymentSlope = (maxTotalPayments - minTotalPayments) * PRECISION / (tree.maxEndTime - tree.minEndTime);\n\n            // y = mx + b = paymentSlope * (x - x0) + y0\n            // divide by precision factor here since we have completed the rounding error sensitive operations\n            totalCoins = (paymentSlope * (vestingTime - tree.minEndTime) / PRECISION) + minTotalPayments;\n        }\n\n        // this is a different slope, the slope of their chosen vesting schedule\n        // y axis = cumulative coins emitted\n        // x axis = time elapsed\n        // NOTE: vestingTime starts from block.timestamp, so doesn't include coins already available from pctUpFront\n        // totalCoins / vestingTime is wrong, we have to multiple by the proportion of the coins that are indexed\n        // by vestingTime, which is (100 - pctUpFront) / 100\n        uint coinsPerSecond = (totalCoins * (uint(100) - tree.pctUpFront)) / (vestingTime * 100);\n\n        // vestingTime is relative to initialization point\n        // endTime = block.timestamp + vestingTime\n        // vestingLength = totalCoins / coinsPerSecond\n        uint startTime = block.timestamp + vestingTime - (totalCoins / coinsPerSecond);\n\n        return (true, totalCoins, coinsPerSecond, startTime);\n    }\n\n}\n",
  "sourceMap": "1453:16229:2:-:0;;;1579:1;1556:24;;1453:16229;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/MerkleResistor.sol",
  "type": "contract"
}