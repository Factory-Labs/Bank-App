{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trancheIndex",
          "type": "uint256"
        }
      ],
      "name": "AccountEmpty",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        }
      ],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "BadProof",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalPayments",
          "type": "uint256"
        }
      ],
      "name": "BadVestingSchedule",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "IncoherentTimes",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pct",
          "type": "uint256"
        }
      ],
      "name": "InvalidPct",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trancheIndex",
          "type": "uint256"
        }
      ],
      "name": "UninitializedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        }
      ],
      "name": "MerkleTreeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "trancheIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "TrancheInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensLeft",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalOccurred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pctUpFront",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "name": "addMerkleTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "depositTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trancheIndex",
          "type": "uint256"
        }
      ],
      "name": "getTranche",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleTrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pctUpFront",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numTranchesInitialized",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTrees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalPayments",
          "type": "uint256"
        }
      ],
      "name": "verifyVestingSchedule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "trancheIndex",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "contracts/MerkleLib.sol",
    "2": "contracts/MerkleResistor.sol",
    "4": "interfaces/IERC20.sol"
  },
  "ast": {
    "absolutePath": "contracts/MerkleResistor.sol",
    "exportedSymbols": {
      "IERC20": [
        1917
      ],
      "MerkleLib": [
        1839
      ],
      "MerkleResistor": [
        1148
      ]
    },
    "id": 1149,
    "license": "GPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 370,
        "literals": [
          "solidity",
          "0.8",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "42:23:2"
      },
      {
        "absolutePath": "interfaces/IERC20.sol",
        "file": "../interfaces/IERC20.sol",
        "id": 371,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1149,
        "sourceUnit": 1918,
        "src": "67:34:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/MerkleLib.sol",
        "file": "./MerkleLib.sol",
        "id": 372,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1149,
        "sourceUnit": 1840,
        "src": "102:25:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "MerkleResistor",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 373,
          "nodeType": "StructuredDocumentation",
          "src": "129:1325:2",
          "text": "@title A factory pattern for user-chosen vesting-schedules, that is, a time release schedule for tokens, using merkle proofs to scale\n @author metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki\n @notice This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.\n @dev The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof.\n @dev User chosen vesting schedules means the contract has parameters that define a line segment that\n @dev describes a range of vesting-schedule parameters within which the user can negotiate tradeoffs\n @dev More tokens => longer vesting time && slower drip, when used correctly, but the contract does not enforce\n @dev coherence of vesting schedules, so someone could make a range of vesting schedules in which\n @dev more tokens => longer vesting time && faster drip, but this is a user error, also we wouldn't catch it until\n @dev after the tree has been initialized and funded, so we just let them do it.\n @dev The choice of which parameters to initialize at tree-creation-time versus at schedule-initialization-time is\n @dev somewhat arbitrary, but we choose to have min/max end times at tree scope and min/max total payments at first-withdrawal-time"
        },
        "fullyImplemented": true,
        "id": 1148,
        "linearizedBaseContracts": [
          1148
        ],
        "name": "MerkleResistor",
        "nameLocation": "1463:14:2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 376,
            "libraryName": {
              "id": 374,
              "name": "MerkleLib",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1839,
              "src": "1490:9:2"
            },
            "nodeType": "UsingForDirective",
            "src": "1484:28:2",
            "typeName": {
              "id": 375,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1504:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "390b7c66",
            "id": 378,
            "mutability": "mutable",
            "name": "numTrees",
            "nameLocation": "1569:8:2",
            "nodeType": "VariableDeclaration",
            "scope": 1148,
            "src": "1557:20:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 377,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "1557:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "canonicalName": "MerkleResistor.Tranche",
            "id": 393,
            "members": [
              {
                "constant": false,
                "id": 380,
                "mutability": "mutable",
                "name": "recipient",
                "nameLocation": "1688:9:2",
                "nodeType": "VariableDeclaration",
                "scope": 393,
                "src": "1680:17:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 379,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1680:7:2",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 382,
                "mutability": "mutable",
                "name": "totalCoins",
                "nameLocation": "1712:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 393,
                "src": "1707:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 381,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1707:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 384,
                "mutability": "mutable",
                "name": "currentCoins",
                "nameLocation": "1784:12:2",
                "nodeType": "VariableDeclaration",
                "scope": 393,
                "src": "1779:17:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 383,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1779:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 386,
                "mutability": "mutable",
                "name": "startTime",
                "nameLocation": "1878:9:2",
                "nodeType": "VariableDeclaration",
                "scope": 393,
                "src": "1873:14:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 385,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1873:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 388,
                "mutability": "mutable",
                "name": "endTime",
                "nameLocation": "1940:7:2",
                "nodeType": "VariableDeclaration",
                "scope": 393,
                "src": "1935:12:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 387,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1935:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 390,
                "mutability": "mutable",
                "name": "coinsPerSecond",
                "nameLocation": "2000:14:2",
                "nodeType": "VariableDeclaration",
                "scope": 393,
                "src": "1995:19:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 389,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1995:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 392,
                "mutability": "mutable",
                "name": "lastWithdrawalTime",
                "nameLocation": "2117:18:2",
                "nodeType": "VariableDeclaration",
                "scope": 393,
                "src": "2112:23:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 391,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2112:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Tranche",
            "nameLocation": "1662:7:2",
            "nodeType": "StructDefinition",
            "scope": 1148,
            "src": "1655:575:2",
            "visibility": "public"
          },
          {
            "canonicalName": "MerkleResistor.MerkleTree",
            "id": 419,
            "members": [
              {
                "constant": false,
                "id": 395,
                "mutability": "mutable",
                "name": "merkleRoot",
                "nameLocation": "2385:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 419,
                "src": "2377:18:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 394,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "2377:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 397,
                "mutability": "mutable",
                "name": "ipfsHash",
                "nameLocation": "2500:8:2",
                "nodeType": "VariableDeclaration",
                "scope": 419,
                "src": "2492:16:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 396,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "2492:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 399,
                "mutability": "mutable",
                "name": "minEndTime",
                "nameLocation": "2619:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 419,
                "src": "2614:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 398,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2614:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 401,
                "mutability": "mutable",
                "name": "maxEndTime",
                "nameLocation": "2716:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 419,
                "src": "2711:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 400,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2711:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 403,
                "mutability": "mutable",
                "name": "pctUpFront",
                "nameLocation": "2813:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 419,
                "src": "2808:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 402,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2808:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 405,
                "mutability": "mutable",
                "name": "tokenAddress",
                "nameLocation": "2925:12:2",
                "nodeType": "VariableDeclaration",
                "scope": 419,
                "src": "2917:20:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 404,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "2917:7:2",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 407,
                "mutability": "mutable",
                "name": "tokenBalance",
                "nameLocation": "2990:12:2",
                "nodeType": "VariableDeclaration",
                "scope": 419,
                "src": "2985:17:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 406,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "2985:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 409,
                "mutability": "mutable",
                "name": "numTranchesInitialized",
                "nameLocation": "3102:22:2",
                "nodeType": "VariableDeclaration",
                "scope": 419,
                "src": "3097:27:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 408,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "3097:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 414,
                "mutability": "mutable",
                "name": "tranches",
                "nameLocation": "3160:8:2",
                "nodeType": "VariableDeclaration",
                "scope": 419,
                "src": "3134:34:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$393_storage_$",
                  "typeString": "mapping(uint256 => struct MerkleResistor.Tranche)"
                },
                "typeName": {
                  "id": 413,
                  "keyType": {
                    "id": 410,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3143:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "3134:25:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$393_storage_$",
                    "typeString": "mapping(uint256 => struct MerkleResistor.Tranche)"
                  },
                  "valueType": {
                    "id": 412,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 411,
                      "name": "Tranche",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 393,
                      "src": "3151:7:2"
                    },
                    "referencedDeclaration": 393,
                    "src": "3151:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                      "typeString": "struct MerkleResistor.Tranche"
                    }
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 418,
                "mutability": "mutable",
                "name": "initialized",
                "nameLocation": "3204:11:2",
                "nodeType": "VariableDeclaration",
                "scope": 419,
                "src": "3178:37:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                  "typeString": "mapping(bytes32 => bool)"
                },
                "typeName": {
                  "id": 417,
                  "keyType": {
                    "id": 415,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3187:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "3178:25:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                    "typeString": "mapping(bytes32 => bool)"
                  },
                  "valueType": {
                    "id": 416,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3198:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "MerkleTree",
            "nameLocation": "2356:10:2",
            "nodeType": "StructDefinition",
            "scope": 1148,
            "src": "2349:873:2",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "85d88cb1",
            "id": 424,
            "mutability": "mutable",
            "name": "merkleTrees",
            "nameLocation": "3355:11:2",
            "nodeType": "VariableDeclaration",
            "scope": 1148,
            "src": "3319:47:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$419_storage_$",
              "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree)"
            },
            "typeName": {
              "id": 423,
              "keyType": {
                "id": 420,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "3328:4:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "3319:28:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$419_storage_$",
                "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree)"
              },
              "valueType": {
                "id": 422,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 421,
                  "name": "MerkleTree",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 419,
                  "src": "3336:10:2"
                },
                "referencedDeclaration": 419,
                "src": "3336:10:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                  "typeString": "struct MerkleResistor.MerkleTree"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "aaf5eb68",
            "id": 427,
            "mutability": "constant",
            "name": "PRECISION",
            "nameLocation": "3460:9:2",
            "nodeType": "VariableDeclaration",
            "scope": 1148,
            "src": "3439:40:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 425,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "3439:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31303030303030",
              "id": 426,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "3472:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              },
              "value": "1000000"
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 437,
            "name": "WithdrawalOccurred",
            "nameLocation": "3530:18:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 436,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 429,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "3562:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 437,
                  "src": "3549:22:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 428,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3549:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 431,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "3589:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 437,
                  "src": "3573:27:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 430,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3573:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 433,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "numTokens",
                  "nameLocation": "3607:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 437,
                  "src": "3602:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 432,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3602:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 435,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokensLeft",
                  "nameLocation": "3623:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 437,
                  "src": "3618:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 434,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3618:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3548:86:2"
            },
            "src": "3524:111:2"
          },
          {
            "anonymous": false,
            "id": 447,
            "name": "MerkleTreeAdded",
            "nameLocation": "3681:15:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 446,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 439,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "3710:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 447,
                  "src": "3697:22:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 438,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3697:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 441,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "3737:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 447,
                  "src": "3721:28:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 440,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3721:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 443,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "3759:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 447,
                  "src": "3751:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 442,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3751:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 445,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "3776:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 447,
                  "src": "3768:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 444,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3768:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3696:89:2"
            },
            "src": "3675:111:2"
          },
          {
            "anonymous": false,
            "id": 455,
            "name": "TokensDeposited",
            "nameLocation": "3836:15:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 454,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 449,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "3865:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 455,
                  "src": "3852:22:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 448,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3852:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 451,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "3892:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 455,
                  "src": "3876:28:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 450,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3876:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 453,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "3911:6:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 455,
                  "src": "3906:11:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 452,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3906:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3851:67:2"
            },
            "src": "3830:89:2"
          },
          {
            "anonymous": false,
            "id": 463,
            "name": "TrancheInitialized",
            "nameLocation": "3930:18:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 462,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 457,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "3962:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 463,
                  "src": "3949:22:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 456,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3949:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 459,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "trancheIndex",
                  "nameLocation": "3986:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 463,
                  "src": "3973:25:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 458,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3973:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 461,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "recipient",
                  "nameLocation": "4016:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 463,
                  "src": "4000:25:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 460,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4000:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3948:78:2"
            },
            "src": "3924:103:2"
          },
          {
            "id": 467,
            "name": "InvalidPct",
            "nameLocation": "4039:10:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 466,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 465,
                  "mutability": "mutable",
                  "name": "pct",
                  "nameLocation": "4055:3:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 467,
                  "src": "4050:8:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 464,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4050:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4049:10:2"
            },
            "src": "4033:27:2"
          },
          {
            "id": 473,
            "name": "IncoherentTimes",
            "nameLocation": "4071:15:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 472,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 469,
                  "mutability": "mutable",
                  "name": "min",
                  "nameLocation": "4092:3:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 473,
                  "src": "4087:8:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 468,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4087:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 471,
                  "mutability": "mutable",
                  "name": "max",
                  "nameLocation": "4102:3:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 473,
                  "src": "4097:8:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 470,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4097:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4086:20:2"
            },
            "src": "4065:42:2"
          },
          {
            "id": 479,
            "name": "AlreadyInitialized",
            "nameLocation": "4118:18:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 478,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 475,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4142:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 479,
                  "src": "4137:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 474,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4137:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 477,
                  "mutability": "mutable",
                  "name": "leaf",
                  "nameLocation": "4161:4:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 479,
                  "src": "4153:12:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 476,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4153:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4136:30:2"
            },
            "src": "4112:55:2"
          },
          {
            "id": 488,
            "name": "BadProof",
            "nameLocation": "4178:8:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 487,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 481,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4192:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 488,
                  "src": "4187:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 480,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4187:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 483,
                  "mutability": "mutable",
                  "name": "leaf",
                  "nameLocation": "4211:4:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 488,
                  "src": "4203:12:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 482,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4203:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 486,
                  "mutability": "mutable",
                  "name": "proof",
                  "nameLocation": "4227:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 488,
                  "src": "4217:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 484,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "4217:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 485,
                    "nodeType": "ArrayTypeName",
                    "src": "4217:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4186:47:2"
            },
            "src": "4172:62:2"
          },
          {
            "id": 498,
            "name": "BadVestingSchedule",
            "nameLocation": "4245:18:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 497,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 490,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4269:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 498,
                  "src": "4264:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 489,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4264:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 492,
                  "mutability": "mutable",
                  "name": "vestingTime",
                  "nameLocation": "4285:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 498,
                  "src": "4280:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 491,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4280:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 494,
                  "mutability": "mutable",
                  "name": "minTotalPayments",
                  "nameLocation": "4303:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 498,
                  "src": "4298:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 493,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4298:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 496,
                  "mutability": "mutable",
                  "name": "maxTotalPayments",
                  "nameLocation": "4326:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 498,
                  "src": "4321:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 495,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4321:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4263:80:2"
            },
            "src": "4239:105:2"
          },
          {
            "id": 504,
            "name": "UninitializedAccount",
            "nameLocation": "4355:20:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 503,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 500,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4381:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 504,
                  "src": "4376:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 499,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4376:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 502,
                  "mutability": "mutable",
                  "name": "trancheIndex",
                  "nameLocation": "4397:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 504,
                  "src": "4392:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 501,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4392:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4375:35:2"
            },
            "src": "4349:62:2"
          },
          {
            "id": 510,
            "name": "AccountEmpty",
            "nameLocation": "4422:12:2",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 509,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 506,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "4440:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 510,
                  "src": "4435:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 505,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4435:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 508,
                  "mutability": "mutable",
                  "name": "trancheIndex",
                  "nameLocation": "4456:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 510,
                  "src": "4451:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 507,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4451:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4434:35:2"
            },
            "src": "4416:54:2"
          },
          {
            "body": {
              "id": 603,
              "nodeType": "Block",
              "src": "5691:919:2",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 530,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 528,
                      "name": "pctUpFront",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 521,
                      "src": "5749:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "hexValue": "313030",
                      "id": 529,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "5763:3:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_100_by_1",
                        "typeString": "int_const 100"
                      },
                      "value": "100"
                    },
                    "src": "5749:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 536,
                  "nodeType": "IfStatement",
                  "src": "5745:77:2",
                  "trueBody": {
                    "id": 535,
                    "nodeType": "Block",
                    "src": "5768:54:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 532,
                              "name": "pctUpFront",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 521,
                              "src": "5800:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 531,
                            "name": "InvalidPct",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 467,
                            "src": "5789:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) pure"
                            }
                          },
                          "id": 533,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5789:22:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 534,
                        "nodeType": "RevertStatement",
                        "src": "5782:29:2"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 539,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 537,
                      "name": "minEndTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 517,
                      "src": "5836:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "id": 538,
                      "name": "maxEndTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 519,
                      "src": "5850:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5836:24:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 546,
                  "nodeType": "IfStatement",
                  "src": "5832:101:2",
                  "trueBody": {
                    "id": 545,
                    "nodeType": "Block",
                    "src": "5862:71:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 541,
                              "name": "minEndTime",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 517,
                              "src": "5899:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 542,
                              "name": "maxEndTime",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 519,
                              "src": "5911:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 540,
                            "name": "IncoherentTimes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 473,
                            "src": "5883:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256) pure"
                            }
                          },
                          "id": 543,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5883:39:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 544,
                        "nodeType": "RevertStatement",
                        "src": "5876:46:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    549
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 549,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "5962:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 603,
                      "src": "5943:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 548,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 547,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 419,
                          "src": "5943:10:2"
                        },
                        "referencedDeclaration": 419,
                        "src": "5943:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 554,
                  "initialValue": {
                    "baseExpression": {
                      "id": 550,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 424,
                      "src": "5969:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$419_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 553,
                    "indexExpression": {
                      "id": 552,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "5981:10:2",
                      "subExpression": {
                        "id": 551,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 378,
                        "src": "5983:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5969:23:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$419_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5943:49:2"
                },
                {
                  "expression": {
                    "id": 559,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 555,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 549,
                        "src": "6002:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 557,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "merkleRoot",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 395,
                      "src": "6002:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 558,
                      "name": "newRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 513,
                      "src": "6020:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "6002:25:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 560,
                  "nodeType": "ExpressionStatement",
                  "src": "6002:25:2"
                },
                {
                  "expression": {
                    "id": 565,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 561,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 549,
                        "src": "6037:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 563,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ipfsHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 397,
                      "src": "6037:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 564,
                      "name": "ipfsHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 515,
                      "src": "6053:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "6037:24:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 566,
                  "nodeType": "ExpressionStatement",
                  "src": "6037:24:2"
                },
                {
                  "expression": {
                    "id": 571,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 567,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 549,
                        "src": "6071:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 569,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "minEndTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 399,
                      "src": "6071:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 570,
                      "name": "minEndTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 517,
                      "src": "6089:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6071:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 572,
                  "nodeType": "ExpressionStatement",
                  "src": "6071:28:2"
                },
                {
                  "expression": {
                    "id": 577,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 573,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 549,
                        "src": "6109:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 575,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "maxEndTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 401,
                      "src": "6109:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 576,
                      "name": "maxEndTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 519,
                      "src": "6127:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6109:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 578,
                  "nodeType": "ExpressionStatement",
                  "src": "6109:28:2"
                },
                {
                  "expression": {
                    "id": 583,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 579,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 549,
                        "src": "6147:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 581,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "pctUpFront",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 403,
                      "src": "6147:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 582,
                      "name": "pctUpFront",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 521,
                      "src": "6165:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6147:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 584,
                  "nodeType": "ExpressionStatement",
                  "src": "6147:28:2"
                },
                {
                  "expression": {
                    "id": 589,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 585,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 549,
                        "src": "6185:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 587,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 405,
                      "src": "6185:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 588,
                      "name": "tokenAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 523,
                      "src": "6205:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6185:32:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 590,
                  "nodeType": "ExpressionStatement",
                  "src": "6185:32:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 592,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 378,
                        "src": "6507:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 593,
                        "name": "tokenBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 525,
                        "src": "6517:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 591,
                      "name": "depositTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 679,
                      "src": "6493:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 594,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6493:37:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 595,
                  "nodeType": "ExpressionStatement",
                  "src": "6493:37:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 597,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 378,
                        "src": "6561:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 598,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 523,
                        "src": "6571:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 599,
                        "name": "newRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 513,
                        "src": "6585:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 600,
                        "name": "ipfsHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 515,
                        "src": "6594:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 596,
                      "name": "MerkleTreeAdded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 447,
                      "src": "6545:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_bytes32_$_t_bytes32_$returns$__$",
                        "typeString": "function (uint256,address,bytes32,bytes32)"
                      }
                    },
                    "id": 601,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6545:58:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 602,
                  "nodeType": "EmitStatement",
                  "src": "6540:63:2"
                }
              ]
            },
            "documentation": {
              "id": 511,
              "nodeType": "StructuredDocumentation",
              "src": "4476:1053:2",
              "text": "@notice Add a new merkle tree to the contract, creating a new merkle-vesting-schedule-range\n @dev Anyone may call this function, therefore we must make sure trees cannot affect each other\n @dev Root hash should be built from (destination, minTotalPayments, maxTotalPayments)\n @param newRoot root hash of merkle tree representing vesting schedule ranges\n @param ipfsHash the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable\n @param minEndTime a continuous range of possible end times are specified, this is the minimum\n @param maxEndTime a continuous range of possible end times are specified, this is the maximum\n @param pctUpFront the percent of tokens user will get at initialization time (note this implies no lock time)\n @param tokenAddress the address of the token contract that is being distributed\n @param tokenBalance the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
            },
            "functionSelector": "d71383ed",
            "id": 604,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addMerkleTree",
            "nameLocation": "5543:13:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 526,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 513,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "5565:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 604,
                  "src": "5557:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 512,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5557:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 515,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "5582:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 604,
                  "src": "5574:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 514,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5574:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 517,
                  "mutability": "mutable",
                  "name": "minEndTime",
                  "nameLocation": "5597:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 604,
                  "src": "5592:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 516,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5592:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 519,
                  "mutability": "mutable",
                  "name": "maxEndTime",
                  "nameLocation": "5614:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 604,
                  "src": "5609:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 518,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5609:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 521,
                  "mutability": "mutable",
                  "name": "pctUpFront",
                  "nameLocation": "5631:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 604,
                  "src": "5626:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 520,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5626:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 523,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "5651:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 604,
                  "src": "5643:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 522,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5643:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 525,
                  "mutability": "mutable",
                  "name": "tokenBalance",
                  "nameLocation": "5670:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 604,
                  "src": "5665:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 524,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5665:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5556:127:2"
            },
            "returnParameters": {
              "id": 527,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5691:0:2"
            },
            "scope": 1148,
            "src": "5534:1076:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 678,
              "nodeType": "Block",
              "src": "7043:1408:2",
              "statements": [
                {
                  "assignments": [
                    614
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 614,
                      "mutability": "mutable",
                      "name": "merkleTree",
                      "nameLocation": "7107:10:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 678,
                      "src": "7088:29:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 613,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 612,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 419,
                          "src": "7088:10:2"
                        },
                        "referencedDeclaration": 419,
                        "src": "7088:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 618,
                  "initialValue": {
                    "baseExpression": {
                      "id": 615,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 424,
                      "src": "7120:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$419_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 617,
                    "indexExpression": {
                      "id": 616,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 607,
                      "src": "7132:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "7120:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$419_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7088:54:2"
                },
                {
                  "assignments": [
                    621
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 621,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "7160:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 678,
                      "src": "7153:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$1917",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 620,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 619,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1917,
                          "src": "7153:6:2"
                        },
                        "referencedDeclaration": 1917,
                        "src": "7153:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1917",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 626,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 623,
                          "name": "merkleTree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 614,
                          "src": "7175:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 624,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "tokenAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 405,
                        "src": "7175:23:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 622,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1917,
                      "src": "7168:6:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$1917_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 625,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7168:31:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$1917",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7153:46:2"
                },
                {
                  "assignments": [
                    628
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 628,
                      "mutability": "mutable",
                      "name": "balanceBefore",
                      "nameLocation": "7214:13:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 678,
                      "src": "7209:18:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 627,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "7209:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 636,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 633,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "7254:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1148",
                              "typeString": "contract MerkleResistor"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1148",
                              "typeString": "contract MerkleResistor"
                            }
                          ],
                          "id": 632,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "7246:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 631,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "7246:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 634,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7246:13:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 629,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 621,
                        "src": "7230:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1917",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 630,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1856,
                      "src": "7230:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 635,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7230:30:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7209:51:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 640,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "8022:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 641,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "8022:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 644,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "8042:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1148",
                              "typeString": "contract MerkleResistor"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1148",
                              "typeString": "contract MerkleResistor"
                            }
                          ],
                          "id": 643,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8034:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 642,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8034:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 645,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8034:13:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 646,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 609,
                        "src": "8049:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 637,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 621,
                        "src": "8003:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1917",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 639,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1898,
                      "src": "8003:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,address,uint256) external returns (bool)"
                      }
                    },
                    "id": 647,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8003:52:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 648,
                  "nodeType": "ExpressionStatement",
                  "src": "8003:52:2"
                },
                {
                  "assignments": [
                    650
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 650,
                      "mutability": "mutable",
                      "name": "balanceAfter",
                      "nameLocation": "8071:12:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 678,
                      "src": "8066:17:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 649,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "8066:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 658,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 655,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "8110:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1148",
                              "typeString": "contract MerkleResistor"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1148",
                              "typeString": "contract MerkleResistor"
                            }
                          ],
                          "id": 654,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "8102:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 653,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "8102:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 656,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8102:13:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 651,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 621,
                        "src": "8086:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1917",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 652,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1856,
                      "src": "8086:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 657,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8086:30:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8066:50:2"
                },
                {
                  "assignments": [
                    660
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 660,
                      "mutability": "mutable",
                      "name": "diff",
                      "nameLocation": "8233:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 678,
                      "src": "8228:9:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 659,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "8228:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 664,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 663,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 661,
                      "name": "balanceAfter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 650,
                      "src": "8240:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "id": 662,
                      "name": "balanceBefore",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 628,
                      "src": "8255:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8240:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "8228:40:2"
                },
                {
                  "expression": {
                    "id": 669,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 665,
                        "name": "merkleTree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 614,
                        "src": "8341:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 667,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 407,
                      "src": "8341:23:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 668,
                      "name": "diff",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 660,
                      "src": "8368:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8341:31:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 670,
                  "nodeType": "ExpressionStatement",
                  "src": "8341:31:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 672,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 607,
                        "src": "8403:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 673,
                          "name": "merkleTree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 614,
                          "src": "8414:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 674,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "tokenAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 405,
                        "src": "8414:23:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 675,
                        "name": "diff",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 660,
                        "src": "8439:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 671,
                      "name": "TokensDeposited",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 455,
                      "src": "8387:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,address,uint256)"
                      }
                    },
                    "id": 676,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8387:57:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 677,
                  "nodeType": "EmitStatement",
                  "src": "8382:62:2"
                }
              ]
            },
            "documentation": {
              "id": 605,
              "nodeType": "StructuredDocumentation",
              "src": "6616:364:2",
              "text": "@notice Add funds to an existing merkle-tree\n @dev Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious\n @param treeIndex index into array-like map of merkleTrees\n @param value the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
            },
            "functionSelector": "f16ad51e",
            "id": 679,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "depositTokens",
            "nameLocation": "6994:13:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 610,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 607,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "7013:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 679,
                  "src": "7008:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 606,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7008:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 609,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "7029:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 679,
                  "src": "7024:10:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 608,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "7024:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7007:28:2"
            },
            "returnParameters": {
              "id": 611,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7043:0:2"
            },
            "scope": 1148,
            "src": "6985:1466:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 816,
              "nodeType": "Block",
              "src": "9524:1844:2",
              "statements": [
                {
                  "assignments": [
                    698
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 698,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "9553:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 816,
                      "src": "9534:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 697,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 696,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 419,
                          "src": "9534:10:2"
                        },
                        "referencedDeclaration": 419,
                        "src": "9534:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 702,
                  "initialValue": {
                    "baseExpression": {
                      "id": 699,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 424,
                      "src": "9560:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$419_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 701,
                    "indexExpression": {
                      "id": 700,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 682,
                      "src": "9572:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "9560:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$419_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9534:48:2"
                },
                {
                  "assignments": [
                    704
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 704,
                      "mutability": "mutable",
                      "name": "leaf",
                      "nameLocation": "9663:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 816,
                      "src": "9655:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 703,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "9655:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 714,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 708,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "9691:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 709,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "9691:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 710,
                            "name": "minTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 686,
                            "src": "9703:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 711,
                            "name": "maxTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 688,
                            "src": "9721:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 706,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "9680:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 707,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "9680:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 712,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9680:58:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 705,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "9670:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 713,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9670:69:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9655:84:2"
                },
                {
                  "condition": {
                    "baseExpression": {
                      "expression": {
                        "id": 715,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 698,
                        "src": "9754:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 716,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "initialized",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 418,
                      "src": "9754:16:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                        "typeString": "mapping(bytes32 => bool)"
                      }
                    },
                    "id": 718,
                    "indexExpression": {
                      "id": 717,
                      "name": "leaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 704,
                      "src": "9771:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "9754:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 725,
                  "nodeType": "IfStatement",
                  "src": "9750:95:2",
                  "trueBody": {
                    "id": 724,
                    "nodeType": "Block",
                    "src": "9778:67:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 720,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 682,
                              "src": "9818:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 721,
                              "name": "leaf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 704,
                              "src": "9829:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 719,
                            "name": "AlreadyInitialized",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 479,
                            "src": "9799:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_bytes32_$returns$__$",
                              "typeString": "function (uint256,bytes32) pure"
                            }
                          },
                          "id": 722,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9799:35:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 723,
                        "nodeType": "RevertStatement",
                        "src": "9792:42:2"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 733,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "id": 729,
                          "name": "leaf",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 704,
                          "src": "9887:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 730,
                          "name": "proof",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 691,
                          "src": "9893:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                            "typeString": "bytes32[] memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                            "typeString": "bytes32[] memory"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "id": 726,
                            "name": "tree",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 698,
                            "src": "9859:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                              "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                            }
                          },
                          "id": 727,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "merkleRoot",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 395,
                          "src": "9859:15:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 728,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "verifyProof",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1806,
                        "src": "9859:27:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_delegatecall_pure$_t_bytes32_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes32_$",
                          "typeString": "function (bytes32,bytes32,bytes32[] memory) pure returns (bool)"
                        }
                      },
                      "id": 731,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "9859:40:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "66616c7365",
                      "id": 732,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "9903:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "9859:49:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 741,
                  "nodeType": "IfStatement",
                  "src": "9855:119:2",
                  "trueBody": {
                    "id": 740,
                    "nodeType": "Block",
                    "src": "9910:64:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 735,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 682,
                              "src": "9940:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 736,
                              "name": "leaf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 704,
                              "src": "9951:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 737,
                              "name": "proof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 691,
                              "src": "9957:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            ],
                            "id": 734,
                            "name": "BadProof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 488,
                            "src": "9931:8:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$__$",
                              "typeString": "function (uint256,bytes32,bytes32[] memory) pure"
                            }
                          },
                          "id": 738,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9931:32:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 739,
                        "nodeType": "RevertStatement",
                        "src": "9924:39:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    743,
                    745,
                    747,
                    749
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 743,
                      "mutability": "mutable",
                      "name": "valid",
                      "nameLocation": "9990:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 816,
                      "src": "9985:10:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 742,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "9985:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 745,
                      "mutability": "mutable",
                      "name": "totalCoins",
                      "nameLocation": "10002:10:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 816,
                      "src": "9997:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 744,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "9997:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 747,
                      "mutability": "mutable",
                      "name": "coinsPerSecond",
                      "nameLocation": "10019:14:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 816,
                      "src": "10014:19:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 746,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "10014:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 749,
                      "mutability": "mutable",
                      "name": "startTime",
                      "nameLocation": "10040:9:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 816,
                      "src": "10035:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 748,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "10035:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 756,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 751,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 682,
                        "src": "10075:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 752,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 684,
                        "src": "10086:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 753,
                        "name": "minTotalPayments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 686,
                        "src": "10099:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 754,
                        "name": "maxTotalPayments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 688,
                        "src": "10117:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 750,
                      "name": "verifyVestingSchedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1099,
                      "src": "10053:21:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256,uint256) view returns (bool,uint256,uint256,uint256)"
                      }
                    },
                    "id": 755,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "10053:81:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(bool,uint256,uint256,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9984:150:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 759,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 757,
                      "name": "valid",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 743,
                      "src": "10149:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "66616c7365",
                      "id": 758,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10158:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "10149:14:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 768,
                  "nodeType": "IfStatement",
                  "src": "10145:130:2",
                  "trueBody": {
                    "id": 767,
                    "nodeType": "Block",
                    "src": "10165:110:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 761,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 682,
                              "src": "10205:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 762,
                              "name": "vestingTime",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 684,
                              "src": "10216:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 763,
                              "name": "minTotalPayments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 686,
                              "src": "10229:16:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 764,
                              "name": "maxTotalPayments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 688,
                              "src": "10247:16:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 760,
                            "name": "BadVestingSchedule",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 498,
                            "src": "10186:18:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256,uint256,uint256) pure"
                            }
                          },
                          "id": 765,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10186:78:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 766,
                        "nodeType": "RevertStatement",
                        "src": "10179:85:2"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 775,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "expression": {
                          "id": 769,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 698,
                          "src": "10373:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 772,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "initialized",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 418,
                        "src": "10373:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                          "typeString": "mapping(bytes32 => bool)"
                        }
                      },
                      "id": 773,
                      "indexExpression": {
                        "id": 771,
                        "name": "leaf",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 704,
                        "src": "10390:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "10373:22:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 774,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10398:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "10373:29:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 776,
                  "nodeType": "ExpressionStatement",
                  "src": "10373:29:2"
                },
                {
                  "expression": {
                    "id": 797,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "expression": {
                          "id": 777,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 698,
                          "src": "10597:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 782,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "tranches",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 414,
                        "src": "10597:13:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$393_storage_$",
                          "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"
                        }
                      },
                      "id": 783,
                      "indexExpression": {
                        "id": 781,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "++",
                        "prefix": true,
                        "src": "10611:29:2",
                        "subExpression": {
                          "expression": {
                            "id": 779,
                            "name": "tree",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 698,
                            "src": "10613:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                              "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                            }
                          },
                          "id": 780,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberName": "numTranchesInitialized",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 409,
                          "src": "10613:27:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "10597:44:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$393_storage",
                        "typeString": "struct MerkleResistor.Tranche storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 785,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "10665:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 786,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "10665:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 787,
                          "name": "totalCoins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 745,
                          "src": "10689:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 788,
                          "name": "totalCoins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 745,
                          "src": "10765:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 789,
                          "name": "startTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 749,
                          "src": "10811:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 793,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 790,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "10899:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 791,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "10899:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 792,
                            "name": "vestingTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 684,
                            "src": "10917:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10899:29:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 794,
                          "name": "coinsPerSecond",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 747,
                          "src": "10986:14:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 795,
                          "name": "startTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 749,
                          "src": "11054:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 784,
                        "name": "Tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 393,
                        "src": "10644:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Tranche_$393_storage_ptr_$",
                          "typeString": "type(struct MerkleResistor.Tranche storage pointer)"
                        }
                      },
                      "id": 796,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "10644:527:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$393_memory_ptr",
                        "typeString": "struct MerkleResistor.Tranche memory"
                      }
                    },
                    "src": "10597:574:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$393_storage",
                      "typeString": "struct MerkleResistor.Tranche storage ref"
                    }
                  },
                  "id": 798,
                  "nodeType": "ExpressionStatement",
                  "src": "10597:574:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 800,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 682,
                        "src": "11206:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 801,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 698,
                          "src": "11217:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 802,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "numTranchesInitialized",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 409,
                        "src": "11217:27:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 803,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "11246:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 804,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "11246:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 799,
                      "name": "TrancheInitialized",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 463,
                      "src": "11187:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                        "typeString": "function (uint256,uint256,address)"
                      }
                    },
                    "id": 805,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11187:70:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 806,
                  "nodeType": "EmitStatement",
                  "src": "11182:75:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 808,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 682,
                        "src": "11277:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 809,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 698,
                          "src": "11288:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 810,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "numTranchesInitialized",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 409,
                        "src": "11288:27:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 807,
                      "name": "withdraw",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 961,
                      "src": "11268:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 811,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11268:48:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 812,
                  "nodeType": "ExpressionStatement",
                  "src": "11268:48:2"
                },
                {
                  "expression": {
                    "expression": {
                      "id": 813,
                      "name": "tree",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 698,
                      "src": "11334:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                      }
                    },
                    "id": 814,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "numTranchesInitialized",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 409,
                    "src": "11334:27:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 695,
                  "id": 815,
                  "nodeType": "Return",
                  "src": "11327:34:2"
                }
              ]
            },
            "documentation": {
              "id": 680,
              "nodeType": "StructuredDocumentation",
              "src": "8457:873:2",
              "text": "@notice Called once per recipient of a vesting schedule to initialize the vesting schedule and fix the parameters\n @dev Only the recipient can initialize their own schedule here, because a meaningful choice is made\n @dev If the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree stats\n @param treeIndex index into array-like map of merkleTrees\n @param vestingTime the actual length of the vesting schedule, chosen by the user\n @param minTotalPayments the minimum amount of tokens they will receive, if they choose minEndTime as vestingTime\n @param maxTotalPayments the maximum amount of tokens they will receive, if they choose maxEndTime as vestingTime\n @param proof array of hashes linking leaf hash of (destination, minTotalPayments, maxTotalPayments) to root"
            },
            "functionSelector": "77389921",
            "id": 817,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "9344:10:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 692,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 682,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "9369:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 817,
                  "src": "9364:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 681,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9364:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 684,
                  "mutability": "mutable",
                  "name": "vestingTime",
                  "nameLocation": "9393:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 817,
                  "src": "9388:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 683,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9388:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 686,
                  "mutability": "mutable",
                  "name": "minTotalPayments",
                  "nameLocation": "9419:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 817,
                  "src": "9414:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 685,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9414:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 688,
                  "mutability": "mutable",
                  "name": "maxTotalPayments",
                  "nameLocation": "9450:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 817,
                  "src": "9445:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 687,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9445:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 691,
                  "mutability": "mutable",
                  "name": "proof",
                  "nameLocation": "9493:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 817,
                  "src": "9476:22:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 689,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "9476:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 690,
                    "nodeType": "ArrayTypeName",
                    "src": "9476:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9354:145:2"
            },
            "returnParameters": {
              "id": 695,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 694,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 817,
                  "src": "9518:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 693,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "9518:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9517:6:2"
            },
            "scope": 1148,
            "src": "9335:2033:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 960,
              "nodeType": "Block",
              "src": "11862:2722:2",
              "statements": [
                {
                  "assignments": [
                    827
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 827,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "11891:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 960,
                      "src": "11872:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 826,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 825,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 419,
                          "src": "11872:10:2"
                        },
                        "referencedDeclaration": 419,
                        "src": "11872:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 831,
                  "initialValue": {
                    "baseExpression": {
                      "id": 828,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 424,
                      "src": "11898:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$419_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 830,
                    "indexExpression": {
                      "id": 829,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 820,
                      "src": "11910:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "11898:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$419_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11872:48:2"
                },
                {
                  "assignments": [
                    834
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 834,
                      "mutability": "mutable",
                      "name": "tranche",
                      "nameLocation": "11946:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 960,
                      "src": "11930:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                        "typeString": "struct MerkleResistor.Tranche"
                      },
                      "typeName": {
                        "id": 833,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 832,
                          "name": "Tranche",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 393,
                          "src": "11930:7:2"
                        },
                        "referencedDeclaration": 393,
                        "src": "11930:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 839,
                  "initialValue": {
                    "baseExpression": {
                      "expression": {
                        "id": 835,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 827,
                        "src": "11956:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 836,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "tranches",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 414,
                      "src": "11956:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$393_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"
                      }
                    },
                    "id": 838,
                    "indexExpression": {
                      "id": 837,
                      "name": "trancheIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 822,
                      "src": "11970:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "11956:27:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$393_storage",
                      "typeString": "struct MerkleResistor.Tranche storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "11930:53:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 843,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 840,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 834,
                        "src": "12067:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 841,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "totalCoins",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 382,
                      "src": "12067:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 842,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "12089:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "12067:23:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 850,
                  "nodeType": "IfStatement",
                  "src": "12063:106:2",
                  "trueBody": {
                    "id": 849,
                    "nodeType": "Block",
                    "src": "12092:77:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 845,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 820,
                              "src": "12134:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 846,
                              "name": "trancheIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 822,
                              "src": "12145:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 844,
                            "name": "UninitializedAccount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 504,
                            "src": "12113:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256) pure"
                            }
                          },
                          "id": 847,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12113:45:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 848,
                        "nodeType": "RevertStatement",
                        "src": "12106:52:2"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 854,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 851,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 834,
                        "src": "12225:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 852,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "currentCoins",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 384,
                      "src": "12225:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 853,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "12249:1:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "12225:25:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 861,
                  "nodeType": "IfStatement",
                  "src": "12221:100:2",
                  "trueBody": {
                    "id": 860,
                    "nodeType": "Block",
                    "src": "12252:69:2",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 856,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 820,
                              "src": "12286:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 857,
                              "name": "trancheIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 822,
                              "src": "12297:12:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 855,
                            "name": "AccountEmpty",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 510,
                            "src": "12273:12:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256) pure"
                            }
                          },
                          "id": 858,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12273:37:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 859,
                        "nodeType": "RevertStatement",
                        "src": "12266:44:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    863
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 863,
                      "mutability": "mutable",
                      "name": "currentWithdrawal",
                      "nameLocation": "12336:17:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 960,
                      "src": "12331:22:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 862,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "12331:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 864,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "12331:22:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 869,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 865,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "12478:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 866,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "12478:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "expression": {
                        "id": 867,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 834,
                        "src": "12497:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 868,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "endTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 388,
                      "src": "12497:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "12478:34:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 888,
                    "nodeType": "Block",
                    "src": "12585:263:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 886,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 876,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 863,
                            "src": "12746:17:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 885,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 881,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 877,
                                      "name": "block",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -4,
                                      "src": "12767:5:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_block",
                                        "typeString": "block"
                                      }
                                    },
                                    "id": 878,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "timestamp",
                                    "nodeType": "MemberAccess",
                                    "src": "12767:15:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 879,
                                      "name": "tranche",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 834,
                                      "src": "12785:7:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                                        "typeString": "struct MerkleResistor.Tranche storage pointer"
                                      }
                                    },
                                    "id": 880,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lastWithdrawalTime",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 392,
                                    "src": "12785:26:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "12767:44:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 882,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "12766:46:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "expression": {
                                "id": 883,
                                "name": "tranche",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 834,
                                "src": "12815:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                                  "typeString": "struct MerkleResistor.Tranche storage pointer"
                                }
                              },
                              "id": 884,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "coinsPerSecond",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 390,
                              "src": "12815:22:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "12766:71:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12746:91:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 887,
                        "nodeType": "ExpressionStatement",
                        "src": "12746:91:2"
                      }
                    ]
                  },
                  "id": 889,
                  "nodeType": "IfStatement",
                  "src": "12474:374:2",
                  "trueBody": {
                    "id": 875,
                    "nodeType": "Block",
                    "src": "12514:65:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 873,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 870,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 863,
                            "src": "12528:17:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 871,
                              "name": "tranche",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 834,
                              "src": "12548:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                                "typeString": "struct MerkleResistor.Tranche storage pointer"
                              }
                            },
                            "id": 872,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "currentCoins",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 384,
                            "src": "12548:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "12528:40:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 874,
                        "nodeType": "ExpressionStatement",
                        "src": "12528:40:2"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 895,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 890,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 834,
                        "src": "13040:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 892,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "lastWithdrawalTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 392,
                      "src": "13040:26:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 893,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "13069:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 894,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "13069:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "13040:44:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 896,
                  "nodeType": "ExpressionStatement",
                  "src": "13040:44:2"
                },
                {
                  "assignments": [
                    899
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 899,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "13102:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 960,
                      "src": "13095:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$1917",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 898,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 897,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 1917,
                          "src": "13095:6:2"
                        },
                        "referencedDeclaration": 1917,
                        "src": "13095:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1917",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 904,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 901,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 827,
                          "src": "13117:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 902,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "tokenAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 405,
                        "src": "13117:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 900,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1917,
                      "src": "13110:6:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$1917_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 903,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13110:25:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$1917",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13095:40:2"
                },
                {
                  "assignments": [
                    906
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 906,
                      "mutability": "mutable",
                      "name": "balanceBefore",
                      "nameLocation": "13150:13:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 960,
                      "src": "13145:18:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 905,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "13145:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 914,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 911,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "13190:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1148",
                              "typeString": "contract MerkleResistor"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1148",
                              "typeString": "contract MerkleResistor"
                            }
                          ],
                          "id": 910,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "13182:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 909,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "13182:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 912,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13182:13:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 907,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 899,
                        "src": "13166:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1917",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 908,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1856,
                      "src": "13166:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 913,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13166:30:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13145:51:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 918,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 834,
                          "src": "13859:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 919,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "recipient",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 380,
                        "src": "13859:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 920,
                        "name": "currentWithdrawal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 863,
                        "src": "13878:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 915,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 899,
                        "src": "13844:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1917",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 917,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1866,
                      "src": "13844:14:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 921,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "13844:52:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 922,
                  "nodeType": "ExpressionStatement",
                  "src": "13844:52:2"
                },
                {
                  "assignments": [
                    924
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 924,
                      "mutability": "mutable",
                      "name": "balanceAfter",
                      "nameLocation": "14003:12:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 960,
                      "src": "13998:17:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 923,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "13998:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 932,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 929,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "14042:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1148",
                              "typeString": "contract MerkleResistor"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleResistor_$1148",
                              "typeString": "contract MerkleResistor"
                            }
                          ],
                          "id": 928,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "14034:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 927,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "14034:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 930,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14034:13:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 925,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 899,
                        "src": "14018:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1917",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 926,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1856,
                      "src": "14018:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 931,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14018:30:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "13998:50:2"
                },
                {
                  "assignments": [
                    934
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 934,
                      "mutability": "mutable",
                      "name": "diff",
                      "nameLocation": "14063:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 960,
                      "src": "14058:9:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 933,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "14058:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 938,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 937,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 935,
                      "name": "balanceBefore",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 906,
                      "src": "14070:13:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "id": 936,
                      "name": "balanceAfter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 924,
                      "src": "14086:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "14070:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "14058:40:2"
                },
                {
                  "expression": {
                    "id": 943,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 939,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 834,
                        "src": "14297:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 941,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "currentCoins",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 384,
                      "src": "14297:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 942,
                      "name": "diff",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 934,
                      "src": "14321:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "14297:28:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 944,
                  "nodeType": "ExpressionStatement",
                  "src": "14297:28:2"
                },
                {
                  "expression": {
                    "id": 949,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 945,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 827,
                        "src": "14460:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 947,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 407,
                      "src": "14460:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 948,
                      "name": "diff",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 934,
                      "src": "14481:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "14460:25:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 950,
                  "nodeType": "ExpressionStatement",
                  "src": "14460:25:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 952,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 820,
                        "src": "14520:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 953,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 834,
                          "src": "14531:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 954,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "recipient",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 380,
                        "src": "14531:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 955,
                        "name": "diff",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 934,
                        "src": "14550:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 956,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 834,
                          "src": "14556:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 957,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "currentCoins",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 384,
                        "src": "14556:20:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 951,
                      "name": "WithdrawalOccurred",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 437,
                      "src": "14501:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,address,uint256,uint256)"
                      }
                    },
                    "id": 958,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14501:76:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 959,
                  "nodeType": "EmitStatement",
                  "src": "14496:81:2"
                }
              ]
            },
            "documentation": {
              "id": 818,
              "nodeType": "StructuredDocumentation",
              "src": "11374:423:2",
              "text": "@notice Move unlocked funds to the destination\n @dev Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of\n @dev who provides the proof and pays the gas, msg.sender is not used in this function\n @param treeIndex index into array-like map of merkleTrees, which tree should we apply the proof to?\n @param trancheIndex index into tranche map"
            },
            "functionSelector": "441a3e70",
            "id": 961,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "11811:8:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 823,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 820,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "11825:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 961,
                  "src": "11820:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 819,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "11820:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 822,
                  "mutability": "mutable",
                  "name": "trancheIndex",
                  "nameLocation": "11841:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 961,
                  "src": "11836:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 821,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "11836:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11819:35:2"
            },
            "returnParameters": {
              "id": 824,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "11862:0:2"
            },
            "scope": 1148,
            "src": "11802:2782:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1098,
              "nodeType": "Block",
              "src": "15655:2782:2",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 983,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 981,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 964,
                      "src": "15787:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 982,
                      "name": "numTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 378,
                      "src": "15799:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "15787:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 991,
                  "nodeType": "IfStatement",
                  "src": "15783:74:2",
                  "trueBody": {
                    "id": 990,
                    "nodeType": "Block",
                    "src": "15809:48:2",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "hexValue": "66616c7365",
                              "id": 984,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15831:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "hexValue": "30",
                              "id": 985,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15838:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 986,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15841:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 987,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15844:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "id": 988,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "15830:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$",
                            "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"
                          }
                        },
                        "functionReturnParameters": 980,
                        "id": 989,
                        "nodeType": "Return",
                        "src": "15823:23:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    994
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 994,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "15981:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1098,
                      "src": "15962:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 993,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 992,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 419,
                          "src": "15962:10:2"
                        },
                        "referencedDeclaration": 419,
                        "src": "15962:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 998,
                  "initialValue": {
                    "baseExpression": {
                      "id": 995,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 424,
                      "src": "15988:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$419_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 997,
                    "indexExpression": {
                      "id": 996,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 964,
                      "src": "16000:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "15988:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$419_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "15962:48:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 1007,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1002,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 999,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 966,
                        "src": "16113:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "expression": {
                          "id": 1000,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 994,
                          "src": "16127:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 1001,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "maxEndTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 401,
                        "src": "16127:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "16113:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1006,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1003,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 966,
                        "src": "16146:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "expression": {
                          "id": 1004,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 994,
                          "src": "16160:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                          }
                        },
                        "id": 1005,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "minEndTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 399,
                        "src": "16160:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "16146:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "16113:62:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1015,
                  "nodeType": "IfStatement",
                  "src": "16109:116:2",
                  "trueBody": {
                    "id": 1014,
                    "nodeType": "Block",
                    "src": "16177:48:2",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "hexValue": "66616c7365",
                              "id": 1008,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16199:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "hexValue": "30",
                              "id": 1009,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16206:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 1010,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16209:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 1011,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16212:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "id": 1012,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "16198:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$",
                            "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"
                          }
                        },
                        "functionReturnParameters": 980,
                        "id": 1013,
                        "nodeType": "Return",
                        "src": "16191:23:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    1017
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1017,
                      "mutability": "mutable",
                      "name": "totalCoins",
                      "nameLocation": "16240:10:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1098,
                      "src": "16235:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1016,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "16235:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1018,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "16235:15:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1022,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1019,
                      "name": "vestingTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 966,
                      "src": "16264:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 1020,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 994,
                        "src": "16279:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                        }
                      },
                      "id": 1021,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "maxEndTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 401,
                      "src": "16279:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "16264:30:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 1059,
                    "nodeType": "Block",
                    "src": "16513:1051:2",
                    "statements": [
                      {
                        "assignments": [
                          1029
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1029,
                            "mutability": "mutable",
                            "name": "paymentSlope",
                            "nameLocation": "17176:12:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 1059,
                            "src": "17171:17:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1028,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "17171:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1043,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1042,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1035,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1032,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 1030,
                                    "name": "maxTotalPayments",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 970,
                                    "src": "17192:16:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "id": 1031,
                                    "name": "minTotalPayments",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 968,
                                    "src": "17211:16:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "17192:35:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 1033,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "17191:37:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "id": 1034,
                              "name": "PRECISION",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 427,
                              "src": "17231:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "17191:49:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1040,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 1036,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 994,
                                    "src": "17244:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                                    }
                                  },
                                  "id": 1037,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "maxEndTime",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 401,
                                  "src": "17244:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1038,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 994,
                                    "src": "17262:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                                    }
                                  },
                                  "id": 1039,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "minEndTime",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 399,
                                  "src": "17262:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "17244:33:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 1041,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "17243:35:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "17191:87:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "17171:107:2"
                      },
                      {
                        "expression": {
                          "id": 1057,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1044,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1017,
                            "src": "17461:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1056,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 1053,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1051,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1045,
                                      "name": "paymentSlope",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1029,
                                      "src": "17475:12:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 1049,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 1046,
                                            "name": "vestingTime",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 966,
                                            "src": "17491:11:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "-",
                                          "rightExpression": {
                                            "expression": {
                                              "id": 1047,
                                              "name": "tree",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 994,
                                              "src": "17505:4:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                                                "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                                              }
                                            },
                                            "id": 1048,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "minEndTime",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 399,
                                            "src": "17505:15:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "17491:29:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 1050,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "17490:31:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "17475:46:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "id": 1052,
                                    "name": "PRECISION",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 427,
                                    "src": "17524:9:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "17475:58:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 1054,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "17474:60:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "id": 1055,
                              "name": "minTotalPayments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 968,
                              "src": "17537:16:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "17474:79:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "17461:92:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1058,
                        "nodeType": "ExpressionStatement",
                        "src": "17461:92:2"
                      }
                    ]
                  },
                  "id": 1060,
                  "nodeType": "IfStatement",
                  "src": "16260:1304:2",
                  "trueBody": {
                    "id": 1027,
                    "nodeType": "Block",
                    "src": "16296:211:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 1025,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1023,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1017,
                            "src": "16467:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1024,
                            "name": "maxTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 970,
                            "src": "16480:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "16467:29:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1026,
                        "nodeType": "ExpressionStatement",
                        "src": "16467:29:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    1062
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1062,
                      "mutability": "mutable",
                      "name": "coinsPerSecond",
                      "nameLocation": "18030:14:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1098,
                      "src": "18025:19:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1061,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "18025:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1079,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1078,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1072,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1063,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1017,
                            "src": "18048:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1070,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "313030",
                                      "id": 1066,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "18067:3:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      },
                                      "value": "100"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      }
                                    ],
                                    "id": 1065,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "18062:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 1064,
                                      "name": "uint",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "18062:4:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 1067,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "18062:9:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "expression": {
                                    "id": 1068,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 994,
                                    "src": "18074:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$419_storage_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree storage pointer"
                                    }
                                  },
                                  "id": 1069,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pctUpFront",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 403,
                                  "src": "18074:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "18062:27:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 1071,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "18061:29:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "18048:42:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1073,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "18047:44:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1076,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1074,
                            "name": "vestingTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 966,
                            "src": "18095:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "hexValue": "313030",
                            "id": 1075,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "18109:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_100_by_1",
                              "typeString": "int_const 100"
                            },
                            "value": "100"
                          },
                          "src": "18095:17:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1077,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "18094:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "18047:66:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "18025:88:2"
                },
                {
                  "assignments": [
                    1081
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1081,
                      "mutability": "mutable",
                      "name": "startTime",
                      "nameLocation": "18294:9:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1098,
                      "src": "18289:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1080,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "18289:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1091,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1090,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1085,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 1082,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "18306:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 1083,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "18306:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "id": 1084,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 966,
                        "src": "18324:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "18306:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1088,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1086,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1017,
                            "src": "18339:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 1087,
                            "name": "coinsPerSecond",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1062,
                            "src": "18352:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "18339:27:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1089,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "18338:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "18306:61:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "18289:78:2"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "74727565",
                        "id": 1092,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "18386:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      {
                        "id": 1093,
                        "name": "totalCoins",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1017,
                        "src": "18392:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1094,
                        "name": "coinsPerSecond",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1062,
                        "src": "18404:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1095,
                        "name": "startTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1081,
                        "src": "18420:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 1096,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "18385:45:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(bool,uint256,uint256,uint256)"
                    }
                  },
                  "functionReturnParameters": 980,
                  "id": 1097,
                  "nodeType": "Return",
                  "src": "18378:52:2"
                }
              ]
            },
            "documentation": {
              "id": 962,
              "nodeType": "StructuredDocumentation",
              "src": "14590:904:2",
              "text": "@notice Determine if the proposed vesting schedule is legit\n @dev Anyone may call this to check, but it also returns values used in the initialization of vesting schedules\n @param treeIndex index into array-like map of merkleTrees, which tree are we talking about?\n @param vestingTime user chosen length of vesting schedule\n @param minTotalPayments pre-committed (in the root hash) minimum of possible totalCoins\n @param maxTotalPayments pre-committed (in the root hash) maximum of possible totalCoins\n @return valid is the proposed vesting-schedule valid\n @return totalCoins amount of coins allocated in the vesting schedule\n @return coinsPerSecond amount of coins released every second, in the proposed vesting schedule\n @return startTime start time of vesting schedule implied by supplied parameters, will always be <= block.timestamp"
            },
            "functionSelector": "6fb6ec41",
            "id": 1099,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyVestingSchedule",
            "nameLocation": "15508:21:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 971,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 964,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "15535:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1099,
                  "src": "15530:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 963,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "15530:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 966,
                  "mutability": "mutable",
                  "name": "vestingTime",
                  "nameLocation": "15551:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1099,
                  "src": "15546:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 965,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "15546:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 968,
                  "mutability": "mutable",
                  "name": "minTotalPayments",
                  "nameLocation": "15569:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1099,
                  "src": "15564:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 967,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "15564:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 970,
                  "mutability": "mutable",
                  "name": "maxTotalPayments",
                  "nameLocation": "15592:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1099,
                  "src": "15587:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 969,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "15587:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15529:80:2"
            },
            "returnParameters": {
              "id": 980,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 973,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1099,
                  "src": "15631:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 972,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "15631:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 975,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1099,
                  "src": "15637:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 974,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "15637:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 977,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1099,
                  "src": "15643:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 976,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "15643:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 979,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1099,
                  "src": "15649:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 978,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "15649:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "15630:24:2"
            },
            "scope": 1148,
            "src": "15499:2938:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1146,
              "nodeType": "Block",
              "src": "18566:254:2",
              "statements": [
                {
                  "assignments": [
                    1122
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1122,
                      "mutability": "mutable",
                      "name": "tranche",
                      "nameLocation": "18592:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 1146,
                      "src": "18576:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                        "typeString": "struct MerkleResistor.Tranche"
                      },
                      "typeName": {
                        "id": 1121,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1120,
                          "name": "Tranche",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 393,
                          "src": "18576:7:2"
                        },
                        "referencedDeclaration": 393,
                        "src": "18576:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1129,
                  "initialValue": {
                    "baseExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 1123,
                          "name": "merkleTrees",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 424,
                          "src": "18602:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$419_storage_$",
                            "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                          }
                        },
                        "id": 1125,
                        "indexExpression": {
                          "id": 1124,
                          "name": "treeIndex",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1101,
                          "src": "18614:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "18602:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$419_storage",
                          "typeString": "struct MerkleResistor.MerkleTree storage ref"
                        }
                      },
                      "id": 1126,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "tranches",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 414,
                      "src": "18602:31:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$393_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"
                      }
                    },
                    "id": 1128,
                    "indexExpression": {
                      "id": 1127,
                      "name": "trancheIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1103,
                      "src": "18634:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "18602:45:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$393_storage",
                      "typeString": "struct MerkleResistor.Tranche storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "18576:71:2"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "expression": {
                          "id": 1130,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1122,
                          "src": "18665:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1131,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "recipient",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 380,
                        "src": "18665:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 1132,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1122,
                          "src": "18684:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1133,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "totalCoins",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 382,
                        "src": "18684:18:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1134,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1122,
                          "src": "18704:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1135,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "currentCoins",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 384,
                        "src": "18704:20:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1136,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1122,
                          "src": "18726:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1137,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "startTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 386,
                        "src": "18726:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1138,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1122,
                          "src": "18745:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1139,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "endTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 388,
                        "src": "18745:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1140,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1122,
                          "src": "18762:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1141,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "coinsPerSecond",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 390,
                        "src": "18762:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1142,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1122,
                          "src": "18786:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$393_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 1143,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "lastWithdrawalTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 392,
                        "src": "18786:26:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 1144,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "18664:149:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(address,uint256,uint256,uint256,uint256,uint256,uint256)"
                    }
                  },
                  "functionReturnParameters": 1119,
                  "id": 1145,
                  "nodeType": "Return",
                  "src": "18657:156:2"
                }
              ]
            },
            "functionSelector": "0b42abf2",
            "id": 1147,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTranche",
            "nameLocation": "18452:10:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1104,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1101,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "18468:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1147,
                  "src": "18463:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1100,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18463:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1103,
                  "mutability": "mutable",
                  "name": "trancheIndex",
                  "nameLocation": "18484:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1147,
                  "src": "18479:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1102,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18479:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18462:35:2"
            },
            "returnParameters": {
              "id": 1119,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1106,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1147,
                  "src": "18521:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1105,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "18521:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1108,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1147,
                  "src": "18530:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1107,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18530:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1110,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1147,
                  "src": "18536:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1109,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18536:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1112,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1147,
                  "src": "18542:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1111,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18542:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1114,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1147,
                  "src": "18548:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1113,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18548:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1116,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1147,
                  "src": "18554:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1115,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18554:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1118,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1147,
                  "src": "18560:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1117,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "18560:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "18520:45:2"
            },
            "scope": 1148,
            "src": "18443:377:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1149,
        "src": "1454:17369:2",
        "usedErrors": [
          467,
          473,
          479,
          488,
          498,
          504,
          510
        ]
      }
    ],
    "src": "42:18782:2"
  },
  "bytecode": "608060405234801561001057600080fd5b50610f62806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637738992111610066578063773899211461019f57806385d88cb1146101b2578063aaf5eb6814610252578063d71383ed1461025c578063f16ad51e1461026f57600080fd5b80630b42abf214610098578063390b7c661461013e578063441a3e70146101555780636fb6ec411461016a575b600080fd5b6100fa6100a6366004610c1e565b600091825260016020818152604080852093855260089093019052912080549181015460028201546003830154600484015460058501546006909501546001600160a01b0390961696939592949193909290565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0015b60405180910390f35b61014760005481565b604051908152602001610135565b610168610163366004610c1e565b610282565b005b61017d610178366004610c40565b610535565b6040805194151585526020850193909352918301526060820152608001610135565b6101476101ad366004610c88565b610686565b61020e6101c0366004610d6f565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600686015460079096015494959394929391926001600160a01b03909116919088565b60408051988952602089019790975295870194909452606086019290925260808501526001600160a01b031660a084015260c083015260e082015261010001610135565b610147620f424081565b61016861026a366004610d88565b610929565b61016861027d366004610c1e565b610a3f565b600082815260016020818152604080842085855260088101909252909220908101546102d05760405163c085915360e01b815260048101859052602481018490526044015b60405180910390fd5b60028101546102fc576040516318c0dc6760e21b815260048101859052602481018490526044016102c7565b60008160040154421061031457506002810154610335565b600582015460068301546103289042610e0a565b6103329190610e21565b90505b42600683015560058301546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a0823190602401602060405180830381865afa15801561038a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ae9190610e40565b845460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905291925083169063a9059cbb906044016020604051808303816000875af1158015610402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104269190610e59565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190610e40565b905060006104a08284610e0a565b9050808660020160008282546104b69190610e0a565b92505081905550808760060160008282546104d19190610e0a565b9091555050855460028701546040516001600160a01b03909216918b917f1680e4cfe90468085407ef2b599dbe94b0aa30ff9f180f0e41d22eb71c8728729161052291868252602082015260400190565b60405180910390a3505050505050505050565b6000806000806000548811156105565750600092508291508190508061067b565b600088815260016020526040902060038101548811806105795750806002015488105b156105925760008060008094509450945094505061067b565b600081600301548914156105a7575085610618565b6000826002015483600301546105bd9190610e0a565b620f42406105cb8b8b610e0a565b6105d59190610e21565b6105df9190610e82565b905088620f424084600201548c6105f69190610e0a565b6106009084610e21565b61060a9190610e82565b6106149190610ea4565b9150505b60006106258a6064610e21565b6004840154610635906064610e0a565b61063f9084610e21565b6106499190610e82565b905060006106578284610e82565b6106618c42610ea4565b61066b9190610e0a565b6001985092965090945090925050505b945094509450949050565b60008581526001602090815260408083208151338185015280830188905260608082018890528351808303909101815260809091018352805190840120808552600982019093529083205490919060ff16156106ff5760405163a0b0703160e01b815260048101899052602481018290526044016102c7565b8154604051632769cd1f60e21b815273__MerkleLib_____________________________91639da7347c9161073b919085908990600401610ebc565b602060405180830381865af4158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190610e59565b61079f57878185604051630da5a8fd60e41b81526004016102c793929190610ebc565b6000806000806107b18c8c8c8c610535565b92965090945092509050836107f1576040516323f4345360e01b8152600481018d9052602481018c9052604481018b9052606481018a90526084016102c7565b6000858152600987016020908152604091829020805460ff19166001179055815160e081018352338152908101859052908101849052606081018290526080810161083c8d42610ea4565b815260200183815260200182815250866008016000886007016000815461086290610f11565b9182905550815260208082019290925260409081016000908120845181546001600160a01b0319166001600160a01b03909116178155928401516001840155838201516002840155606084015160038401556080840151600484015560a0840151600584015560c0909301516006909201919091556007880154905133928f917f8d1a99fb79ba81aa040238d9df7033b8a8a3048d382036a272839a9c2a2616b59190a46109148c8760070154610282565b50505060079092015498975050505050505050565b6064831061094d5760405163078299b560e21b8152600481018490526024016102c7565b83851061097757604051636f30d75760e11b815260048101869052602481018590526044016102c7565b600060016000806000815461098b90610f11565b9182905550815260208101919091526040016000908120898155600181018990556002810188905560038101879055600481018690556005810180546001600160a01b0319166001600160a01b03871617905590549091506109ed9083610a3f565b600054604080518a8152602081018a90526001600160a01b03861692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a35050505050505050565b600082815260016020526040808220600581015491516370a0823160e01b815230600482015290926001600160a01b03909216919082906370a0823190602401602060405180830381865afa158015610a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac09190610e40565b6040516323b872dd60e01b8152336004820152306024820152604481018690529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a9190610e59565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba69190610e40565b90506000610bb48383610e0a565b905080856006016000828254610bca9190610ea4565b909155505060058501546040518281526001600160a01b039091169088907fb162210da7d23d82c18cff5af46d3562661d26b42a6848fa28d64a6bdc70386a9060200160405180910390a350505050505050565b60008060408385031215610c3157600080fd5b50508035926020909101359150565b60008060008060808587031215610c5657600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a08688031215610ca057600080fd5b8535945060208087013594506040870135935060608701359250608087013567ffffffffffffffff80821115610cd557600080fd5b818901915089601f830112610ce957600080fd5b813581811115610cfb57610cfb610c72565b8060051b604051601f19603f83011681018181108582111715610d2057610d20610c72565b60405291825284820192508381018501918c831115610d3e57600080fd5b938501935b82851015610d5c57843584529385019392850192610d43565b8096505050505050509295509295909350565b600060208284031215610d8157600080fd5b5035919050565b600080600080600080600060e0888a031215610da357600080fd5b873596506020880135955060408801359450606088013593506080880135925060a08801356001600160a01b0381168114610ddd57600080fd5b8092505060c0880135905092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b600082821015610e1c57610e1c610df4565b500390565b6000816000190483118215151615610e3b57610e3b610df4565b500290565b600060208284031215610e5257600080fd5b5051919050565b600060208284031215610e6b57600080fd5b81518015158114610e7b57600080fd5b9392505050565b600082610e9f57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610eb757610eb7610df4565b500190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b81811015610f0357845183529383019391830191600101610ee7565b509098975050505050505050565b6000600019821415610f2557610f25610df4565b506001019056fea2646970667358221220f031dfbb315eb3d718508ada8829a58f6098020314df7c44a9fe885c1eb9970664736f6c634300080c0033",
  "bytecodeSha1": "f5d6101bf8b2502e2ffae1f7f1716f597d781f42",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "MerkleResistor",
  "coverageMap": {
    "branches": {
      "1": {},
      "2": {
        "MerkleResistor.addMerkleTree": {
          "43": [
            5749,
            5766,
            false
          ],
          "44": [
            5836,
            5860,
            false
          ]
        },
        "MerkleResistor.initialize": {
          "41": [
            9754,
            9776,
            false
          ],
          "42": [
            10149,
            10163,
            false
          ]
        },
        "MerkleResistor.verifyVestingSchedule": {
          "37": [
            15787,
            15807,
            false
          ],
          "38": [
            16113,
            16142,
            true
          ],
          "39": [
            16146,
            16175,
            false
          ],
          "40": [
            16264,
            16294,
            false
          ]
        },
        "MerkleResistor.withdraw": {
          "36": [
            12478,
            12512,
            false
          ]
        }
      },
      "4": {}
    },
    "statements": {
      "1": {},
      "2": {
        "MerkleResistor.addMerkleTree": {
          "23": [
            5745,
            5822
          ],
          "24": [
            5832,
            5933
          ],
          "25": [
            6002,
            6027
          ],
          "26": [
            6037,
            6061
          ],
          "27": [
            6071,
            6099
          ],
          "28": [
            6109,
            6137
          ],
          "29": [
            6147,
            6175
          ],
          "30": [
            6185,
            6217
          ],
          "31": [
            6493,
            6530
          ],
          "32": [
            6540,
            6603
          ]
        },
        "MerkleResistor.depositTokens": {
          "33": [
            8003,
            8055
          ],
          "34": [
            8341,
            8372
          ],
          "35": [
            8382,
            8444
          ]
        },
        "MerkleResistor.getTranche": {
          "0": [
            18657,
            18813
          ]
        },
        "MerkleResistor.initialize": {
          "15": [
            9750,
            9845
          ],
          "16": [
            9855,
            9974
          ],
          "17": [
            10145,
            10275
          ],
          "18": [
            10373,
            10402
          ],
          "19": [
            10597,
            11171
          ],
          "20": [
            11182,
            11257
          ],
          "21": [
            11268,
            11316
          ],
          "22": [
            11327,
            11361
          ]
        },
        "MerkleResistor.verifyVestingSchedule": {
          "10": [
            15823,
            15846
          ],
          "11": [
            16191,
            16214
          ],
          "12": [
            16467,
            16496
          ],
          "13": [
            17461,
            17553
          ],
          "14": [
            18378,
            18430
          ]
        },
        "MerkleResistor.withdraw": {
          "1": [
            12063,
            12169
          ],
          "2": [
            12221,
            12321
          ],
          "3": [
            12528,
            12568
          ],
          "4": [
            12746,
            12837
          ],
          "5": [
            13040,
            13084
          ],
          "6": [
            13844,
            13896
          ],
          "7": [
            14297,
            14325
          ],
          "8": [
            14460,
            14485
          ],
          "9": [
            14496,
            14577
          ]
        }
      },
      "4": {}
    }
  },
  "dependencies": [
    "IERC20",
    "MerkleLib"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100935760003560e01c80637738992111610066578063773899211461019f57806385d88cb1146101b2578063aaf5eb6814610252578063d71383ed1461025c578063f16ad51e1461026f57600080fd5b80630b42abf214610098578063390b7c661461013e578063441a3e70146101555780636fb6ec411461016a575b600080fd5b6100fa6100a6366004610c1e565b600091825260016020818152604080852093855260089093019052912080549181015460028201546003830154600484015460058501546006909501546001600160a01b0390961696939592949193909290565b604080516001600160a01b0390981688526020880196909652948601939093526060850191909152608084015260a083015260c082015260e0015b60405180910390f35b61014760005481565b604051908152602001610135565b610168610163366004610c1e565b610282565b005b61017d610178366004610c40565b610535565b6040805194151585526020850193909352918301526060820152608001610135565b6101476101ad366004610c88565b610686565b61020e6101c0366004610d6f565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600686015460079096015494959394929391926001600160a01b03909116919088565b60408051988952602089019790975295870194909452606086019290925260808501526001600160a01b031660a084015260c083015260e082015261010001610135565b610147620f424081565b61016861026a366004610d88565b610929565b61016861027d366004610c1e565b610a3f565b600082815260016020818152604080842085855260088101909252909220908101546102d05760405163c085915360e01b815260048101859052602481018490526044015b60405180910390fd5b60028101546102fc576040516318c0dc6760e21b815260048101859052602481018490526044016102c7565b60008160040154421061031457506002810154610335565b600582015460068301546103289042610e0a565b6103329190610e21565b90505b42600683015560058301546040516370a0823160e01b81523060048201526001600160a01b039091169060009082906370a0823190602401602060405180830381865afa15801561038a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ae9190610e40565b845460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810186905291925083169063a9059cbb906044016020604051808303816000875af1158015610402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104269190610e59565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190610e40565b905060006104a08284610e0a565b9050808660020160008282546104b69190610e0a565b92505081905550808760060160008282546104d19190610e0a565b9091555050855460028701546040516001600160a01b03909216918b917f1680e4cfe90468085407ef2b599dbe94b0aa30ff9f180f0e41d22eb71c8728729161052291868252602082015260400190565b60405180910390a3505050505050505050565b6000806000806000548811156105565750600092508291508190508061067b565b600088815260016020526040902060038101548811806105795750806002015488105b156105925760008060008094509450945094505061067b565b600081600301548914156105a7575085610618565b6000826002015483600301546105bd9190610e0a565b620f42406105cb8b8b610e0a565b6105d59190610e21565b6105df9190610e82565b905088620f424084600201548c6105f69190610e0a565b6106009084610e21565b61060a9190610e82565b6106149190610ea4565b9150505b60006106258a6064610e21565b6004840154610635906064610e0a565b61063f9084610e21565b6106499190610e82565b905060006106578284610e82565b6106618c42610ea4565b61066b9190610e0a565b6001985092965090945090925050505b945094509450949050565b60008581526001602090815260408083208151338185015280830188905260608082018890528351808303909101815260809091018352805190840120808552600982019093529083205490919060ff16156106ff5760405163a0b0703160e01b815260048101899052602481018290526044016102c7565b8154604051632769cd1f60e21b815273__$61dd25696c02d5bd2863c8d2c1a2324a87$__91639da7347c9161073b919085908990600401610ebc565b602060405180830381865af4158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190610e59565b61079f57878185604051630da5a8fd60e41b81526004016102c793929190610ebc565b6000806000806107b18c8c8c8c610535565b92965090945092509050836107f1576040516323f4345360e01b8152600481018d9052602481018c9052604481018b9052606481018a90526084016102c7565b6000858152600987016020908152604091829020805460ff19166001179055815160e081018352338152908101859052908101849052606081018290526080810161083c8d42610ea4565b815260200183815260200182815250866008016000886007016000815461086290610f11565b9182905550815260208082019290925260409081016000908120845181546001600160a01b0319166001600160a01b03909116178155928401516001840155838201516002840155606084015160038401556080840151600484015560a0840151600584015560c0909301516006909201919091556007880154905133928f917f8d1a99fb79ba81aa040238d9df7033b8a8a3048d382036a272839a9c2a2616b59190a46109148c8760070154610282565b50505060079092015498975050505050505050565b6064831061094d5760405163078299b560e21b8152600481018490526024016102c7565b83851061097757604051636f30d75760e11b815260048101869052602481018590526044016102c7565b600060016000806000815461098b90610f11565b9182905550815260208101919091526040016000908120898155600181018990556002810188905560038101879055600481018690556005810180546001600160a01b0319166001600160a01b03871617905590549091506109ed9083610a3f565b600054604080518a8152602081018a90526001600160a01b03861692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a35050505050505050565b600082815260016020526040808220600581015491516370a0823160e01b815230600482015290926001600160a01b03909216919082906370a0823190602401602060405180830381865afa158015610a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac09190610e40565b6040516323b872dd60e01b8152336004820152306024820152604481018690529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a9190610e59565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba69190610e40565b90506000610bb48383610e0a565b905080856006016000828254610bca9190610ea4565b909155505060058501546040518281526001600160a01b039091169088907fb162210da7d23d82c18cff5af46d3562661d26b42a6848fa28d64a6bdc70386a9060200160405180910390a350505050505050565b60008060408385031215610c3157600080fd5b50508035926020909101359150565b60008060008060808587031215610c5657600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a08688031215610ca057600080fd5b8535945060208087013594506040870135935060608701359250608087013567ffffffffffffffff80821115610cd557600080fd5b818901915089601f830112610ce957600080fd5b813581811115610cfb57610cfb610c72565b8060051b604051601f19603f83011681018181108582111715610d2057610d20610c72565b60405291825284820192508381018501918c831115610d3e57600080fd5b938501935b82851015610d5c57843584529385019392850192610d43565b8096505050505050509295509295909350565b600060208284031215610d8157600080fd5b5035919050565b600080600080600080600060e0888a031215610da357600080fd5b873596506020880135955060408801359450606088013593506080880135925060a08801356001600160a01b0381168114610ddd57600080fd5b8092505060c0880135905092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b600082821015610e1c57610e1c610df4565b500390565b6000816000190483118215151615610e3b57610e3b610df4565b500290565b600060208284031215610e5257600080fd5b5051919050565b600060208284031215610e6b57600080fd5b81518015158114610e7b57600080fd5b9392505050565b600082610e9f57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610eb757610eb7610df4565b500190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b81811015610f0357845183529383019391830191600101610ee7565b509098975050505050505050565b6000600019821415610f2557610f25610df4565b506001019056fea2646970667358221220f031dfbb315eb3d718508ada8829a58f6098020314df7c44a9fe885c1eb9970664736f6c634300080c0033",
  "deployedSourceMap": "1454:17369:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18443:377;;;;;;:::i;:::-;18521:7;18602:22;;;:11;:22;;;;;;;;:45;;;:31;;;;:45;;;;18665:17;;18684:18;;;;18704:20;;;;18726:17;;;;18745:15;;;;18762:22;;;;18786:26;;;;;-1:-1:-1;;;;;18665:17:2;;;;18684:18;;18704:20;;18726:17;;18745:15;;18786:26;18443:377;;;;;-1:-1:-1;;;;;600:32:5;;;582:51;;664:2;649:18;;642:34;;;;692:18;;;685:34;;;;750:2;735:18;;728:34;;;;793:3;778:19;;771:35;620:3;822:19;;815:35;881:3;866:19;;859:35;569:3;554:19;18443:377:2;;;;;;;;1557:20;;;;;;;;;1051:25:5;;;1039:2;1024:18;1557:20:2;905:177:5;11802:2782:2;;;;;;:::i;:::-;;:::i;:::-;;15499:2938;;;;;;:::i;:::-;;:::i;:::-;;;;1727:14:5;;1720:22;1702:41;;1774:2;1759:18;;1752:34;;;;1802:18;;;1795:34;1860:2;1845:18;;1838:34;1689:3;1674:19;15499:2938:2;1477:401:5;9335:2033:2;;;;;;:::i;:::-;;:::i;3319:47::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3319:47:2;;;;;;;;;;;3937:25:5;;;3993:2;3978:18;;3971:34;;;;4021:18;;;4014:34;;;;4079:2;4064:18;;4057:34;;;;4122:3;4107:19;;4100:35;-1:-1:-1;;;;;4172:32:5;4192:3;4151:19;;4144:61;4236:3;4221:19;;4214:35;4280:3;4265:19;;4258:35;3924:3;3909:19;3319:47:2;3594:705:5;3439:40:2;;3472:7;3439:40;;5534:1076;;;;;;:::i;:::-;;:::i;6985:1466::-;;;;;;:::i;:::-;;:::i;11802:2782::-;11872:23;11898:22;;;:11;:22;;;;;;;;11956:27;;;:13;;;:27;;;;;;12067:18;;;;12063:106;;12113:45;;-1:-1:-1;;;12113:45:2;;;;;5181:25:5;;;5222:18;;;5215:34;;;5154:18;;12113:45:2;;;;;;;;12063:106;12225:20;;;;12221:100;;12273:37;;-1:-1:-1;;;12273:37:2;;;;;5181:25:5;;;5222:18;;;5215:34;;;5154:18;;12273:37:2;5007:248:5;12221:100:2;12331:22;12497:7;:15;;;12478;:34;12474:374;;-1:-1:-1;12548:20:2;;;;12474:374;;;12815:22;;;;12785:26;;;;12767:44;;:15;:44;:::i;:::-;12766:71;;;;:::i;:::-;12746:91;;12474:374;13069:15;13040:26;;;:44;13117:17;;;;13166:30;;-1:-1:-1;;;13166:30:2;;13190:4;13166:30;;;5841:51:5;-1:-1:-1;;;;;13117:17:2;;;;13095:12;;13117:17;;13166:15;;5814:18:5;;13166:30:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13859:17;;13844:52;;-1:-1:-1;;;13844:52:2;;-1:-1:-1;;;;;13859:17:2;;;13844:52;;;6266:51:5;6333:18;;;6326:34;;;13145:51:2;;-1:-1:-1;13844:14:2;;;;;6239:18:5;;13844:52:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;14018:30:2;;-1:-1:-1;;;14018:30:2;;14042:4;14018:30;;;5841:51:5;13998:17:2;;-1:-1:-1;;;;;14018:15:2;;;;;5814:18:5;;14018:30:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13998:50;-1:-1:-1;14058:9:2;14070:28;13998:50;14070:13;:28;:::i;:::-;14058:40;;14321:4;14297:7;:20;;;:28;;;;;;;:::i;:::-;;;;;;;;14481:4;14460;:17;;;:25;;;;;;;:::i;:::-;;;;-1:-1:-1;;14531:17:2;;14556:20;;;;14501:76;;-1:-1:-1;;;;;14531:17:2;;;;14520:9;;14501:76;;;;14550:4;5181:25:5;;5237:2;5222:18;;5215:34;5169:2;5154:18;;5007:248;14501:76:2;;;;;;;;11862:2722;;;;;;;11802:2782;;:::o;15499:2938::-;15631:4;15637;15643;15649;15799:8;;15787:9;:20;15783:74;;;-1:-1:-1;15831:5:2;;-1:-1:-1;15831:5:2;;-1:-1:-1;15831:5:2;;-1:-1:-1;15831:5:2;15823:23;;15783:74;15962:23;15988:22;;;:11;:22;;;;;16127:15;;;;16113:29;;;:62;;;16160:4;:15;;;16146:11;:29;16113:62;16109:116;;;16199:5;16206:1;16209;16212;16191:23;;;;;;;;;;;16109:116;16235:15;16279:4;:15;;;16264:11;:30;16260:1304;;;-1:-1:-1;16480:16:2;16260:1304;;;17171:17;17262:4;:15;;;17244:4;:15;;;:33;;;;:::i;:::-;3472:7;17192:35;17211:16;17192;:35;:::i;:::-;17191:49;;;;:::i;:::-;:87;;;;:::i;:::-;17171:107;;17537:16;3472:7;17505:4;:15;;;17491:11;:29;;;;:::i;:::-;17475:46;;:12;:46;:::i;:::-;:58;;;;:::i;:::-;17474:79;;;;:::i;:::-;17461:92;;16513:1051;16260:1304;18025:19;18095:17;:11;18109:3;18095:17;:::i;:::-;18074:15;;;;18062:27;;18067:3;18062:27;:::i;:::-;18048:42;;:10;:42;:::i;:::-;18047:66;;;;:::i;:::-;18025:88;-1:-1:-1;18289:14:2;18339:27;18025:88;18339:10;:27;:::i;:::-;18306:29;18324:11;18306:15;:29;:::i;:::-;:61;;;;:::i;:::-;18386:4;;-1:-1:-1;18392:10:2;;-1:-1:-1;18404:14:2;;-1:-1:-1;18289:78:2;;-1:-1:-1;;;15499:2938:2;;;;;;;;;;:::o;9335:2033::-;9518:4;9560:22;;;:11;:22;;;;;;;;9680:58;;9691:10;9680:58;;;7210:51:5;7277:18;;;7270:34;;;7320:18;;;;7313:34;;;9680:58:2;;;;;;;;;;7183:18:5;;;;9680:58:2;;9670:69;;;;;;9754:22;;;:16;;;:22;;;;;;;9560;;9670:69;9754:22;;9750:95;;;9799:35;;-1:-1:-1;;;9799:35:2;;;;;5181:25:5;;;5222:18;;;5215:34;;;5154:18;;9799:35:2;5007:248:5;9750:95:2;9859:15;;:40;;-1:-1:-1;;;9859:40:2;;:27;;;;:40;;:15;9887:4;;9893:5;;9859:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9855:119;;9940:9;9951:4;9957:5;9931:32;;-1:-1:-1;;;9931:32:2;;;;;;;;;;:::i;9855:119::-;9985:10;9997:15;10014:19;10035:14;10053:81;10075:9;10086:11;10099:16;10117;10053:21;:81::i;:::-;9984:150;;-1:-1:-1;9984:150:2;;-1:-1:-1;9984:150:2;-1:-1:-1;9984:150:2;-1:-1:-1;10149:14:2;10145:130;;10186:78;;-1:-1:-1;;;10186:78:2;;;;;9410:25:5;;;9451:18;;;9444:34;;;9494:18;;;9487:34;;;9537:18;;;9530:34;;;9382:19;;10186:78:2;9179:391:5;10145:130:2;10373:22;;;;:16;;;:22;;;;;;;;;:29;;-1:-1:-1;;10373:29:2;10398:4;10373:29;;;10644:527;;;;;;;10665:10;10644:527;;;;;;;;;;;;;;;;;;;;;;;10899:29;10917:11;10899:15;:29;:::i;:::-;10644:527;;;;10986:14;10644:527;;;;11054:9;10644:527;;;10597:4;:13;;:44;10613:4;:27;;;10611:29;;;;;:::i;:::-;;;;;-1:-1:-1;10597:44:2;;;;;;;;;;;;;;-1:-1:-1;10597:44:2;;;:574;;;;-1:-1:-1;;;;;;10597:574:2;-1:-1:-1;;;;;10597:574:2;;;;;;;;;;-1:-1:-1;10597:574:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11217:27;;;;11187:70;;11246:10;;11206:9;;11187:70;;-1:-1:-1;11187:70:2;11268:48;11277:9;11288:4;:27;;;11268:8;:48::i;:::-;-1:-1:-1;;;11334:27:2;;;;;;9335:2033;-1:-1:-1;;;;;;;;9335:2033:2:o;5534:1076::-;5763:3;5749:10;:17;5745:77;;5789:22;;-1:-1:-1;;;5789:22:2;;;;;1051:25:5;;;1024:18;;5789:22:2;905:177:5;5745:77:2;5850:10;5836;:24;5832:101;;5883:39;;-1:-1:-1;;;5883:39:2;;;;;5181:25:5;;;5222:18;;;5215:34;;;5154:18;;5883:39:2;5007:248:5;5832:101:2;5943:23;5969:11;:23;5983:8;;5981:10;;;;;:::i;:::-;;;;;-1:-1:-1;5969:23:2;;;;;;;;;;;-1:-1:-1;5969:23:2;;;6002:25;;;6037:13;;;:24;;;6071:15;;;:28;;;6109:15;;;:28;;;6147:15;;;:28;;;6185:17;;;:32;;-1:-1:-1;;;;;;6185:32:2;-1:-1:-1;;;;;6185:32:2;;;;;6507:8;;5969:23;;-1:-1:-1;6493:37:2;;6517:12;6493:13;:37::i;:::-;6561:8;;6545:58;;;5181:25:5;;;5237:2;5222:18;;5215:34;;;-1:-1:-1;;;;;6545:58:2;;;6561:8;6545:58;;5154:18:5;6545:58:2;;;;;;;5691:919;5534:1076;;;;;;;:::o;6985:1466::-;7088:29;7120:22;;;:11;:22;;;;;;7175:23;;;;7230:30;;-1:-1:-1;;;7230:30:2;;7254:4;7230:30;;;5841:51:5;7120:22:2;;-1:-1:-1;;;;;7175:23:2;;;;7088:29;7175:23;;7230:15;;5814:18:5;;7230:30:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8003:52;;-1:-1:-1;;;8003:52:2;;8022:10;8003:52;;;10208:34:5;8042:4:2;10258:18:5;;;10251:43;10310:18;;;10303:34;;;7209:51:2;;-1:-1:-1;;;;;;8003:18:2;;;;;10143::5;;8003:52:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;8086:30:2;;-1:-1:-1;;;8086:30:2;;8110:4;8086:30;;;5841:51:5;8066:17:2;;-1:-1:-1;;;;;8086:15:2;;;;;5814:18:5;;8086:30:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8066:50;-1:-1:-1;8228:9:2;8240:28;8255:13;8066:50;8240:28;:::i;:::-;8228:40;;8368:4;8341:10;:23;;;:31;;;;;;;:::i;:::-;;;;-1:-1:-1;;8414:23:2;;;;8387:57;;1051:25:5;;;-1:-1:-1;;;;;8414:23:2;;;;8403:9;;8387:57;;1039:2:5;1024:18;8387:57:2;;;;;;;7043:1408;;;;;6985:1466;;:::o;14:248:5:-;82:6;90;143:2;131:9;122:7;118:23;114:32;111:52;;;159:1;156;149:12;111:52;-1:-1:-1;;182:23:5;;;252:2;237:18;;;224:32;;-1:-1:-1;14:248:5:o;1087:385::-;1173:6;1181;1189;1197;1250:3;1238:9;1229:7;1225:23;1221:33;1218:53;;;1267:1;1264;1257:12;1218:53;-1:-1:-1;;1290:23:5;;;1360:2;1345:18;;1332:32;;-1:-1:-1;1411:2:5;1396:18;;1383:32;;1462:2;1447:18;1434:32;;-1:-1:-1;1087:385:5;-1:-1:-1;1087:385:5:o;1883:127::-;1944:10;1939:3;1935:20;1932:1;1925:31;1975:4;1972:1;1965:15;1999:4;1996:1;1989:15;2015:1389;2135:6;2143;2151;2159;2167;2220:3;2208:9;2199:7;2195:23;2191:33;2188:53;;;2237:1;2234;2227:12;2188:53;2273:9;2260:23;2250:33;;2302:2;2351;2340:9;2336:18;2323:32;2313:42;;2402:2;2391:9;2387:18;2374:32;2364:42;;2453:2;2442:9;2438:18;2425:32;2415:42;;2508:3;2497:9;2493:19;2480:33;2532:18;2573:2;2565:6;2562:14;2559:34;;;2589:1;2586;2579:12;2559:34;2627:6;2616:9;2612:22;2602:32;;2672:7;2665:4;2661:2;2657:13;2653:27;2643:55;;2694:1;2691;2684:12;2643:55;2730:2;2717:16;2752:2;2748;2745:10;2742:36;;;2758:18;;:::i;:::-;2804:2;2801:1;2797:10;2836:2;2830:9;2899:2;2895:7;2890:2;2886;2882:11;2878:25;2870:6;2866:38;2954:6;2942:10;2939:22;2934:2;2922:10;2919:18;2916:46;2913:72;;;2965:18;;:::i;:::-;3001:2;2994:22;3051:18;;;3085:15;;;;-1:-1:-1;3127:11:5;;;3123:20;;;3155:19;;;3152:39;;;3187:1;3184;3177:12;3152:39;3211:11;;;;3231:142;3247:6;3242:3;3239:15;3231:142;;;3313:17;;3301:30;;3264:12;;;;3351;;;;3231:142;;;3392:6;3382:16;;;;;;;;2015:1389;;;;;;;;:::o;3409:180::-;3468:6;3521:2;3509:9;3500:7;3496:23;3492:32;3489:52;;;3537:1;3534;3527:12;3489:52;-1:-1:-1;3560:23:5;;3409:180;-1:-1:-1;3409:180:5:o;4304:698::-;4417:6;4425;4433;4441;4449;4457;4465;4518:3;4506:9;4497:7;4493:23;4489:33;4486:53;;;4535:1;4532;4525:12;4486:53;4558:23;;;-1:-1:-1;4628:2:5;4613:18;;4600:32;;-1:-1:-1;4679:2:5;4664:18;;4651:32;;-1:-1:-1;4730:2:5;4715:18;;4702:32;;-1:-1:-1;4781:3:5;4766:19;;4753:33;;-1:-1:-1;4836:3:5;4821:19;;4808:33;-1:-1:-1;;;;;4870:31:5;;4860:42;;4850:70;;4916:1;4913;4906:12;4850:70;4939:5;4929:15;;;4991:3;4980:9;4976:19;4963:33;4953:43;;4304:698;;;;;;;;;;:::o;5260:127::-;5321:10;5316:3;5312:20;5309:1;5302:31;5352:4;5349:1;5342:15;5376:4;5373:1;5366:15;5392:125;5432:4;5460:1;5457;5454:8;5451:34;;;5465:18;;:::i;:::-;-1:-1:-1;5502:9:5;;5392:125::o;5522:168::-;5562:7;5628:1;5624;5620:6;5616:14;5613:1;5610:21;5605:1;5598:9;5591:17;5587:45;5584:71;;;5635:18;;:::i;:::-;-1:-1:-1;5675:9:5;;5522:168::o;5903:184::-;5973:6;6026:2;6014:9;6005:7;6001:23;5997:32;5994:52;;;6042:1;6039;6032:12;5994:52;-1:-1:-1;6065:16:5;;5903:184;-1:-1:-1;5903:184:5:o;6371:277::-;6438:6;6491:2;6479:9;6470:7;6466:23;6462:32;6459:52;;;6507:1;6504;6497:12;6459:52;6539:9;6533:16;6592:5;6585:13;6578:21;6571:5;6568:32;6558:60;;6614:1;6611;6604:12;6558:60;6637:5;6371:277;-1:-1:-1;;;6371:277:5:o;6653:217::-;6693:1;6719;6709:132;;6763:10;6758:3;6754:20;6751:1;6744:31;6798:4;6795:1;6788:15;6826:4;6823:1;6816:15;6709:132;-1:-1:-1;6855:9:5;;6653:217::o;6875:128::-;6915:3;6946:1;6942:6;6939:1;6936:13;6933:39;;;6952:18;;:::i;:::-;-1:-1:-1;6988:9:5;;6875:128::o;7611:783::-;7817:4;7865:2;7854:9;7850:18;7895:6;7884:9;7877:25;7921:2;7959:6;7954:2;7943:9;7939:18;7932:34;8002:2;7997;7986:9;7982:18;7975:30;8025:6;8060;8054:13;8091:6;8083;8076:22;8129:3;8118:9;8114:19;8107:26;;8168:2;8160:6;8156:15;8142:29;;8189:1;8199:169;8213:6;8210:1;8207:13;8199:169;;;8274:13;;8262:26;;8343:15;;;;8308:12;;;;8235:1;8228:9;8199:169;;;-1:-1:-1;8385:3:5;;7611:783;-1:-1:-1;;;;;;;;7611:783:5:o;9575:135::-;9614:3;-1:-1:-1;;9635:17:5;;9632:43;;;9655:18;;:::i;:::-;-1:-1:-1;9702:1:5;9691:13;;9575:135::o",
  "language": "Solidity",
  "natspec": {
    "author": "metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki",
    "details": "The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof.User chosen vesting schedules means the contract has parameters that define a line segment thatdescribes a range of vesting-schedule parameters within which the user can negotiate tradeoffsMore tokens => longer vesting time && slower drip, when used correctly, but the contract does not enforcecoherence of vesting schedules, so someone could make a range of vesting schedules in whichmore tokens => longer vesting time && faster drip, but this is a user error, also we wouldn't catch it untilafter the tree has been initialized and funded, so we just let them do it.The choice of which parameters to initialize at tree-creation-time versus at schedule-initialization-time issomewhat arbitrary, but we choose to have min/max end times at tree scope and min/max total payments at first-withdrawal-time",
    "kind": "dev",
    "methods": {
      "addMerkleTree(bytes32,bytes32,uint256,uint256,uint256,address,uint256)": {
        "details": "Anyone may call this function, therefore we must make sure trees cannot affect each otherRoot hash should be built from (destination, minTotalPayments, maxTotalPayments)",
        "notice": "Add a new merkle tree to the contract, creating a new merkle-vesting-schedule-range",
        "params": {
          "ipfsHash": "the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable",
          "maxEndTime": "a continuous range of possible end times are specified, this is the maximum",
          "minEndTime": "a continuous range of possible end times are specified, this is the minimum",
          "newRoot": "root hash of merkle tree representing vesting schedule ranges",
          "pctUpFront": "the percent of tokens user will get at initialization time (note this implies no lock time)",
          "tokenAddress": "the address of the token contract that is being distributed",
          "tokenBalance": "the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
        }
      },
      "depositTokens(uint256,uint256)": {
        "details": "Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious",
        "notice": "Add funds to an existing merkle-tree",
        "params": {
          "treeIndex": "index into array-like map of merkleTrees",
          "value": "the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
        }
      },
      "initialize(uint256,uint256,uint256,uint256,bytes32[])": {
        "details": "Only the recipient can initialize their own schedule here, because a meaningful choice is madeIf the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree stats",
        "notice": "Called once per recipient of a vesting schedule to initialize the vesting schedule and fix the parameters",
        "params": {
          "maxTotalPayments": "the maximum amount of tokens they will receive, if they choose maxEndTime as vestingTime",
          "minTotalPayments": "the minimum amount of tokens they will receive, if they choose minEndTime as vestingTime",
          "proof": "array of hashes linking leaf hash of (destination, minTotalPayments, maxTotalPayments) to root",
          "treeIndex": "index into array-like map of merkleTrees",
          "vestingTime": "the actual length of the vesting schedule, chosen by the user"
        }
      },
      "verifyVestingSchedule(uint256,uint256,uint256,uint256)": {
        "details": "Anyone may call this to check, but it also returns values used in the initialization of vesting schedules",
        "notice": "Determine if the proposed vesting schedule is legit",
        "params": {
          "maxTotalPayments": "pre-committed (in the root hash) maximum of possible totalCoins",
          "minTotalPayments": "pre-committed (in the root hash) minimum of possible totalCoins",
          "treeIndex": "index into array-like map of merkleTrees, which tree are we talking about?",
          "vestingTime": "user chosen length of vesting schedule"
        },
        "returns": {
          "_0": "valid is the proposed vesting-schedule valid",
          "_1": "totalCoins amount of coins allocated in the vesting schedule",
          "_2": "coinsPerSecond amount of coins released every second, in the proposed vesting schedule",
          "_3": "startTime start time of vesting schedule implied by supplied parameters, will always be <= block.timestamp"
        }
      },
      "withdraw(uint256,uint256)": {
        "details": "Anyone may call this function for anyone else, funds go to destination regardless, it's just a question ofwho provides the proof and pays the gas, msg.sender is not used in this function",
        "notice": "Move unlocked funds to the destination",
        "params": {
          "trancheIndex": "index into tranche map",
          "treeIndex": "index into array-like map of merkleTrees, which tree should we apply the proof to?"
        }
      }
    },
    "notice": "This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.",
    "title": "A factory pattern for user-chosen vesting-schedules, that is, a time release schedule for tokens, using merkle proofs to scale",
    "version": 1
  },
  "offset": [
    1454,
    18823
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x77389921 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x77389921 EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x85D88CB1 EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0xAAF5EB68 EQ PUSH2 0x252 JUMPI DUP1 PUSH4 0xD71383ED EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xF16AD51E EQ PUSH2 0x26F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB42ABF2 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x390B7C66 EQ PUSH2 0x13E JUMPI DUP1 PUSH4 0x441A3E70 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x6FB6EC41 EQ PUSH2 0x16A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFA PUSH2 0xA6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC1E JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP4 DUP6 MSTORE PUSH1 0x8 SWAP1 SWAP4 ADD SWAP1 MSTORE SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 SWAP1 SWAP6 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP7 AND SWAP7 SWAP4 SWAP6 SWAP3 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP9 AND DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP5 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x147 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x135 JUMP JUMPDEST PUSH2 0x168 PUSH2 0x163 CALLDATASIZE PUSH1 0x4 PUSH2 0xC1E JUMP JUMPDEST PUSH2 0x282 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x17D PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0xC40 JUMP JUMPDEST PUSH2 0x535 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 ISZERO ISZERO DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x135 JUMP JUMPDEST PUSH2 0x147 PUSH2 0x1AD CALLDATASIZE PUSH1 0x4 PUSH2 0xC88 JUMP JUMPDEST PUSH2 0x686 JUMP JUMPDEST PUSH2 0x20E PUSH2 0x1C0 CALLDATASIZE PUSH1 0x4 PUSH2 0xD6F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 DUP7 ADD SLOAD PUSH1 0x7 SWAP1 SWAP7 ADD SLOAD SWAP5 SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 DUP9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP9 DUP10 MSTORE PUSH1 0x20 DUP10 ADD SWAP8 SWAP1 SWAP8 MSTORE SWAP6 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x60 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 ADD PUSH2 0x135 JUMP JUMPDEST PUSH2 0x147 PUSH3 0xF4240 DUP2 JUMP JUMPDEST PUSH2 0x168 PUSH2 0x26A CALLDATASIZE PUSH1 0x4 PUSH2 0xD88 JUMP JUMPDEST PUSH2 0x929 JUMP JUMPDEST PUSH2 0x168 PUSH2 0x27D CALLDATASIZE PUSH1 0x4 PUSH2 0xC1E JUMP JUMPDEST PUSH2 0xA3F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP6 DUP6 MSTORE PUSH1 0x8 DUP2 ADD SWAP1 SWAP3 MSTORE SWAP1 SWAP3 KECCAK256 SWAP1 DUP2 ADD SLOAD PUSH2 0x2D0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC0859153 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP2 ADD SLOAD PUSH2 0x2FC JUMPI PUSH1 0x40 MLOAD PUSH4 0x18C0DC67 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x2C7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD SLOAD TIMESTAMP LT PUSH2 0x314 JUMPI POP PUSH1 0x2 DUP2 ADD SLOAD PUSH2 0x335 JUMP JUMPDEST PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0x6 DUP4 ADD SLOAD PUSH2 0x328 SWAP1 TIMESTAMP PUSH2 0xE0A JUMP JUMPDEST PUSH2 0x332 SWAP2 SWAP1 PUSH2 0xE21 JUMP JUMPDEST SWAP1 POP JUMPDEST TIMESTAMP PUSH1 0x6 DUP4 ADD SSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x38A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3AE SWAP2 SWAP1 PUSH2 0xE40 JUMP JUMPDEST DUP5 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 SWAP3 POP DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x402 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x426 SWAP2 SWAP1 PUSH2 0xE59 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x46E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x492 SWAP2 SWAP1 PUSH2 0xE40 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4A0 DUP3 DUP5 PUSH2 0xE0A JUMP JUMPDEST SWAP1 POP DUP1 DUP7 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4B6 SWAP2 SWAP1 PUSH2 0xE0A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP8 PUSH1 0x6 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4D1 SWAP2 SWAP1 PUSH2 0xE0A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP6 SLOAD PUSH1 0x2 DUP8 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP12 SWAP2 PUSH32 0x1680E4CFE90468085407EF2B599DBE94B0AA30FF9F180F0E41D22EB71C872872 SWAP2 PUSH2 0x522 SWAP2 DUP7 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 SLOAD DUP9 GT ISZERO PUSH2 0x556 JUMPI POP PUSH1 0x0 SWAP3 POP DUP3 SWAP2 POP DUP2 SWAP1 POP DUP1 PUSH2 0x67B JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 DUP2 ADD SLOAD DUP9 GT DUP1 PUSH2 0x579 JUMPI POP DUP1 PUSH1 0x2 ADD SLOAD DUP9 LT JUMPDEST ISZERO PUSH2 0x592 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP POP PUSH2 0x67B JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3 ADD SLOAD DUP10 EQ ISZERO PUSH2 0x5A7 JUMPI POP DUP6 PUSH2 0x618 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x2 ADD SLOAD DUP4 PUSH1 0x3 ADD SLOAD PUSH2 0x5BD SWAP2 SWAP1 PUSH2 0xE0A JUMP JUMPDEST PUSH3 0xF4240 PUSH2 0x5CB DUP12 DUP12 PUSH2 0xE0A JUMP JUMPDEST PUSH2 0x5D5 SWAP2 SWAP1 PUSH2 0xE21 JUMP JUMPDEST PUSH2 0x5DF SWAP2 SWAP1 PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP DUP9 PUSH3 0xF4240 DUP5 PUSH1 0x2 ADD SLOAD DUP13 PUSH2 0x5F6 SWAP2 SWAP1 PUSH2 0xE0A JUMP JUMPDEST PUSH2 0x600 SWAP1 DUP5 PUSH2 0xE21 JUMP JUMPDEST PUSH2 0x60A SWAP2 SWAP1 PUSH2 0xE82 JUMP JUMPDEST PUSH2 0x614 SWAP2 SWAP1 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP POP JUMPDEST PUSH1 0x0 PUSH2 0x625 DUP11 PUSH1 0x64 PUSH2 0xE21 JUMP JUMPDEST PUSH1 0x4 DUP5 ADD SLOAD PUSH2 0x635 SWAP1 PUSH1 0x64 PUSH2 0xE0A JUMP JUMPDEST PUSH2 0x63F SWAP1 DUP5 PUSH2 0xE21 JUMP JUMPDEST PUSH2 0x649 SWAP2 SWAP1 PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x657 DUP3 DUP5 PUSH2 0xE82 JUMP JUMPDEST PUSH2 0x661 DUP13 TIMESTAMP PUSH2 0xEA4 JUMP JUMPDEST PUSH2 0x66B SWAP2 SWAP1 PUSH2 0xE0A JUMP JUMPDEST PUSH1 0x1 SWAP9 POP SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP1 SWAP3 POP POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD CALLER DUP2 DUP6 ADD MSTORE DUP1 DUP4 ADD DUP9 SWAP1 MSTORE PUSH1 0x60 DUP1 DUP3 ADD DUP9 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD DUP4 MSTORE DUP1 MLOAD SWAP1 DUP5 ADD KECCAK256 DUP1 DUP6 MSTORE PUSH1 0x9 DUP3 ADD SWAP1 SWAP4 MSTORE SWAP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x6FF JUMPI PUSH1 0x40 MLOAD PUSH4 0xA0B07031 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x2C7 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2769CD1F PUSH1 0xE2 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x9DA7347C SWAP2 PUSH2 0x73B SWAP2 SWAP1 DUP6 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xEBC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x758 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x77C SWAP2 SWAP1 PUSH2 0xE59 JUMP JUMPDEST PUSH2 0x79F JUMPI DUP8 DUP2 DUP6 PUSH1 0x40 MLOAD PUSH4 0xDA5A8FD PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xEBC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x7B1 DUP13 DUP13 DUP13 DUP13 PUSH2 0x535 JUMP JUMPDEST SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP SWAP1 POP DUP4 PUSH2 0x7F1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23F43453 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP14 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP13 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x2C7 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x9 DUP8 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD PUSH1 0xE0 DUP2 ADD DUP4 MSTORE CALLER DUP2 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x83C DUP14 TIMESTAMP PUSH2 0xEA4 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP DUP7 PUSH1 0x8 ADD PUSH1 0x0 DUP9 PUSH1 0x7 ADD PUSH1 0x0 DUP2 SLOAD PUSH2 0x862 SWAP1 PUSH2 0xF11 JUMP JUMPDEST SWAP2 DUP3 SWAP1 SSTORE POP DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP5 MLOAD DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND OR DUP2 SSTORE SWAP3 DUP5 ADD MLOAD PUSH1 0x1 DUP5 ADD SSTORE DUP4 DUP3 ADD MLOAD PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x3 DUP5 ADD SSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0x5 DUP5 ADD SSTORE PUSH1 0xC0 SWAP1 SWAP4 ADD MLOAD PUSH1 0x6 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x7 DUP9 ADD SLOAD SWAP1 MLOAD CALLER SWAP3 DUP16 SWAP2 PUSH32 0x8D1A99FB79BA81AA040238D9DF7033B8A8A3048D382036A272839A9C2A2616B5 SWAP2 SWAP1 LOG4 PUSH2 0x914 DUP13 DUP8 PUSH1 0x7 ADD SLOAD PUSH2 0x282 JUMP JUMPDEST POP POP POP PUSH1 0x7 SWAP1 SWAP3 ADD SLOAD SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x94D JUMPI PUSH1 0x40 MLOAD PUSH4 0x78299B5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x2C7 JUMP JUMPDEST DUP4 DUP6 LT PUSH2 0x977 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6F30D757 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x2C7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x98B SWAP1 PUSH2 0xF11 JUMP JUMPDEST SWAP2 DUP3 SWAP1 SSTORE POP DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP10 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP10 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP9 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP8 SWAP1 SSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 SSTORE PUSH1 0x5 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND OR SWAP1 SSTORE SWAP1 SLOAD SWAP1 SWAP2 POP PUSH2 0x9ED SWAP1 DUP4 PUSH2 0xA3F JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD DUP11 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP3 SWAP2 PUSH32 0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x5 DUP2 ADD SLOAD SWAP2 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA9C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAC0 SWAP2 SWAP1 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xB16 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB3A SWAP2 SWAP1 PUSH2 0xE59 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB82 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBA6 SWAP2 SWAP1 PUSH2 0xE40 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xBB4 DUP4 DUP4 PUSH2 0xE0A JUMP JUMPDEST SWAP1 POP DUP1 DUP6 PUSH1 0x6 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xBCA SWAP2 SWAP1 PUSH2 0xEA4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP9 SWAP1 PUSH32 0xB162210DA7D23D82C18CFF5AF46D3562661D26B42A6848FA28D64A6BDC70386A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xC56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xCA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP1 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xCD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xCE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xCFB JUMPI PUSH2 0xCFB PUSH2 0xC72 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xD20 JUMPI PUSH2 0xD20 PUSH2 0xC72 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP13 DUP4 GT ISZERO PUSH2 0xD3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xD5C JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xD43 JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xDA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xDDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP3 POP POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xE1C JUMPI PUSH2 0xE1C PUSH2 0xDF4 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xE3B JUMPI PUSH2 0xE3B PUSH2 0xDF4 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xE9F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xEB7 JUMPI PUSH2 0xEB7 PUSH2 0xDF4 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP6 DUP4 MSTORE PUSH1 0x20 DUP6 DUP2 DUP6 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 POP DUP3 DUP8 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF03 JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xEE7 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0xF25 JUMPI PUSH2 0xF25 PUSH2 0xDF4 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE BALANCE 0xDF 0xBB BALANCE 0x5E 0xB3 0xD7 XOR POP DUP11 0xDA DUP9 0x29 0xA5 DUP16 PUSH1 0x98 MUL SUB EQ 0xDF PUSH29 0x44A9FE885C1EB9970664736F6C634300080C0033000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "6": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "DUP1",
      "path": "2"
    },
    "7": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "8": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "12": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "DUP1",
      "path": "2"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "REVERT",
      "path": "2"
    },
    "16": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "17": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "POP",
      "path": "2"
    },
    "18": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "21": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "LT",
      "path": "2"
    },
    "22": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x93"
    },
    "25": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "26": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "29": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "SHR",
      "path": "2"
    },
    "32": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "DUP1",
      "path": "2"
    },
    "33": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x77389921"
    },
    "38": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "GT",
      "path": "2"
    },
    "39": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x66"
    },
    "42": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "43": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "DUP1",
      "path": "2"
    },
    "44": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x77389921"
    },
    "49": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "EQ",
      "path": "2"
    },
    "50": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x19F"
    },
    "53": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "54": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "DUP1",
      "path": "2"
    },
    "55": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x85D88CB1"
    },
    "60": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "EQ",
      "path": "2"
    },
    "61": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1B2"
    },
    "64": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "65": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "DUP1",
      "path": "2"
    },
    "66": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xAAF5EB68"
    },
    "71": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "EQ",
      "path": "2"
    },
    "72": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x252"
    },
    "75": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "76": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "DUP1",
      "path": "2"
    },
    "77": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xD71383ED"
    },
    "82": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "EQ",
      "path": "2"
    },
    "83": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x25C"
    },
    "86": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "87": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "DUP1",
      "path": "2"
    },
    "88": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xF16AD51E"
    },
    "93": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "EQ",
      "path": "2"
    },
    "94": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x26F"
    },
    "97": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "98": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "100": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "DUP1",
      "path": "2"
    },
    "101": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "REVERT",
      "path": "2"
    },
    "102": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "103": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "DUP1",
      "path": "2"
    },
    "104": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xB42ABF2"
    },
    "109": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "EQ",
      "path": "2"
    },
    "110": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x98"
    },
    "113": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "114": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "DUP1",
      "path": "2"
    },
    "115": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x390B7C66"
    },
    "120": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "EQ",
      "path": "2"
    },
    "121": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13E"
    },
    "124": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "125": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "DUP1",
      "path": "2"
    },
    "126": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x441A3E70"
    },
    "131": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "EQ",
      "path": "2"
    },
    "132": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x155"
    },
    "135": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "136": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "DUP1",
      "path": "2"
    },
    "137": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x6FB6EC41"
    },
    "142": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "EQ",
      "path": "2"
    },
    "143": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x16A"
    },
    "146": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "147": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "148": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "150": {
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "DUP1",
      "path": "2"
    },
    "151": {
      "first_revert": true,
      "fn": null,
      "offset": [
        1454,
        18823
      ],
      "op": "REVERT",
      "path": "2"
    },
    "152": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "153": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFA"
    },
    "156": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA6"
    },
    "159": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "160": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "162": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC1E"
    },
    "165": {
      "fn": "MerkleResistor.getTranche",
      "jump": "i",
      "offset": [
        18443,
        18820
      ],
      "op": "JUMP",
      "path": "2"
    },
    "166": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "167": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18521,
        18528
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "169": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18624
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "170": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18624
      ],
      "op": "DUP3",
      "path": "2"
    },
    "171": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18624
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "172": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18613
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "174": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18624
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "176": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18624
      ],
      "op": "DUP2",
      "path": "2"
    },
    "177": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18624
      ],
      "op": "DUP2",
      "path": "2"
    },
    "178": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18624
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "179": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18624
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "181": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18624
      ],
      "op": "DUP1",
      "path": "2"
    },
    "182": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18624
      ],
      "op": "DUP6",
      "path": "2"
    },
    "183": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18624
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "184": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18647
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "185": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18647
      ],
      "op": "DUP6",
      "path": "2"
    },
    "186": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18647
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "187": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18633
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x8"
    },
    "189": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18633
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "190": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18633
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "191": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18633
      ],
      "op": "ADD",
      "path": "2"
    },
    "192": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18647
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "193": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18647
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "194": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18647
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "195": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18602,
        18647
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "196": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18665,
        18682
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 0
    },
    "197": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18665,
        18682
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "198": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18684,
        18702
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "199": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18684,
        18702
      ],
      "op": "DUP2",
      "path": "2"
    },
    "200": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18684,
        18702
      ],
      "op": "ADD",
      "path": "2"
    },
    "201": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18684,
        18702
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "202": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18704,
        18724
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "204": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18704,
        18724
      ],
      "op": "DUP3",
      "path": "2"
    },
    "205": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18704,
        18724
      ],
      "op": "ADD",
      "path": "2"
    },
    "206": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18704,
        18724
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "207": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18726,
        18743
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "209": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18726,
        18743
      ],
      "op": "DUP4",
      "path": "2"
    },
    "210": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18726,
        18743
      ],
      "op": "ADD",
      "path": "2"
    },
    "211": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18726,
        18743
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "212": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18745,
        18760
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "214": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18745,
        18760
      ],
      "op": "DUP5",
      "path": "2"
    },
    "215": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18745,
        18760
      ],
      "op": "ADD",
      "path": "2"
    },
    "216": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18745,
        18760
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "217": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18762,
        18784
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "219": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18762,
        18784
      ],
      "op": "DUP6",
      "path": "2"
    },
    "220": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18762,
        18784
      ],
      "op": "ADD",
      "path": "2"
    },
    "221": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18762,
        18784
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "222": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18786,
        18812
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "224": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18786,
        18812
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "225": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18786,
        18812
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "226": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18786,
        18812
      ],
      "op": "ADD",
      "path": "2"
    },
    "227": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18786,
        18812
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "228": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "230": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "232": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "234": {
      "op": "SHL"
    },
    "235": {
      "op": "SUB"
    },
    "236": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18665,
        18682
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "237": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18665,
        18682
      ],
      "op": "SWAP7",
      "path": "2"
    },
    "238": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18665,
        18682
      ],
      "op": "AND",
      "path": "2"
    },
    "239": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18665,
        18682
      ],
      "op": "SWAP7",
      "path": "2"
    },
    "240": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18684,
        18702
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "241": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18684,
        18702
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "242": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18704,
        18724
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "243": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18704,
        18724
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "244": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18726,
        18743
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "245": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18726,
        18743
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "246": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18745,
        18760
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "247": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18745,
        18760
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "248": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18786,
        18812
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "249": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "JUMP",
      "path": "2"
    },
    "250": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "251": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "253": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "DUP1",
      "path": "2"
    },
    "254": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "255": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "257": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "259": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "261": {
      "op": "SHL"
    },
    "262": {
      "op": "SUB"
    },
    "263": {
      "op": "SWAP1"
    },
    "264": {
      "op": "SWAP9"
    },
    "265": {
      "op": "AND"
    },
    "266": {
      "op": "DUP9"
    },
    "267": {
      "op": "MSTORE"
    },
    "268": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "270": {
      "op": "DUP9"
    },
    "271": {
      "op": "ADD"
    },
    "272": {
      "op": "SWAP7"
    },
    "273": {
      "op": "SWAP1"
    },
    "274": {
      "op": "SWAP7"
    },
    "275": {
      "op": "MSTORE"
    },
    "276": {
      "op": "SWAP5"
    },
    "277": {
      "op": "DUP7"
    },
    "278": {
      "op": "ADD"
    },
    "279": {
      "op": "SWAP4"
    },
    "280": {
      "op": "SWAP1"
    },
    "281": {
      "op": "SWAP4"
    },
    "282": {
      "op": "MSTORE"
    },
    "283": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "285": {
      "op": "DUP6"
    },
    "286": {
      "op": "ADD"
    },
    "287": {
      "op": "SWAP2"
    },
    "288": {
      "op": "SWAP1"
    },
    "289": {
      "op": "SWAP2"
    },
    "290": {
      "op": "MSTORE"
    },
    "291": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "293": {
      "op": "DUP5"
    },
    "294": {
      "op": "ADD"
    },
    "295": {
      "op": "MSTORE"
    },
    "296": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "298": {
      "op": "DUP4"
    },
    "299": {
      "op": "ADD"
    },
    "300": {
      "op": "MSTORE"
    },
    "301": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "303": {
      "op": "DUP3"
    },
    "304": {
      "op": "ADD"
    },
    "305": {
      "op": "MSTORE"
    },
    "306": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "308": {
      "op": "ADD"
    },
    "309": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "310": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "312": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "313": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "DUP1",
      "path": "2"
    },
    "314": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "315": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "SUB",
      "path": "2"
    },
    "316": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "317": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        18443,
        18820
      ],
      "op": "RETURN",
      "path": "2"
    },
    "318": {
      "offset": [
        1557,
        1577
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "319": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x147"
    },
    "322": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "324": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "325": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "DUP2",
      "path": "2"
    },
    "326": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "JUMP",
      "path": "2"
    },
    "327": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "328": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "330": {
      "fn": "MerkleResistor.getTranche",
      "offset": [
        1557,
        1577
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "331": {
      "op": "SWAP1"
    },
    "332": {
      "op": "DUP2"
    },
    "333": {
      "op": "MSTORE"
    },
    "334": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "336": {
      "op": "ADD"
    },
    "337": {
      "offset": [
        1557,
        1577
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x135"
    },
    "340": {
      "op": "JUMP"
    },
    "341": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11802,
        14584
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "342": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11802,
        14584
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x168"
    },
    "345": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11802,
        14584
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x163"
    },
    "348": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11802,
        14584
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "349": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11802,
        14584
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "351": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11802,
        14584
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC1E"
    },
    "354": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        11802,
        14584
      ],
      "op": "JUMP",
      "path": "2"
    },
    "355": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11802,
        14584
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "356": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11802,
        14584
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x282"
    },
    "359": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        11802,
        14584
      ],
      "op": "JUMP",
      "path": "2"
    },
    "360": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11802,
        14584
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "361": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11802,
        14584
      ],
      "op": "STOP",
      "path": "2"
    },
    "362": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "363": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x17D"
    },
    "366": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x178"
    },
    "369": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "370": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "372": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC40"
    },
    "375": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        15499,
        18437
      ],
      "op": "JUMP",
      "path": "2"
    },
    "376": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "377": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x535"
    },
    "380": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        15499,
        18437
      ],
      "op": "JUMP",
      "path": "2"
    },
    "381": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "382": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "384": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "DUP1",
      "path": "2"
    },
    "385": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "386": {
      "op": "SWAP5"
    },
    "387": {
      "op": "ISZERO"
    },
    "388": {
      "op": "ISZERO"
    },
    "389": {
      "op": "DUP6"
    },
    "390": {
      "op": "MSTORE"
    },
    "391": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "393": {
      "op": "DUP6"
    },
    "394": {
      "op": "ADD"
    },
    "395": {
      "op": "SWAP4"
    },
    "396": {
      "op": "SWAP1"
    },
    "397": {
      "op": "SWAP4"
    },
    "398": {
      "op": "MSTORE"
    },
    "399": {
      "op": "SWAP2"
    },
    "400": {
      "op": "DUP4"
    },
    "401": {
      "op": "ADD"
    },
    "402": {
      "op": "MSTORE"
    },
    "403": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "405": {
      "op": "DUP3"
    },
    "406": {
      "op": "ADD"
    },
    "407": {
      "op": "MSTORE"
    },
    "408": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "410": {
      "op": "ADD"
    },
    "411": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x135"
    },
    "414": {
      "op": "JUMP"
    },
    "415": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9335,
        11368
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "416": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9335,
        11368
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x147"
    },
    "419": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9335,
        11368
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1AD"
    },
    "422": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9335,
        11368
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "423": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9335,
        11368
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "425": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9335,
        11368
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC88"
    },
    "428": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        9335,
        11368
      ],
      "op": "JUMP",
      "path": "2"
    },
    "429": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9335,
        11368
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "430": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9335,
        11368
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x686"
    },
    "433": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        9335,
        11368
      ],
      "op": "JUMP",
      "path": "2"
    },
    "434": {
      "offset": [
        3319,
        3366
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "435": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x20E"
    },
    "438": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1C0"
    },
    "441": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "442": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "444": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD6F"
    },
    "447": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        3319,
        3366
      ],
      "op": "JUMP",
      "path": "2"
    },
    "448": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "449": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "451": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "453": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP2",
      "path": "2"
    },
    "454": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "455": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "456": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "458": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "459": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP3",
      "path": "2"
    },
    "460": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "461": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "463": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "464": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "465": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "466": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP1",
      "path": "2"
    },
    "467": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "468": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "469": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP2",
      "path": "2"
    },
    "470": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "ADD",
      "path": "2"
    },
    "471": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "472": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "474": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP3",
      "path": "2"
    },
    "475": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "ADD",
      "path": "2"
    },
    "476": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "477": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "479": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP4",
      "path": "2"
    },
    "480": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "ADD",
      "path": "2"
    },
    "481": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "482": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "484": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP5",
      "path": "2"
    },
    "485": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "ADD",
      "path": "2"
    },
    "486": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "487": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "489": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP6",
      "path": "2"
    },
    "490": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "ADD",
      "path": "2"
    },
    "491": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "492": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "494": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP7",
      "path": "2"
    },
    "495": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "ADD",
      "path": "2"
    },
    "496": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "497": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x7"
    },
    "499": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "500": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP7",
      "path": "2"
    },
    "501": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "ADD",
      "path": "2"
    },
    "502": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "503": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "504": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "505": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "506": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "507": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "508": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "509": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "510": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "511": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "513": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "515": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "517": {
      "op": "SHL"
    },
    "518": {
      "op": "SUB"
    },
    "519": {
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "520": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "521": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "AND",
      "path": "2"
    },
    "522": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "523": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "524": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP9",
      "path": "2"
    },
    "525": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "JUMP",
      "path": "2"
    },
    "526": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "527": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "529": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "DUP1",
      "path": "2"
    },
    "530": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3319,
        3366
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "531": {
      "op": "SWAP9"
    },
    "532": {
      "op": "DUP10"
    },
    "533": {
      "op": "MSTORE"
    },
    "534": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "536": {
      "op": "DUP10"
    },
    "537": {
      "op": "ADD"
    },
    "538": {
      "op": "SWAP8"
    },
    "539": {
      "op": "SWAP1"
    },
    "540": {
      "op": "SWAP8"
    },
    "541": {
      "op": "MSTORE"
    },
    "542": {
      "op": "SWAP6"
    },
    "543": {
      "op": "DUP8"
    },
    "544": {
      "op": "ADD"
    },
    "545": {
      "op": "SWAP5"
    },
    "546": {
      "op": "SWAP1"
    },
    "547": {
      "op": "SWAP5"
    },
    "548": {
      "op": "MSTORE"
    },
    "549": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "551": {
      "op": "DUP7"
    },
    "552": {
      "op": "ADD"
    },
    "553": {
      "op": "SWAP3"
    },
    "554": {
      "op": "SWAP1"
    },
    "555": {
      "op": "SWAP3"
    },
    "556": {
      "op": "MSTORE"
    },
    "557": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "559": {
      "op": "DUP6"
    },
    "560": {
      "op": "ADD"
    },
    "561": {
      "op": "MSTORE"
    },
    "562": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "564": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "566": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "568": {
      "op": "SHL"
    },
    "569": {
      "op": "SUB"
    },
    "570": {
      "op": "AND"
    },
    "571": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "573": {
      "op": "DUP5"
    },
    "574": {
      "op": "ADD"
    },
    "575": {
      "op": "MSTORE"
    },
    "576": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "578": {
      "op": "DUP4"
    },
    "579": {
      "op": "ADD"
    },
    "580": {
      "op": "MSTORE"
    },
    "581": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "583": {
      "op": "DUP3"
    },
    "584": {
      "op": "ADD"
    },
    "585": {
      "op": "MSTORE"
    },
    "586": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "589": {
      "op": "ADD"
    },
    "590": {
      "offset": [
        3319,
        3366
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x135"
    },
    "593": {
      "op": "JUMP"
    },
    "594": {
      "offset": [
        3439,
        3479
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "595": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3439,
        3479
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x147"
    },
    "598": {
      "offset": [
        3472,
        3479
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0xF4240"
    },
    "602": {
      "offset": [
        3439,
        3479
      ],
      "op": "DUP2",
      "path": "2"
    },
    "603": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3439,
        3479
      ],
      "op": "JUMP",
      "path": "2"
    },
    "604": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "605": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x168"
    },
    "608": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x26A"
    },
    "611": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "612": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "614": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD88"
    },
    "617": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        5534,
        6610
      ],
      "op": "JUMP",
      "path": "2"
    },
    "618": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "619": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x929"
    },
    "622": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        5534,
        6610
      ],
      "op": "JUMP",
      "path": "2"
    },
    "623": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6985,
        8451
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "624": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6985,
        8451
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x168"
    },
    "627": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6985,
        8451
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x27D"
    },
    "630": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6985,
        8451
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "631": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6985,
        8451
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "633": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6985,
        8451
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC1E"
    },
    "636": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        6985,
        8451
      ],
      "op": "JUMP",
      "path": "2"
    },
    "637": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6985,
        8451
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "638": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6985,
        8451
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA3F"
    },
    "641": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        6985,
        8451
      ],
      "op": "JUMP",
      "path": "2"
    },
    "642": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11802,
        14584
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "643": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11872,
        11895
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "645": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11898,
        11920
      ],
      "op": "DUP3",
      "path": "2"
    },
    "646": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11898,
        11920
      ],
      "op": "DUP2",
      "path": "2"
    },
    "647": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11898,
        11920
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "648": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11898,
        11909
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "650": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11898,
        11920
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "652": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11898,
        11920
      ],
      "op": "DUP2",
      "path": "2"
    },
    "653": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11898,
        11920
      ],
      "op": "DUP2",
      "path": "2"
    },
    "654": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11898,
        11920
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "655": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11898,
        11920
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "657": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11898,
        11920
      ],
      "op": "DUP1",
      "path": "2"
    },
    "658": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11898,
        11920
      ],
      "op": "DUP5",
      "path": "2"
    },
    "659": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11898,
        11920
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "660": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11956,
        11983
      ],
      "op": "DUP6",
      "path": "2"
    },
    "661": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11956,
        11983
      ],
      "op": "DUP6",
      "path": "2"
    },
    "662": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11956,
        11983
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "663": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11956,
        11969
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x8"
    },
    "665": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11956,
        11969
      ],
      "op": "DUP2",
      "path": "2"
    },
    "666": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11956,
        11969
      ],
      "op": "ADD",
      "path": "2"
    },
    "667": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11956,
        11983
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "668": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11956,
        11983
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "669": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11956,
        11983
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "670": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11956,
        11983
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "671": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11956,
        11983
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "672": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11956,
        11983
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "673": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12067,
        12085
      ],
      "op": "SWAP1",
      "path": "2",
      "statement": 1
    },
    "674": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12067,
        12085
      ],
      "op": "DUP2",
      "path": "2"
    },
    "675": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12067,
        12085
      ],
      "op": "ADD",
      "path": "2"
    },
    "676": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12067,
        12085
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "677": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12063,
        12169
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2D0"
    },
    "680": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12063,
        12169
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "681": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "683": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "684": {
      "op": "PUSH4",
      "value": "0xC0859153"
    },
    "689": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "691": {
      "op": "SHL"
    },
    "692": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "DUP2",
      "path": "2"
    },
    "693": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "694": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "696": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "DUP2",
      "path": "2"
    },
    "697": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "ADD",
      "path": "2"
    },
    "698": {
      "op": "DUP6"
    },
    "699": {
      "op": "SWAP1"
    },
    "700": {
      "op": "MSTORE"
    },
    "701": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "703": {
      "op": "DUP2"
    },
    "704": {
      "op": "ADD"
    },
    "705": {
      "op": "DUP5"
    },
    "706": {
      "op": "SWAP1"
    },
    "707": {
      "op": "MSTORE"
    },
    "708": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "710": {
      "op": "ADD"
    },
    "711": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "712": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "714": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "715": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "DUP1",
      "path": "2"
    },
    "716": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "717": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "SUB",
      "path": "2"
    },
    "718": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "719": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12113,
        12158
      ],
      "op": "REVERT",
      "path": "2"
    },
    "720": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12063,
        12169
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "721": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12225,
        12245
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 2,
      "value": "0x2"
    },
    "723": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12225,
        12245
      ],
      "op": "DUP2",
      "path": "2"
    },
    "724": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12225,
        12245
      ],
      "op": "ADD",
      "path": "2"
    },
    "725": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12225,
        12245
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "726": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12221,
        12321
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2FC"
    },
    "729": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12221,
        12321
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "730": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12273,
        12310
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "732": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12273,
        12310
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "733": {
      "op": "PUSH4",
      "value": "0x18C0DC67"
    },
    "738": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "740": {
      "op": "SHL"
    },
    "741": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12273,
        12310
      ],
      "op": "DUP2",
      "path": "2"
    },
    "742": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12273,
        12310
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "743": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12273,
        12310
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "745": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12273,
        12310
      ],
      "op": "DUP2",
      "path": "2"
    },
    "746": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12273,
        12310
      ],
      "op": "ADD",
      "path": "2"
    },
    "747": {
      "op": "DUP6"
    },
    "748": {
      "op": "SWAP1"
    },
    "749": {
      "op": "MSTORE"
    },
    "750": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "752": {
      "op": "DUP2"
    },
    "753": {
      "op": "ADD"
    },
    "754": {
      "op": "DUP5"
    },
    "755": {
      "op": "SWAP1"
    },
    "756": {
      "op": "MSTORE"
    },
    "757": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "759": {
      "op": "ADD"
    },
    "760": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12273,
        12310
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2C7"
    },
    "763": {
      "op": "JUMP"
    },
    "764": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12221,
        12321
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "765": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12331,
        12353
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "767": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12497,
        12504
      ],
      "op": "DUP2",
      "path": "2"
    },
    "768": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12497,
        12512
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "770": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12497,
        12512
      ],
      "op": "ADD",
      "path": "2"
    },
    "771": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12497,
        12512
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "772": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12478,
        12493
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "773": {
      "branch": 36,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12478,
        12512
      ],
      "op": "LT",
      "path": "2"
    },
    "774": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12474,
        12848
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x314"
    },
    "777": {
      "branch": 36,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12474,
        12848
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "778": {
      "op": "POP"
    },
    "779": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12548,
        12568
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 3,
      "value": "0x2"
    },
    "781": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12548,
        12568
      ],
      "op": "DUP2",
      "path": "2"
    },
    "782": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12548,
        12568
      ],
      "op": "ADD",
      "path": "2"
    },
    "783": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12548,
        12568
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "784": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12474,
        12848
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x335"
    },
    "787": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12474,
        12848
      ],
      "op": "JUMP",
      "path": "2"
    },
    "788": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12474,
        12848
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "789": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12815,
        12837
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 4,
      "value": "0x5"
    },
    "791": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12815,
        12837
      ],
      "op": "DUP3",
      "path": "2"
    },
    "792": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12815,
        12837
      ],
      "op": "ADD",
      "path": "2"
    },
    "793": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12815,
        12837
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "794": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12785,
        12811
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "796": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12785,
        12811
      ],
      "op": "DUP4",
      "path": "2"
    },
    "797": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12785,
        12811
      ],
      "op": "ADD",
      "path": "2"
    },
    "798": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12785,
        12811
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "799": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12767,
        12811
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x328"
    },
    "802": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12767,
        12811
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "803": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12767,
        12782
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "804": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12767,
        12811
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE0A"
    },
    "807": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        12767,
        12811
      ],
      "op": "JUMP",
      "path": "2"
    },
    "808": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12767,
        12811
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "809": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12766,
        12837
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x332"
    },
    "812": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12766,
        12837
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "813": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12766,
        12837
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "814": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12766,
        12837
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE21"
    },
    "817": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        12766,
        12837
      ],
      "op": "JUMP",
      "path": "2"
    },
    "818": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12766,
        12837
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "819": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12746,
        12837
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "820": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12746,
        12837
      ],
      "op": "POP",
      "path": "2"
    },
    "821": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        12474,
        12848
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "822": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13069,
        13084
      ],
      "op": "TIMESTAMP",
      "path": "2",
      "statement": 5
    },
    "823": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13040,
        13066
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "825": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13040,
        13066
      ],
      "op": "DUP4",
      "path": "2"
    },
    "826": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13040,
        13066
      ],
      "op": "ADD",
      "path": "2"
    },
    "827": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13040,
        13084
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "828": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13117,
        13134
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "830": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13117,
        13134
      ],
      "op": "DUP4",
      "path": "2"
    },
    "831": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13117,
        13134
      ],
      "op": "ADD",
      "path": "2"
    },
    "832": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13117,
        13134
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "833": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "835": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "836": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "841": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "843": {
      "op": "SHL"
    },
    "844": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "DUP2",
      "path": "2"
    },
    "845": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "846": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13190,
        13194
      ],
      "op": "ADDRESS",
      "path": "2"
    },
    "847": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "849": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "DUP3",
      "path": "2"
    },
    "850": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "ADD",
      "path": "2"
    },
    "851": {
      "op": "MSTORE"
    },
    "852": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "854": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "856": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "858": {
      "op": "SHL"
    },
    "859": {
      "op": "SUB"
    },
    "860": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13117,
        13134
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "861": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13117,
        13134
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "862": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13117,
        13134
      ],
      "op": "AND",
      "path": "2"
    },
    "863": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13117,
        13134
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "864": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13095,
        13107
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "866": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13095,
        13107
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "867": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13117,
        13134
      ],
      "op": "DUP3",
      "path": "2"
    },
    "868": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13117,
        13134
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "869": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13181
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x70A08231"
    },
    "874": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13181
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "875": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "877": {
      "op": "ADD"
    },
    "878": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "880": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "882": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "883": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "DUP1",
      "path": "2"
    },
    "884": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "DUP4",
      "path": "2"
    },
    "885": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "SUB",
      "path": "2"
    },
    "886": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "DUP2",
      "path": "2"
    },
    "887": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "DUP7",
      "path": "2"
    },
    "888": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "GAS",
      "path": "2"
    },
    "889": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "STATICCALL",
      "path": "2"
    },
    "890": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "891": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "DUP1",
      "path": "2"
    },
    "892": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "893": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x38A"
    },
    "896": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "897": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "898": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "900": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "DUP1",
      "path": "2"
    },
    "901": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "902": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "903": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "905": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "REVERT",
      "path": "2"
    },
    "906": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "907": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "POP",
      "path": "2"
    },
    "908": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "POP",
      "path": "2"
    },
    "909": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "POP",
      "path": "2"
    },
    "910": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "POP",
      "path": "2"
    },
    "911": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "913": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "914": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "915": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "917": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "NOT",
      "path": "2"
    },
    "918": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "920": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "DUP3",
      "path": "2"
    },
    "921": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "ADD",
      "path": "2"
    },
    "922": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "AND",
      "path": "2"
    },
    "923": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "DUP3",
      "path": "2"
    },
    "924": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "ADD",
      "path": "2"
    },
    "925": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "DUP1",
      "path": "2"
    },
    "926": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "928": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "929": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "POP",
      "path": "2"
    },
    "930": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "DUP2",
      "path": "2"
    },
    "931": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "ADD",
      "path": "2"
    },
    "932": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "933": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x3AE"
    },
    "936": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "937": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "938": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE40"
    },
    "941": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        13166,
        13196
      ],
      "op": "JUMP",
      "path": "2"
    },
    "942": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13166,
        13196
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "943": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13859,
        13876
      ],
      "op": "DUP5",
      "path": "2",
      "statement": 6
    },
    "944": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13859,
        13876
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "945": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "947": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "948": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "953": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "955": {
      "op": "SHL"
    },
    "956": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "DUP2",
      "path": "2"
    },
    "957": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "958": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "960": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "962": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "964": {
      "op": "SHL"
    },
    "965": {
      "op": "SUB"
    },
    "966": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13859,
        13876
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "967": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13859,
        13876
      ],
      "op": "DUP3",
      "path": "2"
    },
    "968": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13859,
        13876
      ],
      "op": "AND",
      "path": "2"
    },
    "969": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "971": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "DUP3",
      "path": "2"
    },
    "972": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "ADD",
      "path": "2"
    },
    "973": {
      "op": "MSTORE"
    },
    "974": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "976": {
      "op": "DUP2"
    },
    "977": {
      "op": "ADD"
    },
    "978": {
      "op": "DUP7"
    },
    "979": {
      "op": "SWAP1"
    },
    "980": {
      "op": "MSTORE"
    },
    "981": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13145,
        13196
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "982": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13145,
        13196
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "983": {
      "op": "POP"
    },
    "984": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13858
      ],
      "op": "DUP4",
      "path": "2"
    },
    "985": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13858
      ],
      "op": "AND",
      "path": "2"
    },
    "986": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13858
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "987": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13858
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xA9059CBB"
    },
    "992": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13858
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "993": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "995": {
      "op": "ADD"
    },
    "996": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "998": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1000": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1001": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1002": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1003": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "SUB",
      "path": "2"
    },
    "1004": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1005": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1007": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1008": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "GAS",
      "path": "2"
    },
    "1009": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "CALL",
      "path": "2"
    },
    "1010": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1011": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1012": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1013": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x402"
    },
    "1016": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1017": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1018": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1020": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1021": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "1022": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1023": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1025": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1026": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1027": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "POP",
      "path": "2"
    },
    "1028": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "POP",
      "path": "2"
    },
    "1029": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "POP",
      "path": "2"
    },
    "1030": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "POP",
      "path": "2"
    },
    "1031": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1033": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1034": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1035": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1037": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "NOT",
      "path": "2"
    },
    "1038": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1040": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1041": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "ADD",
      "path": "2"
    },
    "1042": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "AND",
      "path": "2"
    },
    "1043": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1044": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "ADD",
      "path": "2"
    },
    "1045": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1046": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1048": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1049": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "POP",
      "path": "2"
    },
    "1050": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1051": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "ADD",
      "path": "2"
    },
    "1052": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1053": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x426"
    },
    "1056": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1057": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1058": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE59"
    },
    "1061": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        13844,
        13896
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1062": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13844,
        13896
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1063": {
      "op": "POP"
    },
    "1064": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1066": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1067": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "1072": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1074": {
      "op": "SHL"
    },
    "1075": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1076": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1077": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14042,
        14046
      ],
      "op": "ADDRESS",
      "path": "2"
    },
    "1078": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1080": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1081": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "ADD",
      "path": "2"
    },
    "1082": {
      "op": "MSTORE"
    },
    "1083": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13998,
        14015
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1085": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13998,
        14015
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1086": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1088": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1090": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1092": {
      "op": "SHL"
    },
    "1093": {
      "op": "SUB"
    },
    "1094": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14033
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1095": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14033
      ],
      "op": "AND",
      "path": "2"
    },
    "1096": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14033
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1097": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14033
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x70A08231"
    },
    "1102": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14033
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1103": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1105": {
      "op": "ADD"
    },
    "1106": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1108": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1110": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1111": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1112": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1113": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "SUB",
      "path": "2"
    },
    "1114": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1115": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1116": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "GAS",
      "path": "2"
    },
    "1117": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "STATICCALL",
      "path": "2"
    },
    "1118": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1119": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1120": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1121": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x46E"
    },
    "1124": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1125": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1126": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1128": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1129": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "1130": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1131": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1133": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1134": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1135": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "POP",
      "path": "2"
    },
    "1136": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "POP",
      "path": "2"
    },
    "1137": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "POP",
      "path": "2"
    },
    "1138": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "POP",
      "path": "2"
    },
    "1139": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1141": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1142": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1143": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1145": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "NOT",
      "path": "2"
    },
    "1146": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1148": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1149": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "ADD",
      "path": "2"
    },
    "1150": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "AND",
      "path": "2"
    },
    "1151": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1152": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "ADD",
      "path": "2"
    },
    "1153": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1154": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1156": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1157": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "POP",
      "path": "2"
    },
    "1158": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1159": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "ADD",
      "path": "2"
    },
    "1160": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1161": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x492"
    },
    "1164": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1165": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1166": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE40"
    },
    "1169": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        14018,
        14048
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1170": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14018,
        14048
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1171": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13998,
        14048
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1172": {
      "op": "POP"
    },
    "1173": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14058,
        14067
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1175": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14070,
        14098
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4A0"
    },
    "1178": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        13998,
        14048
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1179": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14070,
        14083
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1180": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14070,
        14098
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE0A"
    },
    "1183": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        14070,
        14098
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1184": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14070,
        14098
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1185": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14058,
        14098
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1186": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14058,
        14098
      ],
      "op": "POP",
      "path": "2"
    },
    "1187": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14321,
        14325
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 7
    },
    "1188": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14304
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1189": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14317
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1191": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14317
      ],
      "op": "ADD",
      "path": "2"
    },
    "1192": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14317
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1194": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1195": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1196": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1197": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4B6"
    },
    "1200": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1201": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1202": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE0A"
    },
    "1205": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        14297,
        14325
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1206": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1207": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1208": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "POP",
      "path": "2"
    },
    "1209": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "POP",
      "path": "2"
    },
    "1210": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1211": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1212": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1213": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14297,
        14325
      ],
      "op": "POP",
      "path": "2"
    },
    "1214": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14481,
        14485
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 8
    },
    "1215": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14464
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1216": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14477
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "1218": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14477
      ],
      "op": "ADD",
      "path": "2"
    },
    "1219": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14477
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1221": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14485
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1222": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14485
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1223": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14485
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1224": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14485
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4D1"
    },
    "1227": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14485
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1228": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14485
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1229": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14485
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE0A"
    },
    "1232": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        14460,
        14485
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1233": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14485
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1234": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14485
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1235": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14485
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1236": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14460,
        14485
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1237": {
      "op": "POP"
    },
    "1238": {
      "op": "POP"
    },
    "1239": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14531,
        14548
      ],
      "op": "DUP6",
      "path": "2",
      "statement": 9
    },
    "1240": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14531,
        14548
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1241": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14556,
        14576
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1243": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14556,
        14576
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1244": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14556,
        14576
      ],
      "op": "ADD",
      "path": "2"
    },
    "1245": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14556,
        14576
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1246": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14501,
        14577
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1248": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14501,
        14577
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1249": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1251": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1253": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1255": {
      "op": "SHL"
    },
    "1256": {
      "op": "SUB"
    },
    "1257": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14531,
        14548
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1258": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14531,
        14548
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1259": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14531,
        14548
      ],
      "op": "AND",
      "path": "2"
    },
    "1260": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14531,
        14548
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1261": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14520,
        14529
      ],
      "op": "DUP12",
      "path": "2"
    },
    "1262": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14520,
        14529
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1263": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14501,
        14577
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x1680E4CFE90468085407EF2B599DBE94B0AA30FF9F180F0E41D22EB71C872872"
    },
    "1296": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14501,
        14577
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1297": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14501,
        14577
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x522"
    },
    "1300": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14501,
        14577
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1301": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14550,
        14554
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1302": {
      "op": "DUP3"
    },
    "1303": {
      "op": "MSTORE"
    },
    "1304": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1306": {
      "op": "DUP3"
    },
    "1307": {
      "op": "ADD"
    },
    "1308": {
      "op": "MSTORE"
    },
    "1309": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1311": {
      "op": "ADD"
    },
    "1312": {
      "op": "SWAP1"
    },
    "1313": {
      "op": "JUMP"
    },
    "1314": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14501,
        14577
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1315": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14501,
        14577
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1317": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14501,
        14577
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1318": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14501,
        14577
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1319": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14501,
        14577
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1320": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14501,
        14577
      ],
      "op": "SUB",
      "path": "2"
    },
    "1321": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14501,
        14577
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1322": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        14501,
        14577
      ],
      "op": "LOG3",
      "path": "2"
    },
    "1323": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11862,
        14584
      ],
      "op": "POP",
      "path": "2"
    },
    "1324": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11862,
        14584
      ],
      "op": "POP",
      "path": "2"
    },
    "1325": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11862,
        14584
      ],
      "op": "POP",
      "path": "2"
    },
    "1326": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11862,
        14584
      ],
      "op": "POP",
      "path": "2"
    },
    "1327": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11862,
        14584
      ],
      "op": "POP",
      "path": "2"
    },
    "1328": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11862,
        14584
      ],
      "op": "POP",
      "path": "2"
    },
    "1329": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11862,
        14584
      ],
      "op": "POP",
      "path": "2"
    },
    "1330": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11802,
        14584
      ],
      "op": "POP",
      "path": "2"
    },
    "1331": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        11802,
        14584
      ],
      "op": "POP",
      "path": "2"
    },
    "1332": {
      "fn": "MerkleResistor.withdraw",
      "jump": "o",
      "offset": [
        11802,
        14584
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1333": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1334": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15631,
        15635
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1336": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15637,
        15641
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1337": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15643,
        15647
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1339": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15649,
        15653
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1340": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15799,
        15807
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1342": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15799,
        15807
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1343": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15787,
        15796
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1344": {
      "branch": 37,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15787,
        15807
      ],
      "op": "GT",
      "path": "2"
    },
    "1345": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15783,
        15857
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1346": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15783,
        15857
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x556"
    },
    "1349": {
      "branch": 37,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15783,
        15857
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1350": {
      "op": "POP"
    },
    "1351": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15831,
        15836
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 10,
      "value": "0x0"
    },
    "1353": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15831,
        15836
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1354": {
      "op": "POP"
    },
    "1355": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15831,
        15836
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1356": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15831,
        15836
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1357": {
      "op": "POP"
    },
    "1358": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15831,
        15836
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1359": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15831,
        15836
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1360": {
      "op": "POP"
    },
    "1361": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15831,
        15836
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1362": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15823,
        15846
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x67B"
    },
    "1365": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15823,
        15846
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1366": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15783,
        15857
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1367": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15962,
        15985
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1369": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15988,
        16010
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1370": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15988,
        16010
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1371": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15988,
        16010
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1372": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15988,
        15999
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1374": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15988,
        16010
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1376": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15988,
        16010
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1377": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15988,
        16010
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1379": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15988,
        16010
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1380": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15988,
        16010
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1381": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16127,
        16142
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "1383": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16127,
        16142
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1384": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16127,
        16142
      ],
      "op": "ADD",
      "path": "2"
    },
    "1385": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16127,
        16142
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1386": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16113,
        16142
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1387": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16113,
        16142
      ],
      "op": "GT",
      "path": "2"
    },
    "1388": {
      "branch": 38,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16113,
        16142
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1389": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16113,
        16175
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x579"
    },
    "1392": {
      "branch": 38,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16113,
        16175
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1393": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16113,
        16175
      ],
      "op": "POP",
      "path": "2"
    },
    "1394": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16160,
        16164
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1395": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16160,
        16175
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1397": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16160,
        16175
      ],
      "op": "ADD",
      "path": "2"
    },
    "1398": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16160,
        16175
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1399": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16146,
        16157
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1400": {
      "branch": 39,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16146,
        16175
      ],
      "op": "LT",
      "path": "2"
    },
    "1401": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16113,
        16175
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1402": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16109,
        16225
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1403": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16109,
        16225
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x592"
    },
    "1406": {
      "branch": 39,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16109,
        16225
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1407": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16199,
        16204
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 11,
      "value": "0x0"
    },
    "1409": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16206,
        16207
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1410": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16209,
        16210
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1412": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16212,
        16213
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1413": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16191,
        16214
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1414": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16191,
        16214
      ],
      "op": "POP",
      "path": "2"
    },
    "1415": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16191,
        16214
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1416": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16191,
        16214
      ],
      "op": "POP",
      "path": "2"
    },
    "1417": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16191,
        16214
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1418": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16191,
        16214
      ],
      "op": "POP",
      "path": "2"
    },
    "1419": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16191,
        16214
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1420": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16191,
        16214
      ],
      "op": "POP",
      "path": "2"
    },
    "1421": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16191,
        16214
      ],
      "op": "POP",
      "path": "2"
    },
    "1422": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16191,
        16214
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x67B"
    },
    "1425": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16191,
        16214
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1426": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16109,
        16225
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1427": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16235,
        16250
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1429": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16279,
        16283
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1430": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16279,
        16294
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "1432": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16279,
        16294
      ],
      "op": "ADD",
      "path": "2"
    },
    "1433": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16279,
        16294
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1434": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16264,
        16275
      ],
      "op": "DUP10",
      "path": "2"
    },
    "1435": {
      "branch": 40,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16264,
        16294
      ],
      "op": "EQ",
      "path": "2"
    },
    "1436": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16260,
        17564
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1437": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16260,
        17564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5A7"
    },
    "1440": {
      "branch": 40,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16260,
        17564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1441": {
      "op": "POP"
    },
    "1442": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16480,
        16496
      ],
      "op": "DUP6",
      "path": "2",
      "statement": 12
    },
    "1443": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16260,
        17564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x618"
    },
    "1446": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16260,
        17564
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1447": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16260,
        17564
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1448": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17171,
        17188
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1450": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17262,
        17266
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1451": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17262,
        17277
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1453": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17262,
        17277
      ],
      "op": "ADD",
      "path": "2"
    },
    "1454": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17262,
        17277
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1455": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17244,
        17248
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1456": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17244,
        17259
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "1458": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17244,
        17259
      ],
      "op": "ADD",
      "path": "2"
    },
    "1459": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17244,
        17259
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1460": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17244,
        17277
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5BD"
    },
    "1463": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17244,
        17277
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1464": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17244,
        17277
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1465": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17244,
        17277
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE0A"
    },
    "1468": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17244,
        17277
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1469": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17244,
        17277
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1470": {
      "offset": [
        3472,
        3479
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0xF4240"
    },
    "1474": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17192,
        17227
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5CB"
    },
    "1477": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17211,
        17227
      ],
      "op": "DUP12",
      "path": "2"
    },
    "1478": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17192,
        17208
      ],
      "op": "DUP12",
      "path": "2"
    },
    "1479": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17192,
        17227
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE0A"
    },
    "1482": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17192,
        17227
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1483": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17192,
        17227
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1484": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17191,
        17240
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5D5"
    },
    "1487": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17191,
        17240
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1488": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17191,
        17240
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1489": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17191,
        17240
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE21"
    },
    "1492": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17191,
        17240
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1493": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17191,
        17240
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1494": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17191,
        17278
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5DF"
    },
    "1497": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17191,
        17278
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1498": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17191,
        17278
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1499": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17191,
        17278
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE82"
    },
    "1502": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17191,
        17278
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1503": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17191,
        17278
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1504": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17171,
        17278
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1505": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17171,
        17278
      ],
      "op": "POP",
      "path": "2"
    },
    "1506": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17537,
        17553
      ],
      "op": "DUP9",
      "path": "2",
      "statement": 13
    },
    "1507": {
      "offset": [
        3472,
        3479
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0xF4240"
    },
    "1511": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17505,
        17509
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1512": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17505,
        17520
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1514": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17505,
        17520
      ],
      "op": "ADD",
      "path": "2"
    },
    "1515": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17505,
        17520
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1516": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17491,
        17502
      ],
      "op": "DUP13",
      "path": "2"
    },
    "1517": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17491,
        17520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5F6"
    },
    "1520": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17491,
        17520
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1521": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17491,
        17520
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1522": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17491,
        17520
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE0A"
    },
    "1525": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17491,
        17520
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1526": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17491,
        17520
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1527": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17475,
        17521
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x600"
    },
    "1530": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17475,
        17521
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1531": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17475,
        17487
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1532": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17475,
        17521
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE21"
    },
    "1535": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17475,
        17521
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1536": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17475,
        17521
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1537": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17475,
        17533
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x60A"
    },
    "1540": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17475,
        17533
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1541": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17475,
        17533
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1542": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17475,
        17533
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE82"
    },
    "1545": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17475,
        17533
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1546": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17475,
        17533
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1547": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17474,
        17553
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x614"
    },
    "1550": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17474,
        17553
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1551": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17474,
        17553
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1552": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17474,
        17553
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEA4"
    },
    "1555": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        17474,
        17553
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1556": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17474,
        17553
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1557": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17461,
        17553
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1558": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        17461,
        17553
      ],
      "op": "POP",
      "path": "2"
    },
    "1559": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16513,
        17564
      ],
      "op": "POP",
      "path": "2"
    },
    "1560": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        16260,
        17564
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1561": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18025,
        18044
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1563": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18095,
        18112
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x625"
    },
    "1566": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18095,
        18106
      ],
      "op": "DUP11",
      "path": "2"
    },
    "1567": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18109,
        18112
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "1569": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18095,
        18112
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE21"
    },
    "1572": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        18095,
        18112
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1573": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18095,
        18112
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1574": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18074,
        18089
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1576": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18074,
        18089
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1577": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18074,
        18089
      ],
      "op": "ADD",
      "path": "2"
    },
    "1578": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18074,
        18089
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1579": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18062,
        18089
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x635"
    },
    "1582": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18062,
        18089
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1583": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18067,
        18070
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "1585": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18062,
        18089
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE0A"
    },
    "1588": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        18062,
        18089
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1589": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18062,
        18089
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1590": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18048,
        18090
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x63F"
    },
    "1593": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18048,
        18090
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1594": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18048,
        18058
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1595": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18048,
        18090
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE21"
    },
    "1598": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        18048,
        18090
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1599": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18048,
        18090
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1600": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18047,
        18113
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x649"
    },
    "1603": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18047,
        18113
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1604": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18047,
        18113
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1605": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18047,
        18113
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE82"
    },
    "1608": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        18047,
        18113
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1609": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18047,
        18113
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1610": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18025,
        18113
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1611": {
      "op": "POP"
    },
    "1612": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18289,
        18303
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1614": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18339,
        18366
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x657"
    },
    "1617": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18025,
        18113
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1618": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18339,
        18349
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1619": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18339,
        18366
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE82"
    },
    "1622": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        18339,
        18366
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1623": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18339,
        18366
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1624": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18306,
        18335
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x661"
    },
    "1627": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18324,
        18335
      ],
      "op": "DUP13",
      "path": "2"
    },
    "1628": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18306,
        18321
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "1629": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18306,
        18335
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEA4"
    },
    "1632": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        18306,
        18335
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1633": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18306,
        18335
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1634": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18306,
        18367
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x66B"
    },
    "1637": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18306,
        18367
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1638": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18306,
        18367
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1639": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18306,
        18367
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE0A"
    },
    "1642": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        18306,
        18367
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1643": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18306,
        18367
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1644": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18386,
        18390
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 14,
      "value": "0x1"
    },
    "1646": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18386,
        18390
      ],
      "op": "SWAP9",
      "path": "2"
    },
    "1647": {
      "op": "POP"
    },
    "1648": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18392,
        18402
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1649": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18392,
        18402
      ],
      "op": "SWAP7",
      "path": "2"
    },
    "1650": {
      "op": "POP"
    },
    "1651": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18404,
        18418
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1652": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18404,
        18418
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1653": {
      "op": "POP"
    },
    "1654": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18289,
        18367
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1655": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        18289,
        18367
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1656": {
      "op": "POP"
    },
    "1657": {
      "op": "POP"
    },
    "1658": {
      "op": "POP"
    },
    "1659": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1660": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1661": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "POP",
      "path": "2"
    },
    "1662": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1663": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "POP",
      "path": "2"
    },
    "1664": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1665": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "POP",
      "path": "2"
    },
    "1666": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1667": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1668": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        15499,
        18437
      ],
      "op": "POP",
      "path": "2"
    },
    "1669": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "o",
      "offset": [
        15499,
        18437
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1670": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9335,
        11368
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1671": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9518,
        9522
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1673": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9582
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1674": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9582
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1675": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9582
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1676": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9571
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1678": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9582
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1680": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9582
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1681": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9582
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1682": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9582
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1683": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9582
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1685": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9582
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1686": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9582
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1687": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9582
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1688": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1689": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1690": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9691,
        9701
      ],
      "op": "CALLER",
      "path": "2"
    },
    "1691": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1692": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1693": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "ADD",
      "path": "2"
    },
    "1694": {
      "op": "MSTORE"
    },
    "1695": {
      "op": "DUP1"
    },
    "1696": {
      "op": "DUP4"
    },
    "1697": {
      "op": "ADD"
    },
    "1698": {
      "op": "DUP9"
    },
    "1699": {
      "op": "SWAP1"
    },
    "1700": {
      "op": "MSTORE"
    },
    "1701": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1703": {
      "op": "DUP1"
    },
    "1704": {
      "op": "DUP3"
    },
    "1705": {
      "op": "ADD"
    },
    "1706": {
      "op": "DUP9"
    },
    "1707": {
      "op": "SWAP1"
    },
    "1708": {
      "op": "MSTORE"
    },
    "1709": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1710": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1711": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1712": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1713": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "SUB",
      "path": "2"
    },
    "1714": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1715": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1716": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "ADD",
      "path": "2"
    },
    "1717": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1718": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1719": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1721": {
      "op": "SWAP1"
    },
    "1722": {
      "op": "SWAP2"
    },
    "1723": {
      "op": "ADD"
    },
    "1724": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1725": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9680,
        9738
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1726": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9670,
        9739
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1727": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9670,
        9739
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1728": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9670,
        9739
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1729": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9670,
        9739
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1730": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9670,
        9739
      ],
      "op": "ADD",
      "path": "2"
    },
    "1731": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9670,
        9739
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1732": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9776
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 15
    },
    "1733": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9776
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1734": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9776
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1735": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9770
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x9"
    },
    "1737": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9770
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1738": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9770
      ],
      "op": "ADD",
      "path": "2"
    },
    "1739": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9776
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1740": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9776
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1741": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9776
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1742": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9776
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1743": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9776
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1744": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9776
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1745": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9776
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1746": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9582
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1747": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9560,
        9582
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1748": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9670,
        9739
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1749": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9776
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "1751": {
      "branch": 41,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9754,
        9776
      ],
      "op": "AND",
      "path": "2"
    },
    "1752": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9750,
        9845
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1753": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9750,
        9845
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6FF"
    },
    "1756": {
      "branch": 41,
      "fn": "MerkleResistor.initialize",
      "offset": [
        9750,
        9845
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1757": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9799,
        9834
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1759": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9799,
        9834
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1760": {
      "op": "PUSH4",
      "value": "0xA0B07031"
    },
    "1765": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1767": {
      "op": "SHL"
    },
    "1768": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9799,
        9834
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1769": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9799,
        9834
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1770": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9799,
        9834
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1772": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9799,
        9834
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1773": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9799,
        9834
      ],
      "op": "ADD",
      "path": "2"
    },
    "1774": {
      "op": "DUP10"
    },
    "1775": {
      "op": "SWAP1"
    },
    "1776": {
      "op": "MSTORE"
    },
    "1777": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1779": {
      "op": "DUP2"
    },
    "1780": {
      "op": "ADD"
    },
    "1781": {
      "op": "DUP3"
    },
    "1782": {
      "op": "SWAP1"
    },
    "1783": {
      "op": "MSTORE"
    },
    "1784": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1786": {
      "op": "ADD"
    },
    "1787": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9799,
        9834
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2C7"
    },
    "1790": {
      "op": "JUMP"
    },
    "1791": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9750,
        9845
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1792": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9874
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 16
    },
    "1793": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9874
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1794": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1796": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1797": {
      "op": "PUSH4",
      "value": "0x2769CD1F"
    },
    "1802": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "1804": {
      "op": "SHL"
    },
    "1805": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1806": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1807": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9886
      ],
      "op": "PUSH20",
      "path": "2",
      "value": "0x0"
    },
    "1828": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9886
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1829": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9886
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x9DA7347C"
    },
    "1834": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9886
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1835": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x73B"
    },
    "1838": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1839": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9874
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1840": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9887,
        9891
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1841": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9887,
        9891
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1842": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9893,
        9898
      ],
      "op": "DUP10",
      "path": "2"
    },
    "1843": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9893,
        9898
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1844": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1846": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "ADD",
      "path": "2"
    },
    "1847": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBC"
    },
    "1850": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        9859,
        9899
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1851": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1852": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1854": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1856": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1857": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1858": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1859": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "SUB",
      "path": "2"
    },
    "1860": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1861": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1862": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "GAS",
      "path": "2"
    },
    "1863": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "DELEGATECALL",
      "path": "2"
    },
    "1864": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1865": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1866": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1867": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x758"
    },
    "1870": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1871": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1872": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1874": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1875": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "1876": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1877": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1879": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1880": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1881": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "POP",
      "path": "2"
    },
    "1882": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "POP",
      "path": "2"
    },
    "1883": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "POP",
      "path": "2"
    },
    "1884": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "POP",
      "path": "2"
    },
    "1885": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1887": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1888": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1889": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1891": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "NOT",
      "path": "2"
    },
    "1892": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1894": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1895": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "ADD",
      "path": "2"
    },
    "1896": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "AND",
      "path": "2"
    },
    "1897": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1898": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "ADD",
      "path": "2"
    },
    "1899": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1900": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1902": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1903": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "POP",
      "path": "2"
    },
    "1904": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1905": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "ADD",
      "path": "2"
    },
    "1906": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1907": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x77C"
    },
    "1910": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1911": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1912": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE59"
    },
    "1915": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        9859,
        9899
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1916": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9859,
        9899
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1917": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9855,
        9974
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x79F"
    },
    "1920": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9855,
        9974
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1921": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9940,
        9949
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1922": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9951,
        9955
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1923": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9957,
        9962
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1924": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        9963
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1926": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        9963
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1927": {
      "op": "PUSH4",
      "value": "0xDA5A8FD"
    },
    "1932": {
      "op": "PUSH1",
      "value": "0xE4"
    },
    "1934": {
      "op": "SHL"
    },
    "1935": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        9963
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1936": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        9963
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1937": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        9963
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1939": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        9963
      ],
      "op": "ADD",
      "path": "2"
    },
    "1940": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        9963
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2C7"
    },
    "1943": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        9963
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1944": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        9963
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1945": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        9963
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1946": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        9963
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1947": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9931,
        9963
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEBC"
    },
    "1950": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        9931,
        9963
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1951": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9855,
        9974
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1952": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9985,
        9995
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1954": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9997,
        10012
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1955": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10014,
        10033
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1957": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10035,
        10049
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1958": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10053,
        10134
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7B1"
    },
    "1961": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10075,
        10084
      ],
      "op": "DUP13",
      "path": "2"
    },
    "1962": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10086,
        10097
      ],
      "op": "DUP13",
      "path": "2"
    },
    "1963": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10099,
        10115
      ],
      "op": "DUP13",
      "path": "2"
    },
    "1964": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10117,
        10133
      ],
      "op": "DUP13",
      "path": "2"
    },
    "1965": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10053,
        10074
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x535"
    },
    "1968": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        10053,
        10134
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1969": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10053,
        10134
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1970": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9984,
        10134
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1971": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9984,
        10134
      ],
      "op": "SWAP7",
      "path": "2"
    },
    "1972": {
      "op": "POP"
    },
    "1973": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9984,
        10134
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1974": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9984,
        10134
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1975": {
      "op": "POP"
    },
    "1976": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9984,
        10134
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1977": {
      "op": "POP"
    },
    "1978": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9984,
        10134
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1979": {
      "op": "POP"
    },
    "1980": {
      "branch": 42,
      "fn": "MerkleResistor.initialize",
      "offset": [
        10149,
        10163
      ],
      "op": "DUP4",
      "path": "2",
      "statement": 17
    },
    "1981": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10145,
        10275
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7F1"
    },
    "1984": {
      "branch": 42,
      "fn": "MerkleResistor.initialize",
      "offset": [
        10145,
        10275
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1985": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10186,
        10264
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1987": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10186,
        10264
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1988": {
      "op": "PUSH4",
      "value": "0x23F43453"
    },
    "1993": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1995": {
      "op": "SHL"
    },
    "1996": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10186,
        10264
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1997": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10186,
        10264
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1998": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10186,
        10264
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2000": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10186,
        10264
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2001": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10186,
        10264
      ],
      "op": "ADD",
      "path": "2"
    },
    "2002": {
      "op": "DUP14"
    },
    "2003": {
      "op": "SWAP1"
    },
    "2004": {
      "op": "MSTORE"
    },
    "2005": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2007": {
      "op": "DUP2"
    },
    "2008": {
      "op": "ADD"
    },
    "2009": {
      "op": "DUP13"
    },
    "2010": {
      "op": "SWAP1"
    },
    "2011": {
      "op": "MSTORE"
    },
    "2012": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2014": {
      "op": "DUP2"
    },
    "2015": {
      "op": "ADD"
    },
    "2016": {
      "op": "DUP12"
    },
    "2017": {
      "op": "SWAP1"
    },
    "2018": {
      "op": "MSTORE"
    },
    "2019": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2021": {
      "op": "DUP2"
    },
    "2022": {
      "op": "ADD"
    },
    "2023": {
      "op": "DUP11"
    },
    "2024": {
      "op": "SWAP1"
    },
    "2025": {
      "op": "MSTORE"
    },
    "2026": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2028": {
      "op": "ADD"
    },
    "2029": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10186,
        10264
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2C7"
    },
    "2032": {
      "op": "JUMP"
    },
    "2033": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10145,
        10275
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2034": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10395
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 18,
      "value": "0x0"
    },
    "2036": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10395
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2037": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10395
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2038": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10395
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2039": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10389
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x9"
    },
    "2041": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10389
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2042": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10389
      ],
      "op": "ADD",
      "path": "2"
    },
    "2043": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10395
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2045": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10395
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2046": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10395
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2047": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10395
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2048": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10395
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2050": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10395
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2051": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10395
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2052": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10395
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2053": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10395
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2054": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10402
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2055": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10402
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2056": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2058": {
      "op": "NOT"
    },
    "2059": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10402
      ],
      "op": "AND",
      "path": "2"
    },
    "2060": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10398,
        10402
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2062": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10402
      ],
      "op": "OR",
      "path": "2"
    },
    "2063": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10402
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2064": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10373,
        10402
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2065": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 19
    },
    "2066": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2067": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "2069": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2070": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2071": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2072": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2073": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10665,
        10675
      ],
      "op": "CALLER",
      "path": "2"
    },
    "2074": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2075": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2076": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2077": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2078": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2079": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2080": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2081": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2082": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2083": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2084": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2085": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2086": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2087": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2088": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "2090": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2091": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2092": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2093": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2094": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2095": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2097": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2098": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2099": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10899,
        10928
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x83C"
    },
    "2102": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10917,
        10928
      ],
      "op": "DUP14",
      "path": "2"
    },
    "2103": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10899,
        10914
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "2104": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10899,
        10928
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEA4"
    },
    "2107": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        10899,
        10928
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2108": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10899,
        10928
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2109": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2110": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2111": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2113": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2114": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10986,
        11000
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2115": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2116": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2117": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2119": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2120": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11054,
        11063
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2121": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2122": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2123": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10644,
        11171
      ],
      "op": "POP",
      "path": "2"
    },
    "2124": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10601
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2125": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10610
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x8"
    },
    "2127": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10610
      ],
      "op": "ADD",
      "path": "2"
    },
    "2128": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2130": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10613,
        10617
      ],
      "op": "DUP9",
      "path": "2"
    },
    "2131": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10613,
        10640
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x7"
    },
    "2133": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10613,
        10640
      ],
      "op": "ADD",
      "path": "2"
    },
    "2134": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10613,
        10640
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2136": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10611,
        10640
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2137": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10611,
        10640
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2138": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10611,
        10640
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x862"
    },
    "2141": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10611,
        10640
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2142": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10611,
        10640
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF11"
    },
    "2145": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        10611,
        10640
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2146": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10611,
        10640
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2147": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10611,
        10640
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2148": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10611,
        10640
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2149": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10611,
        10640
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2150": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10611,
        10640
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2151": {
      "op": "POP"
    },
    "2152": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2153": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2154": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2156": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2157": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2158": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "ADD",
      "path": "2"
    },
    "2159": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2160": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2161": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2162": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2163": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2165": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2166": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2167": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "ADD",
      "path": "2"
    },
    "2168": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2170": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2171": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2172": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        10641
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2173": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2174": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2175": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2176": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2177": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2179": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2181": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2183": {
      "op": "SHL"
    },
    "2184": {
      "op": "SUB"
    },
    "2185": {
      "op": "NOT"
    },
    "2186": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "AND",
      "path": "2"
    },
    "2187": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2189": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2191": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2193": {
      "op": "SHL"
    },
    "2194": {
      "op": "SUB"
    },
    "2195": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2196": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2197": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "AND",
      "path": "2"
    },
    "2198": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "OR",
      "path": "2"
    },
    "2199": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2200": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2201": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2202": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2203": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2204": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2205": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2207": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2208": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2209": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2210": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2211": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2212": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2213": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2214": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2216": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2217": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2218": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2219": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "2221": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2222": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2223": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2224": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "2226": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2227": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2228": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2229": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2231": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2232": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2233": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2234": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2236": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2237": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2238": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2239": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA0"
    },
    "2241": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2242": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2243": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2244": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "2246": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2247": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2248": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2249": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC0"
    },
    "2251": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2252": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "2253": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2254": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2255": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "2257": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2258": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2259": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "ADD",
      "path": "2"
    },
    "2260": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2261": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2262": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2263": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        10597,
        11171
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2264": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11217,
        11244
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 20,
      "value": "0x7"
    },
    "2266": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11217,
        11244
      ],
      "op": "DUP9",
      "path": "2"
    },
    "2267": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11217,
        11244
      ],
      "op": "ADD",
      "path": "2"
    },
    "2268": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11217,
        11244
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2269": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11187,
        11257
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2270": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11187,
        11257
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2271": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11246,
        11256
      ],
      "op": "CALLER",
      "path": "2"
    },
    "2272": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11246,
        11256
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2273": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11206,
        11215
      ],
      "op": "DUP16",
      "path": "2"
    },
    "2274": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11206,
        11215
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2275": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11187,
        11257
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x8D1A99FB79BA81AA040238D9DF7033B8A8A3048D382036A272839A9C2A2616B5"
    },
    "2308": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11187,
        11257
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2309": {
      "op": "SWAP1"
    },
    "2310": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11187,
        11257
      ],
      "op": "LOG4",
      "path": "2"
    },
    "2311": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11268,
        11316
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 21,
      "value": "0x914"
    },
    "2314": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11277,
        11286
      ],
      "op": "DUP13",
      "path": "2"
    },
    "2315": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11288,
        11292
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2316": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11288,
        11315
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x7"
    },
    "2318": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11288,
        11315
      ],
      "op": "ADD",
      "path": "2"
    },
    "2319": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11288,
        11315
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2320": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11268,
        11276
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x282"
    },
    "2323": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        11268,
        11316
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2324": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11268,
        11316
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2325": {
      "op": "POP"
    },
    "2326": {
      "op": "POP"
    },
    "2327": {
      "op": "POP"
    },
    "2328": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11334,
        11361
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 22,
      "value": "0x7"
    },
    "2330": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11334,
        11361
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2331": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11334,
        11361
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2332": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11334,
        11361
      ],
      "op": "ADD",
      "path": "2"
    },
    "2333": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11334,
        11361
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2334": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        11334,
        11361
      ],
      "op": "SWAP9",
      "path": "2"
    },
    "2335": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        9335,
        11368
      ],
      "op": "SWAP8",
      "path": "2"
    },
    "2336": {
      "op": "POP"
    },
    "2337": {
      "op": "POP"
    },
    "2338": {
      "op": "POP"
    },
    "2339": {
      "op": "POP"
    },
    "2340": {
      "op": "POP"
    },
    "2341": {
      "op": "POP"
    },
    "2342": {
      "op": "POP"
    },
    "2343": {
      "op": "POP"
    },
    "2344": {
      "fn": "MerkleResistor.initialize",
      "jump": "o",
      "offset": [
        9335,
        11368
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2345": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2346": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5763,
        5766
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 23,
      "value": "0x64"
    },
    "2348": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5749,
        5759
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2349": {
      "branch": 43,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5749,
        5766
      ],
      "op": "LT",
      "path": "2"
    },
    "2350": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5745,
        5822
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x94D"
    },
    "2353": {
      "branch": 43,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5745,
        5822
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2354": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5789,
        5811
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2356": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5789,
        5811
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2357": {
      "op": "PUSH4",
      "value": "0x78299B5"
    },
    "2362": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "2364": {
      "op": "SHL"
    },
    "2365": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5789,
        5811
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2366": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5789,
        5811
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2367": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5789,
        5811
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2369": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5789,
        5811
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2370": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5789,
        5811
      ],
      "op": "ADD",
      "path": "2"
    },
    "2371": {
      "op": "DUP5"
    },
    "2372": {
      "op": "SWAP1"
    },
    "2373": {
      "op": "MSTORE"
    },
    "2374": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2376": {
      "op": "ADD"
    },
    "2377": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5789,
        5811
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2C7"
    },
    "2380": {
      "op": "JUMP"
    },
    "2381": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5745,
        5822
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2382": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5850,
        5860
      ],
      "op": "DUP4",
      "path": "2",
      "statement": 24
    },
    "2383": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5836,
        5846
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2384": {
      "branch": 44,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5836,
        5860
      ],
      "op": "LT",
      "path": "2"
    },
    "2385": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5832,
        5933
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x977"
    },
    "2388": {
      "branch": 44,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5832,
        5933
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2389": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5883,
        5922
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2391": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5883,
        5922
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2392": {
      "op": "PUSH4",
      "value": "0x6F30D757"
    },
    "2397": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "2399": {
      "op": "SHL"
    },
    "2400": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5883,
        5922
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2401": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5883,
        5922
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2402": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5883,
        5922
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2404": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5883,
        5922
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2405": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5883,
        5922
      ],
      "op": "ADD",
      "path": "2"
    },
    "2406": {
      "op": "DUP7"
    },
    "2407": {
      "op": "SWAP1"
    },
    "2408": {
      "op": "MSTORE"
    },
    "2409": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2411": {
      "op": "DUP2"
    },
    "2412": {
      "op": "ADD"
    },
    "2413": {
      "op": "DUP6"
    },
    "2414": {
      "op": "SWAP1"
    },
    "2415": {
      "op": "MSTORE"
    },
    "2416": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2418": {
      "op": "ADD"
    },
    "2419": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5883,
        5922
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2C7"
    },
    "2422": {
      "op": "JUMP"
    },
    "2423": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5832,
        5933
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2424": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5943,
        5966
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2426": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5980
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2428": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2430": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5983,
        5991
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2431": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5983,
        5991
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2433": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5981,
        5991
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2434": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5981,
        5991
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2435": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5981,
        5991
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x98B"
    },
    "2438": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5981,
        5991
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2439": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5981,
        5991
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF11"
    },
    "2442": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        5981,
        5991
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2443": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5981,
        5991
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2444": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5981,
        5991
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2445": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5981,
        5991
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2446": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5981,
        5991
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2447": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5981,
        5991
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2448": {
      "op": "POP"
    },
    "2449": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2450": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2451": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2453": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2454": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "ADD",
      "path": "2"
    },
    "2455": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2456": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2457": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2458": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2459": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2461": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "ADD",
      "path": "2"
    },
    "2462": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2464": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2465": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2466": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2467": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6002,
        6027
      ],
      "op": "DUP10",
      "path": "2",
      "statement": 25
    },
    "2468": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6002,
        6027
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2469": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6002,
        6027
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2470": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6037,
        6050
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 26,
      "value": "0x1"
    },
    "2472": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6037,
        6050
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2473": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6037,
        6050
      ],
      "op": "ADD",
      "path": "2"
    },
    "2474": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6037,
        6061
      ],
      "op": "DUP10",
      "path": "2"
    },
    "2475": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6037,
        6061
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2476": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6037,
        6061
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2477": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6071,
        6086
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 27,
      "value": "0x2"
    },
    "2479": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6071,
        6086
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2480": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6071,
        6086
      ],
      "op": "ADD",
      "path": "2"
    },
    "2481": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6071,
        6099
      ],
      "op": "DUP9",
      "path": "2"
    },
    "2482": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6071,
        6099
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2483": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6071,
        6099
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2484": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6109,
        6124
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 28,
      "value": "0x3"
    },
    "2486": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6109,
        6124
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2487": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6109,
        6124
      ],
      "op": "ADD",
      "path": "2"
    },
    "2488": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6109,
        6137
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2489": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6109,
        6137
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2490": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6109,
        6137
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2491": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6147,
        6162
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 29,
      "value": "0x4"
    },
    "2493": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6147,
        6162
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2494": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6147,
        6162
      ],
      "op": "ADD",
      "path": "2"
    },
    "2495": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6147,
        6175
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2496": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6147,
        6175
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2497": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6147,
        6175
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2498": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6185,
        6202
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 30,
      "value": "0x5"
    },
    "2500": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6185,
        6202
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2501": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6185,
        6202
      ],
      "op": "ADD",
      "path": "2"
    },
    "2502": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6185,
        6217
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2503": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6185,
        6217
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2504": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2506": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2508": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2510": {
      "op": "SHL"
    },
    "2511": {
      "op": "SUB"
    },
    "2512": {
      "op": "NOT"
    },
    "2513": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6185,
        6217
      ],
      "op": "AND",
      "path": "2"
    },
    "2514": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2516": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2518": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2520": {
      "op": "SHL"
    },
    "2521": {
      "op": "SUB"
    },
    "2522": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6185,
        6217
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2523": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6185,
        6217
      ],
      "op": "AND",
      "path": "2"
    },
    "2524": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6185,
        6217
      ],
      "op": "OR",
      "path": "2"
    },
    "2525": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6185,
        6217
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2526": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6185,
        6217
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2527": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6507,
        6515
      ],
      "op": "SWAP1",
      "path": "2",
      "statement": 31
    },
    "2528": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6507,
        6515
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2529": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2530": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5969,
        5992
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2531": {
      "op": "POP"
    },
    "2532": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6493,
        6530
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9ED"
    },
    "2535": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6493,
        6530
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2536": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6517,
        6529
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2537": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6493,
        6506
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA3F"
    },
    "2540": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        6493,
        6530
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2541": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6493,
        6530
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2542": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6561,
        6569
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 32,
      "value": "0x0"
    },
    "2544": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6561,
        6569
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2545": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2547": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2548": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2549": {
      "op": "DUP11"
    },
    "2550": {
      "op": "DUP2"
    },
    "2551": {
      "op": "MSTORE"
    },
    "2552": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2554": {
      "op": "DUP2"
    },
    "2555": {
      "op": "ADD"
    },
    "2556": {
      "op": "DUP11"
    },
    "2557": {
      "op": "SWAP1"
    },
    "2558": {
      "op": "MSTORE"
    },
    "2559": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2561": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2563": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2565": {
      "op": "SHL"
    },
    "2566": {
      "op": "SUB"
    },
    "2567": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2568": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "AND",
      "path": "2"
    },
    "2569": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2570": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6561,
        6569
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2571": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45"
    },
    "2604": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2605": {
      "op": "ADD"
    },
    "2606": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2608": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2609": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2610": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2611": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "SUB",
      "path": "2"
    },
    "2612": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2613": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        6545,
        6603
      ],
      "op": "LOG3",
      "path": "2"
    },
    "2614": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5691,
        6610
      ],
      "op": "POP",
      "path": "2"
    },
    "2615": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "POP",
      "path": "2"
    },
    "2616": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "POP",
      "path": "2"
    },
    "2617": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "POP",
      "path": "2"
    },
    "2618": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "POP",
      "path": "2"
    },
    "2619": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "POP",
      "path": "2"
    },
    "2620": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "POP",
      "path": "2"
    },
    "2621": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        5534,
        6610
      ],
      "op": "POP",
      "path": "2"
    },
    "2622": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "o",
      "offset": [
        5534,
        6610
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2623": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6985,
        8451
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2624": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7088,
        7117
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2626": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7120,
        7142
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2627": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7120,
        7142
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2628": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7120,
        7142
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2629": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7120,
        7131
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2631": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7120,
        7142
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2633": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7120,
        7142
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2634": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7120,
        7142
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2636": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7120,
        7142
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2637": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7120,
        7142
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2638": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7120,
        7142
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2639": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7175,
        7198
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "2641": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7175,
        7198
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2642": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7175,
        7198
      ],
      "op": "ADD",
      "path": "2"
    },
    "2643": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7175,
        7198
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2644": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2645": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2646": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "2651": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2653": {
      "op": "SHL"
    },
    "2654": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2655": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2656": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7254,
        7258
      ],
      "op": "ADDRESS",
      "path": "2"
    },
    "2657": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2659": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2660": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "ADD",
      "path": "2"
    },
    "2661": {
      "op": "MSTORE"
    },
    "2662": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7120,
        7142
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2663": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7120,
        7142
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2664": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2666": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2668": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2670": {
      "op": "SHL"
    },
    "2671": {
      "op": "SUB"
    },
    "2672": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7175,
        7198
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2673": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7175,
        7198
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2674": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7175,
        7198
      ],
      "op": "AND",
      "path": "2"
    },
    "2675": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7175,
        7198
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2676": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7088,
        7117
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2677": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7175,
        7198
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2678": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7175,
        7198
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2679": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7245
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x70A08231"
    },
    "2684": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7245
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2685": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2687": {
      "op": "ADD"
    },
    "2688": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2690": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2692": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2693": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2694": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2695": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "SUB",
      "path": "2"
    },
    "2696": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2697": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2698": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "GAS",
      "path": "2"
    },
    "2699": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "STATICCALL",
      "path": "2"
    },
    "2700": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2701": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2702": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2703": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA9C"
    },
    "2706": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2707": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2708": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2710": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2711": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "2712": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2713": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2715": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2716": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2717": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "POP",
      "path": "2"
    },
    "2718": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "POP",
      "path": "2"
    },
    "2719": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "POP",
      "path": "2"
    },
    "2720": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "POP",
      "path": "2"
    },
    "2721": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2723": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2724": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2725": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2727": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "NOT",
      "path": "2"
    },
    "2728": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2730": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2731": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "ADD",
      "path": "2"
    },
    "2732": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "AND",
      "path": "2"
    },
    "2733": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2734": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "ADD",
      "path": "2"
    },
    "2735": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2736": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2738": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2739": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "POP",
      "path": "2"
    },
    "2740": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2741": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "ADD",
      "path": "2"
    },
    "2742": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2743": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xAC0"
    },
    "2746": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2747": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2748": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE40"
    },
    "2751": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        7230,
        7260
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2752": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7230,
        7260
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2753": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 33,
      "value": "0x40"
    },
    "2755": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2756": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "2761": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2763": {
      "op": "SHL"
    },
    "2764": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2765": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2766": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8022,
        8032
      ],
      "op": "CALLER",
      "path": "2"
    },
    "2767": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2769": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2770": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "ADD",
      "path": "2"
    },
    "2771": {
      "op": "MSTORE"
    },
    "2772": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8042,
        8046
      ],
      "op": "ADDRESS",
      "path": "2"
    },
    "2773": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2775": {
      "op": "DUP3"
    },
    "2776": {
      "op": "ADD"
    },
    "2777": {
      "op": "MSTORE"
    },
    "2778": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2780": {
      "op": "DUP2"
    },
    "2781": {
      "op": "ADD"
    },
    "2782": {
      "op": "DUP7"
    },
    "2783": {
      "op": "SWAP1"
    },
    "2784": {
      "op": "MSTORE"
    },
    "2785": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7209,
        7260
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2786": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7209,
        7260
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2787": {
      "op": "POP"
    },
    "2788": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2790": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2792": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2794": {
      "op": "SHL"
    },
    "2795": {
      "op": "SUB"
    },
    "2796": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8021
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2797": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8021
      ],
      "op": "AND",
      "path": "2"
    },
    "2798": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8021
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2799": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8021
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x23B872DD"
    },
    "2804": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8021
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2805": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2807": {
      "op": "ADD"
    },
    "2808": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2810": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2812": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2813": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2814": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2815": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "SUB",
      "path": "2"
    },
    "2816": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2817": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2819": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2820": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "GAS",
      "path": "2"
    },
    "2821": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "CALL",
      "path": "2"
    },
    "2822": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2823": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2824": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2825": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB16"
    },
    "2828": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2829": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2830": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2832": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2833": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "2834": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2835": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2837": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2838": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2839": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "POP",
      "path": "2"
    },
    "2840": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "POP",
      "path": "2"
    },
    "2841": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "POP",
      "path": "2"
    },
    "2842": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "POP",
      "path": "2"
    },
    "2843": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2845": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2846": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2847": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2849": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "NOT",
      "path": "2"
    },
    "2850": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2852": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2853": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "ADD",
      "path": "2"
    },
    "2854": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "AND",
      "path": "2"
    },
    "2855": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2856": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "ADD",
      "path": "2"
    },
    "2857": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2858": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2860": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2861": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "POP",
      "path": "2"
    },
    "2862": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2863": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "ADD",
      "path": "2"
    },
    "2864": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2865": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB3A"
    },
    "2868": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2869": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2870": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE59"
    },
    "2873": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        8003,
        8055
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2874": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8003,
        8055
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2875": {
      "op": "POP"
    },
    "2876": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2878": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2879": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "2884": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2886": {
      "op": "SHL"
    },
    "2887": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2888": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2889": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8110,
        8114
      ],
      "op": "ADDRESS",
      "path": "2"
    },
    "2890": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2892": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2893": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "ADD",
      "path": "2"
    },
    "2894": {
      "op": "MSTORE"
    },
    "2895": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8066,
        8083
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2897": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8066,
        8083
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2898": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2900": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2902": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2904": {
      "op": "SHL"
    },
    "2905": {
      "op": "SUB"
    },
    "2906": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8101
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2907": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8101
      ],
      "op": "AND",
      "path": "2"
    },
    "2908": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8101
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2909": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8101
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x70A08231"
    },
    "2914": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8101
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2915": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2917": {
      "op": "ADD"
    },
    "2918": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2920": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2922": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2923": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2924": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2925": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "SUB",
      "path": "2"
    },
    "2926": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2927": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2928": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "GAS",
      "path": "2"
    },
    "2929": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "STATICCALL",
      "path": "2"
    },
    "2930": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2931": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2932": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2933": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB82"
    },
    "2936": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2937": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2938": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2940": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2941": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "2942": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2943": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2945": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2946": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2947": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "POP",
      "path": "2"
    },
    "2948": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "POP",
      "path": "2"
    },
    "2949": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "POP",
      "path": "2"
    },
    "2950": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "POP",
      "path": "2"
    },
    "2951": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2953": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2954": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2955": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2957": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "NOT",
      "path": "2"
    },
    "2958": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2960": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2961": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "ADD",
      "path": "2"
    },
    "2962": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "AND",
      "path": "2"
    },
    "2963": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2964": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "ADD",
      "path": "2"
    },
    "2965": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2966": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2968": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2969": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "POP",
      "path": "2"
    },
    "2970": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2971": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "ADD",
      "path": "2"
    },
    "2972": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2973": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBA6"
    },
    "2976": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2977": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2978": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE40"
    },
    "2981": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        8086,
        8116
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2982": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8086,
        8116
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2983": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8066,
        8116
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2984": {
      "op": "POP"
    },
    "2985": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8228,
        8237
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2987": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8240,
        8268
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBB4"
    },
    "2990": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8255,
        8268
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2991": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8066,
        8116
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2992": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8240,
        8268
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE0A"
    },
    "2995": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        8240,
        8268
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2996": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8240,
        8268
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2997": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8228,
        8268
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2998": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8228,
        8268
      ],
      "op": "POP",
      "path": "2"
    },
    "2999": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8368,
        8372
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 34
    },
    "3000": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8351
      ],
      "op": "DUP6",
      "path": "2"
    },
    "3001": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8364
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x6"
    },
    "3003": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8364
      ],
      "op": "ADD",
      "path": "2"
    },
    "3004": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8364
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3006": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8372
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3007": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8372
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3008": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8372
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "3009": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8372
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBCA"
    },
    "3012": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8372
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3013": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8372
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3014": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8372
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xEA4"
    },
    "3017": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "i",
      "offset": [
        8341,
        8372
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3018": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8372
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3019": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8372
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3020": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8372
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3021": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8341,
        8372
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3022": {
      "op": "POP"
    },
    "3023": {
      "op": "POP"
    },
    "3024": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8414,
        8437
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 35,
      "value": "0x5"
    },
    "3026": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8414,
        8437
      ],
      "op": "DUP6",
      "path": "2"
    },
    "3027": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8414,
        8437
      ],
      "op": "ADD",
      "path": "2"
    },
    "3028": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8414,
        8437
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "3029": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8387,
        8444
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3031": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8387,
        8444
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3032": {
      "op": "DUP3"
    },
    "3033": {
      "op": "DUP2"
    },
    "3034": {
      "op": "MSTORE"
    },
    "3035": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3037": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3039": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3041": {
      "op": "SHL"
    },
    "3042": {
      "op": "SUB"
    },
    "3043": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8414,
        8437
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3044": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8414,
        8437
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3045": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8414,
        8437
      ],
      "op": "AND",
      "path": "2"
    },
    "3046": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8414,
        8437
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3047": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8403,
        8412
      ],
      "op": "DUP9",
      "path": "2"
    },
    "3048": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8403,
        8412
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3049": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8387,
        8444
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0xB162210DA7D23D82C18CFF5AF46D3562661D26B42A6848FA28D64A6BDC70386A"
    },
    "3082": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8387,
        8444
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3083": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3085": {
      "op": "ADD"
    },
    "3086": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8387,
        8444
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3088": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8387,
        8444
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3089": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8387,
        8444
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3090": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8387,
        8444
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3091": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8387,
        8444
      ],
      "op": "SUB",
      "path": "2"
    },
    "3092": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8387,
        8444
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3093": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        8387,
        8444
      ],
      "op": "LOG3",
      "path": "2"
    },
    "3094": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7043,
        8451
      ],
      "op": "POP",
      "path": "2"
    },
    "3095": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7043,
        8451
      ],
      "op": "POP",
      "path": "2"
    },
    "3096": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7043,
        8451
      ],
      "op": "POP",
      "path": "2"
    },
    "3097": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7043,
        8451
      ],
      "op": "POP",
      "path": "2"
    },
    "3098": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        7043,
        8451
      ],
      "op": "POP",
      "path": "2"
    },
    "3099": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6985,
        8451
      ],
      "op": "POP",
      "path": "2"
    },
    "3100": {
      "fn": "MerkleResistor.depositTokens",
      "offset": [
        6985,
        8451
      ],
      "op": "POP",
      "path": "2"
    },
    "3101": {
      "fn": "MerkleResistor.depositTokens",
      "jump": "o",
      "offset": [
        6985,
        8451
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3102": {
      "op": "JUMPDEST"
    },
    "3103": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3105": {
      "op": "DUP1"
    },
    "3106": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3108": {
      "op": "DUP4"
    },
    "3109": {
      "op": "DUP6"
    },
    "3110": {
      "op": "SUB"
    },
    "3111": {
      "op": "SLT"
    },
    "3112": {
      "op": "ISZERO"
    },
    "3113": {
      "op": "PUSH2",
      "value": "0xC31"
    },
    "3116": {
      "op": "JUMPI"
    },
    "3117": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3119": {
      "op": "DUP1"
    },
    "3120": {
      "op": "REVERT"
    },
    "3121": {
      "op": "JUMPDEST"
    },
    "3122": {
      "op": "POP"
    },
    "3123": {
      "op": "POP"
    },
    "3124": {
      "op": "DUP1"
    },
    "3125": {
      "op": "CALLDATALOAD"
    },
    "3126": {
      "op": "SWAP3"
    },
    "3127": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3129": {
      "op": "SWAP1"
    },
    "3130": {
      "op": "SWAP2"
    },
    "3131": {
      "op": "ADD"
    },
    "3132": {
      "op": "CALLDATALOAD"
    },
    "3133": {
      "op": "SWAP2"
    },
    "3134": {
      "op": "POP"
    },
    "3135": {
      "jump": "o",
      "op": "JUMP"
    },
    "3136": {
      "op": "JUMPDEST"
    },
    "3137": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3139": {
      "op": "DUP1"
    },
    "3140": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3142": {
      "op": "DUP1"
    },
    "3143": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3145": {
      "op": "DUP6"
    },
    "3146": {
      "op": "DUP8"
    },
    "3147": {
      "op": "SUB"
    },
    "3148": {
      "op": "SLT"
    },
    "3149": {
      "op": "ISZERO"
    },
    "3150": {
      "op": "PUSH2",
      "value": "0xC56"
    },
    "3153": {
      "op": "JUMPI"
    },
    "3154": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3156": {
      "op": "DUP1"
    },
    "3157": {
      "op": "REVERT"
    },
    "3158": {
      "op": "JUMPDEST"
    },
    "3159": {
      "op": "POP"
    },
    "3160": {
      "op": "POP"
    },
    "3161": {
      "op": "DUP3"
    },
    "3162": {
      "op": "CALLDATALOAD"
    },
    "3163": {
      "op": "SWAP5"
    },
    "3164": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3166": {
      "op": "DUP5"
    },
    "3167": {
      "op": "ADD"
    },
    "3168": {
      "op": "CALLDATALOAD"
    },
    "3169": {
      "op": "SWAP5"
    },
    "3170": {
      "op": "POP"
    },
    "3171": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3173": {
      "op": "DUP5"
    },
    "3174": {
      "op": "ADD"
    },
    "3175": {
      "op": "CALLDATALOAD"
    },
    "3176": {
      "op": "SWAP4"
    },
    "3177": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3179": {
      "op": "ADD"
    },
    "3180": {
      "op": "CALLDATALOAD"
    },
    "3181": {
      "op": "SWAP3"
    },
    "3182": {
      "op": "POP"
    },
    "3183": {
      "op": "SWAP1"
    },
    "3184": {
      "op": "POP"
    },
    "3185": {
      "jump": "o",
      "op": "JUMP"
    },
    "3186": {
      "op": "JUMPDEST"
    },
    "3187": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3192": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3194": {
      "op": "SHL"
    },
    "3195": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3197": {
      "op": "MSTORE"
    },
    "3198": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "3200": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3202": {
      "op": "MSTORE"
    },
    "3203": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3205": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3207": {
      "op": "REVERT"
    },
    "3208": {
      "op": "JUMPDEST"
    },
    "3209": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3211": {
      "op": "DUP1"
    },
    "3212": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3214": {
      "op": "DUP1"
    },
    "3215": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3217": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3219": {
      "op": "DUP7"
    },
    "3220": {
      "op": "DUP9"
    },
    "3221": {
      "op": "SUB"
    },
    "3222": {
      "op": "SLT"
    },
    "3223": {
      "op": "ISZERO"
    },
    "3224": {
      "op": "PUSH2",
      "value": "0xCA0"
    },
    "3227": {
      "op": "JUMPI"
    },
    "3228": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3230": {
      "op": "DUP1"
    },
    "3231": {
      "op": "REVERT"
    },
    "3232": {
      "op": "JUMPDEST"
    },
    "3233": {
      "op": "DUP6"
    },
    "3234": {
      "op": "CALLDATALOAD"
    },
    "3235": {
      "op": "SWAP5"
    },
    "3236": {
      "op": "POP"
    },
    "3237": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3239": {
      "op": "DUP1"
    },
    "3240": {
      "op": "DUP8"
    },
    "3241": {
      "op": "ADD"
    },
    "3242": {
      "op": "CALLDATALOAD"
    },
    "3243": {
      "op": "SWAP5"
    },
    "3244": {
      "op": "POP"
    },
    "3245": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3247": {
      "op": "DUP8"
    },
    "3248": {
      "op": "ADD"
    },
    "3249": {
      "op": "CALLDATALOAD"
    },
    "3250": {
      "op": "SWAP4"
    },
    "3251": {
      "op": "POP"
    },
    "3252": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3254": {
      "op": "DUP8"
    },
    "3255": {
      "op": "ADD"
    },
    "3256": {
      "op": "CALLDATALOAD"
    },
    "3257": {
      "op": "SWAP3"
    },
    "3258": {
      "op": "POP"
    },
    "3259": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3261": {
      "op": "DUP8"
    },
    "3262": {
      "op": "ADD"
    },
    "3263": {
      "op": "CALLDATALOAD"
    },
    "3264": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3273": {
      "op": "DUP1"
    },
    "3274": {
      "op": "DUP3"
    },
    "3275": {
      "op": "GT"
    },
    "3276": {
      "op": "ISZERO"
    },
    "3277": {
      "op": "PUSH2",
      "value": "0xCD5"
    },
    "3280": {
      "op": "JUMPI"
    },
    "3281": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3283": {
      "op": "DUP1"
    },
    "3284": {
      "op": "REVERT"
    },
    "3285": {
      "op": "JUMPDEST"
    },
    "3286": {
      "op": "DUP2"
    },
    "3287": {
      "op": "DUP10"
    },
    "3288": {
      "op": "ADD"
    },
    "3289": {
      "op": "SWAP2"
    },
    "3290": {
      "op": "POP"
    },
    "3291": {
      "op": "DUP10"
    },
    "3292": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3294": {
      "op": "DUP4"
    },
    "3295": {
      "op": "ADD"
    },
    "3296": {
      "op": "SLT"
    },
    "3297": {
      "op": "PUSH2",
      "value": "0xCE9"
    },
    "3300": {
      "op": "JUMPI"
    },
    "3301": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3303": {
      "op": "DUP1"
    },
    "3304": {
      "op": "REVERT"
    },
    "3305": {
      "op": "JUMPDEST"
    },
    "3306": {
      "op": "DUP2"
    },
    "3307": {
      "op": "CALLDATALOAD"
    },
    "3308": {
      "op": "DUP2"
    },
    "3309": {
      "op": "DUP2"
    },
    "3310": {
      "op": "GT"
    },
    "3311": {
      "op": "ISZERO"
    },
    "3312": {
      "op": "PUSH2",
      "value": "0xCFB"
    },
    "3315": {
      "op": "JUMPI"
    },
    "3316": {
      "op": "PUSH2",
      "value": "0xCFB"
    },
    "3319": {
      "op": "PUSH2",
      "value": "0xC72"
    },
    "3322": {
      "jump": "i",
      "op": "JUMP"
    },
    "3323": {
      "op": "JUMPDEST"
    },
    "3324": {
      "op": "DUP1"
    },
    "3325": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "3327": {
      "op": "SHL"
    },
    "3328": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3330": {
      "op": "MLOAD"
    },
    "3331": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3333": {
      "op": "NOT"
    },
    "3334": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "3336": {
      "op": "DUP4"
    },
    "3337": {
      "op": "ADD"
    },
    "3338": {
      "op": "AND"
    },
    "3339": {
      "op": "DUP2"
    },
    "3340": {
      "op": "ADD"
    },
    "3341": {
      "op": "DUP2"
    },
    "3342": {
      "op": "DUP2"
    },
    "3343": {
      "op": "LT"
    },
    "3344": {
      "op": "DUP6"
    },
    "3345": {
      "op": "DUP3"
    },
    "3346": {
      "op": "GT"
    },
    "3347": {
      "op": "OR"
    },
    "3348": {
      "op": "ISZERO"
    },
    "3349": {
      "op": "PUSH2",
      "value": "0xD20"
    },
    "3352": {
      "op": "JUMPI"
    },
    "3353": {
      "op": "PUSH2",
      "value": "0xD20"
    },
    "3356": {
      "op": "PUSH2",
      "value": "0xC72"
    },
    "3359": {
      "jump": "i",
      "op": "JUMP"
    },
    "3360": {
      "op": "JUMPDEST"
    },
    "3361": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3363": {
      "op": "MSTORE"
    },
    "3364": {
      "op": "SWAP2"
    },
    "3365": {
      "op": "DUP3"
    },
    "3366": {
      "op": "MSTORE"
    },
    "3367": {
      "op": "DUP5"
    },
    "3368": {
      "op": "DUP3"
    },
    "3369": {
      "op": "ADD"
    },
    "3370": {
      "op": "SWAP3"
    },
    "3371": {
      "op": "POP"
    },
    "3372": {
      "op": "DUP4"
    },
    "3373": {
      "op": "DUP2"
    },
    "3374": {
      "op": "ADD"
    },
    "3375": {
      "op": "DUP6"
    },
    "3376": {
      "op": "ADD"
    },
    "3377": {
      "op": "SWAP2"
    },
    "3378": {
      "op": "DUP13"
    },
    "3379": {
      "op": "DUP4"
    },
    "3380": {
      "op": "GT"
    },
    "3381": {
      "op": "ISZERO"
    },
    "3382": {
      "op": "PUSH2",
      "value": "0xD3E"
    },
    "3385": {
      "op": "JUMPI"
    },
    "3386": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3388": {
      "op": "DUP1"
    },
    "3389": {
      "op": "REVERT"
    },
    "3390": {
      "op": "JUMPDEST"
    },
    "3391": {
      "op": "SWAP4"
    },
    "3392": {
      "op": "DUP6"
    },
    "3393": {
      "op": "ADD"
    },
    "3394": {
      "op": "SWAP4"
    },
    "3395": {
      "op": "JUMPDEST"
    },
    "3396": {
      "op": "DUP3"
    },
    "3397": {
      "op": "DUP6"
    },
    "3398": {
      "op": "LT"
    },
    "3399": {
      "op": "ISZERO"
    },
    "3400": {
      "op": "PUSH2",
      "value": "0xD5C"
    },
    "3403": {
      "op": "JUMPI"
    },
    "3404": {
      "op": "DUP5"
    },
    "3405": {
      "op": "CALLDATALOAD"
    },
    "3406": {
      "op": "DUP5"
    },
    "3407": {
      "op": "MSTORE"
    },
    "3408": {
      "op": "SWAP4"
    },
    "3409": {
      "op": "DUP6"
    },
    "3410": {
      "op": "ADD"
    },
    "3411": {
      "op": "SWAP4"
    },
    "3412": {
      "op": "SWAP3"
    },
    "3413": {
      "op": "DUP6"
    },
    "3414": {
      "op": "ADD"
    },
    "3415": {
      "op": "SWAP3"
    },
    "3416": {
      "op": "PUSH2",
      "value": "0xD43"
    },
    "3419": {
      "op": "JUMP"
    },
    "3420": {
      "op": "JUMPDEST"
    },
    "3421": {
      "op": "DUP1"
    },
    "3422": {
      "op": "SWAP7"
    },
    "3423": {
      "op": "POP"
    },
    "3424": {
      "op": "POP"
    },
    "3425": {
      "op": "POP"
    },
    "3426": {
      "op": "POP"
    },
    "3427": {
      "op": "POP"
    },
    "3428": {
      "op": "POP"
    },
    "3429": {
      "op": "POP"
    },
    "3430": {
      "op": "SWAP3"
    },
    "3431": {
      "op": "SWAP6"
    },
    "3432": {
      "op": "POP"
    },
    "3433": {
      "op": "SWAP3"
    },
    "3434": {
      "op": "SWAP6"
    },
    "3435": {
      "op": "SWAP1"
    },
    "3436": {
      "op": "SWAP4"
    },
    "3437": {
      "op": "POP"
    },
    "3438": {
      "jump": "o",
      "op": "JUMP"
    },
    "3439": {
      "op": "JUMPDEST"
    },
    "3440": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3442": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3444": {
      "op": "DUP3"
    },
    "3445": {
      "op": "DUP5"
    },
    "3446": {
      "op": "SUB"
    },
    "3447": {
      "op": "SLT"
    },
    "3448": {
      "op": "ISZERO"
    },
    "3449": {
      "op": "PUSH2",
      "value": "0xD81"
    },
    "3452": {
      "op": "JUMPI"
    },
    "3453": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3455": {
      "op": "DUP1"
    },
    "3456": {
      "op": "REVERT"
    },
    "3457": {
      "op": "JUMPDEST"
    },
    "3458": {
      "op": "POP"
    },
    "3459": {
      "op": "CALLDATALOAD"
    },
    "3460": {
      "op": "SWAP2"
    },
    "3461": {
      "op": "SWAP1"
    },
    "3462": {
      "op": "POP"
    },
    "3463": {
      "jump": "o",
      "op": "JUMP"
    },
    "3464": {
      "op": "JUMPDEST"
    },
    "3465": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3467": {
      "op": "DUP1"
    },
    "3468": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3470": {
      "op": "DUP1"
    },
    "3471": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3473": {
      "op": "DUP1"
    },
    "3474": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3476": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3478": {
      "op": "DUP9"
    },
    "3479": {
      "op": "DUP11"
    },
    "3480": {
      "op": "SUB"
    },
    "3481": {
      "op": "SLT"
    },
    "3482": {
      "op": "ISZERO"
    },
    "3483": {
      "op": "PUSH2",
      "value": "0xDA3"
    },
    "3486": {
      "op": "JUMPI"
    },
    "3487": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3489": {
      "op": "DUP1"
    },
    "3490": {
      "op": "REVERT"
    },
    "3491": {
      "op": "JUMPDEST"
    },
    "3492": {
      "op": "DUP8"
    },
    "3493": {
      "op": "CALLDATALOAD"
    },
    "3494": {
      "op": "SWAP7"
    },
    "3495": {
      "op": "POP"
    },
    "3496": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3498": {
      "op": "DUP9"
    },
    "3499": {
      "op": "ADD"
    },
    "3500": {
      "op": "CALLDATALOAD"
    },
    "3501": {
      "op": "SWAP6"
    },
    "3502": {
      "op": "POP"
    },
    "3503": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3505": {
      "op": "DUP9"
    },
    "3506": {
      "op": "ADD"
    },
    "3507": {
      "op": "CALLDATALOAD"
    },
    "3508": {
      "op": "SWAP5"
    },
    "3509": {
      "op": "POP"
    },
    "3510": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3512": {
      "op": "DUP9"
    },
    "3513": {
      "op": "ADD"
    },
    "3514": {
      "op": "CALLDATALOAD"
    },
    "3515": {
      "op": "SWAP4"
    },
    "3516": {
      "op": "POP"
    },
    "3517": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3519": {
      "op": "DUP9"
    },
    "3520": {
      "op": "ADD"
    },
    "3521": {
      "op": "CALLDATALOAD"
    },
    "3522": {
      "op": "SWAP3"
    },
    "3523": {
      "op": "POP"
    },
    "3524": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3526": {
      "op": "DUP9"
    },
    "3527": {
      "op": "ADD"
    },
    "3528": {
      "op": "CALLDATALOAD"
    },
    "3529": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3531": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3533": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3535": {
      "op": "SHL"
    },
    "3536": {
      "op": "SUB"
    },
    "3537": {
      "op": "DUP2"
    },
    "3538": {
      "op": "AND"
    },
    "3539": {
      "op": "DUP2"
    },
    "3540": {
      "op": "EQ"
    },
    "3541": {
      "op": "PUSH2",
      "value": "0xDDD"
    },
    "3544": {
      "op": "JUMPI"
    },
    "3545": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3547": {
      "op": "DUP1"
    },
    "3548": {
      "op": "REVERT"
    },
    "3549": {
      "op": "JUMPDEST"
    },
    "3550": {
      "op": "DUP1"
    },
    "3551": {
      "op": "SWAP3"
    },
    "3552": {
      "op": "POP"
    },
    "3553": {
      "op": "POP"
    },
    "3554": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "3556": {
      "op": "DUP9"
    },
    "3557": {
      "op": "ADD"
    },
    "3558": {
      "op": "CALLDATALOAD"
    },
    "3559": {
      "op": "SWAP1"
    },
    "3560": {
      "op": "POP"
    },
    "3561": {
      "op": "SWAP3"
    },
    "3562": {
      "op": "SWAP6"
    },
    "3563": {
      "op": "SWAP9"
    },
    "3564": {
      "op": "SWAP2"
    },
    "3565": {
      "op": "SWAP5"
    },
    "3566": {
      "op": "SWAP8"
    },
    "3567": {
      "op": "POP"
    },
    "3568": {
      "op": "SWAP3"
    },
    "3569": {
      "op": "SWAP6"
    },
    "3570": {
      "op": "POP"
    },
    "3571": {
      "jump": "o",
      "op": "JUMP"
    },
    "3572": {
      "op": "JUMPDEST"
    },
    "3573": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3578": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3580": {
      "op": "SHL"
    },
    "3581": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3583": {
      "op": "MSTORE"
    },
    "3584": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3586": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3588": {
      "op": "MSTORE"
    },
    "3589": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3591": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3593": {
      "op": "REVERT"
    },
    "3594": {
      "op": "JUMPDEST"
    },
    "3595": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3597": {
      "op": "DUP3"
    },
    "3598": {
      "op": "DUP3"
    },
    "3599": {
      "op": "LT"
    },
    "3600": {
      "op": "ISZERO"
    },
    "3601": {
      "op": "PUSH2",
      "value": "0xE1C"
    },
    "3604": {
      "op": "JUMPI"
    },
    "3605": {
      "op": "PUSH2",
      "value": "0xE1C"
    },
    "3608": {
      "op": "PUSH2",
      "value": "0xDF4"
    },
    "3611": {
      "jump": "i",
      "op": "JUMP"
    },
    "3612": {
      "op": "JUMPDEST"
    },
    "3613": {
      "op": "POP"
    },
    "3614": {
      "op": "SUB"
    },
    "3615": {
      "op": "SWAP1"
    },
    "3616": {
      "jump": "o",
      "op": "JUMP"
    },
    "3617": {
      "op": "JUMPDEST"
    },
    "3618": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3620": {
      "op": "DUP2"
    },
    "3621": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3623": {
      "op": "NOT"
    },
    "3624": {
      "op": "DIV"
    },
    "3625": {
      "op": "DUP4"
    },
    "3626": {
      "op": "GT"
    },
    "3627": {
      "op": "DUP3"
    },
    "3628": {
      "op": "ISZERO"
    },
    "3629": {
      "op": "ISZERO"
    },
    "3630": {
      "op": "AND"
    },
    "3631": {
      "op": "ISZERO"
    },
    "3632": {
      "op": "PUSH2",
      "value": "0xE3B"
    },
    "3635": {
      "op": "JUMPI"
    },
    "3636": {
      "op": "PUSH2",
      "value": "0xE3B"
    },
    "3639": {
      "op": "PUSH2",
      "value": "0xDF4"
    },
    "3642": {
      "jump": "i",
      "op": "JUMP"
    },
    "3643": {
      "op": "JUMPDEST"
    },
    "3644": {
      "op": "POP"
    },
    "3645": {
      "op": "MUL"
    },
    "3646": {
      "op": "SWAP1"
    },
    "3647": {
      "jump": "o",
      "op": "JUMP"
    },
    "3648": {
      "op": "JUMPDEST"
    },
    "3649": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3651": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3653": {
      "op": "DUP3"
    },
    "3654": {
      "op": "DUP5"
    },
    "3655": {
      "op": "SUB"
    },
    "3656": {
      "op": "SLT"
    },
    "3657": {
      "op": "ISZERO"
    },
    "3658": {
      "op": "PUSH2",
      "value": "0xE52"
    },
    "3661": {
      "op": "JUMPI"
    },
    "3662": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3664": {
      "op": "DUP1"
    },
    "3665": {
      "op": "REVERT"
    },
    "3666": {
      "op": "JUMPDEST"
    },
    "3667": {
      "op": "POP"
    },
    "3668": {
      "op": "MLOAD"
    },
    "3669": {
      "op": "SWAP2"
    },
    "3670": {
      "op": "SWAP1"
    },
    "3671": {
      "op": "POP"
    },
    "3672": {
      "jump": "o",
      "op": "JUMP"
    },
    "3673": {
      "op": "JUMPDEST"
    },
    "3674": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3676": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3678": {
      "op": "DUP3"
    },
    "3679": {
      "op": "DUP5"
    },
    "3680": {
      "op": "SUB"
    },
    "3681": {
      "op": "SLT"
    },
    "3682": {
      "op": "ISZERO"
    },
    "3683": {
      "op": "PUSH2",
      "value": "0xE6B"
    },
    "3686": {
      "op": "JUMPI"
    },
    "3687": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3689": {
      "op": "DUP1"
    },
    "3690": {
      "op": "REVERT"
    },
    "3691": {
      "op": "JUMPDEST"
    },
    "3692": {
      "op": "DUP2"
    },
    "3693": {
      "op": "MLOAD"
    },
    "3694": {
      "op": "DUP1"
    },
    "3695": {
      "op": "ISZERO"
    },
    "3696": {
      "op": "ISZERO"
    },
    "3697": {
      "op": "DUP2"
    },
    "3698": {
      "op": "EQ"
    },
    "3699": {
      "op": "PUSH2",
      "value": "0xE7B"
    },
    "3702": {
      "op": "JUMPI"
    },
    "3703": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3705": {
      "op": "DUP1"
    },
    "3706": {
      "op": "REVERT"
    },
    "3707": {
      "op": "JUMPDEST"
    },
    "3708": {
      "op": "SWAP4"
    },
    "3709": {
      "op": "SWAP3"
    },
    "3710": {
      "op": "POP"
    },
    "3711": {
      "op": "POP"
    },
    "3712": {
      "op": "POP"
    },
    "3713": {
      "jump": "o",
      "op": "JUMP"
    },
    "3714": {
      "op": "JUMPDEST"
    },
    "3715": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3717": {
      "op": "DUP3"
    },
    "3718": {
      "op": "PUSH2",
      "value": "0xE9F"
    },
    "3721": {
      "op": "JUMPI"
    },
    "3722": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3727": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3729": {
      "op": "SHL"
    },
    "3730": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3732": {
      "op": "MSTORE"
    },
    "3733": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "3735": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3737": {
      "op": "MSTORE"
    },
    "3738": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3740": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3742": {
      "op": "REVERT"
    },
    "3743": {
      "op": "JUMPDEST"
    },
    "3744": {
      "op": "POP"
    },
    "3745": {
      "op": "DIV"
    },
    "3746": {
      "op": "SWAP1"
    },
    "3747": {
      "jump": "o",
      "op": "JUMP"
    },
    "3748": {
      "op": "JUMPDEST"
    },
    "3749": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3751": {
      "op": "DUP3"
    },
    "3752": {
      "op": "NOT"
    },
    "3753": {
      "op": "DUP3"
    },
    "3754": {
      "op": "GT"
    },
    "3755": {
      "op": "ISZERO"
    },
    "3756": {
      "op": "PUSH2",
      "value": "0xEB7"
    },
    "3759": {
      "op": "JUMPI"
    },
    "3760": {
      "op": "PUSH2",
      "value": "0xEB7"
    },
    "3763": {
      "op": "PUSH2",
      "value": "0xDF4"
    },
    "3766": {
      "jump": "i",
      "op": "JUMP"
    },
    "3767": {
      "op": "JUMPDEST"
    },
    "3768": {
      "op": "POP"
    },
    "3769": {
      "op": "ADD"
    },
    "3770": {
      "op": "SWAP1"
    },
    "3771": {
      "jump": "o",
      "op": "JUMP"
    },
    "3772": {
      "op": "JUMPDEST"
    },
    "3773": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3775": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3777": {
      "op": "DUP3"
    },
    "3778": {
      "op": "ADD"
    },
    "3779": {
      "op": "DUP6"
    },
    "3780": {
      "op": "DUP4"
    },
    "3781": {
      "op": "MSTORE"
    },
    "3782": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3784": {
      "op": "DUP6"
    },
    "3785": {
      "op": "DUP2"
    },
    "3786": {
      "op": "DUP6"
    },
    "3787": {
      "op": "ADD"
    },
    "3788": {
      "op": "MSTORE"
    },
    "3789": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3791": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3793": {
      "op": "DUP6"
    },
    "3794": {
      "op": "ADD"
    },
    "3795": {
      "op": "MSTORE"
    },
    "3796": {
      "op": "DUP2"
    },
    "3797": {
      "op": "DUP6"
    },
    "3798": {
      "op": "MLOAD"
    },
    "3799": {
      "op": "DUP1"
    },
    "3800": {
      "op": "DUP5"
    },
    "3801": {
      "op": "MSTORE"
    },
    "3802": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3804": {
      "op": "DUP7"
    },
    "3805": {
      "op": "ADD"
    },
    "3806": {
      "op": "SWAP2"
    },
    "3807": {
      "op": "POP"
    },
    "3808": {
      "op": "DUP3"
    },
    "3809": {
      "op": "DUP8"
    },
    "3810": {
      "op": "ADD"
    },
    "3811": {
      "op": "SWAP4"
    },
    "3812": {
      "op": "POP"
    },
    "3813": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3815": {
      "op": "JUMPDEST"
    },
    "3816": {
      "op": "DUP2"
    },
    "3817": {
      "op": "DUP2"
    },
    "3818": {
      "op": "LT"
    },
    "3819": {
      "op": "ISZERO"
    },
    "3820": {
      "op": "PUSH2",
      "value": "0xF03"
    },
    "3823": {
      "op": "JUMPI"
    },
    "3824": {
      "op": "DUP5"
    },
    "3825": {
      "op": "MLOAD"
    },
    "3826": {
      "op": "DUP4"
    },
    "3827": {
      "op": "MSTORE"
    },
    "3828": {
      "op": "SWAP4"
    },
    "3829": {
      "op": "DUP4"
    },
    "3830": {
      "op": "ADD"
    },
    "3831": {
      "op": "SWAP4"
    },
    "3832": {
      "op": "SWAP2"
    },
    "3833": {
      "op": "DUP4"
    },
    "3834": {
      "op": "ADD"
    },
    "3835": {
      "op": "SWAP2"
    },
    "3836": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3838": {
      "op": "ADD"
    },
    "3839": {
      "op": "PUSH2",
      "value": "0xEE7"
    },
    "3842": {
      "op": "JUMP"
    },
    "3843": {
      "op": "JUMPDEST"
    },
    "3844": {
      "op": "POP"
    },
    "3845": {
      "op": "SWAP1"
    },
    "3846": {
      "op": "SWAP9"
    },
    "3847": {
      "op": "SWAP8"
    },
    "3848": {
      "op": "POP"
    },
    "3849": {
      "op": "POP"
    },
    "3850": {
      "op": "POP"
    },
    "3851": {
      "op": "POP"
    },
    "3852": {
      "op": "POP"
    },
    "3853": {
      "op": "POP"
    },
    "3854": {
      "op": "POP"
    },
    "3855": {
      "op": "POP"
    },
    "3856": {
      "jump": "o",
      "op": "JUMP"
    },
    "3857": {
      "op": "JUMPDEST"
    },
    "3858": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3860": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3862": {
      "op": "NOT"
    },
    "3863": {
      "op": "DUP3"
    },
    "3864": {
      "op": "EQ"
    },
    "3865": {
      "op": "ISZERO"
    },
    "3866": {
      "op": "PUSH2",
      "value": "0xF25"
    },
    "3869": {
      "op": "JUMPI"
    },
    "3870": {
      "op": "PUSH2",
      "value": "0xF25"
    },
    "3873": {
      "op": "PUSH2",
      "value": "0xDF4"
    },
    "3876": {
      "jump": "i",
      "op": "JUMP"
    },
    "3877": {
      "op": "JUMPDEST"
    },
    "3878": {
      "op": "POP"
    },
    "3879": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3881": {
      "op": "ADD"
    },
    "3882": {
      "op": "SWAP1"
    },
    "3883": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "05eefea05d5731d34c950d825e41e2ecb00342d8",
  "source": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.12;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./MerkleLib.sol\";\n\n/// @title A factory pattern for user-chosen vesting-schedules, that is, a time release schedule for tokens, using merkle proofs to scale\n/// @author metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki\n/// @notice This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.\n/// @dev The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof.\n/// @dev User chosen vesting schedules means the contract has parameters that define a line segment that\n/// @dev describes a range of vesting-schedule parameters within which the user can negotiate tradeoffs\n/// @dev More tokens => longer vesting time && slower drip, when used correctly, but the contract does not enforce\n/// @dev coherence of vesting schedules, so someone could make a range of vesting schedules in which\n/// @dev more tokens => longer vesting time && faster drip, but this is a user error, also we wouldn't catch it until\n/// @dev after the tree has been initialized and funded, so we just let them do it.\n/// @dev The choice of which parameters to initialize at tree-creation-time versus at schedule-initialization-time is\n/// @dev somewhat arbitrary, but we choose to have min/max end times at tree scope and min/max total payments at first-withdrawal-time\ncontract MerkleResistor {\n    using MerkleLib for bytes32;\n\n    // tree (vesting schedule) counter\n    uint public numTrees;\n\n    // this represents a user chosen vesting schedule, post initiation\n    struct Tranche {\n        address recipient;\n        uint totalCoins; // total coins released after vesting complete\n        uint currentCoins; // unclaimed coins remaining in the contract, waiting to be vested\n        uint startTime; // start time of the vesting schedule\n        uint endTime;   // end time of the vesting schedule\n        uint coinsPerSecond;  // how many coins are emitted per second, this value is cached to avoid recomputing it\n        uint lastWithdrawalTime; // keep track of last time user claimed coins to compute coins owed for this withdrawal\n    }\n\n    // this represents an arbitrarily large set of token recipients with partially-initialized vesting schedules\n    struct MerkleTree {\n        bytes32 merkleRoot; // merkle root of tree whose leaves are ranges of vesting schedules for each recipient\n        bytes32 ipfsHash; // ipfs hash of the entire data set represented by the merkle root, in case our servers go down\n        uint minEndTime; // minimum length (offset, not absolute) of vesting schedule in seconds\n        uint maxEndTime; // maximum length (offset, not absolute) of vesting schedule in seconds\n        uint pctUpFront; // percent of vested coins that will be available and withdrawn upon initialization\n        address tokenAddress; // address of token to be distributed\n        uint tokenBalance; // amount of tokens allocated to this tree (this prevents trees from sharing tokens)\n        uint numTranchesInitialized;\n        mapping (uint => Tranche) tranches;\n        mapping (bytes32 => bool) initialized;\n    }\n\n    // basically an array of vesting schedules, but without annoying solidity array syntax\n    mapping (uint => MerkleTree) public merkleTrees;\n\n    // precision factory used to handle floating point arithmetic\n    uint constant public PRECISION = 1000000;\n\n    // every time a withdrawal occurs\n    event WithdrawalOccurred(uint indexed treeIndex, address indexed destination, uint numTokens, uint tokensLeft);\n\n    // every time a tree is added\n    event MerkleTreeAdded(uint indexed treeIndex, address indexed tokenAddress, bytes32 newRoot, bytes32 ipfsHash);\n\n    // every time a tree is topped up\n    event TokensDeposited(uint indexed treeIndex, address indexed tokenAddress, uint amount);\n    event TrancheInitialized(uint indexed treeIndex, uint indexed trancheIndex, address indexed recipient);\n\n    error InvalidPct(uint pct);\n    error IncoherentTimes(uint min, uint max);\n    error AlreadyInitialized(uint treeIndex, bytes32 leaf);\n    error BadProof(uint treeIndex, bytes32 leaf, bytes32[] proof);\n    error BadVestingSchedule(uint treeIndex, uint vestingTime, uint minTotalPayments, uint maxTotalPayments);\n    error UninitializedAccount(uint treeIndex, uint trancheIndex);\n    error AccountEmpty(uint treeIndex, uint trancheIndex);\n\n    /// @notice Add a new merkle tree to the contract, creating a new merkle-vesting-schedule-range\n    /// @dev Anyone may call this function, therefore we must make sure trees cannot affect each other\n    /// @dev Root hash should be built from (destination, minTotalPayments, maxTotalPayments)\n    /// @param newRoot root hash of merkle tree representing vesting schedule ranges\n    /// @param ipfsHash the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable\n    /// @param minEndTime a continuous range of possible end times are specified, this is the minimum\n    /// @param maxEndTime a continuous range of possible end times are specified, this is the maximum\n    /// @param pctUpFront the percent of tokens user will get at initialization time (note this implies no lock time)\n    /// @param tokenAddress the address of the token contract that is being distributed\n    /// @param tokenBalance the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded\n    function addMerkleTree(bytes32 newRoot, bytes32 ipfsHash, uint minEndTime, uint maxEndTime, uint pctUpFront, address tokenAddress, uint tokenBalance) public {\n        // check basic coherence of request\n        if (pctUpFront >= 100) {\n            revert InvalidPct(pctUpFront);\n        }\n\n        if (minEndTime >= maxEndTime) {\n            revert IncoherentTimes(minEndTime, maxEndTime);\n        }\n\n        MerkleTree storage tree = merkleTrees[++numTrees];\n        tree.merkleRoot = newRoot;\n        tree.ipfsHash = ipfsHash;\n        tree.minEndTime = minEndTime;\n        tree.maxEndTime = maxEndTime;\n        tree.pctUpFront = pctUpFront;\n        tree.tokenAddress = tokenAddress;\n\n        // pull tokens from user to fund the tree\n        // if tree is insufficiently funded, then some users may not be able to be paid out, this is the responsibility\n        // of the tree creator, if trees are not funded, then the UI will not display the tree\n        depositTokens(numTrees, tokenBalance);\n        emit MerkleTreeAdded(numTrees, tokenAddress, newRoot, ipfsHash);\n    }\n\n    /// @notice Add funds to an existing merkle-tree\n    /// @dev Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious\n    /// @param treeIndex index into array-like map of merkleTrees\n    /// @param value the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded\n    function depositTokens(uint treeIndex, uint value) public {\n        // storage because we edit\n        MerkleTree storage merkleTree = merkleTrees[treeIndex];\n\n        IERC20 token = IERC20(merkleTree.tokenAddress);\n        uint balanceBefore = token.balanceOf(address(this));\n\n        // do the transfer from the caller\n        // NOTE: it is possible for user to overfund the tree and there is no mechanism to reclaim excess tokens\n        // this is because there is no way for the contract to know when a tree has had all leaves claimed.\n        // There is also no way for the contract to know the minimum or maximum liabilities represented by the leaves\n        // in short, there is no on-chain inspection of any of the leaf data except at initialization time\n        // NOTE: a malicious token contract could cause merkleTree.tokenBalance to be out of sync with the token contract\n        // this is an unavoidable possibility, and it could render the tree unusable, while leaving other trees unharmed\n        token.transferFrom(msg.sender, address(this), value);\n\n        uint balanceAfter = token.balanceOf(address(this));\n        // diff may be different from value here, it may even be zero if the transfer failed silently\n        uint diff = balanceAfter - balanceBefore;\n\n        // bookkeeping to make sure trees do not share tokens\n        merkleTree.tokenBalance += diff;\n        emit TokensDeposited(treeIndex, merkleTree.tokenAddress, diff);\n    }\n\n    /// @notice Called once per recipient of a vesting schedule to initialize the vesting schedule and fix the parameters\n    /// @dev Only the recipient can initialize their own schedule here, because a meaningful choice is made\n    /// @dev If the tree is over-funded, excess funds are lost. No clear way to get around this without zk-proofs of global tree stats\n    /// @param treeIndex index into array-like map of merkleTrees\n    /// @param vestingTime the actual length of the vesting schedule, chosen by the user\n    /// @param minTotalPayments the minimum amount of tokens they will receive, if they choose minEndTime as vestingTime\n    /// @param maxTotalPayments the maximum amount of tokens they will receive, if they choose maxEndTime as vestingTime\n    /// @param proof array of hashes linking leaf hash of (destination, minTotalPayments, maxTotalPayments) to root\n    function initialize(\n        uint treeIndex,\n        uint vestingTime,\n        uint minTotalPayments,\n        uint maxTotalPayments,\n        bytes32[] memory proof) external returns (uint) {\n        MerkleTree storage tree = merkleTrees[treeIndex];\n        // compute merkle leaf, this is first element of proof\n        bytes32 leaf = keccak256(abi.encode(msg.sender, minTotalPayments, maxTotalPayments));\n\n        if (tree.initialized[leaf]) {\n            revert AlreadyInitialized(treeIndex, leaf);\n        }\n\n        if (tree.merkleRoot.verifyProof(leaf, proof) == false) {\n            revert BadProof(treeIndex, leaf, proof);\n        }\n\n        (bool valid, uint totalCoins, uint coinsPerSecond, uint startTime) = verifyVestingSchedule(treeIndex, vestingTime, minTotalPayments, maxTotalPayments);\n\n        if (valid == false) {\n            revert BadVestingSchedule(treeIndex, vestingTime, minTotalPayments, maxTotalPayments);\n        }\n\n        // mark tree as initialized, preventing re-entrance or multiple initializations\n        tree.initialized[leaf] = true;\n\n\n        // fill out the struct for the address' vesting schedule\n        // don't have to mark as storage here, it's implied (why isn't it always implied when written to? solc-devs?)\n        tree.tranches[++tree.numTranchesInitialized] = Tranche(\n            msg.sender,\n            totalCoins,    // this is just a cached number for UI, not used\n            totalCoins,    // starts out full\n            startTime,     // start time will usually be in the past, if pctUpFront > 0\n            block.timestamp + vestingTime,  // vesting starts from initialization time\n            coinsPerSecond,  // cached value to avoid recomputation\n            startTime      // this is lastWithdrawalTime, set to startTime to indicate no withdrawals have occurred yet\n        );\n\n        emit TrancheInitialized(treeIndex, tree.numTranchesInitialized, msg.sender);\n\n        withdraw(treeIndex, tree.numTranchesInitialized);\n\n        return tree.numTranchesInitialized;\n    }\n\n    /// @notice Move unlocked funds to the destination\n    /// @dev Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of\n    /// @dev who provides the proof and pays the gas, msg.sender is not used in this function\n    /// @param treeIndex index into array-like map of merkleTrees, which tree should we apply the proof to?\n    /// @param trancheIndex index into tranche map\n    function withdraw(uint treeIndex, uint trancheIndex) public {\n        MerkleTree storage tree = merkleTrees[treeIndex];\n        Tranche storage tranche = tree.tranches[trancheIndex];\n\n        // checking this way so we don't have to recompute leaf hash\n        if (tranche.totalCoins == 0) {\n            revert UninitializedAccount(treeIndex, trancheIndex);\n        }\n\n        // revert if there's nothing left\n        if (tranche.currentCoins == 0) {\n            revert AccountEmpty(treeIndex, trancheIndex);\n        }\n\n        uint currentWithdrawal;\n\n        // if after vesting period ends, give them the remaining coins, also avoids dust from rounding errors\n        if (block.timestamp >= tranche.endTime) {\n            currentWithdrawal = tranche.currentCoins;\n        } else {\n            // compute allowed withdrawal\n            // secondsElapsedSinceLastWithdrawal * coinsPerSecond == coinsAccumulatedSinceLastWithdrawal\n            currentWithdrawal = (block.timestamp - tranche.lastWithdrawalTime) * tranche.coinsPerSecond;\n        }\n\n        // move the time counter up so users can't double-withdraw allocated coins\n        // this also works as a re-entrance gate, so currentWithdrawal would be 0 upon re-entrance\n        tranche.lastWithdrawalTime = block.timestamp;\n\n        IERC20 token = IERC20(tree.tokenAddress);\n        uint balanceBefore = token.balanceOf(address(this));\n\n        // transfer the tokens, brah\n        // NOTE: if this is a malicious token, what could happen?\n        // 1/ token doesn't transfer given amount to recipient, this is bad for user, but does not effect other trees\n        // 2/ token fails for some reason, again bad for user, but this does not effect other trees\n        // 3/ token re-enters this function (or other, but this is the only one that transfers tokens out)\n        // in which case, lastWithdrawalTime == block.timestamp, so currentWithdrawal == 0\n        // Also this could be a misconfigured ERC20 and not return true even if successful, so diff should catch that\n        token.transfer(tranche.recipient, currentWithdrawal);\n\n        // compute the diff in case there is a fee-on-transfer or transfer failed silently\n        uint balanceAfter = token.balanceOf(address(this));\n        uint diff = balanceBefore - balanceAfter;\n\n        // update struct, modern solidity will catch underflow and prevent currentWithdrawal from exceeding currentCoins\n        // but it's computed internally anyway, not user generated\n        tranche.currentCoins -= diff;\n        // handle the bookkeeping so trees don't share tokens, do it before transferring to create one more re-entrance gate\n        tree.tokenBalance -= diff;\n\n        emit WithdrawalOccurred(treeIndex, tranche.recipient, diff, tranche.currentCoins);\n    }\n\n    /// @notice Determine if the proposed vesting schedule is legit\n    /// @dev Anyone may call this to check, but it also returns values used in the initialization of vesting schedules\n    /// @param treeIndex index into array-like map of merkleTrees, which tree are we talking about?\n    /// @param vestingTime user chosen length of vesting schedule\n    /// @param minTotalPayments pre-committed (in the root hash) minimum of possible totalCoins\n    /// @param maxTotalPayments pre-committed (in the root hash) maximum of possible totalCoins\n    /// @return valid is the proposed vesting-schedule valid\n    /// @return totalCoins amount of coins allocated in the vesting schedule\n    /// @return coinsPerSecond amount of coins released every second, in the proposed vesting schedule\n    /// @return startTime start time of vesting schedule implied by supplied parameters, will always be <= block.timestamp\n    function verifyVestingSchedule(uint treeIndex, uint vestingTime, uint minTotalPayments, uint maxTotalPayments) public view returns (bool, uint, uint, uint) {\n        // vesting schedules for non-existing trees are invalid, I don't care how much you like uninitialized structs\n        if (treeIndex > numTrees) {\n            return (false, 0, 0, 0);\n        }\n\n        // memory not storage, since we do not edit the tree, and it's a view function anyways\n        MerkleTree storage tree = merkleTrees[treeIndex];\n\n        // vesting time must sit within the closed interval of [minEndTime, maxEndTime]\n        if (vestingTime > tree.maxEndTime || vestingTime < tree.minEndTime) {\n            return (false, 0, 0, 0);\n        }\n\n        uint totalCoins;\n        if (vestingTime == tree.maxEndTime) {\n            // this is to prevent dust accumulation from rounding errors\n            // maxEndTime results in max payments, no further computation necessary\n            totalCoins = maxTotalPayments;\n        } else {\n            // remember grade school algebra? slope = \u0394y / \u0394x\n            // this is the slope of eligible vesting schedules. In general, 0 < m < 1,\n            // (longer vesting schedules should result in less coins per second, hence \"resistor\")\n            // so we multiply by a precision factor to reduce rounding errors\n            // y axis = total coins released after vesting completed\n            // x axis = length of vesting schedule\n            // this is the line of valid end-points for the chosen vesting schedule line, see below\n            // NOTE: this reverts if minTotalPayments > maxTotalPayments, which is a good thing\n            uint paymentSlope = (maxTotalPayments - minTotalPayments) * PRECISION / (tree.maxEndTime - tree.minEndTime);\n\n            // y = mx + b = paymentSlope * (x - x0) + y0\n            // divide by precision factor here since we have completed the rounding error sensitive operations\n            totalCoins = (paymentSlope * (vestingTime - tree.minEndTime) / PRECISION) + minTotalPayments;\n        }\n\n        // this is a different slope, the slope of their chosen vesting schedule\n        // y axis = cumulative coins emitted\n        // x axis = time elapsed\n        // NOTE: vestingTime starts from block.timestamp, so doesn't include coins already available from pctUpFront\n        // totalCoins / vestingTime is wrong, we have to multiple by the proportion of the coins that are indexed\n        // by vestingTime, which is (100 - pctUpFront) / 100\n        uint coinsPerSecond = (totalCoins * (uint(100) - tree.pctUpFront)) / (vestingTime * 100);\n\n        // vestingTime is relative to initialization point\n        // endTime = block.timestamp + vestingTime\n        // vestingLength = totalCoins / coinsPerSecond\n        uint startTime = block.timestamp + vestingTime - (totalCoins / coinsPerSecond);\n\n        return (true, totalCoins, coinsPerSecond, startTime);\n    }\n\n    function getTranche(uint treeIndex, uint trancheIndex) view external returns (address, uint, uint, uint, uint, uint, uint) {\n        Tranche storage tranche = merkleTrees[treeIndex].tranches[trancheIndex];\n        return (tranche.recipient, tranche.totalCoins, tranche.currentCoins, tranche.startTime, tranche.endTime, tranche.coinsPerSecond, tranche.lastWithdrawalTime);\n    }\n\n}\n",
  "sourceMap": "1454:17369:2:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/MerkleResistor.sol",
  "type": "contract"
}