{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mgmt",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldManagement",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newManagement",
          "type": "address"
        }
      ],
      "name": "ManagementUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        }
      ],
      "name": "MerkleTreeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensLeft",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "merkleIndex",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalOccurred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERROR_TOLERANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pctUpFront",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "depositToken",
          "type": "address"
        }
      ],
      "name": "addMerkleTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "merkleIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "management",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleTrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pctUpFront",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTrees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMgmt",
          "type": "address"
        }
      ],
      "name": "setManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tranches",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coinsPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastWithdrawalTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "merkleIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalPayments",
          "type": "uint256"
        }
      ],
      "name": "verifyVestingSchedule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "merkleIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "contracts/MerkleLib.sol",
    "2": "contracts/MerkleResistor.sol",
    "4": "interfaces/IERC20.sol"
  },
  "ast": {
    "absolutePath": "contracts/MerkleResistor.sol",
    "exportedSymbols": {
      "IERC20": [
        1204
      ],
      "MerkleLib": [
        312
      ],
      "MerkleResistor": [
        850
      ]
    },
    "id": 851,
    "license": "GPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 314,
        "literals": [
          "solidity",
          "0.8",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "42:22:2"
      },
      {
        "absolutePath": "interfaces/IERC20.sol",
        "file": "../interfaces/IERC20.sol",
        "id": 315,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 851,
        "sourceUnit": 1205,
        "src": "66:34:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/MerkleLib.sol",
        "file": "./MerkleLib.sol",
        "id": 316,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 851,
        "sourceUnit": 313,
        "src": "101:25:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "MerkleResistor",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 850,
        "linearizedBaseContracts": [
          850
        ],
        "name": "MerkleResistor",
        "nameLocation": "137:14:2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 319,
            "libraryName": {
              "id": 317,
              "name": "MerkleLib",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 312,
              "src": "164:9:2"
            },
            "nodeType": "UsingForDirective",
            "src": "158:28:2",
            "typeName": {
              "id": 318,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "178:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "390b7c66",
            "id": 322,
            "mutability": "mutable",
            "name": "numTrees",
            "nameLocation": "204:8:2",
            "nodeType": "VariableDeclaration",
            "scope": 850,
            "src": "192:24:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 320,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "192:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 321,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "215:1:2",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "18369a2a",
            "id": 324,
            "mutability": "mutable",
            "name": "initialBalance",
            "nameLocation": "235:14:2",
            "nodeType": "VariableDeclaration",
            "scope": 850,
            "src": "223:26:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 323,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "223:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "88a8d602",
            "id": 326,
            "mutability": "mutable",
            "name": "management",
            "nameLocation": "270:10:2",
            "nodeType": "VariableDeclaration",
            "scope": 850,
            "src": "255:25:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 325,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "255:7:2",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "canonicalName": "MerkleResistor.Tranche",
            "id": 339,
            "members": [
              {
                "constant": false,
                "id": 328,
                "mutability": "mutable",
                "name": "totalCoins",
                "nameLocation": "317:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 339,
                "src": "312:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 327,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "312:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 330,
                "mutability": "mutable",
                "name": "currentCoins",
                "nameLocation": "342:12:2",
                "nodeType": "VariableDeclaration",
                "scope": 339,
                "src": "337:17:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 329,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "337:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 332,
                "mutability": "mutable",
                "name": "startTime",
                "nameLocation": "369:9:2",
                "nodeType": "VariableDeclaration",
                "scope": 339,
                "src": "364:14:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 331,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "364:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 334,
                "mutability": "mutable",
                "name": "endTime",
                "nameLocation": "393:7:2",
                "nodeType": "VariableDeclaration",
                "scope": 339,
                "src": "388:12:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 333,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "388:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 336,
                "mutability": "mutable",
                "name": "coinsPerSecond",
                "nameLocation": "415:14:2",
                "nodeType": "VariableDeclaration",
                "scope": 339,
                "src": "410:19:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 335,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "410:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 338,
                "mutability": "mutable",
                "name": "lastWithdrawalTime",
                "nameLocation": "444:18:2",
                "nodeType": "VariableDeclaration",
                "scope": 339,
                "src": "439:23:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 337,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "439:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Tranche",
            "nameLocation": "294:7:2",
            "nodeType": "StructDefinition",
            "scope": 850,
            "src": "287:182:2",
            "visibility": "public"
          },
          {
            "canonicalName": "MerkleResistor.MerkleTree",
            "id": 352,
            "members": [
              {
                "constant": false,
                "id": 341,
                "mutability": "mutable",
                "name": "merkleRoot",
                "nameLocation": "511:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 352,
                "src": "503:18:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 340,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "503:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 343,
                "mutability": "mutable",
                "name": "ipfsHash",
                "nameLocation": "539:8:2",
                "nodeType": "VariableDeclaration",
                "scope": 352,
                "src": "531:16:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 342,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "531:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 345,
                "mutability": "mutable",
                "name": "minEndTime",
                "nameLocation": "562:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 352,
                "src": "557:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 344,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "557:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 347,
                "mutability": "mutable",
                "name": "maxEndTime",
                "nameLocation": "598:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 352,
                "src": "593:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 346,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "593:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 349,
                "mutability": "mutable",
                "name": "pctUpFront",
                "nameLocation": "634:10:2",
                "nodeType": "VariableDeclaration",
                "scope": 352,
                "src": "629:15:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 348,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "629:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 351,
                "mutability": "mutable",
                "name": "tokenAddress",
                "nameLocation": "662:12:2",
                "nodeType": "VariableDeclaration",
                "scope": 352,
                "src": "654:20:2",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 350,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "654:7:2",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "MerkleTree",
            "nameLocation": "482:10:2",
            "nodeType": "StructDefinition",
            "scope": 850,
            "src": "475:206:2",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "86bb8249",
            "id": 358,
            "mutability": "mutable",
            "name": "initialized",
            "nameLocation": "738:11:2",
            "nodeType": "VariableDeclaration",
            "scope": 850,
            "src": "687:62:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
              "typeString": "mapping(address => mapping(uint256 => bool))"
            },
            "typeName": {
              "id": 357,
              "keyType": {
                "id": 353,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "696:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "687:43:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                "typeString": "mapping(address => mapping(uint256 => bool))"
              },
              "valueType": {
                "id": 356,
                "keyType": {
                  "id": 354,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "716:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "707:22:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                  "typeString": "mapping(uint256 => bool)"
                },
                "valueType": {
                  "id": 355,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "724:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "85d88cb1",
            "id": 363,
            "mutability": "mutable",
            "name": "merkleTrees",
            "nameLocation": "791:11:2",
            "nodeType": "VariableDeclaration",
            "scope": 850,
            "src": "755:47:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$352_storage_$",
              "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree)"
            },
            "typeName": {
              "id": 362,
              "keyType": {
                "id": 359,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "764:4:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "755:28:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$352_storage_$",
                "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree)"
              },
              "valueType": {
                "id": 361,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 360,
                  "name": "MerkleTree",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 352,
                  "src": "772:10:2"
                },
                "referencedDeclaration": 352,
                "src": "772:10:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_MerkleTree_$352_storage_ptr",
                  "typeString": "struct MerkleResistor.MerkleTree"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "c26cb54f",
            "id": 370,
            "mutability": "mutable",
            "name": "tranches",
            "nameLocation": "862:8:2",
            "nodeType": "VariableDeclaration",
            "scope": 850,
            "src": "808:62:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$339_storage_$_$",
              "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche))"
            },
            "typeName": {
              "id": 369,
              "keyType": {
                "id": 364,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "817:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "808:46:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$339_storage_$_$",
                "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche))"
              },
              "valueType": {
                "id": 368,
                "keyType": {
                  "id": 365,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "837:4:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "828:25:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$339_storage_$",
                  "typeString": "mapping(uint256 => struct MerkleResistor.Tranche)"
                },
                "valueType": {
                  "id": 367,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 366,
                    "name": "Tranche",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 339,
                    "src": "845:7:2"
                  },
                  "referencedDeclaration": 339,
                  "src": "845:7:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Tranche_$339_storage_ptr",
                    "typeString": "struct MerkleResistor.Tranche"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "aaf5eb68",
            "id": 373,
            "mutability": "constant",
            "name": "PRECISION",
            "nameLocation": "898:9:2",
            "nodeType": "VariableDeclaration",
            "scope": 850,
            "src": "877:40:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 371,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "877:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31303030303030",
              "id": 372,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "910:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              },
              "value": "1000000"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "2811e253",
            "id": 376,
            "mutability": "constant",
            "name": "ERROR_TOLERANCE",
            "nameLocation": "944:15:2",
            "nodeType": "VariableDeclaration",
            "scope": 850,
            "src": "923:40:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 374,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "923:4:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31",
              "id": 375,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "962:1:2",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 386,
            "name": "WithdrawalOccurred",
            "nameLocation": "976:18:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 385,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 378,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "1011:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 386,
                  "src": "995:27:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 377,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "995:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 380,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "numTokens",
                  "nameLocation": "1029:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 386,
                  "src": "1024:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 379,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1024:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 382,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokensLeft",
                  "nameLocation": "1045:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 386,
                  "src": "1040:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 381,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1040:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 384,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "merkleIndex",
                  "nameLocation": "1070:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 386,
                  "src": "1057:24:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 383,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1057:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "994:88:2"
            },
            "src": "970:113:2"
          },
          {
            "anonymous": false,
            "id": 396,
            "name": "MerkleTreeAdded",
            "nameLocation": "1094:15:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 395,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 388,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "index",
                  "nameLocation": "1123:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 396,
                  "src": "1110:18:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 387,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1110:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 390,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "1146:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 396,
                  "src": "1130:28:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 389,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1130:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 392,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "1168:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 396,
                  "src": "1160:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 391,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1160:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 394,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "1185:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 396,
                  "src": "1177:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 393,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1177:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1109:85:2"
            },
            "src": "1088:107:2"
          },
          {
            "anonymous": false,
            "id": 402,
            "name": "ManagementUpdated",
            "nameLocation": "1206:17:2",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 401,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 398,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "oldManagement",
                  "nameLocation": "1232:13:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 402,
                  "src": "1224:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 397,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1224:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 400,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newManagement",
                  "nameLocation": "1255:13:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 402,
                  "src": "1247:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 399,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1247:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1223:46:2"
            },
            "src": "1200:70:2"
          },
          {
            "body": {
              "id": 413,
              "nodeType": "Block",
              "src": "1302:95:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 408,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 405,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1321:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 406,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1321:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 407,
                          "name": "management",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 326,
                          "src": "1335:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1321:24:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c79206d616e6167656d656e74206d61792063616c6c2074686973",
                        "id": 409,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1347:31:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_35a38d01aa0af81363c3b4ec0f4e8b2e38d53d5c2a82958ac1e1c62723c14586",
                          "typeString": "literal_string \"Only management may call this\""
                        },
                        "value": "Only management may call this"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_35a38d01aa0af81363c3b4ec0f4e8b2e38d53d5c2a82958ac1e1c62723c14586",
                          "typeString": "literal_string \"Only management may call this\""
                        }
                      ],
                      "id": 404,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1312:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 410,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1312:67:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 411,
                  "nodeType": "ExpressionStatement",
                  "src": "1312:67:2"
                },
                {
                  "id": 412,
                  "nodeType": "PlaceholderStatement",
                  "src": "1389:1:2"
                }
              ]
            },
            "id": 414,
            "name": "managementOnly",
            "nameLocation": "1285:14:2",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 403,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1299:2:2"
            },
            "src": "1276:121:2",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 423,
              "nodeType": "Block",
              "src": "1429:34:2",
              "statements": [
                {
                  "expression": {
                    "id": 421,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 419,
                      "name": "management",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 326,
                      "src": "1439:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 420,
                      "name": "mgmt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 416,
                      "src": "1452:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1439:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 422,
                  "nodeType": "ExpressionStatement",
                  "src": "1439:17:2"
                }
              ]
            },
            "id": 424,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 417,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 416,
                  "mutability": "mutable",
                  "name": "mgmt",
                  "nameLocation": "1423:4:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 424,
                  "src": "1415:12:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 415,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1415:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1414:14:2"
            },
            "returnParameters": {
              "id": 418,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1429:0:2"
            },
            "scope": 850,
            "src": "1403:60:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 444,
              "nodeType": "Block",
              "src": "1564:125:2",
              "statements": [
                {
                  "assignments": [
                    432
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 432,
                      "mutability": "mutable",
                      "name": "oldMgmt",
                      "nameLocation": "1582:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 444,
                      "src": "1574:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 431,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1574:7:2",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 434,
                  "initialValue": {
                    "id": 433,
                    "name": "management",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 326,
                    "src": "1592:10:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1574:28:2"
                },
                {
                  "expression": {
                    "id": 437,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 435,
                      "name": "management",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 326,
                      "src": "1612:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 436,
                      "name": "newMgmt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 426,
                      "src": "1625:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1612:20:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 438,
                  "nodeType": "ExpressionStatement",
                  "src": "1612:20:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 440,
                        "name": "oldMgmt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 432,
                        "src": "1665:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 441,
                        "name": "newMgmt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 426,
                        "src": "1674:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 439,
                      "name": "ManagementUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 402,
                      "src": "1647:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (address,address)"
                      }
                    },
                    "id": 442,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1647:35:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 443,
                  "nodeType": "EmitStatement",
                  "src": "1642:40:2"
                }
              ]
            },
            "functionSelector": "d4a22bde",
            "id": 445,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 429,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 428,
                  "name": "managementOnly",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 414,
                  "src": "1549:14:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "1549:14:2"
              }
            ],
            "name": "setManagement",
            "nameLocation": "1511:13:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 427,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 426,
                  "mutability": "mutable",
                  "name": "newMgmt",
                  "nameLocation": "1533:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 445,
                  "src": "1525:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 425,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1525:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1524:17:2"
            },
            "returnParameters": {
              "id": 430,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1564:0:2"
            },
            "scope": 850,
            "src": "1502:187:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 497,
              "nodeType": "Block",
              "src": "1848:418:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 465,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 463,
                          "name": "pctUpFront",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 455,
                          "src": "1866:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "hexValue": "313030",
                          "id": 464,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1879:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_100_by_1",
                            "typeString": "int_const 100"
                          },
                          "value": "100"
                        },
                        "src": "1866:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "706374557046726f6e74203e3d20313030",
                        "id": 466,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1884:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5d62361d64e7f8cf4fff457bf47173a531e51b64da30badb8e72846a2642165f",
                          "typeString": "literal_string \"pctUpFront >= 100\""
                        },
                        "value": "pctUpFront >= 100"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5d62361d64e7f8cf4fff457bf47173a531e51b64da30badb8e72846a2642165f",
                          "typeString": "literal_string \"pctUpFront >= 100\""
                        }
                      ],
                      "id": 462,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1858:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 467,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1858:46:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 468,
                  "nodeType": "ExpressionStatement",
                  "src": "1858:46:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 472,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 470,
                          "name": "minEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 451,
                          "src": "1922:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "id": 471,
                          "name": "maxEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 453,
                          "src": "1935:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1922:23:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6d696e456e6454696d65206d757374206265206c657373207468616e206d6178456e6454696d65",
                        "id": 473,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1947:41:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b9f494a656d13b13a08d4cf899120fa0e5253d75c531a056af397669b40d9b3e",
                          "typeString": "literal_string \"minEndTime must be less than maxEndTime\""
                        },
                        "value": "minEndTime must be less than maxEndTime"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b9f494a656d13b13a08d4cf899120fa0e5253d75c531a056af397669b40d9b3e",
                          "typeString": "literal_string \"minEndTime must be less than maxEndTime\""
                        }
                      ],
                      "id": 469,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1914:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 474,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1914:75:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 475,
                  "nodeType": "ExpressionStatement",
                  "src": "1914:75:2"
                },
                {
                  "expression": {
                    "id": 488,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 476,
                        "name": "merkleTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 363,
                        "src": "1999:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$352_storage_$",
                          "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                        }
                      },
                      "id": 479,
                      "indexExpression": {
                        "id": 478,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "++",
                        "prefix": true,
                        "src": "2011:10:2",
                        "subExpression": {
                          "id": 477,
                          "name": "numTrees",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 322,
                          "src": "2013:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1999:23:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$352_storage",
                        "typeString": "struct MerkleResistor.MerkleTree storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 481,
                          "name": "newRoot",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 447,
                          "src": "2049:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 482,
                          "name": "ipfsHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 449,
                          "src": "2070:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 483,
                          "name": "minEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 451,
                          "src": "2092:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 484,
                          "name": "maxEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 453,
                          "src": "2116:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 485,
                          "name": "pctUpFront",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 455,
                          "src": "2140:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 486,
                          "name": "depositToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 457,
                          "src": "2164:12:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 480,
                        "name": "MerkleTree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 352,
                        "src": "2025:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_MerkleTree_$352_storage_ptr_$",
                          "typeString": "type(struct MerkleResistor.MerkleTree storage pointer)"
                        }
                      },
                      "id": 487,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2025:161:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$352_memory_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree memory"
                      }
                    },
                    "src": "1999:187:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$352_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "id": 489,
                  "nodeType": "ExpressionStatement",
                  "src": "1999:187:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 491,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 322,
                        "src": "2217:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 492,
                        "name": "depositToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 457,
                        "src": "2227:12:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 493,
                        "name": "newRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 447,
                        "src": "2241:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 494,
                        "name": "ipfsHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 449,
                        "src": "2250:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 490,
                      "name": "MerkleTreeAdded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 396,
                      "src": "2201:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_bytes32_$_t_bytes32_$returns$__$",
                        "typeString": "function (uint256,address,bytes32,bytes32)"
                      }
                    },
                    "id": 495,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2201:58:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 496,
                  "nodeType": "EmitStatement",
                  "src": "2196:63:2"
                }
              ]
            },
            "functionSelector": "0997eaa1",
            "id": 498,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 460,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 459,
                  "name": "managementOnly",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 414,
                  "src": "1833:14:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "1833:14:2"
              }
            ],
            "name": "addMerkleTree",
            "nameLocation": "1704:13:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 458,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 447,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "1726:7:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 498,
                  "src": "1718:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 446,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1718:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 449,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "1743:8:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 498,
                  "src": "1735:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 448,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1735:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 451,
                  "mutability": "mutable",
                  "name": "minEndTime",
                  "nameLocation": "1758:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 498,
                  "src": "1753:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 450,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1753:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 453,
                  "mutability": "mutable",
                  "name": "maxEndTime",
                  "nameLocation": "1775:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 498,
                  "src": "1770:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 452,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1770:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 455,
                  "mutability": "mutable",
                  "name": "pctUpFront",
                  "nameLocation": "1792:10:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 498,
                  "src": "1787:15:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 454,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1787:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 457,
                  "mutability": "mutable",
                  "name": "depositToken",
                  "nameLocation": "1812:12:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 498,
                  "src": "1804:20:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 456,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1804:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1717:108:2"
            },
            "returnParameters": {
              "id": 461,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1848:0:2"
            },
            "scope": 850,
            "src": "1695:571:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 611,
              "nodeType": "Block",
              "src": "2428:963:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 518,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 515,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "2446:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 516,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "2446:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 517,
                          "name": "destination",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 502,
                          "src": "2460:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2446:25:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616e636865",
                        "id": 519,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2473:38:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0d840bbe3638dabb5a6e726d796a00fcf265be6e5ba2e71e838f9bed65dfcb15",
                          "typeString": "literal_string \"Can only initialize your own tranche\""
                        },
                        "value": "Can only initialize your own tranche"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0d840bbe3638dabb5a6e726d796a00fcf265be6e5ba2e71e838f9bed65dfcb15",
                          "typeString": "literal_string \"Can only initialize your own tranche\""
                        }
                      ],
                      "id": 514,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2438:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 520,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2438:74:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 521,
                  "nodeType": "ExpressionStatement",
                  "src": "2438:74:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 528,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "2530:38:2",
                        "subExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 523,
                              "name": "initialized",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 358,
                              "src": "2531:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                                "typeString": "mapping(address => mapping(uint256 => bool))"
                              }
                            },
                            "id": 525,
                            "indexExpression": {
                              "id": 524,
                              "name": "destination",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 502,
                              "src": "2543:11:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2531:24:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                              "typeString": "mapping(uint256 => bool)"
                            }
                          },
                          "id": 527,
                          "indexExpression": {
                            "id": 526,
                            "name": "merkleIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 500,
                            "src": "2556:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2531:37:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "416c726561647920696e697469616c697a6564",
                        "id": 529,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2570:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0",
                          "typeString": "literal_string \"Already initialized\""
                        },
                        "value": "Already initialized"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0",
                          "typeString": "literal_string \"Already initialized\""
                        }
                      ],
                      "id": 522,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2522:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 530,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2522:70:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 531,
                  "nodeType": "ExpressionStatement",
                  "src": "2522:70:2"
                },
                {
                  "assignments": [
                    533
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 533,
                      "mutability": "mutable",
                      "name": "leaf",
                      "nameLocation": "2610:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 611,
                      "src": "2602:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 532,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2602:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 542,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 537,
                            "name": "destination",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 502,
                            "src": "2638:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 538,
                            "name": "minTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 506,
                            "src": "2651:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 539,
                            "name": "maxTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 508,
                            "src": "2669:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 535,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "2627:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 536,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "2627:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 540,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2627:59:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 534,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "2617:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 541,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2617:70:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2602:85:2"
                },
                {
                  "assignments": [
                    545
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 545,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "2715:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 611,
                      "src": "2697:22:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$352_memory_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 544,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 543,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 352,
                          "src": "2697:10:2"
                        },
                        "referencedDeclaration": 352,
                        "src": "2697:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$352_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 549,
                  "initialValue": {
                    "baseExpression": {
                      "id": 546,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 363,
                      "src": "2722:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$352_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 548,
                    "indexExpression": {
                      "id": 547,
                      "name": "merkleIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 500,
                      "src": "2734:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2722:24:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$352_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2697:49:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 554,
                            "name": "leaf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 533,
                            "src": "2792:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 555,
                            "name": "proof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 511,
                            "src": "2798:5:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          ],
                          "expression": {
                            "expression": {
                              "id": 551,
                              "name": "tree",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 545,
                              "src": "2764:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MerkleTree_$352_memory_ptr",
                                "typeString": "struct MerkleResistor.MerkleTree memory"
                              }
                            },
                            "id": 552,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "merkleRoot",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 341,
                            "src": "2764:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "id": 553,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "verifyProof",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 279,
                          "src": "2764:27:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_delegatecall_pure$_t_bytes32_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes32_$",
                            "typeString": "function (bytes32,bytes32,bytes32[] memory) pure returns (bool)"
                          }
                        },
                        "id": 556,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2764:40:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5468652070726f6f6620636f756c64206e6f742062652076657269666965642e",
                        "id": 557,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2806:34:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6befa95a15378f3fa320a9fc597710e04d31854374b1378d40ad4268234fd91c",
                          "typeString": "literal_string \"The proof could not be verified.\""
                        },
                        "value": "The proof could not be verified."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6befa95a15378f3fa320a9fc597710e04d31854374b1378d40ad4268234fd91c",
                          "typeString": "literal_string \"The proof could not be verified.\""
                        }
                      ],
                      "id": 550,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2756:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 558,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2756:85:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 559,
                  "nodeType": "ExpressionStatement",
                  "src": "2756:85:2"
                },
                {
                  "expression": {
                    "id": 566,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 560,
                          "name": "initialized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 358,
                          "src": "2851:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                            "typeString": "mapping(address => mapping(uint256 => bool))"
                          }
                        },
                        "id": 563,
                        "indexExpression": {
                          "id": 561,
                          "name": "destination",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 502,
                          "src": "2863:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2851:24:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                          "typeString": "mapping(uint256 => bool)"
                        }
                      },
                      "id": 564,
                      "indexExpression": {
                        "id": 562,
                        "name": "merkleIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 500,
                        "src": "2876:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2851:37:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 565,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2891:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2851:44:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 567,
                  "nodeType": "ExpressionStatement",
                  "src": "2851:44:2"
                },
                {
                  "assignments": [
                    569,
                    571,
                    573,
                    575
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 569,
                      "mutability": "mutable",
                      "name": "valid",
                      "nameLocation": "2912:5:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 611,
                      "src": "2907:10:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 568,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2907:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 571,
                      "mutability": "mutable",
                      "name": "totalCoins",
                      "nameLocation": "2924:10:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 611,
                      "src": "2919:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 570,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2919:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 573,
                      "mutability": "mutable",
                      "name": "coinsPerSecond",
                      "nameLocation": "2941:14:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 611,
                      "src": "2936:19:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 572,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2936:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 575,
                      "mutability": "mutable",
                      "name": "startTime",
                      "nameLocation": "2962:9:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 611,
                      "src": "2957:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 574,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2957:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 582,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 577,
                        "name": "merkleIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 500,
                        "src": "2997:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 578,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 504,
                        "src": "3010:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 579,
                        "name": "minTotalPayments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 506,
                        "src": "3023:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 580,
                        "name": "maxTotalPayments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 508,
                        "src": "3041:16:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 576,
                      "name": "verifyVestingSchedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 849,
                      "src": "2975:21:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256,uint256) view returns (bool,uint256,uint256,uint256)"
                      }
                    },
                    "id": 581,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2975:83:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(bool,uint256,uint256,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2906:152:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 584,
                        "name": "valid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 569,
                        "src": "3076:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c69642076657374696e67207363686564756c65",
                        "id": 585,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3083:26:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e7aa6925863169bd8cb1c379b7045e79f109b7df282905e5a05c3523fee8c286",
                          "typeString": "literal_string \"Invalid vesting schedule\""
                        },
                        "value": "Invalid vesting schedule"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e7aa6925863169bd8cb1c379b7045e79f109b7df282905e5a05c3523fee8c286",
                          "typeString": "literal_string \"Invalid vesting schedule\""
                        }
                      ],
                      "id": 583,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3068:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 586,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3068:42:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 587,
                  "nodeType": "ExpressionStatement",
                  "src": "3068:42:2"
                },
                {
                  "expression": {
                    "id": 604,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 588,
                          "name": "tranches",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 370,
                          "src": "3121:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$339_storage_$_$",
                            "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche storage ref))"
                          }
                        },
                        "id": 591,
                        "indexExpression": {
                          "id": 589,
                          "name": "destination",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 502,
                          "src": "3130:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3121:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$339_storage_$",
                          "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"
                        }
                      },
                      "id": 592,
                      "indexExpression": {
                        "id": 590,
                        "name": "merkleIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 500,
                        "src": "3143:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3121:34:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$339_storage",
                        "typeString": "struct MerkleResistor.Tranche storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 594,
                          "name": "totalCoins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 571,
                          "src": "3179:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 595,
                          "name": "totalCoins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 571,
                          "src": "3203:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 596,
                          "name": "startTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 575,
                          "src": "3227:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 600,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 597,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "3250:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 598,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "3250:15:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 599,
                            "name": "vestingTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 504,
                            "src": "3268:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3250:29:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 601,
                          "name": "coinsPerSecond",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 573,
                          "src": "3293:14:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 602,
                          "name": "startTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 575,
                          "src": "3321:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 593,
                        "name": "Tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 339,
                        "src": "3158:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Tranche_$339_storage_ptr_$",
                          "typeString": "type(struct MerkleResistor.Tranche storage pointer)"
                        }
                      },
                      "id": 603,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3158:182:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$339_memory_ptr",
                        "typeString": "struct MerkleResistor.Tranche memory"
                      }
                    },
                    "src": "3121:219:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$339_storage",
                      "typeString": "struct MerkleResistor.Tranche storage ref"
                    }
                  },
                  "id": 605,
                  "nodeType": "ExpressionStatement",
                  "src": "3121:219:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 607,
                        "name": "merkleIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 500,
                        "src": "3359:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 608,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 502,
                        "src": "3372:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 606,
                      "name": "withdraw",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 712,
                      "src": "3350:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$__$",
                        "typeString": "function (uint256,address)"
                      }
                    },
                    "id": 609,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3350:34:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 610,
                  "nodeType": "ExpressionStatement",
                  "src": "3350:34:2"
                }
              ]
            },
            "functionSelector": "f287ad04",
            "id": 612,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "2281:10:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 512,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 500,
                  "mutability": "mutable",
                  "name": "merkleIndex",
                  "nameLocation": "2297:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 612,
                  "src": "2292:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 499,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2292:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 502,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "2318:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 612,
                  "src": "2310:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 501,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2310:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 504,
                  "mutability": "mutable",
                  "name": "vestingTime",
                  "nameLocation": "2336:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 612,
                  "src": "2331:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 503,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2331:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 506,
                  "mutability": "mutable",
                  "name": "minTotalPayments",
                  "nameLocation": "2354:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 612,
                  "src": "2349:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 505,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2349:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 508,
                  "mutability": "mutable",
                  "name": "maxTotalPayments",
                  "nameLocation": "2377:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 612,
                  "src": "2372:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 507,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2372:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 511,
                  "mutability": "mutable",
                  "name": "proof",
                  "nameLocation": "2412:5:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 612,
                  "src": "2395:22:2",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 509,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "2395:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 510,
                    "nodeType": "ArrayTypeName",
                    "src": "2395:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2291:127:2"
            },
            "returnParameters": {
              "id": 513,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2428:0:2"
            },
            "scope": 850,
            "src": "2272:1119:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 711,
              "nodeType": "Block",
              "src": "3461:1039:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "baseExpression": {
                            "id": 620,
                            "name": "initialized",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 358,
                            "src": "3479:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                              "typeString": "mapping(address => mapping(uint256 => bool))"
                            }
                          },
                          "id": 622,
                          "indexExpression": {
                            "id": 621,
                            "name": "destination",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 616,
                            "src": "3491:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3479:24:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                            "typeString": "mapping(uint256 => bool)"
                          }
                        },
                        "id": 624,
                        "indexExpression": {
                          "id": 623,
                          "name": "merkleIndex",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 614,
                          "src": "3504:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3479:37:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f75206d75737420696e697469616c697a6520796f7572206163636f756e742066697273742e",
                        "id": 625,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3518:41:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4abd8331dd14b306cce990886a8c58b8be69cac04657ffd8c84a7e7c5940d2d1",
                          "typeString": "literal_string \"You must initialize your account first.\""
                        },
                        "value": "You must initialize your account first."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4abd8331dd14b306cce990886a8c58b8be69cac04657ffd8c84a7e7c5940d2d1",
                          "typeString": "literal_string \"You must initialize your account first.\""
                        }
                      ],
                      "id": 619,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3471:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 626,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3471:89:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 627,
                  "nodeType": "ExpressionStatement",
                  "src": "3471:89:2"
                },
                {
                  "assignments": [
                    630
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 630,
                      "mutability": "mutable",
                      "name": "tranche",
                      "nameLocation": "3586:7:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 711,
                      "src": "3570:23:2",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$339_storage_ptr",
                        "typeString": "struct MerkleResistor.Tranche"
                      },
                      "typeName": {
                        "id": 629,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 628,
                          "name": "Tranche",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 339,
                          "src": "3570:7:2"
                        },
                        "referencedDeclaration": 339,
                        "src": "3570:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$339_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 636,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 631,
                        "name": "tranches",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 370,
                        "src": "3596:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$339_storage_$_$",
                          "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche storage ref))"
                        }
                      },
                      "id": 633,
                      "indexExpression": {
                        "id": 632,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 616,
                        "src": "3605:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "3596:21:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$339_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"
                      }
                    },
                    "id": 635,
                    "indexExpression": {
                      "id": 634,
                      "name": "merkleIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 614,
                      "src": "3618:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3596:34:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$339_storage",
                      "typeString": "struct MerkleResistor.Tranche storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3570:60:2"
                },
                {
                  "assignments": [
                    639
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 639,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "3658:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 711,
                      "src": "3640:22:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$352_memory_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 638,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 637,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 352,
                          "src": "3640:10:2"
                        },
                        "referencedDeclaration": 352,
                        "src": "3640:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$352_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 643,
                  "initialValue": {
                    "baseExpression": {
                      "id": 640,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 363,
                      "src": "3665:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$352_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 642,
                    "indexExpression": {
                      "id": 641,
                      "name": "merkleIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 614,
                      "src": "3677:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3665:24:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$352_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3640:49:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 648,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 645,
                            "name": "tranche",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 630,
                            "src": "3707:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Tranche_$339_storage_ptr",
                              "typeString": "struct MerkleResistor.Tranche storage pointer"
                            }
                          },
                          "id": 646,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "currentCoins",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 330,
                          "src": "3707:20:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 647,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3731:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "3707:25:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f20636f696e73206c65667420746f207769746864726177",
                        "id": 649,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3734:27:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f5408369ba8a5a8ab8865a5c8cf9d54818bf598d281aa43e2647b1ce4add273e",
                          "typeString": "literal_string \"No coins left to withdraw\""
                        },
                        "value": "No coins left to withdraw"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f5408369ba8a5a8ab8865a5c8cf9d54818bf598d281aa43e2647b1ce4add273e",
                          "typeString": "literal_string \"No coins left to withdraw\""
                        }
                      ],
                      "id": 644,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3699:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 650,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3699:63:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 651,
                  "nodeType": "ExpressionStatement",
                  "src": "3699:63:2"
                },
                {
                  "assignments": [
                    653
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 653,
                      "mutability": "mutable",
                      "name": "currentWithdrawal",
                      "nameLocation": "3777:17:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 711,
                      "src": "3772:22:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 652,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "3772:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 655,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 654,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3797:1:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3772:26:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 660,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 656,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "3884:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 657,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "3884:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "expression": {
                        "id": 658,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 630,
                        "src": "3903:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$339_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 659,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "endTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 334,
                      "src": "3903:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3884:34:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 679,
                    "nodeType": "Block",
                    "src": "3991:158:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 677,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 667,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 653,
                            "src": "4047:17:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 676,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 672,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 668,
                                      "name": "block",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -4,
                                      "src": "4068:5:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_block",
                                        "typeString": "block"
                                      }
                                    },
                                    "id": 669,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "timestamp",
                                    "nodeType": "MemberAccess",
                                    "src": "4068:15:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 670,
                                      "name": "tranche",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 630,
                                      "src": "4086:7:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Tranche_$339_storage_ptr",
                                        "typeString": "struct MerkleResistor.Tranche storage pointer"
                                      }
                                    },
                                    "id": 671,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lastWithdrawalTime",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 338,
                                    "src": "4086:26:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4068:44:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 673,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "4067:46:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "expression": {
                                "id": 674,
                                "name": "tranche",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 630,
                                "src": "4116:7:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Tranche_$339_storage_ptr",
                                  "typeString": "struct MerkleResistor.Tranche storage pointer"
                                }
                              },
                              "id": 675,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "coinsPerSecond",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 336,
                              "src": "4116:22:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "4067:71:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4047:91:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 678,
                        "nodeType": "ExpressionStatement",
                        "src": "4047:91:2"
                      }
                    ]
                  },
                  "id": 680,
                  "nodeType": "IfStatement",
                  "src": "3880:269:2",
                  "trueBody": {
                    "id": 666,
                    "nodeType": "Block",
                    "src": "3920:65:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 664,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 661,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 653,
                            "src": "3934:17:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 662,
                              "name": "tranche",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 630,
                              "src": "3954:7:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Tranche_$339_storage_ptr",
                                "typeString": "struct MerkleResistor.Tranche storage pointer"
                              }
                            },
                            "id": 663,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "currentCoins",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 330,
                            "src": "3954:20:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3934:40:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 665,
                        "nodeType": "ExpressionStatement",
                        "src": "3934:40:2"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 685,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 681,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 630,
                        "src": "4184:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$339_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 683,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "currentCoins",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 330,
                      "src": "4184:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 684,
                      "name": "currentWithdrawal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 653,
                      "src": "4208:17:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4184:41:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 686,
                  "nodeType": "ExpressionStatement",
                  "src": "4184:41:2"
                },
                {
                  "expression": {
                    "id": 692,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 687,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 630,
                        "src": "4235:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$339_storage_ptr",
                          "typeString": "struct MerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 689,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "lastWithdrawalTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 338,
                      "src": "4235:26:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 690,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "4264:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 691,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "4264:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4235:44:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 693,
                  "nodeType": "ExpressionStatement",
                  "src": "4235:44:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 699,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 616,
                        "src": "4362:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 700,
                        "name": "currentWithdrawal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 653,
                        "src": "4375:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 695,
                              "name": "tree",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 639,
                              "src": "4334:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MerkleTree_$352_memory_ptr",
                                "typeString": "struct MerkleResistor.MerkleTree memory"
                              }
                            },
                            "id": 696,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "tokenAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 351,
                            "src": "4334:17:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 694,
                          "name": "IERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1204,
                          "src": "4327:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IERC20_$1204_$",
                            "typeString": "type(contract IERC20)"
                          }
                        },
                        "id": 697,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4327:25:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1204",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 698,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1153,
                      "src": "4327:34:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 701,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4327:66:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 702,
                  "nodeType": "ExpressionStatement",
                  "src": "4327:66:2"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 704,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 616,
                        "src": "4427:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 705,
                        "name": "currentWithdrawal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 653,
                        "src": "4440:17:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 706,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 630,
                          "src": "4459:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$339_storage_ptr",
                            "typeString": "struct MerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 707,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "currentCoins",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 330,
                        "src": "4459:20:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 708,
                        "name": "merkleIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 614,
                        "src": "4481:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 703,
                      "name": "WithdrawalOccurred",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 386,
                      "src": "4408:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256,uint256,uint256)"
                      }
                    },
                    "id": 709,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4408:85:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 710,
                  "nodeType": "EmitStatement",
                  "src": "4403:90:2"
                }
              ]
            },
            "functionSelector": "00f714ce",
            "id": 712,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "3406:8:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 617,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 614,
                  "mutability": "mutable",
                  "name": "merkleIndex",
                  "nameLocation": "3420:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 712,
                  "src": "3415:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 613,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3415:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 616,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "3441:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 712,
                  "src": "3433:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 615,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3433:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3414:39:2"
            },
            "returnParameters": {
              "id": 618,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3461:0:2"
            },
            "scope": 850,
            "src": "3397:1103:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 848,
              "nodeType": "Block",
              "src": "4664:897:2",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 733,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 731,
                      "name": "merkleIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 714,
                      "src": "4678:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 732,
                      "name": "numTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 322,
                      "src": "4692:8:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4678:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 741,
                  "nodeType": "IfStatement",
                  "src": "4674:76:2",
                  "trueBody": {
                    "id": 740,
                    "nodeType": "Block",
                    "src": "4702:48:2",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "hexValue": "66616c7365",
                              "id": 734,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4724:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "hexValue": "30",
                              "id": 735,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4731:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 736,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4734:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 737,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4737:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "id": 738,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "4723:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$",
                            "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"
                          }
                        },
                        "functionReturnParameters": 730,
                        "id": 739,
                        "nodeType": "Return",
                        "src": "4716:23:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    744
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 744,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "4778:4:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 848,
                      "src": "4760:22:2",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$352_memory_ptr",
                        "typeString": "struct MerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 743,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 742,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 352,
                          "src": "4760:10:2"
                        },
                        "referencedDeclaration": 352,
                        "src": "4760:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$352_storage_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 748,
                  "initialValue": {
                    "baseExpression": {
                      "id": 745,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 363,
                      "src": "4785:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$352_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 747,
                    "indexExpression": {
                      "id": 746,
                      "name": "merkleIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 714,
                      "src": "4797:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4785:24:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$352_storage",
                      "typeString": "struct MerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4760:49:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 757,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 752,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 749,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 716,
                        "src": "4824:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "expression": {
                          "id": 750,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 744,
                          "src": "4838:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$352_memory_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree memory"
                          }
                        },
                        "id": 751,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "maxEndTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 347,
                        "src": "4838:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "4824:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 756,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 753,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 716,
                        "src": "4857:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "expression": {
                          "id": 754,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 744,
                          "src": "4871:4:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$352_memory_ptr",
                            "typeString": "struct MerkleResistor.MerkleTree memory"
                          }
                        },
                        "id": 755,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "minEndTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 345,
                        "src": "4871:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "4857:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "4824:62:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 765,
                  "nodeType": "IfStatement",
                  "src": "4820:116:2",
                  "trueBody": {
                    "id": 764,
                    "nodeType": "Block",
                    "src": "4888:48:2",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "hexValue": "66616c7365",
                              "id": 758,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4910:5:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "hexValue": "30",
                              "id": 759,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4917:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 760,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4920:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 761,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4923:1:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "id": 762,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "4909:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$",
                            "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"
                          }
                        },
                        "functionReturnParameters": 730,
                        "id": 763,
                        "nodeType": "Return",
                        "src": "4902:23:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    767
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 767,
                      "mutability": "mutable",
                      "name": "totalCoins",
                      "nameLocation": "4951:10:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 848,
                      "src": "4946:15:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 766,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "4946:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 768,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4946:15:2"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 772,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 769,
                      "name": "vestingTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 716,
                      "src": "4975:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 770,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 744,
                        "src": "4990:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$352_memory_ptr",
                          "typeString": "struct MerkleResistor.MerkleTree memory"
                        }
                      },
                      "id": 771,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "maxEndTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 347,
                      "src": "4990:15:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4975:30:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 809,
                    "nodeType": "Block",
                    "src": "5067:238:2",
                    "statements": [
                      {
                        "assignments": [
                          779
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 779,
                            "mutability": "mutable",
                            "name": "paymentSlope",
                            "nameLocation": "5086:12:2",
                            "nodeType": "VariableDeclaration",
                            "scope": 809,
                            "src": "5081:17:2",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 778,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "5081:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 793,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 792,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 785,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 782,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 780,
                                    "name": "maxTotalPayments",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 720,
                                    "src": "5102:16:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "id": 781,
                                    "name": "minTotalPayments",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 718,
                                    "src": "5121:16:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "5102:35:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 783,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "5101:37:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "id": 784,
                              "name": "PRECISION",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 373,
                              "src": "5141:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "5101:49:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 790,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 786,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 744,
                                    "src": "5154:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$352_memory_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree memory"
                                    }
                                  },
                                  "id": 787,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "maxEndTime",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 347,
                                  "src": "5154:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "expression": {
                                    "id": 788,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 744,
                                    "src": "5172:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$352_memory_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree memory"
                                    }
                                  },
                                  "id": 789,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "minEndTime",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 345,
                                  "src": "5172:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5154:33:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 791,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "5153:35:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5101:87:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5081:107:2"
                      },
                      {
                        "expression": {
                          "id": 807,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 794,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 767,
                            "src": "5202:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 806,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 803,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 801,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 795,
                                      "name": "paymentSlope",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 779,
                                      "src": "5216:12:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 799,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 796,
                                            "name": "vestingTime",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 716,
                                            "src": "5232:11:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "-",
                                          "rightExpression": {
                                            "expression": {
                                              "id": 797,
                                              "name": "tree",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 744,
                                              "src": "5246:4:2",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_MerkleTree_$352_memory_ptr",
                                                "typeString": "struct MerkleResistor.MerkleTree memory"
                                              }
                                            },
                                            "id": 798,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "minEndTime",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 345,
                                            "src": "5246:15:2",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "5232:29:2",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 800,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "5231:31:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "5216:46:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "id": 802,
                                    "name": "PRECISION",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 373,
                                    "src": "5265:9:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "5216:58:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 804,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "5215:60:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "id": 805,
                              "name": "minTotalPayments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 718,
                              "src": "5278:16:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "5215:79:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5202:92:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 808,
                        "nodeType": "ExpressionStatement",
                        "src": "5202:92:2"
                      }
                    ]
                  },
                  "id": 810,
                  "nodeType": "IfStatement",
                  "src": "4971:334:2",
                  "trueBody": {
                    "id": 777,
                    "nodeType": "Block",
                    "src": "5007:54:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 775,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 773,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 767,
                            "src": "5021:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 774,
                            "name": "maxTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 720,
                            "src": "5034:16:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5021:29:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 776,
                        "nodeType": "ExpressionStatement",
                        "src": "5021:29:2"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    812
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 812,
                      "mutability": "mutable",
                      "name": "coinsPerSecond",
                      "nameLocation": "5320:14:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 848,
                      "src": "5315:19:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 811,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "5315:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 829,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 828,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 822,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 813,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 767,
                            "src": "5338:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 820,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "313030",
                                      "id": 816,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "5357:3:2",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      },
                                      "value": "100"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      }
                                    ],
                                    "id": 815,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "5352:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 814,
                                      "name": "uint",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "5352:4:2",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 817,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5352:9:2",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "expression": {
                                    "id": 818,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 744,
                                    "src": "5364:4:2",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$352_memory_ptr",
                                      "typeString": "struct MerkleResistor.MerkleTree memory"
                                    }
                                  },
                                  "id": 819,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pctUpFront",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 349,
                                  "src": "5364:15:2",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5352:27:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 821,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "5351:29:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5338:42:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 823,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "5337:44:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 826,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 824,
                            "name": "vestingTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 716,
                            "src": "5385:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "hexValue": "313030",
                            "id": 825,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5399:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_100_by_1",
                              "typeString": "int_const 100"
                            },
                            "value": "100"
                          },
                          "src": "5385:17:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 827,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "5384:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5337:66:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5315:88:2"
                },
                {
                  "assignments": [
                    831
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 831,
                      "mutability": "mutable",
                      "name": "startTime",
                      "nameLocation": "5418:9:2",
                      "nodeType": "VariableDeclaration",
                      "scope": 848,
                      "src": "5413:14:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 830,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "5413:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 841,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 840,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 835,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 832,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "5430:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 833,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "5430:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "id": 834,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 716,
                        "src": "5448:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "5430:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 838,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 836,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 767,
                            "src": "5463:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 837,
                            "name": "coinsPerSecond",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 812,
                            "src": "5476:14:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5463:27:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 839,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "5462:29:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "5430:61:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5413:78:2"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "74727565",
                        "id": 842,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5510:4:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      {
                        "id": 843,
                        "name": "totalCoins",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 767,
                        "src": "5516:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 844,
                        "name": "coinsPerSecond",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 812,
                        "src": "5528:14:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 845,
                        "name": "startTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 831,
                        "src": "5544:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 846,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "5509:45:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(bool,uint256,uint256,uint256)"
                    }
                  },
                  "functionReturnParameters": 730,
                  "id": 847,
                  "nodeType": "Return",
                  "src": "5502:52:2"
                }
              ]
            },
            "functionSelector": "6fb6ec41",
            "id": 849,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyVestingSchedule",
            "nameLocation": "4515:21:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 721,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 714,
                  "mutability": "mutable",
                  "name": "merkleIndex",
                  "nameLocation": "4542:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 849,
                  "src": "4537:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 713,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4537:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 716,
                  "mutability": "mutable",
                  "name": "vestingTime",
                  "nameLocation": "4560:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 849,
                  "src": "4555:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 715,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4555:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 718,
                  "mutability": "mutable",
                  "name": "minTotalPayments",
                  "nameLocation": "4578:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 849,
                  "src": "4573:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 717,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4573:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 720,
                  "mutability": "mutable",
                  "name": "maxTotalPayments",
                  "nameLocation": "4601:16:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 849,
                  "src": "4596:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 719,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4596:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4536:82:2"
            },
            "returnParameters": {
              "id": 730,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 723,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 849,
                  "src": "4640:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 722,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4640:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 725,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 849,
                  "src": "4646:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 724,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4646:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 727,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 849,
                  "src": "4652:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 726,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4652:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 729,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 849,
                  "src": "4658:4:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 728,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4658:4:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4639:24:2"
            },
            "scope": 850,
            "src": "4506:1055:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 851,
        "src": "128:5436:2",
        "usedErrors": []
      }
    ],
    "src": "42:5523:2"
  },
  "bytecode": "60806040526000805534801561001457600080fd5b5060405161116e38038061116e83398101604081905261003391610058565b600280546001600160a01b0319166001600160a01b0392909216919091179055610088565b60006020828403121561006a57600080fd5b81516001600160a01b038116811461008157600080fd5b9392505050565b6110d7806100976000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c806385d88cb11161008c578063aaf5eb6811610066578063aaf5eb6814610248578063c26cb54f14610252578063d4a22bde146102ca578063f287ad04146102dd57600080fd5b806385d88cb11461015d57806386bb8249146101df57806388a8d6021461021d57600080fd5b8062f714ce146100d35780630997eaa1146100e857806318369a2a146100fb5780632811e25314610117578063390b7c661461011f5780636fb6ec4114610128575b600080fd5b6100e66100e1366004610d69565b6102f0565b005b6100e66100f6366004610d95565b610576565b61010460015481565b6040519081526020015b60405180910390f35b610104600181565b61010460005481565b61013b610136366004610de6565b610768565b604080519415158552602085019390935291830152606082015260800161010e565b6101a961016b366004610e18565b60046020819052600091825260409091208054600182015460028301546003840154948401546005909401549294919390926001600160a01b031686565b60408051968752602087019590955293850192909252606084015260808301526001600160a01b031660a082015260c00161010e565b61020d6101ed366004610e31565b600360209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161010e565b600254610230906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b610104620f424081565b61029d610260366004610e31565b6005602081815260009384526040808520909152918352912080546001820154600283015460038401546004850154949095015492949193909286565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161010e565b6100e66102d8366004610e5b565b610905565b6100e66102eb366004610e93565b6109c0565b6001600160a01b038116600090815260036020908152604080832085845290915290205460ff166103785760405162461bcd60e51b815260206004820152602760248201527f596f75206d75737420696e697469616c697a6520796f7572206163636f756e74604482015266103334b939ba1760c91b60648201526084015b60405180910390fd5b6001600160a01b0380821660009081526005602081815260408084208785528252808420600480845294829020825160c081018452815481526001808301549582019590955260028201549381019390935260038101546060840152948501546080830152939092015490931660a08201529181015490919061043d5760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f696e73206c65667420746f20776974686472617700000000000000604482015260640161036f565b60008260030154421061045557506001820154610476565b600483015460058401546104699042610f9f565b6104739190610fb6565b90505b8083600101600082825461048a9190610f9f565b909155505042600584015560a082015160405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156104e557600080fd5b505af11580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190610fd5565b5084846001600160a01b03167f5ffb4b63dec15ba26308386f1d5ca61843b29ba365511062a887d95aa27532d3838660010154604051610567929190918252602082015260400190565b60405180910390a35050505050565b6002546001600160a01b031633146105d05760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c79206d616e6167656d656e74206d61792063616c6c2074686973000000604482015260640161036f565b606482106106145760405162461bcd60e51b81526020600482015260116024820152700706374557046726f6e74203e3d2031303607c1b604482015260640161036f565b8284106106735760405162461bcd60e51b815260206004820152602760248201527f6d696e456e6454696d65206d757374206265206c657373207468616e206d6178604482015266456e6454696d6560c81b606482015260840161036f565b6040518060c00160405280878152602001868152602001858152602001848152602001838152602001826001600160a01b03168152506004600080600081546106bb90610ff7565b918290555081526020808201929092526040908101600090812084518155848401516001820155848301516002820155606085015160038201556080850151600482015560a090940151600590940180546001600160a01b0319166001600160a01b039586161790555481518a815292830189905292841692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a3505050505050565b600080600080600054881115610789575060009250829150819050806108fa565b600088815260046020818152604092839020835160c081018552815481526001820154928101929092526002810154938201939093526003830154606082018190529183015460808201526005909201546001600160a01b031660a08301528811806107f85750806040015188105b15610811576000806000809450945094509450506108fa565b60008160600151891415610826575085610897565b60008260400151836060015161083c9190610f9f565b620f424061084a8b8b610f9f565b6108549190610fb6565b61085e9190611012565b905088620f424084604001518c6108759190610f9f565b61087f9084610fb6565b6108899190611012565b6108939190611034565b9150505b60006108a48a6064610fb6565b60808401516108b4906064610f9f565b6108be9084610fb6565b6108c89190611012565b905060006108d68284611012565b6108e08c42611034565b6108ea9190610f9f565b6001985092965090945090925050505b945094509450949050565b6002546001600160a01b0316331461095f5760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c79206d616e6167656d656e74206d61792063616c6c2074686973000000604482015260640161036f565b600280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f8caf0a9df2e1da9becb3ebfb8a56e83121a5b3f6c5622f715a939ec29c54dfdf910160405180910390a15050565b336001600160a01b03861614610a245760405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616044820152636e63686560e01b606482015260840161036f565b6001600160a01b038516600090815260036020908152604080832089845290915290205460ff1615610a8e5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015260640161036f565b604080516001600160a01b03871660208201529081018490526060810183905260009060800160408051601f19818403018152828252805160209182012060008b815260048084529084902060c086018552805480875260018201549487019490945260028101548686015260038101546060870152808201546080870152600501546001600160a01b031660a08601529251632769cd1f60e21b815290945073__MerkleLib_____________________________92639da7347c92610b5a929091879189910161104c565b60206040518083038186803b158015610b7257600080fd5b505af4158015610b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baa9190610fd5565b610bf65760405162461bcd60e51b815260206004820181905260248201527f5468652070726f6f6620636f756c64206e6f742062652076657269666965642e604482015260640161036f565b6001600160a01b03871660009081526003602090815260408083208b84529091528120805460ff19166001179055808080610c338c8b8b8b610768565b935093509350935083610c885760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67207363686564756c650000000000000000604482015260640161036f565b6040518060c001604052808481526020018481526020018281526020018b42610cb19190611034565b815260200183815260200182815250600560008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050610d3f8c8c6102f0565b505050505050505050505050565b80356001600160a01b0381168114610d6457600080fd5b919050565b60008060408385031215610d7c57600080fd5b82359150610d8c60208401610d4d565b90509250929050565b60008060008060008060c08789031215610dae57600080fd5b8635955060208701359450604087013593506060870135925060808701359150610dda60a08801610d4d565b90509295509295509295565b60008060008060808587031215610dfc57600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215610e2a57600080fd5b5035919050565b60008060408385031215610e4457600080fd5b610e4d83610d4d565b946020939093013593505050565b600060208284031215610e6d57600080fd5b610e7682610d4d565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610eac57600080fd5b863595506020610ebd818901610d4d565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610eef57600080fd5b818a0191508a601f830112610f0357600080fd5b813581811115610f1557610f15610e7d565b8060051b604051601f19603f83011681018181108582111715610f3a57610f3a610e7d565b60405291825284820192508381018501918d831115610f5857600080fd5b938501935b82851015610f7657843584529385019392850192610f5d565b8096505050505050509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015610fb157610fb1610f89565b500390565b6000816000190483118215151615610fd057610fd0610f89565b500290565b600060208284031215610fe757600080fd5b81518015158114610e7657600080fd5b600060001982141561100b5761100b610f89565b5060010190565b60008261102f57634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561104757611047610f89565b500190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b8181101561109357845183529383019391830191600101611077565b50909897505050505050505056fea264697066735822122085bef4f066fbb3ecb3ad105c2c0625527ba744d20178cffe6696abacabb47bac64736f6c63430008090033",
  "bytecodeSha1": "cbff46221279f88b7be162b4e294dbe606a2395e",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.9+commit.e5eed63a"
  },
  "contractName": "MerkleResistor",
  "coverageMap": {
    "branches": {
      "1": {},
      "2": {
        "MerkleResistor.addMerkleTree": {
          "28": [
            1866,
            1882,
            true
          ],
          "29": [
            1922,
            1945,
            true
          ]
        },
        "MerkleResistor.initialize": {
          "34": [
            2446,
            2471,
            true
          ],
          "35": [
            2530,
            2568,
            true
          ],
          "36": [
            2764,
            2804,
            true
          ],
          "37": [
            3076,
            3081,
            true
          ]
        },
        "MerkleResistor.verifyVestingSchedule": {
          "30": [
            4678,
            4700,
            false
          ],
          "31": [
            4824,
            4853,
            true
          ],
          "32": [
            4857,
            4886,
            false
          ],
          "33": [
            4975,
            5005,
            false
          ]
        },
        "MerkleResistor.withdraw": {
          "26": [
            3479,
            3516,
            true
          ],
          "27": [
            3884,
            3918,
            false
          ]
        }
      },
      "4": {}
    },
    "statements": {
      "1": {},
      "2": {
        "MerkleResistor.addMerkleTree": {
          "8": [
            1858,
            1904
          ],
          "9": [
            1914,
            1989
          ],
          "10": [
            1999,
            2186
          ],
          "11": [
            2196,
            2259
          ]
        },
        "MerkleResistor.initialize": {
          "19": [
            2438,
            2512
          ],
          "20": [
            2522,
            2592
          ],
          "21": [
            2756,
            2841
          ],
          "22": [
            2851,
            2895
          ],
          "23": [
            3068,
            3110
          ],
          "24": [
            3121,
            3340
          ],
          "25": [
            3350,
            3384
          ]
        },
        "MerkleResistor.setManagement": {
          "17": [
            1612,
            1632
          ],
          "18": [
            1642,
            1682
          ]
        },
        "MerkleResistor.verifyVestingSchedule": {
          "12": [
            4716,
            4739
          ],
          "13": [
            4902,
            4925
          ],
          "14": [
            5021,
            5050
          ],
          "15": [
            5202,
            5294
          ],
          "16": [
            5502,
            5554
          ]
        },
        "MerkleResistor.withdraw": {
          "0": [
            3471,
            3560
          ],
          "1": [
            3699,
            3762
          ],
          "2": [
            3934,
            3974
          ],
          "3": [
            4047,
            4138
          ],
          "4": [
            4184,
            4225
          ],
          "5": [
            4235,
            4279
          ],
          "6": [
            4327,
            4393
          ],
          "7": [
            4403,
            4493
          ]
        }
      },
      "4": {}
    }
  },
  "dependencies": [
    "IERC20",
    "MerkleLib"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100ce5760003560e01c806385d88cb11161008c578063aaf5eb6811610066578063aaf5eb6814610248578063c26cb54f14610252578063d4a22bde146102ca578063f287ad04146102dd57600080fd5b806385d88cb11461015d57806386bb8249146101df57806388a8d6021461021d57600080fd5b8062f714ce146100d35780630997eaa1146100e857806318369a2a146100fb5780632811e25314610117578063390b7c661461011f5780636fb6ec4114610128575b600080fd5b6100e66100e1366004610d69565b6102f0565b005b6100e66100f6366004610d95565b610576565b61010460015481565b6040519081526020015b60405180910390f35b610104600181565b61010460005481565b61013b610136366004610de6565b610768565b604080519415158552602085019390935291830152606082015260800161010e565b6101a961016b366004610e18565b60046020819052600091825260409091208054600182015460028301546003840154948401546005909401549294919390926001600160a01b031686565b60408051968752602087019590955293850192909252606084015260808301526001600160a01b031660a082015260c00161010e565b61020d6101ed366004610e31565b600360209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161010e565b600254610230906001600160a01b031681565b6040516001600160a01b03909116815260200161010e565b610104620f424081565b61029d610260366004610e31565b6005602081815260009384526040808520909152918352912080546001820154600283015460038401546004850154949095015492949193909286565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161010e565b6100e66102d8366004610e5b565b610905565b6100e66102eb366004610e93565b6109c0565b6001600160a01b038116600090815260036020908152604080832085845290915290205460ff166103785760405162461bcd60e51b815260206004820152602760248201527f596f75206d75737420696e697469616c697a6520796f7572206163636f756e74604482015266103334b939ba1760c91b60648201526084015b60405180910390fd5b6001600160a01b0380821660009081526005602081815260408084208785528252808420600480845294829020825160c081018452815481526001808301549582019590955260028201549381019390935260038101546060840152948501546080830152939092015490931660a08201529181015490919061043d5760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f696e73206c65667420746f20776974686472617700000000000000604482015260640161036f565b60008260030154421061045557506001820154610476565b600483015460058401546104699042610f9f565b6104739190610fb6565b90505b8083600101600082825461048a9190610f9f565b909155505042600584015560a082015160405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156104e557600080fd5b505af11580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190610fd5565b5084846001600160a01b03167f5ffb4b63dec15ba26308386f1d5ca61843b29ba365511062a887d95aa27532d3838660010154604051610567929190918252602082015260400190565b60405180910390a35050505050565b6002546001600160a01b031633146105d05760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c79206d616e6167656d656e74206d61792063616c6c2074686973000000604482015260640161036f565b606482106106145760405162461bcd60e51b81526020600482015260116024820152700706374557046726f6e74203e3d2031303607c1b604482015260640161036f565b8284106106735760405162461bcd60e51b815260206004820152602760248201527f6d696e456e6454696d65206d757374206265206c657373207468616e206d6178604482015266456e6454696d6560c81b606482015260840161036f565b6040518060c00160405280878152602001868152602001858152602001848152602001838152602001826001600160a01b03168152506004600080600081546106bb90610ff7565b918290555081526020808201929092526040908101600090812084518155848401516001820155848301516002820155606085015160038201556080850151600482015560a090940151600590940180546001600160a01b0319166001600160a01b039586161790555481518a815292830189905292841692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a3505050505050565b600080600080600054881115610789575060009250829150819050806108fa565b600088815260046020818152604092839020835160c081018552815481526001820154928101929092526002810154938201939093526003830154606082018190529183015460808201526005909201546001600160a01b031660a08301528811806107f85750806040015188105b15610811576000806000809450945094509450506108fa565b60008160600151891415610826575085610897565b60008260400151836060015161083c9190610f9f565b620f424061084a8b8b610f9f565b6108549190610fb6565b61085e9190611012565b905088620f424084604001518c6108759190610f9f565b61087f9084610fb6565b6108899190611012565b6108939190611034565b9150505b60006108a48a6064610fb6565b60808401516108b4906064610f9f565b6108be9084610fb6565b6108c89190611012565b905060006108d68284611012565b6108e08c42611034565b6108ea9190610f9f565b6001985092965090945090925050505b945094509450949050565b6002546001600160a01b0316331461095f5760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c79206d616e6167656d656e74206d61792063616c6c2074686973000000604482015260640161036f565b600280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f8caf0a9df2e1da9becb3ebfb8a56e83121a5b3f6c5622f715a939ec29c54dfdf910160405180910390a15050565b336001600160a01b03861614610a245760405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616044820152636e63686560e01b606482015260840161036f565b6001600160a01b038516600090815260036020908152604080832089845290915290205460ff1615610a8e5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015260640161036f565b604080516001600160a01b03871660208201529081018490526060810183905260009060800160408051601f19818403018152828252805160209182012060008b815260048084529084902060c086018552805480875260018201549487019490945260028101548686015260038101546060870152808201546080870152600501546001600160a01b031660a08601529251632769cd1f60e21b815290945073__$61dd25696c02d5bd2863c8d2c1a2324a87$__92639da7347c92610b5a929091879189910161104c565b60206040518083038186803b158015610b7257600080fd5b505af4158015610b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baa9190610fd5565b610bf65760405162461bcd60e51b815260206004820181905260248201527f5468652070726f6f6620636f756c64206e6f742062652076657269666965642e604482015260640161036f565b6001600160a01b03871660009081526003602090815260408083208b84529091528120805460ff19166001179055808080610c338c8b8b8b610768565b935093509350935083610c885760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67207363686564756c650000000000000000604482015260640161036f565b6040518060c001604052808481526020018481526020018281526020018b42610cb19190611034565b815260200183815260200182815250600560008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050610d3f8c8c6102f0565b505050505050505050505050565b80356001600160a01b0381168114610d6457600080fd5b919050565b60008060408385031215610d7c57600080fd5b82359150610d8c60208401610d4d565b90509250929050565b60008060008060008060c08789031215610dae57600080fd5b8635955060208701359450604087013593506060870135925060808701359150610dda60a08801610d4d565b90509295509295509295565b60008060008060808587031215610dfc57600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215610e2a57600080fd5b5035919050565b60008060408385031215610e4457600080fd5b610e4d83610d4d565b946020939093013593505050565b600060208284031215610e6d57600080fd5b610e7682610d4d565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610eac57600080fd5b863595506020610ebd818901610d4d565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610eef57600080fd5b818a0191508a601f830112610f0357600080fd5b813581811115610f1557610f15610e7d565b8060051b604051601f19603f83011681018181108582111715610f3a57610f3a610e7d565b60405291825284820192508381018501918d831115610f5857600080fd5b938501935b82851015610f7657843584529385019392850192610f5d565b8096505050505050509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015610fb157610fb1610f89565b500390565b6000816000190483118215151615610fd057610fd0610f89565b500290565b600060208284031215610fe757600080fd5b81518015158114610e7657600080fd5b600060001982141561100b5761100b610f89565b5060010190565b60008261102f57634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561104757611047610f89565b500190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b8181101561109357845183529383019391830191600101611077565b50909897505050505050505056fea264697066735822122085bef4f066fbb3ecb3ad105c2c0625527ba744d20178cffe6696abacabb47bac64736f6c63430008090033",
  "deployedSourceMap": "128:5436:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3397:1103;;;;;;:::i;:::-;;:::i;:::-;;1695:571;;;;;;:::i;:::-;;:::i;223:26::-;;;;;;;;;1131:25:5;;;1119:2;1104:18;223:26:2;;;;;;;;923:40;;962:1;923:40;;192:24;;;;;;4506:1055;;;;;;:::i;:::-;;:::i;:::-;;;;1807:14:5;;1800:22;1782:41;;1854:2;1839:18;;1832:34;;;;1882:18;;;1875:34;1940:2;1925:18;;1918:34;1769:3;1754:19;4506:1055:2;1557:401:5;755:47:2;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;755:47:2;;;;;;;2435:25:5;;;2491:2;2476:18;;2469:34;;;;2519:18;;;2512:34;;;;2577:2;2562:18;;2555:34;2620:3;2605:19;;2598:35;-1:-1:-1;;;;;2670:32:5;2690:3;2649:19;;2642:61;2422:3;2407:19;755:47:2;2148:561:5;687:62:2;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3138:14:5;;3131:22;3113:41;;3101:2;3086:18;687:62:2;2973:187:5;255:25:2;;;;;-1:-1:-1;;;;;255:25:2;;;;;;-1:-1:-1;;;;;3329:32:5;;;3311:51;;3299:2;3284:18;255:25:2;3165:203:5;877:40:2;;910:7;877:40;;808:62;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3660:25:5;;;3716:2;3701:18;;3694:34;;;;3744:18;;;3737:34;;;;3802:2;3787:18;;3780:34;3845:3;3830:19;;3823:35;3889:3;3874:19;;3867:35;3647:3;3632:19;808:62:2;3373:535:5;1502:187:2;;;;;;:::i;:::-;;:::i;2272:1119::-;;;;;;:::i;:::-;;:::i;3397:1103::-;-1:-1:-1;;;;;3479:24:2;;;;;;:11;:24;;;;;;;;:37;;;;;;;;;;;3471:89;;;;-1:-1:-1;;;3471:89:2;;5907:2:5;3471:89:2;;;5889:21:5;5946:2;5926:18;;;5919:30;5985:34;5965:18;;;5958:62;-1:-1:-1;;;6036:18:5;;;6029:37;6083:19;;3471:89:2;;;;;;;;;-1:-1:-1;;;;;3596:21:2;;;3570:23;3596:21;;;:8;:21;;;;;;;;:34;;;;;;;;3665:11;:24;;;;;;;3640:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3707:20;;;;3596:34;;3640:49;3699:63;;;;-1:-1:-1;;;3699:63:2;;6315:2:5;3699:63:2;;;6297:21:5;6354:2;6334:18;;;6327:30;6393:27;6373:18;;;6366:55;6438:18;;3699:63:2;6113:349:5;3699:63:2;3772:22;3903:7;:15;;;3884;:34;3880:269;;-1:-1:-1;3954:20:2;;;;3880:269;;;4116:22;;;;4086:26;;;;4068:44;;:15;:44;:::i;:::-;4067:71;;;;:::i;:::-;4047:91;;3880:269;4208:17;4184:7;:20;;;:41;;;;;;;:::i;:::-;;;;-1:-1:-1;;4264:15:2;4235:26;;;:44;4334:17;;;;4327:66;;-1:-1:-1;;;4327:66:2;;-1:-1:-1;;;;;7094:32:5;;;4327:66:2;;;7076:51:5;7143:18;;;7136:34;;;4327::2;;;;;;7049:18:5;;4327:66:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4481:11;4427;-1:-1:-1;;;;;4408:85:2;;4440:17;4459:7;:20;;;4408:85;;;;;;7637:25:5;;;7693:2;7678:18;;7671:34;7625:2;7610:18;;7463:248;4408:85:2;;;;;;;;3461:1039;;;3397:1103;;:::o;1695:571::-;1335:10;;-1:-1:-1;;;;;1335:10:2;1321;:24;1312:67;;;;-1:-1:-1;;;1312:67:2;;7918:2:5;1312:67:2;;;7900:21:5;7957:2;7937:18;;;7930:30;7996:31;7976:18;;;7969:59;8045:18;;1312:67:2;7716:353:5;1312:67:2;1879:3:::1;1866:10;:16;1858:46;;;::::0;-1:-1:-1;;;1858:46:2;;8276:2:5;1858:46:2::1;::::0;::::1;8258:21:5::0;8315:2;8295:18;;;8288:30;-1:-1:-1;;;8334:18:5;;;8327:47;8391:18;;1858:46:2::1;8074:341:5::0;1858:46:2::1;1935:10;1922;:23;1914:75;;;::::0;-1:-1:-1;;;1914:75:2;;8622:2:5;1914:75:2::1;::::0;::::1;8604:21:5::0;8661:2;8641:18;;;8634:30;8700:34;8680:18;;;8673:62;-1:-1:-1;;;8751:18:5;;;8744:37;8798:19;;1914:75:2::1;8420:403:5::0;1914:75:2::1;2025:161;;;;;;;;2049:7;2025:161;;;;2070:8;2025:161;;;;2092:10;2025:161;;;;2116:10;2025:161;;;;2140:10;2025:161;;;;2164:12;-1:-1:-1::0;;;;;2025:161:2::1;;;::::0;1999:11:::1;:23;2013:8:::0;::::1;2011:10;;;;;:::i;:::-;::::0;;;;-1:-1:-1;1999:23:2;;::::1;::::0;;::::1;::::0;;;;;;;;-1:-1:-1;1999:23:2;;;:187;;;;;;::::1;::::0;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;::::1;::::0;;::::1;::::0;;-1:-1:-1;;;;;;1999:187:2::1;-1:-1:-1::0;;;;;1999:187:2;;::::1;;::::0;;2217:8;2201:58;;7637:25:5;;;7678:18;;;7671:34;;;2201:58:2;;::::1;::::0;2217:8;2201:58:::1;::::0;7610:18:5;2201:58:2::1;;;;;;;1695:571:::0;;;;;;:::o;4506:1055::-;4640:4;4646;4652;4658;4692:8;;4678:11;:22;4674:76;;;-1:-1:-1;4724:5:2;;-1:-1:-1;4724:5:2;;-1:-1:-1;4724:5:2;;-1:-1:-1;4724:5:2;4716:23;;4674:76;4760:22;4785:24;;;:11;:24;;;;;;;;;4760:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4760:49:2;;;;;4824:29;;;:62;;;4871:4;:15;;;4857:11;:29;4824:62;4820:116;;;4910:5;4917:1;4920;4923;4902:23;;;;;;;;;;;4820:116;4946:15;4990:4;:15;;;4975:11;:30;4971:334;;;-1:-1:-1;5034:16:2;4971:334;;;5081:17;5172:4;:15;;;5154:4;:15;;;:33;;;;:::i;:::-;910:7;5102:35;5121:16;5102;:35;:::i;:::-;5101:49;;;;:::i;:::-;:87;;;;:::i;:::-;5081:107;;5278:16;910:7;5246:4;:15;;;5232:11;:29;;;;:::i;:::-;5216:46;;:12;:46;:::i;:::-;:58;;;;:::i;:::-;5215:79;;;;:::i;:::-;5202:92;;5067:238;4971:334;5315:19;5385:17;:11;5399:3;5385:17;:::i;:::-;5364:15;;;;5352:27;;5357:3;5352:27;:::i;:::-;5338:42;;:10;:42;:::i;:::-;5337:66;;;;:::i;:::-;5315:88;-1:-1:-1;5413:14:2;5463:27;5315:88;5463:10;:27;:::i;:::-;5430:29;5448:11;5430:15;:29;:::i;:::-;:61;;;;:::i;:::-;5510:4;;-1:-1:-1;5516:10:2;;-1:-1:-1;5528:14:2;;-1:-1:-1;5413:78:2;;-1:-1:-1;;;4506:1055:2;;;;;;;;;;:::o;1502:187::-;1335:10;;-1:-1:-1;;;;;1335:10:2;1321;:24;1312:67;;;;-1:-1:-1;;;1312:67:2;;7918:2:5;1312:67:2;;;7900:21:5;7957:2;7937:18;;;7930:30;7996:31;7976:18;;;7969:59;8045:18;;1312:67:2;7716:353:5;1312:67:2;1592:10:::1;::::0;;-1:-1:-1;;;;;1612:20:2;;::::1;-1:-1:-1::0;;;;;;1612:20:2;::::1;::::0;::::1;::::0;;;1647:35:::1;::::0;;1592:10;;;::::1;9788:34:5::0;;;9853:2;9838:18;;9831:43;;;;1647:35:2::1;::::0;9723:18:5;1647:35:2::1;;;;;;;1564:125;1502:187:::0;:::o;2272:1119::-;2446:10;-1:-1:-1;;;;;2446:25:2;;;2438:74;;;;-1:-1:-1;;;2438:74:2;;10087:2:5;2438:74:2;;;10069:21:5;10126:2;10106:18;;;10099:30;10165:34;10145:18;;;10138:62;-1:-1:-1;;;10216:18:5;;;10209:34;10260:19;;2438:74:2;9885:400:5;2438:74:2;-1:-1:-1;;;;;2531:24:2;;;;;;:11;:24;;;;;;;;:37;;;;;;;;;;;2530:38;2522:70;;;;-1:-1:-1;;;2522:70:2;;10492:2:5;2522:70:2;;;10474:21:5;10531:2;10511:18;;;10504:30;-1:-1:-1;;;10550:18:5;;;10543:49;10609:18;;2522:70:2;10290:343:5;2522:70:2;2627:59;;;-1:-1:-1;;;;;10858:32:5;;2627:59:2;;;10840:51:5;10907:18;;;10900:34;;;10950:18;;;10943:34;;;2602:12:2;;10813:18:5;;2627:59:2;;;-1:-1:-1;;2627:59:2;;;;;;;;;2617:70;;2627:59;2617:70;;;;2697:22;2722:24;;;:11;:24;;;;;;;2697:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2697:49:2;;;;;2764:40;;-1:-1:-1;;;2764:40:2;;2617:70;;-1:-1:-1;2764:27:2;;;;:40;;2697:49;;2617:70;;2798:5;;2764:40;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2756:85;;;;-1:-1:-1;;;2756:85:2;;11978:2:5;2756:85:2;;;11960:21:5;;;11997:18;;;11990:30;12056:34;12036:18;;;12029:62;12108:18;;2756:85:2;11776:356:5;2756:85:2;-1:-1:-1;;;;;2851:24:2;;;;;;:11;:24;;;;;;;;:37;;;;;;;;:44;;-1:-1:-1;;2851:44:2;2891:4;2851:44;;;:24;;;2975:83;2876:11;3010;3023:16;3041;2975:21;:83::i;:::-;2906:152;;;;;;;;3076:5;3068:42;;;;-1:-1:-1;;;3068:42:2;;12339:2:5;3068:42:2;;;12321:21:5;12378:2;12358:18;;;12351:30;12417:26;12397:18;;;12390:54;12461:18;;3068:42:2;12137:348:5;3068:42:2;3158:182;;;;;;;;3179:10;3158:182;;;;3203:10;3158:182;;;;3227:9;3158:182;;;;3268:11;3250:15;:29;;;;:::i;:::-;3158:182;;;;3293:14;3158:182;;;;3321:9;3158:182;;;3121:8;:21;3130:11;-1:-1:-1;;;;;3121:21:2;-1:-1:-1;;;;;3121:21:2;;;;;;;;;;;;:34;3143:11;3121:34;;;;;;;;;;;:219;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3350:34;3359:11;3372;3350:8;:34::i;:::-;2428:963;;;;;;2272:1119;;;;;;:::o;14:173:5:-;82:20;;-1:-1:-1;;;;;131:31:5;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;373:9;360:23;350:33;;402:38;436:2;425:9;421:18;402:38;:::i;:::-;392:48;;192:254;;;;;:::o;451:529::-;555:6;563;571;579;587;595;648:3;636:9;627:7;623:23;619:33;616:53;;;665:1;662;655:12;616:53;701:9;688:23;678:33;;758:2;747:9;743:18;730:32;720:42;;809:2;798:9;794:18;781:32;771:42;;860:2;849:9;845:18;832:32;822:42;;911:3;900:9;896:19;883:33;873:43;;935:39;969:3;958:9;954:19;935:39;:::i;:::-;925:49;;451:529;;;;;;;;:::o;1167:385::-;1253:6;1261;1269;1277;1330:3;1318:9;1309:7;1305:23;1301:33;1298:53;;;1347:1;1344;1337:12;1298:53;-1:-1:-1;;1370:23:5;;;1440:2;1425:18;;1412:32;;-1:-1:-1;1491:2:5;1476:18;;1463:32;;1542:2;1527:18;1514:32;;-1:-1:-1;1167:385:5;-1:-1:-1;1167:385:5:o;1963:180::-;2022:6;2075:2;2063:9;2054:7;2050:23;2046:32;2043:52;;;2091:1;2088;2081:12;2043:52;-1:-1:-1;2114:23:5;;1963:180;-1:-1:-1;1963:180:5:o;2714:254::-;2782:6;2790;2843:2;2831:9;2822:7;2818:23;2814:32;2811:52;;;2859:1;2856;2849:12;2811:52;2882:29;2901:9;2882:29;:::i;:::-;2872:39;2958:2;2943:18;;;;2930:32;;-1:-1:-1;;;2714:254:5:o;3913:186::-;3972:6;4025:2;4013:9;4004:7;4000:23;3996:32;3993:52;;;4041:1;4038;4031:12;3993:52;4064:29;4083:9;4064:29;:::i;:::-;4054:39;3913:186;-1:-1:-1;;;3913:186:5:o;4104:127::-;4165:10;4160:3;4156:20;4153:1;4146:31;4196:4;4193:1;4186:15;4220:4;4217:1;4210:15;4236:1464;4365:6;4373;4381;4389;4397;4405;4458:3;4446:9;4437:7;4433:23;4429:33;4426:53;;;4475:1;4472;4465:12;4426:53;4511:9;4498:23;4488:33;;4540:2;4561:38;4595:2;4584:9;4580:18;4561:38;:::i;:::-;4551:48;;4646:2;4635:9;4631:18;4618:32;4608:42;;4697:2;4686:9;4682:18;4669:32;4659:42;;4748:3;4737:9;4733:19;4720:33;4710:43;;4804:3;4793:9;4789:19;4776:33;4828:18;4869:2;4861:6;4858:14;4855:34;;;4885:1;4882;4875:12;4855:34;4923:6;4912:9;4908:22;4898:32;;4968:7;4961:4;4957:2;4953:13;4949:27;4939:55;;4990:1;4987;4980:12;4939:55;5026:2;5013:16;5048:2;5044;5041:10;5038:36;;;5054:18;;:::i;:::-;5100:2;5097:1;5093:10;5132:2;5126:9;5195:2;5191:7;5186:2;5182;5178:11;5174:25;5166:6;5162:38;5250:6;5238:10;5235:22;5230:2;5218:10;5215:18;5212:46;5209:72;;;5261:18;;:::i;:::-;5297:2;5290:22;5347:18;;;5381:15;;;;-1:-1:-1;5423:11:5;;;5419:20;;;5451:19;;;5448:39;;;5483:1;5480;5473:12;5448:39;5507:11;;;;5527:142;5543:6;5538:3;5535:15;5527:142;;;5609:17;;5597:30;;5560:12;;;;5647;;;;5527:142;;;5688:6;5678:16;;;;;;;;4236:1464;;;;;;;;:::o;6467:127::-;6528:10;6523:3;6519:20;6516:1;6509:31;6559:4;6556:1;6549:15;6583:4;6580:1;6573:15;6599:125;6639:4;6667:1;6664;6661:8;6658:34;;;6672:18;;:::i;:::-;-1:-1:-1;6709:9:5;;6599:125::o;6729:168::-;6769:7;6835:1;6831;6827:6;6823:14;6820:1;6817:21;6812:1;6805:9;6798:17;6794:45;6791:71;;;6842:18;;:::i;:::-;-1:-1:-1;6882:9:5;;6729:168::o;7181:277::-;7248:6;7301:2;7289:9;7280:7;7276:23;7272:32;7269:52;;;7317:1;7314;7307:12;7269:52;7349:9;7343:16;7402:5;7395:13;7388:21;7381:5;7378:32;7368:60;;7424:1;7421;7414:12;8828:135;8867:3;-1:-1:-1;;8888:17:5;;8885:43;;;8908:18;;:::i;:::-;-1:-1:-1;8955:1:5;8944:13;;8828:135::o;9221:217::-;9261:1;9287;9277:132;;9331:10;9326:3;9322:20;9319:1;9312:31;9366:4;9363:1;9356:15;9394:4;9391:1;9384:15;9277:132;-1:-1:-1;9423:9:5;;9221:217::o;9443:128::-;9483:3;9514:1;9510:6;9507:1;9504:13;9501:39;;;9520:18;;:::i;:::-;-1:-1:-1;9556:9:5;;9443:128::o;10988:783::-;11194:4;11242:2;11231:9;11227:18;11272:6;11261:9;11254:25;11298:2;11336:6;11331:2;11320:9;11316:18;11309:34;11379:2;11374;11363:9;11359:18;11352:30;11402:6;11437;11431:13;11468:6;11460;11453:22;11506:3;11495:9;11491:19;11484:26;;11545:2;11537:6;11533:15;11519:29;;11566:1;11576:169;11590:6;11587:1;11584:13;11576:169;;;11651:13;;11639:26;;11720:15;;;;11685:12;;;;11612:1;11605:9;11576:169;;;-1:-1:-1;11762:3:5;;10988:783;-1:-1:-1;;;;;;;;10988:783:5:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    128,
    5564
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x85D88CB1 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xAAF5EB68 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xAAF5EB68 EQ PUSH2 0x248 JUMPI DUP1 PUSH4 0xC26CB54F EQ PUSH2 0x252 JUMPI DUP1 PUSH4 0xD4A22BDE EQ PUSH2 0x2CA JUMPI DUP1 PUSH4 0xF287AD04 EQ PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x85D88CB1 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x86BB8249 EQ PUSH2 0x1DF JUMPI DUP1 PUSH4 0x88A8D602 EQ PUSH2 0x21D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xF714CE EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x997EAA1 EQ PUSH2 0xE8 JUMPI DUP1 PUSH4 0x18369A2A EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0x2811E253 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x390B7C66 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x6FB6EC41 EQ PUSH2 0x128 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE6 PUSH2 0xE1 CALLDATASIZE PUSH1 0x4 PUSH2 0xD69 JUMP JUMPDEST PUSH2 0x2F0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE6 PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xD95 JUMP JUMPDEST PUSH2 0x576 JUMP JUMPDEST PUSH2 0x104 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0x104 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x13B PUSH2 0x136 CALLDATASIZE PUSH1 0x4 PUSH2 0xDE6 JUMP JUMPDEST PUSH2 0x768 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 ISZERO ISZERO DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x1A9 PUSH2 0x16B CALLDATASIZE PUSH1 0x4 PUSH2 0xE18 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD SWAP5 DUP5 ADD SLOAD PUSH1 0x5 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x20D PUSH2 0x1ED CALLDATASIZE PUSH1 0x4 PUSH2 0xE31 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x230 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x104 PUSH3 0xF4240 DUP2 JUMP JUMPDEST PUSH2 0x29D PUSH2 0x260 CALLDATASIZE PUSH1 0x4 PUSH2 0xE31 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 DUP6 ADD SLOAD SWAP5 SWAP1 SWAP6 ADD SLOAD SWAP3 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0xE6 PUSH2 0x2D8 CALLDATASIZE PUSH1 0x4 PUSH2 0xE5B JUMP JUMPDEST PUSH2 0x905 JUMP JUMPDEST PUSH2 0xE6 PUSH2 0x2EB CALLDATASIZE PUSH1 0x4 PUSH2 0xE93 JUMP JUMPDEST PUSH2 0x9C0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x378 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75206D75737420696E697469616C697A6520796F7572206163636F756E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x103334B939BA17 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP8 DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 PUSH1 0x4 DUP1 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xC0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP1 DUP4 ADD SLOAD SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP5 ADD MSTORE SWAP5 DUP6 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP4 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP4 AND PUSH1 0xA0 DUP3 ADD MSTORE SWAP2 DUP2 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x43D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F20636F696E73206C65667420746F20776974686472617700000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x455 JUMPI POP PUSH1 0x1 DUP3 ADD SLOAD PUSH2 0x476 JUMP JUMPDEST PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x5 DUP5 ADD SLOAD PUSH2 0x469 SWAP1 TIMESTAMP PUSH2 0xF9F JUMP JUMPDEST PUSH2 0x473 SWAP2 SWAP1 PUSH2 0xFB6 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x48A SWAP2 SWAP1 PUSH2 0xF9F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP TIMESTAMP PUSH1 0x5 DUP5 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4F9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x51D SWAP2 SWAP1 PUSH2 0xFD5 JUMP JUMPDEST POP DUP5 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x5FFB4B63DEC15BA26308386F1D5CA61843B29BA365511062A887D95AA27532D3 DUP4 DUP7 PUSH1 0x1 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x567 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x5D0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206D616E6167656D656E74206D61792063616C6C2074686973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36F JUMP JUMPDEST PUSH1 0x64 DUP3 LT PUSH2 0x614 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x706374557046726F6E74203E3D2031303 PUSH1 0x7C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36F JUMP JUMPDEST DUP3 DUP5 LT PUSH2 0x673 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D696E456E6454696D65206D757374206265206C657373207468616E206D6178 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x456E6454696D65 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x36F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH1 0x4 PUSH1 0x0 DUP1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x6BB SWAP1 PUSH2 0xFF7 JUMP JUMPDEST SWAP2 DUP3 SWAP1 SSTORE POP DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP5 MLOAD DUP2 SSTORE DUP5 DUP5 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE DUP5 DUP4 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0xA0 SWAP1 SWAP5 ADD MLOAD PUSH1 0x5 SWAP1 SWAP5 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND OR SWAP1 SSTORE SLOAD DUP2 MLOAD DUP11 DUP2 MSTORE SWAP3 DUP4 ADD DUP10 SWAP1 MSTORE SWAP3 DUP5 AND SWAP3 SWAP2 PUSH32 0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 SLOAD DUP9 GT ISZERO PUSH2 0x789 JUMPI POP PUSH1 0x0 SWAP3 POP DUP3 SWAP2 POP DUP2 SWAP1 POP DUP1 PUSH2 0x8FA JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0xC0 DUP2 ADD DUP6 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP4 ADD MSTORE DUP9 GT DUP1 PUSH2 0x7F8 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD DUP9 LT JUMPDEST ISZERO PUSH2 0x811 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP POP PUSH2 0x8FA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 ADD MLOAD DUP10 EQ ISZERO PUSH2 0x826 JUMPI POP DUP6 PUSH2 0x897 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0x83C SWAP2 SWAP1 PUSH2 0xF9F JUMP JUMPDEST PUSH3 0xF4240 PUSH2 0x84A DUP12 DUP12 PUSH2 0xF9F JUMP JUMPDEST PUSH2 0x854 SWAP2 SWAP1 PUSH2 0xFB6 JUMP JUMPDEST PUSH2 0x85E SWAP2 SWAP1 PUSH2 0x1012 JUMP JUMPDEST SWAP1 POP DUP9 PUSH3 0xF4240 DUP5 PUSH1 0x40 ADD MLOAD DUP13 PUSH2 0x875 SWAP2 SWAP1 PUSH2 0xF9F JUMP JUMPDEST PUSH2 0x87F SWAP1 DUP5 PUSH2 0xFB6 JUMP JUMPDEST PUSH2 0x889 SWAP2 SWAP1 PUSH2 0x1012 JUMP JUMPDEST PUSH2 0x893 SWAP2 SWAP1 PUSH2 0x1034 JUMP JUMPDEST SWAP2 POP POP JUMPDEST PUSH1 0x0 PUSH2 0x8A4 DUP11 PUSH1 0x64 PUSH2 0xFB6 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x8B4 SWAP1 PUSH1 0x64 PUSH2 0xF9F JUMP JUMPDEST PUSH2 0x8BE SWAP1 DUP5 PUSH2 0xFB6 JUMP JUMPDEST PUSH2 0x8C8 SWAP2 SWAP1 PUSH2 0x1012 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8D6 DUP3 DUP5 PUSH2 0x1012 JUMP JUMPDEST PUSH2 0x8E0 DUP13 TIMESTAMP PUSH2 0x1034 JUMP JUMPDEST PUSH2 0x8EA SWAP2 SWAP1 PUSH2 0xF9F JUMP JUMPDEST PUSH1 0x1 SWAP9 POP SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP1 SWAP3 POP POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x95F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206D616E6167656D656E74206D61792063616C6C2074686973000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36F JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH32 0x8CAF0A9DF2E1DA9BECB3EBFB8A56E83121A5B3F6C5622F715A939EC29C54DFDF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ PUSH2 0xA24 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x43616E206F6E6C7920696E697469616C697A6520796F7572206F776E20747261 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x6E636865 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x36F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xA8E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x105B1C9958591E481A5B9A5D1A585B1A5E9959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x4 DUP1 DUP5 MSTORE SWAP1 DUP5 SWAP1 KECCAK256 PUSH1 0xC0 DUP7 ADD DUP6 MSTORE DUP1 SLOAD DUP1 DUP8 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP5 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP2 ADD SLOAD DUP7 DUP7 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP8 ADD MSTORE DUP1 DUP3 ADD SLOAD PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0x5 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP7 ADD MSTORE SWAP3 MLOAD PUSH4 0x2769CD1F PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP5 POP PUSH20 0x0 SWAP3 PUSH4 0x9DA7347C SWAP3 PUSH2 0xB5A SWAP3 SWAP1 SWAP2 DUP8 SWAP2 DUP10 SWAP2 ADD PUSH2 0x104C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB72 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xB86 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBAA SWAP2 SWAP1 PUSH2 0xFD5 JUMP JUMPDEST PUSH2 0xBF6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652070726F6F6620636F756C64206E6F742062652076657269666965642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 DUP1 DUP1 PUSH2 0xC33 DUP13 DUP12 DUP12 DUP12 PUSH2 0x768 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP4 PUSH2 0xC88 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642076657374696E67207363686564756C650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x36F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD DUP12 TIMESTAMP PUSH2 0xCB1 SWAP2 SWAP1 PUSH2 0x1034 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP PUSH1 0x5 PUSH1 0x0 DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP15 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE SWAP1 POP POP PUSH2 0xD3F DUP13 DUP13 PUSH2 0x2F0 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xD8C PUSH1 0x20 DUP5 ADD PUSH2 0xD4D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xDAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0xDDA PUSH1 0xA0 DUP9 ADD PUSH2 0xD4D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xDFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE4D DUP4 PUSH2 0xD4D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE76 DUP3 PUSH2 0xD4D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xEAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 PUSH2 0xEBD DUP2 DUP10 ADD PUSH2 0xD4D JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xEEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP11 ADD SWAP2 POP DUP11 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xF03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xF15 JUMPI PUSH2 0xF15 PUSH2 0xE7D JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xF3A JUMPI PUSH2 0xF3A PUSH2 0xE7D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP14 DUP4 GT ISZERO PUSH2 0xF58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xF76 JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xF5D JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xFB1 JUMPI PUSH2 0xFB1 PUSH2 0xF89 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xFD0 JUMPI PUSH2 0xFD0 PUSH2 0xF89 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x100B JUMPI PUSH2 0x100B PUSH2 0xF89 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x102F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1047 JUMPI PUSH2 0x1047 PUSH2 0xF89 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP6 DUP4 MSTORE PUSH1 0x20 DUP6 DUP2 DUP6 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 POP DUP3 DUP8 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1093 JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1077 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xBE DELEGATECALL CREATE PUSH7 0xFBB3ECB3AD105C 0x2C MOD 0x25 MSTORE PUSH28 0xA744D20178CFFE6696ABACABB47BAC64736F6C634300080900330000 ",
  "pcMap": {
    "0": {
      "offset": [
        128,
        5564
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "6": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "7": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "8": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "12": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "REVERT",
      "path": "2"
    },
    "16": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "17": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "POP",
      "path": "2"
    },
    "18": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "21": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "LT",
      "path": "2"
    },
    "22": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCE"
    },
    "25": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "26": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "29": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "SHR",
      "path": "2"
    },
    "32": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "33": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x85D88CB1"
    },
    "38": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "GT",
      "path": "2"
    },
    "39": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8C"
    },
    "42": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "43": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "44": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xAAF5EB68"
    },
    "49": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "GT",
      "path": "2"
    },
    "50": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x66"
    },
    "53": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "54": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "55": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xAAF5EB68"
    },
    "60": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "EQ",
      "path": "2"
    },
    "61": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x248"
    },
    "64": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "65": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "66": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xC26CB54F"
    },
    "71": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "EQ",
      "path": "2"
    },
    "72": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x252"
    },
    "75": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "76": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "77": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xD4A22BDE"
    },
    "82": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "EQ",
      "path": "2"
    },
    "83": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2CA"
    },
    "86": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "87": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "88": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xF287AD04"
    },
    "93": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "EQ",
      "path": "2"
    },
    "94": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2DD"
    },
    "97": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "98": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "100": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "101": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "REVERT",
      "path": "2"
    },
    "102": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "103": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "104": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x85D88CB1"
    },
    "109": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "EQ",
      "path": "2"
    },
    "110": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x15D"
    },
    "113": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "114": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "115": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x86BB8249"
    },
    "120": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "EQ",
      "path": "2"
    },
    "121": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1DF"
    },
    "124": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "125": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "126": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x88A8D602"
    },
    "131": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "EQ",
      "path": "2"
    },
    "132": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x21D"
    },
    "135": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "136": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "138": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "139": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "REVERT",
      "path": "2"
    },
    "140": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "141": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "142": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0xF714CE"
    },
    "146": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "EQ",
      "path": "2"
    },
    "147": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD3"
    },
    "150": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "151": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "152": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x997EAA1"
    },
    "157": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "EQ",
      "path": "2"
    },
    "158": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE8"
    },
    "161": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "162": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "163": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x18369A2A"
    },
    "168": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "EQ",
      "path": "2"
    },
    "169": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFB"
    },
    "172": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "173": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "174": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x2811E253"
    },
    "179": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "EQ",
      "path": "2"
    },
    "180": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x117"
    },
    "183": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "184": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "185": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x390B7C66"
    },
    "190": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "EQ",
      "path": "2"
    },
    "191": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x11F"
    },
    "194": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "195": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "196": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x6FB6EC41"
    },
    "201": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "EQ",
      "path": "2"
    },
    "202": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x128"
    },
    "205": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "206": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "207": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "209": {
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "DUP1",
      "path": "2"
    },
    "210": {
      "first_revert": true,
      "fn": null,
      "offset": [
        128,
        5564
      ],
      "op": "REVERT",
      "path": "2"
    },
    "211": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3397,
        4500
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "212": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3397,
        4500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE6"
    },
    "215": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3397,
        4500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE1"
    },
    "218": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3397,
        4500
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "219": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3397,
        4500
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "221": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3397,
        4500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD69"
    },
    "224": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        3397,
        4500
      ],
      "op": "JUMP",
      "path": "2"
    },
    "225": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3397,
        4500
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "226": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3397,
        4500
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2F0"
    },
    "229": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        3397,
        4500
      ],
      "op": "JUMP",
      "path": "2"
    },
    "230": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3397,
        4500
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "231": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3397,
        4500
      ],
      "op": "STOP",
      "path": "2"
    },
    "232": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "233": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE6"
    },
    "236": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF6"
    },
    "239": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "240": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "242": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD95"
    },
    "245": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        1695,
        2266
      ],
      "op": "JUMP",
      "path": "2"
    },
    "246": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "247": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x576"
    },
    "250": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        1695,
        2266
      ],
      "op": "JUMP",
      "path": "2"
    },
    "251": {
      "offset": [
        223,
        249
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "252": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x104"
    },
    "255": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "257": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "258": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "DUP2",
      "path": "2"
    },
    "259": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "JUMP",
      "path": "2"
    },
    "260": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "261": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "263": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "264": {
      "op": "SWAP1"
    },
    "265": {
      "op": "DUP2"
    },
    "266": {
      "op": "MSTORE"
    },
    "267": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "269": {
      "op": "ADD"
    },
    "270": {
      "offset": [
        223,
        249
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "271": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "273": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "274": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "DUP1",
      "path": "2"
    },
    "275": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "276": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "SUB",
      "path": "2"
    },
    "277": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "278": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        223,
        249
      ],
      "op": "RETURN",
      "path": "2"
    },
    "279": {
      "offset": [
        923,
        963
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "280": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        923,
        963
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x104"
    },
    "283": {
      "offset": [
        962,
        963
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "285": {
      "offset": [
        923,
        963
      ],
      "op": "DUP2",
      "path": "2"
    },
    "286": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        923,
        963
      ],
      "op": "JUMP",
      "path": "2"
    },
    "287": {
      "offset": [
        192,
        216
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "288": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        192,
        216
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x104"
    },
    "291": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        192,
        216
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "293": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        192,
        216
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "294": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        192,
        216
      ],
      "op": "DUP2",
      "path": "2"
    },
    "295": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        192,
        216
      ],
      "op": "JUMP",
      "path": "2"
    },
    "296": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "297": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x13B"
    },
    "300": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x136"
    },
    "303": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "304": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "306": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xDE6"
    },
    "309": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4506,
        5561
      ],
      "op": "JUMP",
      "path": "2"
    },
    "310": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "311": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x768"
    },
    "314": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4506,
        5561
      ],
      "op": "JUMP",
      "path": "2"
    },
    "315": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "316": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "318": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "DUP1",
      "path": "2"
    },
    "319": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "320": {
      "op": "SWAP5"
    },
    "321": {
      "op": "ISZERO"
    },
    "322": {
      "op": "ISZERO"
    },
    "323": {
      "op": "DUP6"
    },
    "324": {
      "op": "MSTORE"
    },
    "325": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "327": {
      "op": "DUP6"
    },
    "328": {
      "op": "ADD"
    },
    "329": {
      "op": "SWAP4"
    },
    "330": {
      "op": "SWAP1"
    },
    "331": {
      "op": "SWAP4"
    },
    "332": {
      "op": "MSTORE"
    },
    "333": {
      "op": "SWAP2"
    },
    "334": {
      "op": "DUP4"
    },
    "335": {
      "op": "ADD"
    },
    "336": {
      "op": "MSTORE"
    },
    "337": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "339": {
      "op": "DUP3"
    },
    "340": {
      "op": "ADD"
    },
    "341": {
      "op": "MSTORE"
    },
    "342": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "344": {
      "op": "ADD"
    },
    "345": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10E"
    },
    "348": {
      "op": "JUMP"
    },
    "349": {
      "offset": [
        755,
        802
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "350": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A9"
    },
    "353": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x16B"
    },
    "356": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "357": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "359": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE18"
    },
    "362": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        755,
        802
      ],
      "op": "JUMP",
      "path": "2"
    },
    "363": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "364": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "366": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "368": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "DUP2",
      "path": "2"
    },
    "369": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "370": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "371": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "373": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "374": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "DUP3",
      "path": "2"
    },
    "375": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "376": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "378": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "379": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "380": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "381": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "DUP1",
      "path": "2"
    },
    "382": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "383": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "385": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "DUP3",
      "path": "2"
    },
    "386": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "ADD",
      "path": "2"
    },
    "387": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "388": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "390": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "DUP4",
      "path": "2"
    },
    "391": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "ADD",
      "path": "2"
    },
    "392": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "393": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "395": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "DUP5",
      "path": "2"
    },
    "396": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "ADD",
      "path": "2"
    },
    "397": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "398": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "399": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "DUP5",
      "path": "2"
    },
    "400": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "ADD",
      "path": "2"
    },
    "401": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "402": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "404": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "405": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "406": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "ADD",
      "path": "2"
    },
    "407": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "408": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "409": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "410": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "411": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "412": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "413": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "414": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "416": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "418": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "420": {
      "op": "SHL"
    },
    "421": {
      "op": "SUB"
    },
    "422": {
      "offset": [
        755,
        802
      ],
      "op": "AND",
      "path": "2"
    },
    "423": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "DUP7",
      "path": "2"
    },
    "424": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "JUMP",
      "path": "2"
    },
    "425": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "426": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "428": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "DUP1",
      "path": "2"
    },
    "429": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        755,
        802
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "430": {
      "op": "SWAP7"
    },
    "431": {
      "op": "DUP8"
    },
    "432": {
      "op": "MSTORE"
    },
    "433": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "435": {
      "op": "DUP8"
    },
    "436": {
      "op": "ADD"
    },
    "437": {
      "op": "SWAP6"
    },
    "438": {
      "op": "SWAP1"
    },
    "439": {
      "op": "SWAP6"
    },
    "440": {
      "op": "MSTORE"
    },
    "441": {
      "op": "SWAP4"
    },
    "442": {
      "op": "DUP6"
    },
    "443": {
      "op": "ADD"
    },
    "444": {
      "op": "SWAP3"
    },
    "445": {
      "op": "SWAP1"
    },
    "446": {
      "op": "SWAP3"
    },
    "447": {
      "op": "MSTORE"
    },
    "448": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "450": {
      "op": "DUP5"
    },
    "451": {
      "op": "ADD"
    },
    "452": {
      "op": "MSTORE"
    },
    "453": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "455": {
      "op": "DUP4"
    },
    "456": {
      "op": "ADD"
    },
    "457": {
      "op": "MSTORE"
    },
    "458": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "460": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "462": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "464": {
      "op": "SHL"
    },
    "465": {
      "op": "SUB"
    },
    "466": {
      "op": "AND"
    },
    "467": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "469": {
      "op": "DUP3"
    },
    "470": {
      "op": "ADD"
    },
    "471": {
      "op": "MSTORE"
    },
    "472": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "474": {
      "op": "ADD"
    },
    "475": {
      "offset": [
        755,
        802
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10E"
    },
    "478": {
      "op": "JUMP"
    },
    "479": {
      "offset": [
        687,
        749
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "480": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x20D"
    },
    "483": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1ED"
    },
    "486": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "487": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "489": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE31"
    },
    "492": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        687,
        749
      ],
      "op": "JUMP",
      "path": "2"
    },
    "493": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "494": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "496": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "498": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "499": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "DUP2",
      "path": "2"
    },
    "500": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "501": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "503": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "504": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "DUP4",
      "path": "2"
    },
    "505": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "506": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "508": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "DUP1",
      "path": "2"
    },
    "509": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "DUP5",
      "path": "2"
    },
    "510": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "511": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "512": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "513": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "514": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "515": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "DUP3",
      "path": "2"
    },
    "516": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "517": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "518": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "519": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "520": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "522": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "AND",
      "path": "2"
    },
    "523": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "DUP2",
      "path": "2"
    },
    "524": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "JUMP",
      "path": "2"
    },
    "525": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "526": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "528": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        687,
        749
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "529": {
      "op": "SWAP1"
    },
    "530": {
      "op": "ISZERO"
    },
    "531": {
      "op": "ISZERO"
    },
    "532": {
      "op": "DUP2"
    },
    "533": {
      "op": "MSTORE"
    },
    "534": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "536": {
      "op": "ADD"
    },
    "537": {
      "offset": [
        687,
        749
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10E"
    },
    "540": {
      "op": "JUMP"
    },
    "541": {
      "offset": [
        255,
        280
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "542": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        255,
        280
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "544": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        255,
        280
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "545": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        255,
        280
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x230"
    },
    "548": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        255,
        280
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "549": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "551": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "553": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "555": {
      "op": "SHL"
    },
    "556": {
      "op": "SUB"
    },
    "557": {
      "offset": [
        255,
        280
      ],
      "op": "AND",
      "path": "2"
    },
    "558": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        255,
        280
      ],
      "op": "DUP2",
      "path": "2"
    },
    "559": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        255,
        280
      ],
      "op": "JUMP",
      "path": "2"
    },
    "560": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        255,
        280
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "561": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        255,
        280
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "563": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        255,
        280
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "564": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "566": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "568": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "570": {
      "op": "SHL"
    },
    "571": {
      "op": "SUB"
    },
    "572": {
      "op": "SWAP1"
    },
    "573": {
      "op": "SWAP2"
    },
    "574": {
      "op": "AND"
    },
    "575": {
      "op": "DUP2"
    },
    "576": {
      "op": "MSTORE"
    },
    "577": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "579": {
      "op": "ADD"
    },
    "580": {
      "offset": [
        255,
        280
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10E"
    },
    "583": {
      "op": "JUMP"
    },
    "584": {
      "offset": [
        877,
        917
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "585": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        877,
        917
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x104"
    },
    "588": {
      "offset": [
        910,
        917
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0xF4240"
    },
    "592": {
      "offset": [
        877,
        917
      ],
      "op": "DUP2",
      "path": "2"
    },
    "593": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        877,
        917
      ],
      "op": "JUMP",
      "path": "2"
    },
    "594": {
      "offset": [
        808,
        870
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "595": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x29D"
    },
    "598": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x260"
    },
    "601": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "602": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "604": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE31"
    },
    "607": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        808,
        870
      ],
      "op": "JUMP",
      "path": "2"
    },
    "608": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "609": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "611": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "613": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "DUP2",
      "path": "2"
    },
    "614": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "DUP2",
      "path": "2"
    },
    "615": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "616": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "618": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "619": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "DUP5",
      "path": "2"
    },
    "620": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "621": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "623": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "DUP1",
      "path": "2"
    },
    "624": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "DUP6",
      "path": "2"
    },
    "625": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "626": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "627": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "628": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "629": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "630": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "DUP4",
      "path": "2"
    },
    "631": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "632": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "633": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "634": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "DUP1",
      "path": "2"
    },
    "635": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "636": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "638": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "DUP3",
      "path": "2"
    },
    "639": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "ADD",
      "path": "2"
    },
    "640": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "641": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "643": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "DUP4",
      "path": "2"
    },
    "644": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "ADD",
      "path": "2"
    },
    "645": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "646": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "648": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "DUP5",
      "path": "2"
    },
    "649": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "ADD",
      "path": "2"
    },
    "650": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "651": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "653": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "DUP6",
      "path": "2"
    },
    "654": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "ADD",
      "path": "2"
    },
    "655": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "656": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "657": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "658": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "659": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "ADD",
      "path": "2"
    },
    "660": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "661": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "662": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "663": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "664": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "665": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "666": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "667": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "DUP7",
      "path": "2"
    },
    "668": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "JUMP",
      "path": "2"
    },
    "669": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "670": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "672": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "DUP1",
      "path": "2"
    },
    "673": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        808,
        870
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "674": {
      "op": "SWAP7"
    },
    "675": {
      "op": "DUP8"
    },
    "676": {
      "op": "MSTORE"
    },
    "677": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "679": {
      "op": "DUP8"
    },
    "680": {
      "op": "ADD"
    },
    "681": {
      "op": "SWAP6"
    },
    "682": {
      "op": "SWAP1"
    },
    "683": {
      "op": "SWAP6"
    },
    "684": {
      "op": "MSTORE"
    },
    "685": {
      "op": "SWAP4"
    },
    "686": {
      "op": "DUP6"
    },
    "687": {
      "op": "ADD"
    },
    "688": {
      "op": "SWAP3"
    },
    "689": {
      "op": "SWAP1"
    },
    "690": {
      "op": "SWAP3"
    },
    "691": {
      "op": "MSTORE"
    },
    "692": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "694": {
      "op": "DUP5"
    },
    "695": {
      "op": "ADD"
    },
    "696": {
      "op": "MSTORE"
    },
    "697": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "699": {
      "op": "DUP4"
    },
    "700": {
      "op": "ADD"
    },
    "701": {
      "op": "MSTORE"
    },
    "702": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "704": {
      "op": "DUP3"
    },
    "705": {
      "op": "ADD"
    },
    "706": {
      "op": "MSTORE"
    },
    "707": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "709": {
      "op": "ADD"
    },
    "710": {
      "offset": [
        808,
        870
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10E"
    },
    "713": {
      "op": "JUMP"
    },
    "714": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1502,
        1689
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "715": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1502,
        1689
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE6"
    },
    "718": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1502,
        1689
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2D8"
    },
    "721": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1502,
        1689
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "722": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1502,
        1689
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "724": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1502,
        1689
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE5B"
    },
    "727": {
      "fn": "MerkleResistor.setManagement",
      "jump": "i",
      "offset": [
        1502,
        1689
      ],
      "op": "JUMP",
      "path": "2"
    },
    "728": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1502,
        1689
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "729": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1502,
        1689
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x905"
    },
    "732": {
      "fn": "MerkleResistor.setManagement",
      "jump": "i",
      "offset": [
        1502,
        1689
      ],
      "op": "JUMP",
      "path": "2"
    },
    "733": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "734": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE6"
    },
    "737": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2EB"
    },
    "740": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "741": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "743": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE93"
    },
    "746": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        2272,
        3391
      ],
      "op": "JUMP",
      "path": "2"
    },
    "747": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "748": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9C0"
    },
    "751": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        2272,
        3391
      ],
      "op": "JUMP",
      "path": "2"
    },
    "752": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3397,
        4500
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "753": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "755": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "757": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "759": {
      "op": "SHL"
    },
    "760": {
      "op": "SUB"
    },
    "761": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3503
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 0
    },
    "762": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3503
      ],
      "op": "AND",
      "path": "2"
    },
    "763": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3503
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "765": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3503
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "766": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3503
      ],
      "op": "DUP2",
      "path": "2"
    },
    "767": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3503
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "768": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3490
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "770": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3503
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "772": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3503
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "773": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3503
      ],
      "op": "DUP2",
      "path": "2"
    },
    "774": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3503
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "775": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3503
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "777": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3503
      ],
      "op": "DUP1",
      "path": "2"
    },
    "778": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3503
      ],
      "op": "DUP4",
      "path": "2"
    },
    "779": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3503
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "780": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3516
      ],
      "op": "DUP6",
      "path": "2"
    },
    "781": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3516
      ],
      "op": "DUP5",
      "path": "2"
    },
    "782": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3516
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "783": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3516
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "784": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3516
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "785": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3516
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "786": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3516
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "787": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3516
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "788": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3516
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "789": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3516
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "791": {
      "branch": 26,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3479,
        3516
      ],
      "op": "AND",
      "path": "2"
    },
    "792": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x378"
    },
    "795": {
      "branch": 26,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "796": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "798": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "799": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "803": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "805": {
      "op": "SHL"
    },
    "806": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "DUP2",
      "path": "2"
    },
    "807": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "808": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "810": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "812": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "DUP3",
      "path": "2"
    },
    "813": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "ADD",
      "path": "2"
    },
    "814": {
      "op": "MSTORE"
    },
    "815": {
      "op": "PUSH1",
      "value": "0x27"
    },
    "817": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "819": {
      "op": "DUP3"
    },
    "820": {
      "op": "ADD"
    },
    "821": {
      "op": "MSTORE"
    },
    "822": {
      "op": "PUSH32",
      "value": "0x596F75206D75737420696E697469616C697A6520796F7572206163636F756E74"
    },
    "855": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "857": {
      "op": "DUP3"
    },
    "858": {
      "op": "ADD"
    },
    "859": {
      "op": "MSTORE"
    },
    "860": {
      "op": "PUSH7",
      "value": "0x103334B939BA17"
    },
    "868": {
      "op": "PUSH1",
      "value": "0xC9"
    },
    "870": {
      "op": "SHL"
    },
    "871": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "873": {
      "op": "DUP3"
    },
    "874": {
      "op": "ADD"
    },
    "875": {
      "op": "MSTORE"
    },
    "876": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "878": {
      "op": "ADD"
    },
    "879": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "880": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "882": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "883": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "DUP1",
      "path": "2"
    },
    "884": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "885": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "SUB",
      "path": "2"
    },
    "886": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "887": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "2"
    },
    "888": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3471,
        3560
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "889": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "891": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "893": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "895": {
      "op": "SHL"
    },
    "896": {
      "op": "SUB"
    },
    "897": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3617
      ],
      "op": "DUP1",
      "path": "2"
    },
    "898": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3617
      ],
      "op": "DUP3",
      "path": "2"
    },
    "899": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3617
      ],
      "op": "AND",
      "path": "2"
    },
    "900": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3570,
        3593
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "902": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3617
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "903": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3617
      ],
      "op": "DUP2",
      "path": "2"
    },
    "904": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3617
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "905": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3604
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "907": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3617
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "909": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3617
      ],
      "op": "DUP2",
      "path": "2"
    },
    "910": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3617
      ],
      "op": "DUP2",
      "path": "2"
    },
    "911": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3617
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "912": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3617
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "914": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3617
      ],
      "op": "DUP1",
      "path": "2"
    },
    "915": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3617
      ],
      "op": "DUP5",
      "path": "2"
    },
    "916": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3617
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "917": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3630
      ],
      "op": "DUP8",
      "path": "2"
    },
    "918": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3630
      ],
      "op": "DUP6",
      "path": "2"
    },
    "919": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3630
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "920": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3630
      ],
      "op": "DUP3",
      "path": "2"
    },
    "921": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3630
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "922": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3630
      ],
      "op": "DUP1",
      "path": "2"
    },
    "923": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3630
      ],
      "op": "DUP5",
      "path": "2"
    },
    "924": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3630
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "925": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3665,
        3676
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "927": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3665,
        3689
      ],
      "op": "DUP1",
      "path": "2"
    },
    "928": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3665,
        3689
      ],
      "op": "DUP5",
      "path": "2"
    },
    "929": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3665,
        3689
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "930": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3665,
        3689
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "931": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3665,
        3689
      ],
      "op": "DUP3",
      "path": "2"
    },
    "932": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3665,
        3689
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "933": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3665,
        3689
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "934": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP3",
      "path": "2"
    },
    "935": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "936": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC0"
    },
    "938": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP2",
      "path": "2"
    },
    "939": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "ADD",
      "path": "2"
    },
    "940": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP5",
      "path": "2"
    },
    "941": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "942": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP2",
      "path": "2"
    },
    "943": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "944": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP2",
      "path": "2"
    },
    "945": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "946": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "948": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP1",
      "path": "2"
    },
    "949": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP4",
      "path": "2"
    },
    "950": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "ADD",
      "path": "2"
    },
    "951": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "952": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "953": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP3",
      "path": "2"
    },
    "954": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "ADD",
      "path": "2"
    },
    "955": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "956": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "957": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "958": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "959": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "961": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP3",
      "path": "2"
    },
    "962": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "ADD",
      "path": "2"
    },
    "963": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "964": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "965": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP2",
      "path": "2"
    },
    "966": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "ADD",
      "path": "2"
    },
    "967": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "968": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "969": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "970": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "971": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "973": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP2",
      "path": "2"
    },
    "974": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "ADD",
      "path": "2"
    },
    "975": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "976": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "978": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP5",
      "path": "2"
    },
    "979": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "ADD",
      "path": "2"
    },
    "980": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "981": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "982": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP6",
      "path": "2"
    },
    "983": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "ADD",
      "path": "2"
    },
    "984": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "985": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "987": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP4",
      "path": "2"
    },
    "988": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "ADD",
      "path": "2"
    },
    "989": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "990": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "991": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "992": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "993": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "ADD",
      "path": "2"
    },
    "994": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "995": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "996": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "997": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "AND",
      "path": "2"
    },
    "998": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA0"
    },
    "1000": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1001": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "ADD",
      "path": "2"
    },
    "1002": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1003": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3707,
        3727
      ],
      "op": "SWAP2",
      "path": "2",
      "statement": 1
    },
    "1004": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3707,
        3727
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1005": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3707,
        3727
      ],
      "op": "ADD",
      "path": "2"
    },
    "1006": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3707,
        3727
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1007": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3630
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1008": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3596,
        3630
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1009": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3640,
        3689
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1010": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3699,
        3762
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x43D"
    },
    "1013": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3699,
        3762
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1014": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3699,
        3762
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1016": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3699,
        3762
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1017": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1021": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1023": {
      "op": "SHL"
    },
    "1024": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3699,
        3762
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1025": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3699,
        3762
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1026": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1028": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3699,
        3762
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1030": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3699,
        3762
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1031": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3699,
        3762
      ],
      "op": "ADD",
      "path": "2"
    },
    "1032": {
      "op": "MSTORE"
    },
    "1033": {
      "op": "PUSH1",
      "value": "0x19"
    },
    "1035": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1037": {
      "op": "DUP3"
    },
    "1038": {
      "op": "ADD"
    },
    "1039": {
      "op": "MSTORE"
    },
    "1040": {
      "op": "PUSH32",
      "value": "0x4E6F20636F696E73206C65667420746F20776974686472617700000000000000"
    },
    "1073": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1075": {
      "op": "DUP3"
    },
    "1076": {
      "op": "ADD"
    },
    "1077": {
      "op": "MSTORE"
    },
    "1078": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1080": {
      "op": "ADD"
    },
    "1081": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3699,
        3762
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x36F"
    },
    "1084": {
      "op": "JUMP"
    },
    "1085": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3699,
        3762
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1086": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3772,
        3794
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1088": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3903,
        3910
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1089": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3903,
        3918
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "1091": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3903,
        3918
      ],
      "op": "ADD",
      "path": "2"
    },
    "1092": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3903,
        3918
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1093": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3884,
        3899
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "1094": {
      "branch": 27,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3884,
        3918
      ],
      "op": "LT",
      "path": "2"
    },
    "1095": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3880,
        4149
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x455"
    },
    "1098": {
      "branch": 27,
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3880,
        4149
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1099": {
      "op": "POP"
    },
    "1100": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3954,
        3974
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 2,
      "value": "0x1"
    },
    "1102": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3954,
        3974
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1103": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3954,
        3974
      ],
      "op": "ADD",
      "path": "2"
    },
    "1104": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3954,
        3974
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1105": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3880,
        4149
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x476"
    },
    "1108": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3880,
        4149
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1109": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3880,
        4149
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1110": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4116,
        4138
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 3,
      "value": "0x4"
    },
    "1112": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4116,
        4138
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1113": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4116,
        4138
      ],
      "op": "ADD",
      "path": "2"
    },
    "1114": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4116,
        4138
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1115": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4086,
        4112
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "1117": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4086,
        4112
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1118": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4086,
        4112
      ],
      "op": "ADD",
      "path": "2"
    },
    "1119": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4086,
        4112
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1120": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4068,
        4112
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x469"
    },
    "1123": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4068,
        4112
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1124": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4068,
        4083
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "1125": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4068,
        4112
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF9F"
    },
    "1128": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        4068,
        4112
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1129": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4068,
        4112
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1130": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4067,
        4138
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x473"
    },
    "1133": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4067,
        4138
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1134": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4067,
        4138
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1135": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4067,
        4138
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFB6"
    },
    "1138": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        4067,
        4138
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1139": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4067,
        4138
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1140": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4047,
        4138
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1141": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4047,
        4138
      ],
      "op": "POP",
      "path": "2"
    },
    "1142": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3880,
        4149
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1143": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4208,
        4225
      ],
      "op": "DUP1",
      "path": "2",
      "statement": 4
    },
    "1144": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4191
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1145": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4204
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1147": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4204
      ],
      "op": "ADD",
      "path": "2"
    },
    "1148": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4204
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1150": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4225
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1151": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4225
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1152": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4225
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1153": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4225
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x48A"
    },
    "1156": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4225
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1157": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4225
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1158": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4225
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF9F"
    },
    "1161": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        4184,
        4225
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1162": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4225
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1163": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4225
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1164": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4225
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1165": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4184,
        4225
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1166": {
      "op": "POP"
    },
    "1167": {
      "op": "POP"
    },
    "1168": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4264,
        4279
      ],
      "op": "TIMESTAMP",
      "path": "2",
      "statement": 5
    },
    "1169": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4235,
        4261
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "1171": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4235,
        4261
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1172": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4235,
        4261
      ],
      "op": "ADD",
      "path": "2"
    },
    "1173": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4235,
        4279
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1174": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4334,
        4351
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 6,
      "value": "0xA0"
    },
    "1176": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4334,
        4351
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1177": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4334,
        4351
      ],
      "op": "ADD",
      "path": "2"
    },
    "1178": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4334,
        4351
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1179": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1181": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1182": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "1187": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1189": {
      "op": "SHL"
    },
    "1190": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1191": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1192": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1194": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1196": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1198": {
      "op": "SHL"
    },
    "1199": {
      "op": "SUB"
    },
    "1200": {
      "op": "DUP7"
    },
    "1201": {
      "op": "DUP2"
    },
    "1202": {
      "op": "AND"
    },
    "1203": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1205": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1206": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "ADD",
      "path": "2"
    },
    "1207": {
      "op": "MSTORE"
    },
    "1208": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1210": {
      "op": "DUP3"
    },
    "1211": {
      "op": "ADD"
    },
    "1212": {
      "op": "DUP5"
    },
    "1213": {
      "op": "SWAP1"
    },
    "1214": {
      "op": "MSTORE"
    },
    "1215": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4361
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1216": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4361
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1217": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4361
      ],
      "op": "AND",
      "path": "2"
    },
    "1218": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4361
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1219": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4361
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xA9059CBB"
    },
    "1224": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4361
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1225": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1227": {
      "op": "ADD"
    },
    "1228": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1230": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1232": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1233": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1234": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1235": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "SUB",
      "path": "2"
    },
    "1236": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1237": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1239": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1240": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1241": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "EXTCODESIZE",
      "path": "2"
    },
    "1242": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1243": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1244": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1245": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4E5"
    },
    "1248": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1249": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1251": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1252": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1253": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1254": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "POP",
      "path": "2"
    },
    "1255": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "GAS",
      "path": "2"
    },
    "1256": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "CALL",
      "path": "2"
    },
    "1257": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1258": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1259": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1260": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x4F9"
    },
    "1263": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1264": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1265": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1267": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1268": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "1269": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1270": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1272": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "REVERT",
      "path": "2"
    },
    "1273": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1274": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "POP",
      "path": "2"
    },
    "1275": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "POP",
      "path": "2"
    },
    "1276": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "POP",
      "path": "2"
    },
    "1277": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "POP",
      "path": "2"
    },
    "1278": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1280": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1281": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "1282": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1284": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "NOT",
      "path": "2"
    },
    "1285": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "1287": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1288": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "ADD",
      "path": "2"
    },
    "1289": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "AND",
      "path": "2"
    },
    "1290": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1291": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "ADD",
      "path": "2"
    },
    "1292": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1293": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1295": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1296": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "POP",
      "path": "2"
    },
    "1297": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1298": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "ADD",
      "path": "2"
    },
    "1299": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1300": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x51D"
    },
    "1303": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1304": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1305": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFD5"
    },
    "1308": {
      "fn": "MerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        4327,
        4393
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1309": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1310": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4327,
        4393
      ],
      "op": "POP",
      "path": "2"
    },
    "1311": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4481,
        4492
      ],
      "op": "DUP5",
      "path": "2",
      "statement": 7
    },
    "1312": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4427,
        4438
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1313": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1315": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1317": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1319": {
      "op": "SHL"
    },
    "1320": {
      "op": "SUB"
    },
    "1321": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "AND",
      "path": "2"
    },
    "1322": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x5FFB4B63DEC15BA26308386F1D5CA61843B29BA365511062A887D95AA27532D3"
    },
    "1355": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4440,
        4457
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1356": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4459,
        4466
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1357": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4459,
        4479
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1359": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4459,
        4479
      ],
      "op": "ADD",
      "path": "2"
    },
    "1360": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4459,
        4479
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1361": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1363": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1364": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x567"
    },
    "1367": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1368": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1369": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1370": {
      "op": "SWAP2"
    },
    "1371": {
      "op": "DUP3"
    },
    "1372": {
      "op": "MSTORE"
    },
    "1373": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1375": {
      "op": "DUP3"
    },
    "1376": {
      "op": "ADD"
    },
    "1377": {
      "op": "MSTORE"
    },
    "1378": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1380": {
      "op": "ADD"
    },
    "1381": {
      "op": "SWAP1"
    },
    "1382": {
      "op": "JUMP"
    },
    "1383": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1384": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1386": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1387": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1388": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1389": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "SUB",
      "path": "2"
    },
    "1390": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1391": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        4408,
        4493
      ],
      "op": "LOG3",
      "path": "2"
    },
    "1392": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3461,
        4500
      ],
      "op": "POP",
      "path": "2"
    },
    "1393": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3461,
        4500
      ],
      "op": "POP",
      "path": "2"
    },
    "1394": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3461,
        4500
      ],
      "op": "POP",
      "path": "2"
    },
    "1395": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3397,
        4500
      ],
      "op": "POP",
      "path": "2"
    },
    "1396": {
      "fn": "MerkleResistor.withdraw",
      "offset": [
        3397,
        4500
      ],
      "op": "POP",
      "path": "2"
    },
    "1397": {
      "fn": "MerkleResistor.withdraw",
      "jump": "o",
      "offset": [
        3397,
        4500
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1398": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1399": {
      "offset": [
        1335,
        1345
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1401": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1335,
        1345
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1402": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1404": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1406": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1408": {
      "op": "SHL"
    },
    "1409": {
      "op": "SUB"
    },
    "1410": {
      "offset": [
        1335,
        1345
      ],
      "op": "AND",
      "path": "2"
    },
    "1411": {
      "offset": [
        1321,
        1331
      ],
      "op": "CALLER",
      "path": "2"
    },
    "1412": {
      "offset": [
        1321,
        1345
      ],
      "op": "EQ",
      "path": "2"
    },
    "1413": {
      "offset": [
        1312,
        1379
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5D0"
    },
    "1416": {
      "offset": [
        1312,
        1379
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1417": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1312,
        1379
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1419": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1312,
        1379
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1420": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1424": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1426": {
      "op": "SHL"
    },
    "1427": {
      "offset": [
        1312,
        1379
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1428": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1312,
        1379
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1429": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1431": {
      "offset": [
        1312,
        1379
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1433": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1312,
        1379
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1434": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1312,
        1379
      ],
      "op": "ADD",
      "path": "2"
    },
    "1435": {
      "op": "MSTORE"
    },
    "1436": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "1438": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1440": {
      "op": "DUP3"
    },
    "1441": {
      "op": "ADD"
    },
    "1442": {
      "op": "MSTORE"
    },
    "1443": {
      "op": "PUSH32",
      "value": "0x4F6E6C79206D616E6167656D656E74206D61792063616C6C2074686973000000"
    },
    "1476": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1478": {
      "op": "DUP3"
    },
    "1479": {
      "op": "ADD"
    },
    "1480": {
      "op": "MSTORE"
    },
    "1481": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1483": {
      "op": "ADD"
    },
    "1484": {
      "offset": [
        1312,
        1379
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x36F"
    },
    "1487": {
      "op": "JUMP"
    },
    "1488": {
      "offset": [
        1312,
        1379
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1489": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1879,
        1882
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 8,
      "value": "0x64"
    },
    "1491": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1866,
        1876
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1492": {
      "branch": 28,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1866,
        1882
      ],
      "op": "LT",
      "path": "2"
    },
    "1493": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1858,
        1904
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x614"
    },
    "1496": {
      "branch": 28,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1858,
        1904
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1497": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1858,
        1904
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1499": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1858,
        1904
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1500": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1504": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1506": {
      "op": "SHL"
    },
    "1507": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1858,
        1904
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1508": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1858,
        1904
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1509": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1511": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1858,
        1904
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1513": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1858,
        1904
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1514": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1858,
        1904
      ],
      "op": "ADD",
      "path": "2"
    },
    "1515": {
      "op": "MSTORE"
    },
    "1516": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "1518": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1520": {
      "op": "DUP3"
    },
    "1521": {
      "op": "ADD"
    },
    "1522": {
      "op": "MSTORE"
    },
    "1523": {
      "op": "PUSH17",
      "value": "0x706374557046726F6E74203E3D2031303"
    },
    "1541": {
      "op": "PUSH1",
      "value": "0x7C"
    },
    "1543": {
      "op": "SHL"
    },
    "1544": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1546": {
      "op": "DUP3"
    },
    "1547": {
      "op": "ADD"
    },
    "1548": {
      "op": "MSTORE"
    },
    "1549": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1551": {
      "op": "ADD"
    },
    "1552": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1858,
        1904
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x36F"
    },
    "1555": {
      "op": "JUMP"
    },
    "1556": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1858,
        1904
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1557": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1935,
        1945
      ],
      "op": "DUP3",
      "path": "2",
      "statement": 9
    },
    "1558": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1922,
        1932
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1559": {
      "branch": 29,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1922,
        1945
      ],
      "op": "LT",
      "path": "2"
    },
    "1560": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1914,
        1989
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x673"
    },
    "1563": {
      "branch": 29,
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1914,
        1989
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1564": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1914,
        1989
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1566": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1914,
        1989
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1567": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1571": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1573": {
      "op": "SHL"
    },
    "1574": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1914,
        1989
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1575": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1914,
        1989
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1576": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1578": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1914,
        1989
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1580": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1914,
        1989
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1581": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1914,
        1989
      ],
      "op": "ADD",
      "path": "2"
    },
    "1582": {
      "op": "MSTORE"
    },
    "1583": {
      "op": "PUSH1",
      "value": "0x27"
    },
    "1585": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1587": {
      "op": "DUP3"
    },
    "1588": {
      "op": "ADD"
    },
    "1589": {
      "op": "MSTORE"
    },
    "1590": {
      "op": "PUSH32",
      "value": "0x6D696E456E6454696D65206D757374206265206C657373207468616E206D6178"
    },
    "1623": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1625": {
      "op": "DUP3"
    },
    "1626": {
      "op": "ADD"
    },
    "1627": {
      "op": "MSTORE"
    },
    "1628": {
      "op": "PUSH7",
      "value": "0x456E6454696D65"
    },
    "1636": {
      "op": "PUSH1",
      "value": "0xC8"
    },
    "1638": {
      "op": "SHL"
    },
    "1639": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1641": {
      "op": "DUP3"
    },
    "1642": {
      "op": "ADD"
    },
    "1643": {
      "op": "MSTORE"
    },
    "1644": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1646": {
      "op": "ADD"
    },
    "1647": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1914,
        1989
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x36F"
    },
    "1650": {
      "op": "JUMP"
    },
    "1651": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1914,
        1989
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1652": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 10,
      "value": "0x40"
    },
    "1654": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1655": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1656": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC0"
    },
    "1658": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1659": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1661": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1662": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1663": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2049,
        2056
      ],
      "op": "DUP8",
      "path": "2"
    },
    "1664": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1665": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1666": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1668": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1669": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2070,
        2078
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1670": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1671": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1672": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1674": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1675": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2092,
        2102
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1676": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1677": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1678": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1680": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1681": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2116,
        2126
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1682": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1683": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1684": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1686": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1687": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2140,
        2150
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1688": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1689": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1690": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1692": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1693": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2164,
        2176
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1694": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1696": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1698": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1700": {
      "op": "SHL"
    },
    "1701": {
      "op": "SUB"
    },
    "1702": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "AND",
      "path": "2"
    },
    "1703": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1704": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1705": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2025,
        2186
      ],
      "op": "POP",
      "path": "2"
    },
    "1706": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2010
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1708": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1710": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2013,
        2021
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1711": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2013,
        2021
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1713": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2011,
        2021
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1714": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2011,
        2021
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1715": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2011,
        2021
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x6BB"
    },
    "1718": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2011,
        2021
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1719": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2011,
        2021
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFF7"
    },
    "1722": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        2011,
        2021
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1723": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2011,
        2021
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1724": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2011,
        2021
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1725": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2011,
        2021
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1726": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2011,
        2021
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1727": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2011,
        2021
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1728": {
      "op": "POP"
    },
    "1729": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1730": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1731": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1733": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1734": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1735": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "ADD",
      "path": "2"
    },
    "1736": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1737": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1738": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1739": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1740": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1742": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1743": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1744": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "ADD",
      "path": "2"
    },
    "1745": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1747": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1748": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1749": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2022
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1750": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1751": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1752": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1753": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1754": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1755": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1756": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1757": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1758": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1760": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1761": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1762": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1763": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1764": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1765": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1766": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1767": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1769": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1770": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1771": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1772": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "1774": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1775": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1776": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1777": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "1779": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1780": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1781": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1782": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "1784": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1785": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1786": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1787": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1789": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1790": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1791": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1792": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA0"
    },
    "1794": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1795": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1796": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1797": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1798": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "1800": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1801": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "1802": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "ADD",
      "path": "2"
    },
    "1803": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1804": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1805": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1807": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1809": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1811": {
      "op": "SHL"
    },
    "1812": {
      "op": "SUB"
    },
    "1813": {
      "op": "NOT"
    },
    "1814": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "AND",
      "path": "2"
    },
    "1815": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1817": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1819": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1821": {
      "op": "SHL"
    },
    "1822": {
      "op": "SUB"
    },
    "1823": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "SWAP6",
      "path": "2"
    },
    "1824": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "DUP7",
      "path": "2"
    },
    "1825": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "AND",
      "path": "2"
    },
    "1826": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "OR",
      "path": "2"
    },
    "1827": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1828": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1999,
        2186
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "1829": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2217,
        2225
      ],
      "op": "SLOAD",
      "path": "2",
      "statement": 11
    },
    "1830": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1831": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1832": {
      "op": "DUP11"
    },
    "1833": {
      "op": "DUP2"
    },
    "1834": {
      "op": "MSTORE"
    },
    "1835": {
      "op": "SWAP3"
    },
    "1836": {
      "op": "DUP4"
    },
    "1837": {
      "op": "ADD"
    },
    "1838": {
      "op": "DUP10"
    },
    "1839": {
      "op": "SWAP1"
    },
    "1840": {
      "op": "MSTORE"
    },
    "1841": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1842": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "DUP5",
      "path": "2"
    },
    "1843": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "AND",
      "path": "2"
    },
    "1844": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1845": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2217,
        2225
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1846": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45"
    },
    "1879": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1880": {
      "op": "ADD"
    },
    "1881": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1883": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1884": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1885": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1886": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "SUB",
      "path": "2"
    },
    "1887": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1888": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        2201,
        2259
      ],
      "op": "LOG3",
      "path": "2"
    },
    "1889": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "POP",
      "path": "2"
    },
    "1890": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "POP",
      "path": "2"
    },
    "1891": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "POP",
      "path": "2"
    },
    "1892": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "POP",
      "path": "2"
    },
    "1893": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "POP",
      "path": "2"
    },
    "1894": {
      "fn": "MerkleResistor.addMerkleTree",
      "offset": [
        1695,
        2266
      ],
      "op": "POP",
      "path": "2"
    },
    "1895": {
      "fn": "MerkleResistor.addMerkleTree",
      "jump": "o",
      "offset": [
        1695,
        2266
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1896": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1897": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4640,
        4644
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1899": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4646,
        4650
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1900": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4652,
        4656
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1902": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4658,
        4662
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1903": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4692,
        4700
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1905": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4692,
        4700
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1906": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4678,
        4689
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1907": {
      "branch": 30,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4678,
        4700
      ],
      "op": "GT",
      "path": "2"
    },
    "1908": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4674,
        4750
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "1909": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4674,
        4750
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x789"
    },
    "1912": {
      "branch": 30,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4674,
        4750
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "1913": {
      "op": "POP"
    },
    "1914": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4724,
        4729
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 12,
      "value": "0x0"
    },
    "1916": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4724,
        4729
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1917": {
      "op": "POP"
    },
    "1918": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4724,
        4729
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1919": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4724,
        4729
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1920": {
      "op": "POP"
    },
    "1921": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4724,
        4729
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1922": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4724,
        4729
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1923": {
      "op": "POP"
    },
    "1924": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4724,
        4729
      ],
      "op": "DUP1",
      "path": "2"
    },
    "1925": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4716,
        4739
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8FA"
    },
    "1928": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4716,
        4739
      ],
      "op": "JUMP",
      "path": "2"
    },
    "1929": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4674,
        4750
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "1930": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4782
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "1932": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4785,
        4809
      ],
      "op": "DUP9",
      "path": "2"
    },
    "1933": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4785,
        4809
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1934": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4785,
        4809
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1935": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4785,
        4796
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "1937": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4785,
        4809
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "1939": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4785,
        4809
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1940": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4785,
        4809
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1941": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4785,
        4809
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1942": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4785,
        4809
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "1944": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4785,
        4809
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1945": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4785,
        4809
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1946": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4785,
        4809
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1947": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4785,
        4809
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "1948": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1949": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "1950": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC0"
    },
    "1952": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1953": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "ADD",
      "path": "2"
    },
    "1954": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP6",
      "path": "2"
    },
    "1955": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1956": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1957": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1958": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1959": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1960": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "1962": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1963": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "ADD",
      "path": "2"
    },
    "1964": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1965": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1966": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1967": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "ADD",
      "path": "2"
    },
    "1968": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1969": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1970": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "1971": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1972": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "1974": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1975": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "ADD",
      "path": "2"
    },
    "1976": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1977": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1978": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1979": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "ADD",
      "path": "2"
    },
    "1980": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1981": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1982": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "1983": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1984": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "1986": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1987": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "ADD",
      "path": "2"
    },
    "1988": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "1989": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "1991": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP3",
      "path": "2"
    },
    "1992": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "ADD",
      "path": "2"
    },
    "1993": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP2",
      "path": "2"
    },
    "1994": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "1995": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "1996": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "1997": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP4",
      "path": "2"
    },
    "1998": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "ADD",
      "path": "2"
    },
    "1999": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2000": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2002": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2003": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "ADD",
      "path": "2"
    },
    "2004": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2005": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "2007": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2008": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2009": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "ADD",
      "path": "2"
    },
    "2010": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2011": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2013": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2015": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2017": {
      "op": "SHL"
    },
    "2018": {
      "op": "SUB"
    },
    "2019": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "AND",
      "path": "2"
    },
    "2020": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA0"
    },
    "2022": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2023": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "ADD",
      "path": "2"
    },
    "2024": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4760,
        4809
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2025": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4824,
        4853
      ],
      "op": "DUP9",
      "path": "2"
    },
    "2026": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4824,
        4853
      ],
      "op": "GT",
      "path": "2"
    },
    "2027": {
      "branch": 31,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4824,
        4853
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2028": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4824,
        4886
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x7F8"
    },
    "2031": {
      "branch": 31,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4824,
        4886
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2032": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4824,
        4886
      ],
      "op": "POP",
      "path": "2"
    },
    "2033": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4871,
        4875
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2034": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4871,
        4886
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2036": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4871,
        4886
      ],
      "op": "ADD",
      "path": "2"
    },
    "2037": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4871,
        4886
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2038": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4857,
        4868
      ],
      "op": "DUP9",
      "path": "2"
    },
    "2039": {
      "branch": 32,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4857,
        4886
      ],
      "op": "LT",
      "path": "2"
    },
    "2040": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4824,
        4886
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2041": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4820,
        4936
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2042": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4820,
        4936
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x811"
    },
    "2045": {
      "branch": 32,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4820,
        4936
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2046": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4910,
        4915
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 13,
      "value": "0x0"
    },
    "2048": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4917,
        4918
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2049": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4920,
        4921
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2051": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4923,
        4924
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2052": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4902,
        4925
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2053": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4902,
        4925
      ],
      "op": "POP",
      "path": "2"
    },
    "2054": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4902,
        4925
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2055": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4902,
        4925
      ],
      "op": "POP",
      "path": "2"
    },
    "2056": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4902,
        4925
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2057": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4902,
        4925
      ],
      "op": "POP",
      "path": "2"
    },
    "2058": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4902,
        4925
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2059": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4902,
        4925
      ],
      "op": "POP",
      "path": "2"
    },
    "2060": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4902,
        4925
      ],
      "op": "POP",
      "path": "2"
    },
    "2061": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4902,
        4925
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8FA"
    },
    "2064": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4902,
        4925
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2065": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4820,
        4936
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2066": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4946,
        4961
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2068": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4990,
        4994
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2069": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4990,
        5005
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "2071": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4990,
        5005
      ],
      "op": "ADD",
      "path": "2"
    },
    "2072": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4990,
        5005
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2073": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4975,
        4986
      ],
      "op": "DUP10",
      "path": "2"
    },
    "2074": {
      "branch": 33,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4975,
        5005
      ],
      "op": "EQ",
      "path": "2"
    },
    "2075": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4971,
        5305
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2076": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4971,
        5305
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x826"
    },
    "2079": {
      "branch": 33,
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4971,
        5305
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2080": {
      "op": "POP"
    },
    "2081": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5034,
        5050
      ],
      "op": "DUP6",
      "path": "2",
      "statement": 14
    },
    "2082": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4971,
        5305
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x897"
    },
    "2085": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4971,
        5305
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2086": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4971,
        5305
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2087": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5081,
        5098
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2089": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5172,
        5176
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2090": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5172,
        5187
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2092": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5172,
        5187
      ],
      "op": "ADD",
      "path": "2"
    },
    "2093": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5172,
        5187
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2094": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5154,
        5158
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2095": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5154,
        5169
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "2097": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5154,
        5169
      ],
      "op": "ADD",
      "path": "2"
    },
    "2098": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5154,
        5169
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2099": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5154,
        5187
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x83C"
    },
    "2102": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5154,
        5187
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2103": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5154,
        5187
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2104": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5154,
        5187
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF9F"
    },
    "2107": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5154,
        5187
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2108": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5154,
        5187
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2109": {
      "offset": [
        910,
        917
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0xF4240"
    },
    "2113": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5102,
        5137
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x84A"
    },
    "2116": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5121,
        5137
      ],
      "op": "DUP12",
      "path": "2"
    },
    "2117": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5102,
        5118
      ],
      "op": "DUP12",
      "path": "2"
    },
    "2118": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5102,
        5137
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF9F"
    },
    "2121": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5102,
        5137
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2122": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5102,
        5137
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2123": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5101,
        5150
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x854"
    },
    "2126": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5101,
        5150
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2127": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5101,
        5150
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2128": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5101,
        5150
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFB6"
    },
    "2131": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5101,
        5150
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2132": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5101,
        5150
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2133": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5101,
        5188
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x85E"
    },
    "2136": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5101,
        5188
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2137": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5101,
        5188
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2138": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5101,
        5188
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1012"
    },
    "2141": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5101,
        5188
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2142": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5101,
        5188
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2143": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5081,
        5188
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2144": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5081,
        5188
      ],
      "op": "POP",
      "path": "2"
    },
    "2145": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5278,
        5294
      ],
      "op": "DUP9",
      "path": "2",
      "statement": 15
    },
    "2146": {
      "offset": [
        910,
        917
      ],
      "op": "PUSH3",
      "path": "2",
      "value": "0xF4240"
    },
    "2150": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5246,
        5250
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2151": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5246,
        5261
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2153": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5246,
        5261
      ],
      "op": "ADD",
      "path": "2"
    },
    "2154": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5246,
        5261
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2155": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5232,
        5243
      ],
      "op": "DUP13",
      "path": "2"
    },
    "2156": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5232,
        5261
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x875"
    },
    "2159": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5232,
        5261
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2160": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5232,
        5261
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2161": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5232,
        5261
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF9F"
    },
    "2164": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5232,
        5261
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2165": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5232,
        5261
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2166": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5216,
        5262
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x87F"
    },
    "2169": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5216,
        5262
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2170": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5216,
        5228
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2171": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5216,
        5262
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFB6"
    },
    "2174": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5216,
        5262
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2175": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5216,
        5262
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2176": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5216,
        5274
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x889"
    },
    "2179": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5216,
        5274
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2180": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5216,
        5274
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2181": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5216,
        5274
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1012"
    },
    "2184": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5216,
        5274
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2185": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5216,
        5274
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2186": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5215,
        5294
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x893"
    },
    "2189": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5215,
        5294
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2190": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5215,
        5294
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2191": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5215,
        5294
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1034"
    },
    "2194": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5215,
        5294
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2195": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5215,
        5294
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2196": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5202,
        5294
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2197": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5202,
        5294
      ],
      "op": "POP",
      "path": "2"
    },
    "2198": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5067,
        5305
      ],
      "op": "POP",
      "path": "2"
    },
    "2199": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4971,
        5305
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2200": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5315,
        5334
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2202": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5385,
        5402
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8A4"
    },
    "2205": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5385,
        5396
      ],
      "op": "DUP11",
      "path": "2"
    },
    "2206": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5399,
        5402
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "2208": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5385,
        5402
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFB6"
    },
    "2211": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5385,
        5402
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2212": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5385,
        5402
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2213": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5364,
        5379
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2215": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5364,
        5379
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2216": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5364,
        5379
      ],
      "op": "ADD",
      "path": "2"
    },
    "2217": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5364,
        5379
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2218": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5352,
        5379
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8B4"
    },
    "2221": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5352,
        5379
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2222": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5357,
        5360
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x64"
    },
    "2224": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5352,
        5379
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF9F"
    },
    "2227": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5352,
        5379
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2228": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5352,
        5379
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2229": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5338,
        5380
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8BE"
    },
    "2232": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5338,
        5380
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2233": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5338,
        5348
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2234": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5338,
        5380
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFB6"
    },
    "2237": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5338,
        5380
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2238": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5338,
        5380
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2239": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5337,
        5403
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8C8"
    },
    "2242": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5337,
        5403
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2243": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5337,
        5403
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2244": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5337,
        5403
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1012"
    },
    "2247": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5337,
        5403
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2248": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5337,
        5403
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2249": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5315,
        5403
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2250": {
      "op": "POP"
    },
    "2251": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5413,
        5427
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2253": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5463,
        5490
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8D6"
    },
    "2256": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5315,
        5403
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2257": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5463,
        5473
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2258": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5463,
        5490
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1012"
    },
    "2261": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5463,
        5490
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2262": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5463,
        5490
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2263": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5430,
        5459
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8E0"
    },
    "2266": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5448,
        5459
      ],
      "op": "DUP13",
      "path": "2"
    },
    "2267": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5430,
        5445
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "2268": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5430,
        5459
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1034"
    },
    "2271": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5430,
        5459
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2272": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5430,
        5459
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2273": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5430,
        5491
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8EA"
    },
    "2276": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5430,
        5491
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2277": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5430,
        5491
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2278": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5430,
        5491
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF9F"
    },
    "2281": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        5430,
        5491
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2282": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5430,
        5491
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2283": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5510,
        5514
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 16,
      "value": "0x1"
    },
    "2285": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5510,
        5514
      ],
      "op": "SWAP9",
      "path": "2"
    },
    "2286": {
      "op": "POP"
    },
    "2287": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5516,
        5526
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2288": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5516,
        5526
      ],
      "op": "SWAP7",
      "path": "2"
    },
    "2289": {
      "op": "POP"
    },
    "2290": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5528,
        5542
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2291": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5528,
        5542
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2292": {
      "op": "POP"
    },
    "2293": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5413,
        5491
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2294": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        5413,
        5491
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2295": {
      "op": "POP"
    },
    "2296": {
      "op": "POP"
    },
    "2297": {
      "op": "POP"
    },
    "2298": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2299": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2300": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "POP",
      "path": "2"
    },
    "2301": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2302": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "POP",
      "path": "2"
    },
    "2303": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2304": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "POP",
      "path": "2"
    },
    "2305": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2306": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2307": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "offset": [
        4506,
        5561
      ],
      "op": "POP",
      "path": "2"
    },
    "2308": {
      "fn": "MerkleResistor.verifyVestingSchedule",
      "jump": "o",
      "offset": [
        4506,
        5561
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2309": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1502,
        1689
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2310": {
      "offset": [
        1335,
        1345
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2312": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1335,
        1345
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2313": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2315": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2317": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2319": {
      "op": "SHL"
    },
    "2320": {
      "op": "SUB"
    },
    "2321": {
      "offset": [
        1335,
        1345
      ],
      "op": "AND",
      "path": "2"
    },
    "2322": {
      "offset": [
        1321,
        1331
      ],
      "op": "CALLER",
      "path": "2"
    },
    "2323": {
      "offset": [
        1321,
        1345
      ],
      "op": "EQ",
      "path": "2"
    },
    "2324": {
      "offset": [
        1312,
        1379
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x95F"
    },
    "2327": {
      "offset": [
        1312,
        1379
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2328": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1312,
        1379
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2330": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1312,
        1379
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2331": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2335": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2337": {
      "op": "SHL"
    },
    "2338": {
      "offset": [
        1312,
        1379
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2339": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1312,
        1379
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2340": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2342": {
      "offset": [
        1312,
        1379
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2344": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1312,
        1379
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2345": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1312,
        1379
      ],
      "op": "ADD",
      "path": "2"
    },
    "2346": {
      "op": "MSTORE"
    },
    "2347": {
      "op": "PUSH1",
      "value": "0x1D"
    },
    "2349": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2351": {
      "op": "DUP3"
    },
    "2352": {
      "op": "ADD"
    },
    "2353": {
      "op": "MSTORE"
    },
    "2354": {
      "op": "PUSH32",
      "value": "0x4F6E6C79206D616E6167656D656E74206D61792063616C6C2074686973000000"
    },
    "2387": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2389": {
      "op": "DUP3"
    },
    "2390": {
      "op": "ADD"
    },
    "2391": {
      "op": "MSTORE"
    },
    "2392": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2394": {
      "op": "ADD"
    },
    "2395": {
      "offset": [
        1312,
        1379
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x36F"
    },
    "2398": {
      "op": "JUMP"
    },
    "2399": {
      "offset": [
        1312,
        1379
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2400": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1592,
        1602
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2402": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1592,
        1602
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2403": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1592,
        1602
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2404": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2406": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2408": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2410": {
      "op": "SHL"
    },
    "2411": {
      "op": "SUB"
    },
    "2412": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1612,
        1632
      ],
      "op": "DUP4",
      "path": "2",
      "statement": 17
    },
    "2413": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1612,
        1632
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2414": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1612,
        1632
      ],
      "op": "AND",
      "path": "2"
    },
    "2415": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2417": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2419": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2421": {
      "op": "SHL"
    },
    "2422": {
      "op": "SUB"
    },
    "2423": {
      "op": "NOT"
    },
    "2424": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1612,
        1632
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2425": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1612,
        1632
      ],
      "op": "AND",
      "path": "2"
    },
    "2426": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1612,
        1632
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2427": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1612,
        1632
      ],
      "op": "OR",
      "path": "2"
    },
    "2428": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1612,
        1632
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2429": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1612,
        1632
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "2430": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1612,
        1632
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "2431": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1647,
        1682
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 18,
      "value": "0x40"
    },
    "2433": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1647,
        1682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2434": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1647,
        1682
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2435": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1592,
        1602
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2436": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1592,
        1602
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2437": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1592,
        1602
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2438": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1592,
        1602
      ],
      "op": "AND",
      "path": "2"
    },
    "2439": {
      "op": "DUP1"
    },
    "2440": {
      "op": "DUP3"
    },
    "2441": {
      "op": "MSTORE"
    },
    "2442": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2444": {
      "op": "DUP3"
    },
    "2445": {
      "op": "ADD"
    },
    "2446": {
      "op": "SWAP4"
    },
    "2447": {
      "op": "SWAP1"
    },
    "2448": {
      "op": "SWAP4"
    },
    "2449": {
      "op": "MSTORE"
    },
    "2450": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1647,
        1682
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x8CAF0A9DF2E1DA9BECB3EBFB8A56E83121A5B3F6C5622F715A939EC29C54DFDF"
    },
    "2483": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1647,
        1682
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2484": {
      "op": "ADD"
    },
    "2485": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1647,
        1682
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2487": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1647,
        1682
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2488": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1647,
        1682
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2489": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1647,
        1682
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2490": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1647,
        1682
      ],
      "op": "SUB",
      "path": "2"
    },
    "2491": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1647,
        1682
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2492": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1647,
        1682
      ],
      "op": "LOG1",
      "path": "2"
    },
    "2493": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1564,
        1689
      ],
      "op": "POP",
      "path": "2"
    },
    "2494": {
      "fn": "MerkleResistor.setManagement",
      "offset": [
        1502,
        1689
      ],
      "op": "POP",
      "path": "2"
    },
    "2495": {
      "fn": "MerkleResistor.setManagement",
      "jump": "o",
      "offset": [
        1502,
        1689
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2496": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2497": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2446,
        2456
      ],
      "op": "CALLER",
      "path": "2",
      "statement": 19
    },
    "2498": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2500": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2502": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2504": {
      "op": "SHL"
    },
    "2505": {
      "op": "SUB"
    },
    "2506": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2446,
        2471
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2507": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2446,
        2471
      ],
      "op": "AND",
      "path": "2"
    },
    "2508": {
      "branch": 34,
      "fn": "MerkleResistor.initialize",
      "offset": [
        2446,
        2471
      ],
      "op": "EQ",
      "path": "2"
    },
    "2509": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2438,
        2512
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA24"
    },
    "2512": {
      "branch": 34,
      "fn": "MerkleResistor.initialize",
      "offset": [
        2438,
        2512
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2513": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2438,
        2512
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2515": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2438,
        2512
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2516": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2520": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2522": {
      "op": "SHL"
    },
    "2523": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2438,
        2512
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2524": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2438,
        2512
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2525": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2527": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2438,
        2512
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2529": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2438,
        2512
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2530": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2438,
        2512
      ],
      "op": "ADD",
      "path": "2"
    },
    "2531": {
      "op": "MSTORE"
    },
    "2532": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2534": {
      "op": "DUP1"
    },
    "2535": {
      "op": "DUP3"
    },
    "2536": {
      "op": "ADD"
    },
    "2537": {
      "op": "MSTORE"
    },
    "2538": {
      "op": "PUSH32",
      "value": "0x43616E206F6E6C7920696E697469616C697A6520796F7572206F776E20747261"
    },
    "2571": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2573": {
      "op": "DUP3"
    },
    "2574": {
      "op": "ADD"
    },
    "2575": {
      "op": "MSTORE"
    },
    "2576": {
      "op": "PUSH4",
      "value": "0x6E636865"
    },
    "2581": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2583": {
      "op": "SHL"
    },
    "2584": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2586": {
      "op": "DUP3"
    },
    "2587": {
      "op": "ADD"
    },
    "2588": {
      "op": "MSTORE"
    },
    "2589": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2591": {
      "op": "ADD"
    },
    "2592": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2438,
        2512
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x36F"
    },
    "2595": {
      "op": "JUMP"
    },
    "2596": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2438,
        2512
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2597": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2599": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2601": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2603": {
      "op": "SHL"
    },
    "2604": {
      "op": "SUB"
    },
    "2605": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2555
      ],
      "op": "DUP6",
      "path": "2",
      "statement": 20
    },
    "2606": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2555
      ],
      "op": "AND",
      "path": "2"
    },
    "2607": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2555
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2609": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2555
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2610": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2555
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2611": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2555
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2612": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2542
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "2614": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2555
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2616": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2555
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2617": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2555
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2618": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2555
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2619": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2555
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2621": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2555
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2622": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2555
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2623": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2555
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2624": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2568
      ],
      "op": "DUP10",
      "path": "2"
    },
    "2625": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2568
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2626": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2568
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2627": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2568
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2628": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2568
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2629": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2568
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2630": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2568
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2631": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2568
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2632": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2568
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2633": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2568
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xFF"
    },
    "2635": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2531,
        2568
      ],
      "op": "AND",
      "path": "2"
    },
    "2636": {
      "branch": 35,
      "fn": "MerkleResistor.initialize",
      "offset": [
        2530,
        2568
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2637": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2522,
        2592
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA8E"
    },
    "2640": {
      "branch": 35,
      "fn": "MerkleResistor.initialize",
      "offset": [
        2522,
        2592
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2641": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2522,
        2592
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2643": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2522,
        2592
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2644": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2648": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2650": {
      "op": "SHL"
    },
    "2651": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2522,
        2592
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2652": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2522,
        2592
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2653": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2655": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2522,
        2592
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2657": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2522,
        2592
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2658": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2522,
        2592
      ],
      "op": "ADD",
      "path": "2"
    },
    "2659": {
      "op": "MSTORE"
    },
    "2660": {
      "op": "PUSH1",
      "value": "0x13"
    },
    "2662": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2664": {
      "op": "DUP3"
    },
    "2665": {
      "op": "ADD"
    },
    "2666": {
      "op": "MSTORE"
    },
    "2667": {
      "op": "PUSH19",
      "value": "0x105B1C9958591E481A5B9A5D1A585B1A5E9959"
    },
    "2687": {
      "op": "PUSH1",
      "value": "0x6A"
    },
    "2689": {
      "op": "SHL"
    },
    "2690": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2692": {
      "op": "DUP3"
    },
    "2693": {
      "op": "ADD"
    },
    "2694": {
      "op": "MSTORE"
    },
    "2695": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2697": {
      "op": "ADD"
    },
    "2698": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2522,
        2592
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x36F"
    },
    "2701": {
      "op": "JUMP"
    },
    "2702": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2522,
        2592
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2703": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2705": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2706": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2707": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2709": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2711": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2713": {
      "op": "SHL"
    },
    "2714": {
      "op": "SUB"
    },
    "2715": {
      "op": "DUP8"
    },
    "2716": {
      "op": "AND"
    },
    "2717": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2719": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2720": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "ADD",
      "path": "2"
    },
    "2721": {
      "op": "MSTORE"
    },
    "2722": {
      "op": "SWAP1"
    },
    "2723": {
      "op": "DUP2"
    },
    "2724": {
      "op": "ADD"
    },
    "2725": {
      "op": "DUP5"
    },
    "2726": {
      "op": "SWAP1"
    },
    "2727": {
      "op": "MSTORE"
    },
    "2728": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2730": {
      "op": "DUP2"
    },
    "2731": {
      "op": "ADD"
    },
    "2732": {
      "op": "DUP4"
    },
    "2733": {
      "op": "SWAP1"
    },
    "2734": {
      "op": "MSTORE"
    },
    "2735": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2602,
        2614
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2737": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2602,
        2614
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2738": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2740": {
      "op": "ADD"
    },
    "2741": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2743": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2744": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2745": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2747": {
      "op": "NOT"
    },
    "2748": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2749": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2750": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "SUB",
      "path": "2"
    },
    "2751": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "ADD",
      "path": "2"
    },
    "2752": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2753": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2754": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2755": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2756": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2757": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2617,
        2687
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2758": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2617,
        2687
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2759": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2627,
        2686
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2761": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2617,
        2687
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2762": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2617,
        2687
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2763": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2617,
        2687
      ],
      "op": "ADD",
      "path": "2"
    },
    "2764": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2617,
        2687
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2765": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2719
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2767": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2722,
        2746
      ],
      "op": "DUP12",
      "path": "2"
    },
    "2768": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2722,
        2746
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2769": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2722,
        2746
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2770": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2722,
        2733
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "2772": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2722,
        2746
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2773": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2722,
        2746
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2774": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2722,
        2746
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2775": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2722,
        2746
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2776": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2722,
        2746
      ],
      "op": "DUP5",
      "path": "2"
    },
    "2777": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2722,
        2746
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2778": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2722,
        2746
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "2779": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC0"
    },
    "2781": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2782": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "ADD",
      "path": "2"
    },
    "2783": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP6",
      "path": "2"
    },
    "2784": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2785": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2786": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2787": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2788": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2789": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2790": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "2792": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2793": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "ADD",
      "path": "2"
    },
    "2794": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2795": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2796": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2797": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "ADD",
      "path": "2"
    },
    "2798": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2799": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2800": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2801": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2802": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "2804": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2805": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "ADD",
      "path": "2"
    },
    "2806": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2807": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2808": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2809": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "ADD",
      "path": "2"
    },
    "2810": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2811": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "2813": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2814": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "ADD",
      "path": "2"
    },
    "2815": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2816": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "2818": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2819": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "ADD",
      "path": "2"
    },
    "2820": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2821": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2822": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2823": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "ADD",
      "path": "2"
    },
    "2824": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2825": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2827": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2828": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "ADD",
      "path": "2"
    },
    "2829": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2830": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "2832": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "ADD",
      "path": "2"
    },
    "2833": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "2834": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2836": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2838": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2840": {
      "op": "SHL"
    },
    "2841": {
      "op": "SUB"
    },
    "2842": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "AND",
      "path": "2"
    },
    "2843": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA0"
    },
    "2845": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2846": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "ADD",
      "path": "2"
    },
    "2847": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2848": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "SWAP3",
      "path": "2",
      "statement": 21
    },
    "2849": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2850": {
      "op": "PUSH4",
      "value": "0x2769CD1F"
    },
    "2855": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "2857": {
      "op": "SHL"
    },
    "2858": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2859": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2860": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2617,
        2687
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2861": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2617,
        2687
      ],
      "op": "SWAP5",
      "path": "2"
    },
    "2862": {
      "op": "POP"
    },
    "2863": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2791
      ],
      "op": "PUSH20",
      "path": "2",
      "value": "0x0"
    },
    "2884": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2791
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2885": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2791
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x9DA7347C"
    },
    "2890": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2791
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2891": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB5A"
    },
    "2894": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "2895": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2896": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2697,
        2746
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2897": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2617,
        2687
      ],
      "op": "DUP8",
      "path": "2"
    },
    "2898": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2617,
        2687
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2899": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2798,
        2803
      ],
      "op": "DUP10",
      "path": "2"
    },
    "2900": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2798,
        2803
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2901": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "ADD",
      "path": "2"
    },
    "2902": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x104C"
    },
    "2905": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        2764,
        2804
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2906": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2907": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "2909": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2911": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2912": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2913": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DUP4",
      "path": "2"
    },
    "2914": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "SUB",
      "path": "2"
    },
    "2915": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2916": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DUP7",
      "path": "2"
    },
    "2917": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2918": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "EXTCODESIZE",
      "path": "2"
    },
    "2919": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2920": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2921": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2922": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB72"
    },
    "2925": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2926": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2928": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2929": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2930": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2931": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "POP",
      "path": "2"
    },
    "2932": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "GAS",
      "path": "2"
    },
    "2933": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DELEGATECALL",
      "path": "2"
    },
    "2934": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2935": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2936": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "2937": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xB86"
    },
    "2940": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2941": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2942": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2944": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2945": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "2946": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2947": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "2949": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "REVERT",
      "path": "2"
    },
    "2950": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2951": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "POP",
      "path": "2"
    },
    "2952": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "POP",
      "path": "2"
    },
    "2953": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "POP",
      "path": "2"
    },
    "2954": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "POP",
      "path": "2"
    },
    "2955": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2957": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2958": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "2959": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2961": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "NOT",
      "path": "2"
    },
    "2962": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1F"
    },
    "2964": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2965": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "ADD",
      "path": "2"
    },
    "2966": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "AND",
      "path": "2"
    },
    "2967": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DUP3",
      "path": "2"
    },
    "2968": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "ADD",
      "path": "2"
    },
    "2969": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DUP1",
      "path": "2"
    },
    "2970": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2972": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "2973": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "POP",
      "path": "2"
    },
    "2974": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "DUP2",
      "path": "2"
    },
    "2975": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "ADD",
      "path": "2"
    },
    "2976": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2977": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBAA"
    },
    "2980": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "2981": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "2982": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xFD5"
    },
    "2985": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        2764,
        2804
      ],
      "op": "JUMP",
      "path": "2"
    },
    "2986": {
      "branch": 36,
      "fn": "MerkleResistor.initialize",
      "offset": [
        2764,
        2804
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "2987": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2756,
        2841
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBF6"
    },
    "2990": {
      "branch": 36,
      "fn": "MerkleResistor.initialize",
      "offset": [
        2756,
        2841
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "2991": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2756,
        2841
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "2993": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2756,
        2841
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "2994": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2998": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3000": {
      "op": "SHL"
    },
    "3001": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2756,
        2841
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3002": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2756,
        2841
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3003": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3005": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2756,
        2841
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "3007": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2756,
        2841
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3008": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2756,
        2841
      ],
      "op": "ADD",
      "path": "2"
    },
    "3009": {
      "op": "DUP2"
    },
    "3010": {
      "op": "SWAP1"
    },
    "3011": {
      "op": "MSTORE"
    },
    "3012": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3014": {
      "op": "DUP3"
    },
    "3015": {
      "op": "ADD"
    },
    "3016": {
      "op": "MSTORE"
    },
    "3017": {
      "op": "PUSH32",
      "value": "0x5468652070726F6F6620636F756C64206E6F742062652076657269666965642E"
    },
    "3050": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3052": {
      "op": "DUP3"
    },
    "3053": {
      "op": "ADD"
    },
    "3054": {
      "op": "MSTORE"
    },
    "3055": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3057": {
      "op": "ADD"
    },
    "3058": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2756,
        2841
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x36F"
    },
    "3061": {
      "op": "JUMP"
    },
    "3062": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2756,
        2841
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3063": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3065": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3067": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3069": {
      "op": "SHL"
    },
    "3070": {
      "op": "SUB"
    },
    "3071": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "DUP8",
      "path": "2",
      "statement": 22
    },
    "3072": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "AND",
      "path": "2"
    },
    "3073": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3075": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3076": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3077": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3078": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2862
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "3080": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3082": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3083": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3084": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3085": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3087": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3088": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "DUP4",
      "path": "2"
    },
    "3089": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "3090": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2888
      ],
      "op": "DUP12",
      "path": "2"
    },
    "3091": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2888
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3092": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2888
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3093": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2888
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3094": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2888
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3095": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2888
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3096": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2888
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3097": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2888
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "3098": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2895
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3099": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2895
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "3100": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3102": {
      "op": "NOT"
    },
    "3103": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2895
      ],
      "op": "AND",
      "path": "2"
    },
    "3104": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2891,
        2895
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "3106": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2895
      ],
      "op": "OR",
      "path": "2"
    },
    "3107": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2895
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3108": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2895
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3109": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3110": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3111": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2851,
        2875
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3112": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2975,
        3058
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC33"
    },
    "3115": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2876,
        2887
      ],
      "op": "DUP13",
      "path": "2"
    },
    "3116": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3010,
        3021
      ],
      "op": "DUP12",
      "path": "2"
    },
    "3117": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3023,
        3039
      ],
      "op": "DUP12",
      "path": "2"
    },
    "3118": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3041,
        3057
      ],
      "op": "DUP12",
      "path": "2"
    },
    "3119": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2975,
        2996
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x768"
    },
    "3122": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        2975,
        3058
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3123": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2975,
        3058
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3124": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2906,
        3058
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "3125": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2906,
        3058
      ],
      "op": "POP",
      "path": "2"
    },
    "3126": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2906,
        3058
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "3127": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2906,
        3058
      ],
      "op": "POP",
      "path": "2"
    },
    "3128": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2906,
        3058
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "3129": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2906,
        3058
      ],
      "op": "POP",
      "path": "2"
    },
    "3130": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2906,
        3058
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "3131": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2906,
        3058
      ],
      "op": "POP",
      "path": "2"
    },
    "3132": {
      "branch": 37,
      "fn": "MerkleResistor.initialize",
      "offset": [
        3076,
        3081
      ],
      "op": "DUP4",
      "path": "2",
      "statement": 23
    },
    "3133": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3068,
        3110
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xC88"
    },
    "3136": {
      "branch": 37,
      "fn": "MerkleResistor.initialize",
      "offset": [
        3068,
        3110
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "3137": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3068,
        3110
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3139": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3068,
        3110
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3140": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "3144": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "3146": {
      "op": "SHL"
    },
    "3147": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3068,
        3110
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3148": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3068,
        3110
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3149": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3151": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3068,
        3110
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "3153": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3068,
        3110
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3154": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3068,
        3110
      ],
      "op": "ADD",
      "path": "2"
    },
    "3155": {
      "op": "MSTORE"
    },
    "3156": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "3158": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3160": {
      "op": "DUP3"
    },
    "3161": {
      "op": "ADD"
    },
    "3162": {
      "op": "MSTORE"
    },
    "3163": {
      "op": "PUSH32",
      "value": "0x496E76616C69642076657374696E67207363686564756C650000000000000000"
    },
    "3196": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3198": {
      "op": "DUP3"
    },
    "3199": {
      "op": "ADD"
    },
    "3200": {
      "op": "MSTORE"
    },
    "3201": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3203": {
      "op": "ADD"
    },
    "3204": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3068,
        3110
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x36F"
    },
    "3207": {
      "op": "JUMP"
    },
    "3208": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3068,
        3110
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3209": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 24,
      "value": "0x40"
    },
    "3211": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3212": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3213": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xC0"
    },
    "3215": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3216": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3218": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3219": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "DUP1",
      "path": "2"
    },
    "3220": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3179,
        3189
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3221": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3222": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3223": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3225": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3226": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3203,
        3213
      ],
      "op": "DUP5",
      "path": "2"
    },
    "3227": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3228": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3229": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3231": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3232": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3227,
        3236
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3233": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3234": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3235": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3237": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3238": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3268,
        3279
      ],
      "op": "DUP12",
      "path": "2"
    },
    "3239": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3250,
        3265
      ],
      "op": "TIMESTAMP",
      "path": "2"
    },
    "3240": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3250,
        3279
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xCB1"
    },
    "3243": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3250,
        3279
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3244": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3250,
        3279
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3245": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3250,
        3279
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1034"
    },
    "3248": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        3250,
        3279
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3249": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3250,
        3279
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3250": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3251": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3252": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3254": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3255": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3293,
        3307
      ],
      "op": "DUP4",
      "path": "2"
    },
    "3256": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3257": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3258": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3260": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3261": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3321,
        3330
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3262": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3263": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3264": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3158,
        3340
      ],
      "op": "POP",
      "path": "2"
    },
    "3265": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3129
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "3267": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3142
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3269": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3130,
        3141
      ],
      "op": "DUP14",
      "path": "2"
    },
    "3270": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3272": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3274": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3276": {
      "op": "SHL"
    },
    "3277": {
      "op": "SUB"
    },
    "3278": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3142
      ],
      "op": "AND",
      "path": "2"
    },
    "3279": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3281": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3283": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3285": {
      "op": "SHL"
    },
    "3286": {
      "op": "SUB"
    },
    "3287": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3142
      ],
      "op": "AND",
      "path": "2"
    },
    "3288": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3142
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3289": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3142
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3290": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3142
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3292": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3142
      ],
      "op": "ADD",
      "path": "2"
    },
    "3293": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3142
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3294": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3142
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3295": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3142
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3296": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3142
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3298": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3142
      ],
      "op": "ADD",
      "path": "2"
    },
    "3299": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3142
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3301": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3142
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "3302": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3155
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3304": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3143,
        3154
      ],
      "op": "DUP15",
      "path": "2"
    },
    "3305": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3155
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3306": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3155
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3307": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3155
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3309": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3155
      ],
      "op": "ADD",
      "path": "2"
    },
    "3310": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3155
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3311": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3155
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3312": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3155
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "3313": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3155
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3315": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3155
      ],
      "op": "ADD",
      "path": "2"
    },
    "3316": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3155
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3318": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3155
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "3319": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3321": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3322": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3323": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3324": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3325": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3327": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3328": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3329": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "3331": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3332": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3333": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3334": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3335": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "3337": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3338": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3339": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "3341": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3342": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3343": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3344": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3345": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x2"
    },
    "3347": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3348": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3349": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x60"
    },
    "3351": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3352": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3353": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3354": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3355": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x3"
    },
    "3357": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3358": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3359": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "3361": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3362": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3363": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3364": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3365": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "3367": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3368": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3369": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xA0"
    },
    "3371": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "DUP3",
      "path": "2"
    },
    "3372": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3373": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "3374": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "DUP2",
      "path": "2"
    },
    "3375": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x5"
    },
    "3377": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "ADD",
      "path": "2"
    },
    "3378": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "3379": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "3380": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "POP",
      "path": "2"
    },
    "3381": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3121,
        3340
      ],
      "op": "POP",
      "path": "2"
    },
    "3382": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3350,
        3384
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 25,
      "value": "0xD3F"
    },
    "3385": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3359,
        3370
      ],
      "op": "DUP13",
      "path": "2"
    },
    "3386": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3372,
        3383
      ],
      "op": "DUP13",
      "path": "2"
    },
    "3387": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3350,
        3358
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x2F0"
    },
    "3390": {
      "fn": "MerkleResistor.initialize",
      "jump": "i",
      "offset": [
        3350,
        3384
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3391": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        3350,
        3384
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3392": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2428,
        3391
      ],
      "op": "POP",
      "path": "2"
    },
    "3393": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2428,
        3391
      ],
      "op": "POP",
      "path": "2"
    },
    "3394": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2428,
        3391
      ],
      "op": "POP",
      "path": "2"
    },
    "3395": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2428,
        3391
      ],
      "op": "POP",
      "path": "2"
    },
    "3396": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2428,
        3391
      ],
      "op": "POP",
      "path": "2"
    },
    "3397": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2428,
        3391
      ],
      "op": "POP",
      "path": "2"
    },
    "3398": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "POP",
      "path": "2"
    },
    "3399": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "POP",
      "path": "2"
    },
    "3400": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "POP",
      "path": "2"
    },
    "3401": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "POP",
      "path": "2"
    },
    "3402": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "POP",
      "path": "2"
    },
    "3403": {
      "fn": "MerkleResistor.initialize",
      "offset": [
        2272,
        3391
      ],
      "op": "POP",
      "path": "2"
    },
    "3404": {
      "fn": "MerkleResistor.initialize",
      "jump": "o",
      "offset": [
        2272,
        3391
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3405": {
      "op": "JUMPDEST"
    },
    "3406": {
      "op": "DUP1"
    },
    "3407": {
      "op": "CALLDATALOAD"
    },
    "3408": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3410": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3412": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3414": {
      "op": "SHL"
    },
    "3415": {
      "op": "SUB"
    },
    "3416": {
      "op": "DUP2"
    },
    "3417": {
      "op": "AND"
    },
    "3418": {
      "op": "DUP2"
    },
    "3419": {
      "op": "EQ"
    },
    "3420": {
      "op": "PUSH2",
      "value": "0xD64"
    },
    "3423": {
      "op": "JUMPI"
    },
    "3424": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3426": {
      "op": "DUP1"
    },
    "3427": {
      "op": "REVERT"
    },
    "3428": {
      "op": "JUMPDEST"
    },
    "3429": {
      "op": "SWAP2"
    },
    "3430": {
      "op": "SWAP1"
    },
    "3431": {
      "op": "POP"
    },
    "3432": {
      "jump": "o",
      "op": "JUMP"
    },
    "3433": {
      "op": "JUMPDEST"
    },
    "3434": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3436": {
      "op": "DUP1"
    },
    "3437": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3439": {
      "op": "DUP4"
    },
    "3440": {
      "op": "DUP6"
    },
    "3441": {
      "op": "SUB"
    },
    "3442": {
      "op": "SLT"
    },
    "3443": {
      "op": "ISZERO"
    },
    "3444": {
      "op": "PUSH2",
      "value": "0xD7C"
    },
    "3447": {
      "op": "JUMPI"
    },
    "3448": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3450": {
      "op": "DUP1"
    },
    "3451": {
      "op": "REVERT"
    },
    "3452": {
      "op": "JUMPDEST"
    },
    "3453": {
      "op": "DUP3"
    },
    "3454": {
      "op": "CALLDATALOAD"
    },
    "3455": {
      "op": "SWAP2"
    },
    "3456": {
      "op": "POP"
    },
    "3457": {
      "op": "PUSH2",
      "value": "0xD8C"
    },
    "3460": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3462": {
      "op": "DUP5"
    },
    "3463": {
      "op": "ADD"
    },
    "3464": {
      "op": "PUSH2",
      "value": "0xD4D"
    },
    "3467": {
      "jump": "i",
      "op": "JUMP"
    },
    "3468": {
      "op": "JUMPDEST"
    },
    "3469": {
      "op": "SWAP1"
    },
    "3470": {
      "op": "POP"
    },
    "3471": {
      "op": "SWAP3"
    },
    "3472": {
      "op": "POP"
    },
    "3473": {
      "op": "SWAP3"
    },
    "3474": {
      "op": "SWAP1"
    },
    "3475": {
      "op": "POP"
    },
    "3476": {
      "jump": "o",
      "op": "JUMP"
    },
    "3477": {
      "op": "JUMPDEST"
    },
    "3478": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3480": {
      "op": "DUP1"
    },
    "3481": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3483": {
      "op": "DUP1"
    },
    "3484": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3486": {
      "op": "DUP1"
    },
    "3487": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "3489": {
      "op": "DUP8"
    },
    "3490": {
      "op": "DUP10"
    },
    "3491": {
      "op": "SUB"
    },
    "3492": {
      "op": "SLT"
    },
    "3493": {
      "op": "ISZERO"
    },
    "3494": {
      "op": "PUSH2",
      "value": "0xDAE"
    },
    "3497": {
      "op": "JUMPI"
    },
    "3498": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3500": {
      "op": "DUP1"
    },
    "3501": {
      "op": "REVERT"
    },
    "3502": {
      "op": "JUMPDEST"
    },
    "3503": {
      "op": "DUP7"
    },
    "3504": {
      "op": "CALLDATALOAD"
    },
    "3505": {
      "op": "SWAP6"
    },
    "3506": {
      "op": "POP"
    },
    "3507": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3509": {
      "op": "DUP8"
    },
    "3510": {
      "op": "ADD"
    },
    "3511": {
      "op": "CALLDATALOAD"
    },
    "3512": {
      "op": "SWAP5"
    },
    "3513": {
      "op": "POP"
    },
    "3514": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3516": {
      "op": "DUP8"
    },
    "3517": {
      "op": "ADD"
    },
    "3518": {
      "op": "CALLDATALOAD"
    },
    "3519": {
      "op": "SWAP4"
    },
    "3520": {
      "op": "POP"
    },
    "3521": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3523": {
      "op": "DUP8"
    },
    "3524": {
      "op": "ADD"
    },
    "3525": {
      "op": "CALLDATALOAD"
    },
    "3526": {
      "op": "SWAP3"
    },
    "3527": {
      "op": "POP"
    },
    "3528": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3530": {
      "op": "DUP8"
    },
    "3531": {
      "op": "ADD"
    },
    "3532": {
      "op": "CALLDATALOAD"
    },
    "3533": {
      "op": "SWAP2"
    },
    "3534": {
      "op": "POP"
    },
    "3535": {
      "op": "PUSH2",
      "value": "0xDDA"
    },
    "3538": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3540": {
      "op": "DUP9"
    },
    "3541": {
      "op": "ADD"
    },
    "3542": {
      "op": "PUSH2",
      "value": "0xD4D"
    },
    "3545": {
      "jump": "i",
      "op": "JUMP"
    },
    "3546": {
      "op": "JUMPDEST"
    },
    "3547": {
      "op": "SWAP1"
    },
    "3548": {
      "op": "POP"
    },
    "3549": {
      "op": "SWAP3"
    },
    "3550": {
      "op": "SWAP6"
    },
    "3551": {
      "op": "POP"
    },
    "3552": {
      "op": "SWAP3"
    },
    "3553": {
      "op": "SWAP6"
    },
    "3554": {
      "op": "POP"
    },
    "3555": {
      "op": "SWAP3"
    },
    "3556": {
      "op": "SWAP6"
    },
    "3557": {
      "jump": "o",
      "op": "JUMP"
    },
    "3558": {
      "op": "JUMPDEST"
    },
    "3559": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3561": {
      "op": "DUP1"
    },
    "3562": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3564": {
      "op": "DUP1"
    },
    "3565": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3567": {
      "op": "DUP6"
    },
    "3568": {
      "op": "DUP8"
    },
    "3569": {
      "op": "SUB"
    },
    "3570": {
      "op": "SLT"
    },
    "3571": {
      "op": "ISZERO"
    },
    "3572": {
      "op": "PUSH2",
      "value": "0xDFC"
    },
    "3575": {
      "op": "JUMPI"
    },
    "3576": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3578": {
      "op": "DUP1"
    },
    "3579": {
      "op": "REVERT"
    },
    "3580": {
      "op": "JUMPDEST"
    },
    "3581": {
      "op": "POP"
    },
    "3582": {
      "op": "POP"
    },
    "3583": {
      "op": "DUP3"
    },
    "3584": {
      "op": "CALLDATALOAD"
    },
    "3585": {
      "op": "SWAP5"
    },
    "3586": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3588": {
      "op": "DUP5"
    },
    "3589": {
      "op": "ADD"
    },
    "3590": {
      "op": "CALLDATALOAD"
    },
    "3591": {
      "op": "SWAP5"
    },
    "3592": {
      "op": "POP"
    },
    "3593": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3595": {
      "op": "DUP5"
    },
    "3596": {
      "op": "ADD"
    },
    "3597": {
      "op": "CALLDATALOAD"
    },
    "3598": {
      "op": "SWAP4"
    },
    "3599": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3601": {
      "op": "ADD"
    },
    "3602": {
      "op": "CALLDATALOAD"
    },
    "3603": {
      "op": "SWAP3"
    },
    "3604": {
      "op": "POP"
    },
    "3605": {
      "op": "SWAP1"
    },
    "3606": {
      "op": "POP"
    },
    "3607": {
      "jump": "o",
      "op": "JUMP"
    },
    "3608": {
      "op": "JUMPDEST"
    },
    "3609": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3611": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3613": {
      "op": "DUP3"
    },
    "3614": {
      "op": "DUP5"
    },
    "3615": {
      "op": "SUB"
    },
    "3616": {
      "op": "SLT"
    },
    "3617": {
      "op": "ISZERO"
    },
    "3618": {
      "op": "PUSH2",
      "value": "0xE2A"
    },
    "3621": {
      "op": "JUMPI"
    },
    "3622": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3624": {
      "op": "DUP1"
    },
    "3625": {
      "op": "REVERT"
    },
    "3626": {
      "op": "JUMPDEST"
    },
    "3627": {
      "op": "POP"
    },
    "3628": {
      "op": "CALLDATALOAD"
    },
    "3629": {
      "op": "SWAP2"
    },
    "3630": {
      "op": "SWAP1"
    },
    "3631": {
      "op": "POP"
    },
    "3632": {
      "jump": "o",
      "op": "JUMP"
    },
    "3633": {
      "op": "JUMPDEST"
    },
    "3634": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3636": {
      "op": "DUP1"
    },
    "3637": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3639": {
      "op": "DUP4"
    },
    "3640": {
      "op": "DUP6"
    },
    "3641": {
      "op": "SUB"
    },
    "3642": {
      "op": "SLT"
    },
    "3643": {
      "op": "ISZERO"
    },
    "3644": {
      "op": "PUSH2",
      "value": "0xE44"
    },
    "3647": {
      "op": "JUMPI"
    },
    "3648": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3650": {
      "op": "DUP1"
    },
    "3651": {
      "op": "REVERT"
    },
    "3652": {
      "op": "JUMPDEST"
    },
    "3653": {
      "op": "PUSH2",
      "value": "0xE4D"
    },
    "3656": {
      "op": "DUP4"
    },
    "3657": {
      "op": "PUSH2",
      "value": "0xD4D"
    },
    "3660": {
      "jump": "i",
      "op": "JUMP"
    },
    "3661": {
      "op": "JUMPDEST"
    },
    "3662": {
      "op": "SWAP5"
    },
    "3663": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3665": {
      "op": "SWAP4"
    },
    "3666": {
      "op": "SWAP1"
    },
    "3667": {
      "op": "SWAP4"
    },
    "3668": {
      "op": "ADD"
    },
    "3669": {
      "op": "CALLDATALOAD"
    },
    "3670": {
      "op": "SWAP4"
    },
    "3671": {
      "op": "POP"
    },
    "3672": {
      "op": "POP"
    },
    "3673": {
      "op": "POP"
    },
    "3674": {
      "jump": "o",
      "op": "JUMP"
    },
    "3675": {
      "op": "JUMPDEST"
    },
    "3676": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3678": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3680": {
      "op": "DUP3"
    },
    "3681": {
      "op": "DUP5"
    },
    "3682": {
      "op": "SUB"
    },
    "3683": {
      "op": "SLT"
    },
    "3684": {
      "op": "ISZERO"
    },
    "3685": {
      "op": "PUSH2",
      "value": "0xE6D"
    },
    "3688": {
      "op": "JUMPI"
    },
    "3689": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3691": {
      "op": "DUP1"
    },
    "3692": {
      "op": "REVERT"
    },
    "3693": {
      "op": "JUMPDEST"
    },
    "3694": {
      "op": "PUSH2",
      "value": "0xE76"
    },
    "3697": {
      "op": "DUP3"
    },
    "3698": {
      "op": "PUSH2",
      "value": "0xD4D"
    },
    "3701": {
      "jump": "i",
      "op": "JUMP"
    },
    "3702": {
      "op": "JUMPDEST"
    },
    "3703": {
      "op": "SWAP4"
    },
    "3704": {
      "op": "SWAP3"
    },
    "3705": {
      "op": "POP"
    },
    "3706": {
      "op": "POP"
    },
    "3707": {
      "op": "POP"
    },
    "3708": {
      "jump": "o",
      "op": "JUMP"
    },
    "3709": {
      "op": "JUMPDEST"
    },
    "3710": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3715": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3717": {
      "op": "SHL"
    },
    "3718": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3720": {
      "op": "MSTORE"
    },
    "3721": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "3723": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3725": {
      "op": "MSTORE"
    },
    "3726": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3728": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3730": {
      "op": "REVERT"
    },
    "3731": {
      "op": "JUMPDEST"
    },
    "3732": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3734": {
      "op": "DUP1"
    },
    "3735": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3737": {
      "op": "DUP1"
    },
    "3738": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3740": {
      "op": "DUP1"
    },
    "3741": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "3743": {
      "op": "DUP8"
    },
    "3744": {
      "op": "DUP10"
    },
    "3745": {
      "op": "SUB"
    },
    "3746": {
      "op": "SLT"
    },
    "3747": {
      "op": "ISZERO"
    },
    "3748": {
      "op": "PUSH2",
      "value": "0xEAC"
    },
    "3751": {
      "op": "JUMPI"
    },
    "3752": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3754": {
      "op": "DUP1"
    },
    "3755": {
      "op": "REVERT"
    },
    "3756": {
      "op": "JUMPDEST"
    },
    "3757": {
      "op": "DUP7"
    },
    "3758": {
      "op": "CALLDATALOAD"
    },
    "3759": {
      "op": "SWAP6"
    },
    "3760": {
      "op": "POP"
    },
    "3761": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3763": {
      "op": "PUSH2",
      "value": "0xEBD"
    },
    "3766": {
      "op": "DUP2"
    },
    "3767": {
      "op": "DUP10"
    },
    "3768": {
      "op": "ADD"
    },
    "3769": {
      "op": "PUSH2",
      "value": "0xD4D"
    },
    "3772": {
      "jump": "i",
      "op": "JUMP"
    },
    "3773": {
      "op": "JUMPDEST"
    },
    "3774": {
      "op": "SWAP6"
    },
    "3775": {
      "op": "POP"
    },
    "3776": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3778": {
      "op": "DUP9"
    },
    "3779": {
      "op": "ADD"
    },
    "3780": {
      "op": "CALLDATALOAD"
    },
    "3781": {
      "op": "SWAP5"
    },
    "3782": {
      "op": "POP"
    },
    "3783": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3785": {
      "op": "DUP9"
    },
    "3786": {
      "op": "ADD"
    },
    "3787": {
      "op": "CALLDATALOAD"
    },
    "3788": {
      "op": "SWAP4"
    },
    "3789": {
      "op": "POP"
    },
    "3790": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3792": {
      "op": "DUP9"
    },
    "3793": {
      "op": "ADD"
    },
    "3794": {
      "op": "CALLDATALOAD"
    },
    "3795": {
      "op": "SWAP3"
    },
    "3796": {
      "op": "POP"
    },
    "3797": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3799": {
      "op": "DUP9"
    },
    "3800": {
      "op": "ADD"
    },
    "3801": {
      "op": "CALLDATALOAD"
    },
    "3802": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3811": {
      "op": "DUP1"
    },
    "3812": {
      "op": "DUP3"
    },
    "3813": {
      "op": "GT"
    },
    "3814": {
      "op": "ISZERO"
    },
    "3815": {
      "op": "PUSH2",
      "value": "0xEEF"
    },
    "3818": {
      "op": "JUMPI"
    },
    "3819": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3821": {
      "op": "DUP1"
    },
    "3822": {
      "op": "REVERT"
    },
    "3823": {
      "op": "JUMPDEST"
    },
    "3824": {
      "op": "DUP2"
    },
    "3825": {
      "op": "DUP11"
    },
    "3826": {
      "op": "ADD"
    },
    "3827": {
      "op": "SWAP2"
    },
    "3828": {
      "op": "POP"
    },
    "3829": {
      "op": "DUP11"
    },
    "3830": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3832": {
      "op": "DUP4"
    },
    "3833": {
      "op": "ADD"
    },
    "3834": {
      "op": "SLT"
    },
    "3835": {
      "op": "PUSH2",
      "value": "0xF03"
    },
    "3838": {
      "op": "JUMPI"
    },
    "3839": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3841": {
      "op": "DUP1"
    },
    "3842": {
      "op": "REVERT"
    },
    "3843": {
      "op": "JUMPDEST"
    },
    "3844": {
      "op": "DUP2"
    },
    "3845": {
      "op": "CALLDATALOAD"
    },
    "3846": {
      "op": "DUP2"
    },
    "3847": {
      "op": "DUP2"
    },
    "3848": {
      "op": "GT"
    },
    "3849": {
      "op": "ISZERO"
    },
    "3850": {
      "op": "PUSH2",
      "value": "0xF15"
    },
    "3853": {
      "op": "JUMPI"
    },
    "3854": {
      "op": "PUSH2",
      "value": "0xF15"
    },
    "3857": {
      "op": "PUSH2",
      "value": "0xE7D"
    },
    "3860": {
      "jump": "i",
      "op": "JUMP"
    },
    "3861": {
      "op": "JUMPDEST"
    },
    "3862": {
      "op": "DUP1"
    },
    "3863": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "3865": {
      "op": "SHL"
    },
    "3866": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3868": {
      "op": "MLOAD"
    },
    "3869": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3871": {
      "op": "NOT"
    },
    "3872": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "3874": {
      "op": "DUP4"
    },
    "3875": {
      "op": "ADD"
    },
    "3876": {
      "op": "AND"
    },
    "3877": {
      "op": "DUP2"
    },
    "3878": {
      "op": "ADD"
    },
    "3879": {
      "op": "DUP2"
    },
    "3880": {
      "op": "DUP2"
    },
    "3881": {
      "op": "LT"
    },
    "3882": {
      "op": "DUP6"
    },
    "3883": {
      "op": "DUP3"
    },
    "3884": {
      "op": "GT"
    },
    "3885": {
      "op": "OR"
    },
    "3886": {
      "op": "ISZERO"
    },
    "3887": {
      "op": "PUSH2",
      "value": "0xF3A"
    },
    "3890": {
      "op": "JUMPI"
    },
    "3891": {
      "op": "PUSH2",
      "value": "0xF3A"
    },
    "3894": {
      "op": "PUSH2",
      "value": "0xE7D"
    },
    "3897": {
      "jump": "i",
      "op": "JUMP"
    },
    "3898": {
      "op": "JUMPDEST"
    },
    "3899": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3901": {
      "op": "MSTORE"
    },
    "3902": {
      "op": "SWAP2"
    },
    "3903": {
      "op": "DUP3"
    },
    "3904": {
      "op": "MSTORE"
    },
    "3905": {
      "op": "DUP5"
    },
    "3906": {
      "op": "DUP3"
    },
    "3907": {
      "op": "ADD"
    },
    "3908": {
      "op": "SWAP3"
    },
    "3909": {
      "op": "POP"
    },
    "3910": {
      "op": "DUP4"
    },
    "3911": {
      "op": "DUP2"
    },
    "3912": {
      "op": "ADD"
    },
    "3913": {
      "op": "DUP6"
    },
    "3914": {
      "op": "ADD"
    },
    "3915": {
      "op": "SWAP2"
    },
    "3916": {
      "op": "DUP14"
    },
    "3917": {
      "op": "DUP4"
    },
    "3918": {
      "op": "GT"
    },
    "3919": {
      "op": "ISZERO"
    },
    "3920": {
      "op": "PUSH2",
      "value": "0xF58"
    },
    "3923": {
      "op": "JUMPI"
    },
    "3924": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3926": {
      "op": "DUP1"
    },
    "3927": {
      "op": "REVERT"
    },
    "3928": {
      "op": "JUMPDEST"
    },
    "3929": {
      "op": "SWAP4"
    },
    "3930": {
      "op": "DUP6"
    },
    "3931": {
      "op": "ADD"
    },
    "3932": {
      "op": "SWAP4"
    },
    "3933": {
      "op": "JUMPDEST"
    },
    "3934": {
      "op": "DUP3"
    },
    "3935": {
      "op": "DUP6"
    },
    "3936": {
      "op": "LT"
    },
    "3937": {
      "op": "ISZERO"
    },
    "3938": {
      "op": "PUSH2",
      "value": "0xF76"
    },
    "3941": {
      "op": "JUMPI"
    },
    "3942": {
      "op": "DUP5"
    },
    "3943": {
      "op": "CALLDATALOAD"
    },
    "3944": {
      "op": "DUP5"
    },
    "3945": {
      "op": "MSTORE"
    },
    "3946": {
      "op": "SWAP4"
    },
    "3947": {
      "op": "DUP6"
    },
    "3948": {
      "op": "ADD"
    },
    "3949": {
      "op": "SWAP4"
    },
    "3950": {
      "op": "SWAP3"
    },
    "3951": {
      "op": "DUP6"
    },
    "3952": {
      "op": "ADD"
    },
    "3953": {
      "op": "SWAP3"
    },
    "3954": {
      "op": "PUSH2",
      "value": "0xF5D"
    },
    "3957": {
      "op": "JUMP"
    },
    "3958": {
      "op": "JUMPDEST"
    },
    "3959": {
      "op": "DUP1"
    },
    "3960": {
      "op": "SWAP7"
    },
    "3961": {
      "op": "POP"
    },
    "3962": {
      "op": "POP"
    },
    "3963": {
      "op": "POP"
    },
    "3964": {
      "op": "POP"
    },
    "3965": {
      "op": "POP"
    },
    "3966": {
      "op": "POP"
    },
    "3967": {
      "op": "POP"
    },
    "3968": {
      "op": "SWAP3"
    },
    "3969": {
      "op": "SWAP6"
    },
    "3970": {
      "op": "POP"
    },
    "3971": {
      "op": "SWAP3"
    },
    "3972": {
      "op": "SWAP6"
    },
    "3973": {
      "op": "POP"
    },
    "3974": {
      "op": "SWAP3"
    },
    "3975": {
      "op": "SWAP6"
    },
    "3976": {
      "jump": "o",
      "op": "JUMP"
    },
    "3977": {
      "op": "JUMPDEST"
    },
    "3978": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3983": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3985": {
      "op": "SHL"
    },
    "3986": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3988": {
      "op": "MSTORE"
    },
    "3989": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3991": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3993": {
      "op": "MSTORE"
    },
    "3994": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3996": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3998": {
      "op": "REVERT"
    },
    "3999": {
      "op": "JUMPDEST"
    },
    "4000": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4002": {
      "op": "DUP3"
    },
    "4003": {
      "op": "DUP3"
    },
    "4004": {
      "op": "LT"
    },
    "4005": {
      "op": "ISZERO"
    },
    "4006": {
      "op": "PUSH2",
      "value": "0xFB1"
    },
    "4009": {
      "op": "JUMPI"
    },
    "4010": {
      "op": "PUSH2",
      "value": "0xFB1"
    },
    "4013": {
      "op": "PUSH2",
      "value": "0xF89"
    },
    "4016": {
      "jump": "i",
      "op": "JUMP"
    },
    "4017": {
      "op": "JUMPDEST"
    },
    "4018": {
      "op": "POP"
    },
    "4019": {
      "op": "SUB"
    },
    "4020": {
      "op": "SWAP1"
    },
    "4021": {
      "jump": "o",
      "op": "JUMP"
    },
    "4022": {
      "op": "JUMPDEST"
    },
    "4023": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4025": {
      "op": "DUP2"
    },
    "4026": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4028": {
      "op": "NOT"
    },
    "4029": {
      "op": "DIV"
    },
    "4030": {
      "op": "DUP4"
    },
    "4031": {
      "op": "GT"
    },
    "4032": {
      "op": "DUP3"
    },
    "4033": {
      "op": "ISZERO"
    },
    "4034": {
      "op": "ISZERO"
    },
    "4035": {
      "op": "AND"
    },
    "4036": {
      "op": "ISZERO"
    },
    "4037": {
      "op": "PUSH2",
      "value": "0xFD0"
    },
    "4040": {
      "op": "JUMPI"
    },
    "4041": {
      "op": "PUSH2",
      "value": "0xFD0"
    },
    "4044": {
      "op": "PUSH2",
      "value": "0xF89"
    },
    "4047": {
      "jump": "i",
      "op": "JUMP"
    },
    "4048": {
      "op": "JUMPDEST"
    },
    "4049": {
      "op": "POP"
    },
    "4050": {
      "op": "MUL"
    },
    "4051": {
      "op": "SWAP1"
    },
    "4052": {
      "jump": "o",
      "op": "JUMP"
    },
    "4053": {
      "op": "JUMPDEST"
    },
    "4054": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4056": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4058": {
      "op": "DUP3"
    },
    "4059": {
      "op": "DUP5"
    },
    "4060": {
      "op": "SUB"
    },
    "4061": {
      "op": "SLT"
    },
    "4062": {
      "op": "ISZERO"
    },
    "4063": {
      "op": "PUSH2",
      "value": "0xFE7"
    },
    "4066": {
      "op": "JUMPI"
    },
    "4067": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4069": {
      "op": "DUP1"
    },
    "4070": {
      "op": "REVERT"
    },
    "4071": {
      "op": "JUMPDEST"
    },
    "4072": {
      "op": "DUP2"
    },
    "4073": {
      "op": "MLOAD"
    },
    "4074": {
      "op": "DUP1"
    },
    "4075": {
      "op": "ISZERO"
    },
    "4076": {
      "op": "ISZERO"
    },
    "4077": {
      "op": "DUP2"
    },
    "4078": {
      "op": "EQ"
    },
    "4079": {
      "op": "PUSH2",
      "value": "0xE76"
    },
    "4082": {
      "op": "JUMPI"
    },
    "4083": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4085": {
      "op": "DUP1"
    },
    "4086": {
      "op": "REVERT"
    },
    "4087": {
      "op": "JUMPDEST"
    },
    "4088": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4090": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4092": {
      "op": "NOT"
    },
    "4093": {
      "op": "DUP3"
    },
    "4094": {
      "op": "EQ"
    },
    "4095": {
      "op": "ISZERO"
    },
    "4096": {
      "op": "PUSH2",
      "value": "0x100B"
    },
    "4099": {
      "op": "JUMPI"
    },
    "4100": {
      "op": "PUSH2",
      "value": "0x100B"
    },
    "4103": {
      "op": "PUSH2",
      "value": "0xF89"
    },
    "4106": {
      "jump": "i",
      "op": "JUMP"
    },
    "4107": {
      "op": "JUMPDEST"
    },
    "4108": {
      "op": "POP"
    },
    "4109": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4111": {
      "op": "ADD"
    },
    "4112": {
      "op": "SWAP1"
    },
    "4113": {
      "jump": "o",
      "op": "JUMP"
    },
    "4114": {
      "op": "JUMPDEST"
    },
    "4115": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4117": {
      "op": "DUP3"
    },
    "4118": {
      "op": "PUSH2",
      "value": "0x102F"
    },
    "4121": {
      "op": "JUMPI"
    },
    "4122": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "4127": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "4129": {
      "op": "SHL"
    },
    "4130": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4132": {
      "op": "MSTORE"
    },
    "4133": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "4135": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "4137": {
      "op": "MSTORE"
    },
    "4138": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4140": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4142": {
      "op": "REVERT"
    },
    "4143": {
      "op": "JUMPDEST"
    },
    "4144": {
      "op": "POP"
    },
    "4145": {
      "op": "DIV"
    },
    "4146": {
      "op": "SWAP1"
    },
    "4147": {
      "jump": "o",
      "op": "JUMP"
    },
    "4148": {
      "op": "JUMPDEST"
    },
    "4149": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4151": {
      "op": "DUP3"
    },
    "4152": {
      "op": "NOT"
    },
    "4153": {
      "op": "DUP3"
    },
    "4154": {
      "op": "GT"
    },
    "4155": {
      "op": "ISZERO"
    },
    "4156": {
      "op": "PUSH2",
      "value": "0x1047"
    },
    "4159": {
      "op": "JUMPI"
    },
    "4160": {
      "op": "PUSH2",
      "value": "0x1047"
    },
    "4163": {
      "op": "PUSH2",
      "value": "0xF89"
    },
    "4166": {
      "jump": "i",
      "op": "JUMP"
    },
    "4167": {
      "op": "JUMPDEST"
    },
    "4168": {
      "op": "POP"
    },
    "4169": {
      "op": "ADD"
    },
    "4170": {
      "op": "SWAP1"
    },
    "4171": {
      "jump": "o",
      "op": "JUMP"
    },
    "4172": {
      "op": "JUMPDEST"
    },
    "4173": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4175": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4177": {
      "op": "DUP3"
    },
    "4178": {
      "op": "ADD"
    },
    "4179": {
      "op": "DUP6"
    },
    "4180": {
      "op": "DUP4"
    },
    "4181": {
      "op": "MSTORE"
    },
    "4182": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4184": {
      "op": "DUP6"
    },
    "4185": {
      "op": "DUP2"
    },
    "4186": {
      "op": "DUP6"
    },
    "4187": {
      "op": "ADD"
    },
    "4188": {
      "op": "MSTORE"
    },
    "4189": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4191": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4193": {
      "op": "DUP6"
    },
    "4194": {
      "op": "ADD"
    },
    "4195": {
      "op": "MSTORE"
    },
    "4196": {
      "op": "DUP2"
    },
    "4197": {
      "op": "DUP6"
    },
    "4198": {
      "op": "MLOAD"
    },
    "4199": {
      "op": "DUP1"
    },
    "4200": {
      "op": "DUP5"
    },
    "4201": {
      "op": "MSTORE"
    },
    "4202": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4204": {
      "op": "DUP7"
    },
    "4205": {
      "op": "ADD"
    },
    "4206": {
      "op": "SWAP2"
    },
    "4207": {
      "op": "POP"
    },
    "4208": {
      "op": "DUP3"
    },
    "4209": {
      "op": "DUP8"
    },
    "4210": {
      "op": "ADD"
    },
    "4211": {
      "op": "SWAP4"
    },
    "4212": {
      "op": "POP"
    },
    "4213": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "4215": {
      "op": "JUMPDEST"
    },
    "4216": {
      "op": "DUP2"
    },
    "4217": {
      "op": "DUP2"
    },
    "4218": {
      "op": "LT"
    },
    "4219": {
      "op": "ISZERO"
    },
    "4220": {
      "op": "PUSH2",
      "value": "0x1093"
    },
    "4223": {
      "op": "JUMPI"
    },
    "4224": {
      "op": "DUP5"
    },
    "4225": {
      "op": "MLOAD"
    },
    "4226": {
      "op": "DUP4"
    },
    "4227": {
      "op": "MSTORE"
    },
    "4228": {
      "op": "SWAP4"
    },
    "4229": {
      "op": "DUP4"
    },
    "4230": {
      "op": "ADD"
    },
    "4231": {
      "op": "SWAP4"
    },
    "4232": {
      "op": "SWAP2"
    },
    "4233": {
      "op": "DUP4"
    },
    "4234": {
      "op": "ADD"
    },
    "4235": {
      "op": "SWAP2"
    },
    "4236": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4238": {
      "op": "ADD"
    },
    "4239": {
      "op": "PUSH2",
      "value": "0x1077"
    },
    "4242": {
      "op": "JUMP"
    },
    "4243": {
      "op": "JUMPDEST"
    },
    "4244": {
      "op": "POP"
    },
    "4245": {
      "op": "SWAP1"
    },
    "4246": {
      "op": "SWAP9"
    },
    "4247": {
      "op": "SWAP8"
    },
    "4248": {
      "op": "POP"
    },
    "4249": {
      "op": "POP"
    },
    "4250": {
      "op": "POP"
    },
    "4251": {
      "op": "POP"
    },
    "4252": {
      "op": "POP"
    },
    "4253": {
      "op": "POP"
    },
    "4254": {
      "op": "POP"
    },
    "4255": {
      "op": "POP"
    },
    "4256": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "4275a6318768b03e4ecc516191728098e3e7846b",
  "source": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./MerkleLib.sol\";\n\ncontract MerkleResistor {\n    using MerkleLib for bytes32;\n\n    uint public numTrees = 0;\n\n    uint public initialBalance;\n    address public management;\n\n    struct Tranche {\n        uint totalCoins;\n        uint currentCoins;\n        uint startTime;\n        uint endTime;\n        uint coinsPerSecond;\n        uint lastWithdrawalTime;\n    }\n\n    struct MerkleTree {\n        bytes32 merkleRoot;\n        bytes32 ipfsHash;\n        uint minEndTime; // offsets\n        uint maxEndTime; // offsets\n        uint pctUpFront;\n        address tokenAddress;\n    }\n\n    mapping (address => mapping (uint => bool)) public initialized;\n    mapping (uint => MerkleTree) public merkleTrees;\n    mapping (address => mapping (uint => Tranche)) public tranches;\n\n    uint constant public PRECISION = 1000000;\n    uint constant public ERROR_TOLERANCE = 1;\n\n    event WithdrawalOccurred(address indexed destination, uint numTokens, uint tokensLeft, uint indexed merkleIndex);\n    event MerkleTreeAdded(uint indexed index, address indexed tokenAddress, bytes32 newRoot, bytes32 ipfsHash);\n    event ManagementUpdated(address oldManagement, address newManagement);\n\n    modifier managementOnly() {\n        require (msg.sender == management, 'Only management may call this');\n        _;\n    }\n\n    constructor(address mgmt) {\n        management = mgmt;\n    }\n\n    // change the management key\n    function setManagement(address newMgmt) public managementOnly {\n        address oldMgmt = management;\n        management = newMgmt;\n        emit ManagementUpdated(oldMgmt, newMgmt);\n    }\n\n    function addMerkleTree(bytes32 newRoot, bytes32 ipfsHash, uint minEndTime, uint maxEndTime, uint pctUpFront, address depositToken) public managementOnly {\n        require(pctUpFront < 100, 'pctUpFront >= 100');\n        require(minEndTime < maxEndTime, 'minEndTime must be less than maxEndTime');\n        merkleTrees[++numTrees] = MerkleTree(\n            newRoot,\n            ipfsHash,\n            minEndTime,\n            maxEndTime,\n            pctUpFront,\n            depositToken\n        );\n        emit MerkleTreeAdded(numTrees, depositToken, newRoot, ipfsHash);\n    }\n\n    function initialize(uint merkleIndex, address destination, uint vestingTime, uint minTotalPayments, uint maxTotalPayments, bytes32[] memory proof) external {\n        require(msg.sender == destination, 'Can only initialize your own tranche');\n        require(!initialized[destination][merkleIndex], \"Already initialized\");\n        bytes32 leaf = keccak256(abi.encode(destination, minTotalPayments, maxTotalPayments));\n        MerkleTree memory tree = merkleTrees[merkleIndex];\n        require(tree.merkleRoot.verifyProof(leaf, proof), \"The proof could not be verified.\");\n        initialized[destination][merkleIndex] = true;\n\n        (bool valid, uint totalCoins, uint coinsPerSecond, uint startTime) = verifyVestingSchedule(merkleIndex, vestingTime, minTotalPayments, maxTotalPayments);\n        require(valid, 'Invalid vesting schedule');\n\n        tranches[destination][merkleIndex] = Tranche(\n            totalCoins,\n            totalCoins,\n            startTime,\n            block.timestamp + vestingTime,\n            coinsPerSecond,\n            startTime\n        );\n        withdraw(merkleIndex, destination);\n    }\n\n    function withdraw(uint merkleIndex, address destination) public {\n        require(initialized[destination][merkleIndex], \"You must initialize your account first.\");\n        Tranche storage tranche = tranches[destination][merkleIndex];\n        MerkleTree memory tree = merkleTrees[merkleIndex];\n        require(tranche.currentCoins >  0, 'No coins left to withdraw');\n        uint currentWithdrawal = 0;\n\n        // if after vesting period ends, give them the remaining coins\n        if (block.timestamp >= tranche.endTime) {\n            currentWithdrawal = tranche.currentCoins;\n        } else {\n            // compute allowed withdrawal\n            currentWithdrawal = (block.timestamp - tranche.lastWithdrawalTime) * tranche.coinsPerSecond;\n        }\n\n        // update struct\n        tranche.currentCoins -= currentWithdrawal;\n        tranche.lastWithdrawalTime = block.timestamp;\n\n        // transfer the tokens, brah\n        IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal);\n        emit WithdrawalOccurred(destination, currentWithdrawal, tranche.currentCoins, merkleIndex);\n    }\n\n    function verifyVestingSchedule(uint merkleIndex, uint vestingTime, uint minTotalPayments, uint maxTotalPayments) public view returns (bool, uint, uint, uint) {\n        if (merkleIndex > numTrees) {\n            return (false, 0, 0, 0);\n        }\n\n        MerkleTree memory tree = merkleTrees[merkleIndex];\n\n        if (vestingTime > tree.maxEndTime || vestingTime < tree.minEndTime) {\n            return (false, 0, 0, 0);\n        }\n\n        uint totalCoins;\n        if (vestingTime == tree.maxEndTime) {\n            totalCoins = maxTotalPayments;\n        } else {\n            uint paymentSlope = (maxTotalPayments - minTotalPayments) * PRECISION / (tree.maxEndTime - tree.minEndTime);\n            totalCoins = (paymentSlope * (vestingTime - tree.minEndTime) / PRECISION) + minTotalPayments;\n        }\n\n        uint coinsPerSecond = (totalCoins * (uint(100) - tree.pctUpFront)) / (vestingTime * 100);\n        uint startTime = block.timestamp + vestingTime - (totalCoins / coinsPerSecond);\n\n        return (true, totalCoins, coinsPerSecond, startTime);\n    }\n\n}\n",
  "sourceMap": "128:5436:2:-:0;;;215:1;192:24;;1403:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1439:10;:17;;-1:-1:-1;;;;;;1439:17:2;-1:-1:-1;;;;;1439:17:2;;;;;;;;;;128:5436;;14:290:5;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:5;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:5:o;:::-;128:5436:2;;;;;;",
  "sourcePath": "contracts/MerkleResistor.sol",
  "type": "contract"
}