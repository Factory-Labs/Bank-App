{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "BadProof",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        }
      ],
      "name": "BadTreeIndex",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "leafHash",
          "type": "bytes32"
        }
      ],
      "name": "LeafAlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        }
      ],
      "name": "TokensNotTransferred",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        }
      ],
      "name": "MerkleTreeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalOccurred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        }
      ],
      "name": "addMerkleTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "depositTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleTrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spentTokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTrees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "3": "contracts/MerkleDropFactory.sol",
    "4": "contracts/MerkleLib.sol",
    "7": "interfaces/IERC20.sol"
  },
  "ast": {
    "absolutePath": "contracts/MerkleDropFactory.sol",
    "exportedSymbols": {
      "IERC20": [
        2837
      ],
      "MerkleDropFactory": [
        1293
      ],
      "MerkleLib": [
        1370
      ]
    },
    "id": 1294,
    "license": "GPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 926,
        "literals": [
          "solidity",
          "0.8",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "42:23:3"
      },
      {
        "absolutePath": "interfaces/IERC20.sol",
        "file": "../interfaces/IERC20.sol",
        "id": 927,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1294,
        "sourceUnit": 2838,
        "src": "67:34:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/MerkleLib.sol",
        "file": "./MerkleLib.sol",
        "id": 928,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1294,
        "sourceUnit": 1371,
        "src": "102:25:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "MerkleDropFactory",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 929,
          "nodeType": "StructuredDocumentation",
          "src": "129:532:3",
          "text": "@title A factory pattern for merkledrops, that is, airdrops using merkleproofs to compute eligibility\n @author metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki\n @notice This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.\n @dev The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof,\n @dev therefore the total liabilities of the merkle tree are untrusted and tree balances must be managed separately"
        },
        "fullyImplemented": true,
        "id": 1293,
        "linearizedBaseContracts": [
          1293
        ],
        "name": "MerkleDropFactory",
        "nameLocation": "670:17:3",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 932,
            "libraryName": {
              "id": 930,
              "name": "MerkleLib",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1370,
              "src": "700:9:3"
            },
            "nodeType": "UsingForDirective",
            "src": "694:28:3",
            "typeName": {
              "id": 931,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "714:7:3",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "390b7c66",
            "id": 934,
            "mutability": "mutable",
            "name": "numTrees",
            "nameLocation": "787:8:3",
            "nodeType": "VariableDeclaration",
            "scope": 1293,
            "src": "775:20:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 933,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "775:4:3",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "canonicalName": "MerkleDropFactory.MerkleTree",
            "id": 949,
            "members": [
              {
                "constant": false,
                "id": 936,
                "mutability": "mutable",
                "name": "merkleRoot",
                "nameLocation": "878:10:3",
                "nodeType": "VariableDeclaration",
                "scope": 949,
                "src": "870:18:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 935,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "870:7:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 938,
                "mutability": "mutable",
                "name": "ipfsHash",
                "nameLocation": "1000:8:3",
                "nodeType": "VariableDeclaration",
                "scope": 949,
                "src": "992:16:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 937,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "992:7:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 940,
                "mutability": "mutable",
                "name": "tokenAddress",
                "nameLocation": "1100:12:3",
                "nodeType": "VariableDeclaration",
                "scope": 949,
                "src": "1092:20:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 939,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1092:7:3",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 942,
                "mutability": "mutable",
                "name": "tokenBalance",
                "nameLocation": "1172:12:3",
                "nodeType": "VariableDeclaration",
                "scope": 949,
                "src": "1167:17:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 941,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1167:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 944,
                "mutability": "mutable",
                "name": "spentTokens",
                "nameLocation": "1243:11:3",
                "nodeType": "VariableDeclaration",
                "scope": 949,
                "src": "1238:16:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 943,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1238:4:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 948,
                "mutability": "mutable",
                "name": "withdrawn",
                "nameLocation": "1335:9:3",
                "nodeType": "VariableDeclaration",
                "scope": 949,
                "src": "1309:35:3",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                  "typeString": "mapping(bytes32 => bool)"
                },
                "typeName": {
                  "id": 947,
                  "keyType": {
                    "id": 945,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1318:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "1309:25:3",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                    "typeString": "mapping(bytes32 => bool)"
                  },
                  "valueType": {
                    "id": 946,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1329:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "MerkleTree",
            "nameLocation": "849:10:3",
            "nodeType": "StructDefinition",
            "scope": 1293,
            "src": "842:509:3",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "85d88cb1",
            "id": 954,
            "mutability": "mutable",
            "name": "merkleTrees",
            "nameLocation": "1450:11:3",
            "nodeType": "VariableDeclaration",
            "scope": 1293,
            "src": "1414:47:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$949_storage_$",
              "typeString": "mapping(uint256 => struct MerkleDropFactory.MerkleTree)"
            },
            "typeName": {
              "id": 953,
              "keyType": {
                "id": 950,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "1423:4:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1414:28:3",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$949_storage_$",
                "typeString": "mapping(uint256 => struct MerkleDropFactory.MerkleTree)"
              },
              "valueType": {
                "id": 952,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 951,
                  "name": "MerkleTree",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 949,
                  "src": "1431:10:3"
                },
                "referencedDeclaration": 949,
                "src": "1431:10:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                  "typeString": "struct MerkleDropFactory.MerkleTree"
                }
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 962,
            "name": "WithdrawalOccurred",
            "nameLocation": "1511:18:3",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 961,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 956,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "1543:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 962,
                  "src": "1530:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 955,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1530:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 958,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "1570:11:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 962,
                  "src": "1554:27:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 957,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1554:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 960,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "1588:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 962,
                  "src": "1583:10:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 959,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1583:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1529:65:3"
            },
            "src": "1505:90:3"
          },
          {
            "anonymous": false,
            "id": 972,
            "name": "MerkleTreeAdded",
            "nameLocation": "1641:15:3",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 971,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 964,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "1670:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 972,
                  "src": "1657:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 963,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1657:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 966,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "1697:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 972,
                  "src": "1681:28:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 965,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1681:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 968,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "1719:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 972,
                  "src": "1711:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 967,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1711:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 970,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "1736:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 972,
                  "src": "1728:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 969,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1728:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1656:89:3"
            },
            "src": "1635:111:3"
          },
          {
            "anonymous": false,
            "id": 980,
            "name": "TokensDeposited",
            "nameLocation": "1796:15:3",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 979,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 974,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "1825:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 980,
                  "src": "1812:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 973,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1812:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 976,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "1852:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 980,
                  "src": "1836:28:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 975,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1836:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 978,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1871:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 980,
                  "src": "1866:11:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 977,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1866:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1811:67:3"
            },
            "src": "1790:89:3"
          },
          {
            "id": 984,
            "name": "BadTreeIndex",
            "nameLocation": "1891:12:3",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 983,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 982,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "1909:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 984,
                  "src": "1904:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 981,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1904:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1903:16:3"
            },
            "src": "1885:35:3"
          },
          {
            "id": 990,
            "name": "LeafAlreadyClaimed",
            "nameLocation": "1931:18:3",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 989,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 986,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "1955:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 990,
                  "src": "1950:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 985,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1950:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 988,
                  "mutability": "mutable",
                  "name": "leafHash",
                  "nameLocation": "1974:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 990,
                  "src": "1966:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 987,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1966:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1949:34:3"
            },
            "src": "1925:59:3"
          },
          {
            "id": 999,
            "name": "BadProof",
            "nameLocation": "1995:8:3",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 998,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 992,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "2009:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 999,
                  "src": "2004:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 991,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2004:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 994,
                  "mutability": "mutable",
                  "name": "leaf",
                  "nameLocation": "2028:4:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 999,
                  "src": "2020:12:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 993,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2020:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 997,
                  "mutability": "mutable",
                  "name": "proof",
                  "nameLocation": "2044:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 999,
                  "src": "2034:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 995,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "2034:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 996,
                    "nodeType": "ArrayTypeName",
                    "src": "2034:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2003:47:3"
            },
            "src": "1989:62:3"
          },
          {
            "id": 1005,
            "name": "TokensNotTransferred",
            "nameLocation": "2062:20:3",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 1004,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1001,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "2088:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1005,
                  "src": "2083:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1000,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2083:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1003,
                  "mutability": "mutable",
                  "name": "leaf",
                  "nameLocation": "2107:4:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1005,
                  "src": "2099:12:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1002,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2099:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2082:30:3"
            },
            "src": "2056:57:3"
          },
          {
            "body": {
              "id": 1055,
              "nodeType": "Block",
              "src": "2867:480:3",
              "statements": [
                {
                  "assignments": [
                    1019
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1019,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "2952:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1055,
                      "src": "2933:23:3",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                        "typeString": "struct MerkleDropFactory.MerkleTree"
                      },
                      "typeName": {
                        "id": 1018,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1017,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 949,
                          "src": "2933:10:3"
                        },
                        "referencedDeclaration": 949,
                        "src": "2933:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                          "typeString": "struct MerkleDropFactory.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1024,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1020,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 954,
                      "src": "2959:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$949_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleDropFactory.MerkleTree storage ref)"
                      }
                    },
                    "id": 1023,
                    "indexExpression": {
                      "id": 1022,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "2971:10:3",
                      "subExpression": {
                        "id": 1021,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 934,
                        "src": "2973:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2959:23:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$949_storage",
                      "typeString": "struct MerkleDropFactory.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2933:49:3"
                },
                {
                  "expression": {
                    "id": 1029,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1025,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1019,
                        "src": "2992:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                          "typeString": "struct MerkleDropFactory.MerkleTree storage pointer"
                        }
                      },
                      "id": 1027,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "merkleRoot",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 936,
                      "src": "2992:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1028,
                      "name": "newRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1008,
                      "src": "3010:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "2992:25:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 1030,
                  "nodeType": "ExpressionStatement",
                  "src": "2992:25:3"
                },
                {
                  "expression": {
                    "id": 1035,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1031,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1019,
                        "src": "3027:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                          "typeString": "struct MerkleDropFactory.MerkleTree storage pointer"
                        }
                      },
                      "id": 1033,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ipfsHash",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 938,
                      "src": "3027:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1034,
                      "name": "ipfsHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1010,
                      "src": "3043:8:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "3027:24:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 1036,
                  "nodeType": "ExpressionStatement",
                  "src": "3027:24:3"
                },
                {
                  "expression": {
                    "id": 1041,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1037,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1019,
                        "src": "3061:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                          "typeString": "struct MerkleDropFactory.MerkleTree storage pointer"
                        }
                      },
                      "id": 1039,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenAddress",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 940,
                      "src": "3061:17:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1040,
                      "name": "tokenAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1012,
                      "src": "3081:12:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3061:32:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1042,
                  "nodeType": "ExpressionStatement",
                  "src": "3061:32:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1044,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 934,
                        "src": "3176:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1045,
                        "name": "tokenBalance",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1014,
                        "src": "3186:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1043,
                      "name": "depositTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1144,
                      "src": "3162:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,uint256)"
                      }
                    },
                    "id": 1046,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3162:37:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1047,
                  "nodeType": "ExpressionStatement",
                  "src": "3162:37:3"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 1049,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 934,
                        "src": "3298:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1050,
                        "name": "tokenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1012,
                        "src": "3308:12:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1051,
                        "name": "newRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1008,
                        "src": "3322:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 1052,
                        "name": "ipfsHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1010,
                        "src": "3331:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 1048,
                      "name": "MerkleTreeAdded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 972,
                      "src": "3282:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_bytes32_$_t_bytes32_$returns$__$",
                        "typeString": "function (uint256,address,bytes32,bytes32)"
                      }
                    },
                    "id": 1053,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3282:58:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1054,
                  "nodeType": "EmitStatement",
                  "src": "3277:63:3"
                }
              ]
            },
            "documentation": {
              "id": 1006,
              "nodeType": "StructuredDocumentation",
              "src": "2119:637:3",
              "text": "@notice Add a new merkle tree to the contract, creating a new merkle-drop\n @dev Anyone may call this function, therefore we must make sure trees cannot affect each other\n @param newRoot root hash of merkle tree representing liabilities == (destination, value) pairs\n @param ipfsHash the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable\n @param tokenAddress the address of the token contract that is being distributed\n @param tokenBalance the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
            },
            "functionSelector": "f1301ccf",
            "id": 1056,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addMerkleTree",
            "nameLocation": "2770:13:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1015,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1008,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "2792:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1056,
                  "src": "2784:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1007,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2784:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1010,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "2809:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1056,
                  "src": "2801:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 1009,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2801:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1012,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "2827:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1056,
                  "src": "2819:20:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1011,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2819:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1014,
                  "mutability": "mutable",
                  "name": "tokenBalance",
                  "nameLocation": "2846:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1056,
                  "src": "2841:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1013,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2841:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2783:76:3"
            },
            "returnParameters": {
              "id": 1016,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2867:0:3"
            },
            "scope": 1293,
            "src": "2761:586:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1143,
              "nodeType": "Block",
              "src": "3780:1035:3",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 1070,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1066,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1064,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1059,
                        "src": "3794:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 1065,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3807:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "3794:14:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1069,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1067,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1059,
                        "src": "3812:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "id": 1068,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 934,
                        "src": "3824:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "3812:20:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3794:38:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1076,
                  "nodeType": "IfStatement",
                  "src": "3790:99:3",
                  "trueBody": {
                    "id": 1075,
                    "nodeType": "Block",
                    "src": "3834:55:3",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 1072,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1059,
                              "src": "3868:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1071,
                            "name": "BadTreeIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 984,
                            "src": "3855:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) pure"
                            }
                          },
                          "id": 1073,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3855:23:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1074,
                        "nodeType": "RevertStatement",
                        "src": "3848:30:3"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    1079
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1079,
                      "mutability": "mutable",
                      "name": "merkleTree",
                      "nameLocation": "3957:10:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1143,
                      "src": "3938:29:3",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                        "typeString": "struct MerkleDropFactory.MerkleTree"
                      },
                      "typeName": {
                        "id": 1078,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1077,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 949,
                          "src": "3938:10:3"
                        },
                        "referencedDeclaration": 949,
                        "src": "3938:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                          "typeString": "struct MerkleDropFactory.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1083,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1080,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 954,
                      "src": "3970:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$949_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleDropFactory.MerkleTree storage ref)"
                      }
                    },
                    "id": 1082,
                    "indexExpression": {
                      "id": 1081,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1059,
                      "src": "3982:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3970:22:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$949_storage",
                      "typeString": "struct MerkleDropFactory.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3938:54:3"
                },
                {
                  "assignments": [
                    1086
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1086,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "4010:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1143,
                      "src": "4003:12:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$2837",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 1085,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1084,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 2837,
                          "src": "4003:6:3"
                        },
                        "referencedDeclaration": 2837,
                        "src": "4003:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2837",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1091,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 1088,
                          "name": "merkleTree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1079,
                          "src": "4025:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                            "typeString": "struct MerkleDropFactory.MerkleTree storage pointer"
                          }
                        },
                        "id": 1089,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "tokenAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 940,
                        "src": "4025:23:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1087,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2837,
                      "src": "4018:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$2837_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 1090,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4018:31:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$2837",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4003:46:3"
                },
                {
                  "assignments": [
                    1093
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1093,
                      "mutability": "mutable",
                      "name": "balanceBefore",
                      "nameLocation": "4064:13:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1143,
                      "src": "4059:18:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1092,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "4059:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1101,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1098,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "4104:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleDropFactory_$1293",
                              "typeString": "contract MerkleDropFactory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleDropFactory_$1293",
                              "typeString": "contract MerkleDropFactory"
                            }
                          ],
                          "id": 1097,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4096:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1096,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4096:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1099,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4096:13:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1094,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1086,
                        "src": "4080:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2837",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 1095,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2776,
                      "src": "4080:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 1100,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4080:30:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4059:51:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 1105,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "4345:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1106,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "4345:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 1109,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "4365:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleDropFactory_$1293",
                              "typeString": "contract MerkleDropFactory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleDropFactory_$1293",
                              "typeString": "contract MerkleDropFactory"
                            }
                          ],
                          "id": 1108,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4357:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1107,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4357:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1110,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4357:13:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1111,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1061,
                        "src": "4372:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 1102,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1086,
                        "src": "4326:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2837",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 1104,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transferFrom",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2818,
                      "src": "4326:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,address,uint256) external returns (bool)"
                      }
                    },
                    "id": 1112,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4326:52:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1113,
                  "nodeType": "ExpressionStatement",
                  "src": "4326:52:3"
                },
                {
                  "assignments": [
                    1115
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1115,
                      "mutability": "mutable",
                      "name": "balanceAfter",
                      "nameLocation": "4394:12:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1143,
                      "src": "4389:17:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1114,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "4389:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1123,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1120,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "4433:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleDropFactory_$1293",
                              "typeString": "contract MerkleDropFactory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleDropFactory_$1293",
                              "typeString": "contract MerkleDropFactory"
                            }
                          ],
                          "id": 1119,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4425:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1118,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4425:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1121,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4425:13:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1116,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1086,
                        "src": "4409:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2837",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 1117,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2776,
                      "src": "4409:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 1122,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4409:30:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4389:50:3"
                },
                {
                  "assignments": [
                    1125
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1125,
                      "mutability": "mutable",
                      "name": "diff",
                      "nameLocation": "4455:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1143,
                      "src": "4450:9:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1124,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "4450:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1129,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1128,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1126,
                      "name": "balanceAfter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1115,
                      "src": "4462:12:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "id": 1127,
                      "name": "balanceBefore",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1093,
                      "src": "4477:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4462:28:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4450:40:3"
                },
                {
                  "expression": {
                    "id": 1134,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1130,
                        "name": "merkleTree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1079,
                        "src": "4562:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                          "typeString": "struct MerkleDropFactory.MerkleTree storage pointer"
                        }
                      },
                      "id": 1132,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 942,
                      "src": "4562:23:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 1133,
                      "name": "diff",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1125,
                      "src": "4589:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4562:31:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1135,
                  "nodeType": "ExpressionStatement",
                  "src": "4562:31:3"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 1137,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1059,
                        "src": "4767:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 1138,
                          "name": "merkleTree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1079,
                          "src": "4778:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                            "typeString": "struct MerkleDropFactory.MerkleTree storage pointer"
                          }
                        },
                        "id": 1139,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "tokenAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 940,
                        "src": "4778:23:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1140,
                        "name": "diff",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1125,
                        "src": "4803:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1136,
                      "name": "TokensDeposited",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 980,
                      "src": "4751:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,address,uint256)"
                      }
                    },
                    "id": 1141,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4751:57:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1142,
                  "nodeType": "EmitStatement",
                  "src": "4746:62:3"
                }
              ]
            },
            "documentation": {
              "id": 1057,
              "nodeType": "StructuredDocumentation",
              "src": "3353:364:3",
              "text": "@notice Add funds to an existing merkle-drop\n @dev Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious\n @param treeIndex index into array-like map of merkleTrees\n @param value the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
            },
            "functionSelector": "f16ad51e",
            "id": 1144,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "depositTokens",
            "nameLocation": "3731:13:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1062,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1059,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "3750:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1144,
                  "src": "3745:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1058,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3745:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1061,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "3766:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1144,
                  "src": "3761:10:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1060,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "3761:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3744:28:3"
            },
            "returnParameters": {
              "id": 1063,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3780:0:3"
            },
            "scope": 1293,
            "src": "3722:1093:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1291,
              "nodeType": "Block",
              "src": "5522:1766:3",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 1163,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1159,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1157,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1147,
                        "src": "5594:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 1158,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5607:1:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "5594:14:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1162,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1160,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1147,
                        "src": "5612:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "id": 1161,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 934,
                        "src": "5624:8:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "5612:20:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "5594:38:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1169,
                  "nodeType": "IfStatement",
                  "src": "5590:99:3",
                  "trueBody": {
                    "id": 1168,
                    "nodeType": "Block",
                    "src": "5634:55:3",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 1165,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1147,
                              "src": "5668:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1164,
                            "name": "BadTreeIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 984,
                            "src": "5655:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) pure"
                            }
                          },
                          "id": 1166,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5655:23:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1167,
                        "nodeType": "RevertStatement",
                        "src": "5648:30:3"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    1172
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1172,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "5753:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1291,
                      "src": "5734:23:3",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                        "typeString": "struct MerkleDropFactory.MerkleTree"
                      },
                      "typeName": {
                        "id": 1171,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1170,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 949,
                          "src": "5734:10:3"
                        },
                        "referencedDeclaration": 949,
                        "src": "5734:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                          "typeString": "struct MerkleDropFactory.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1176,
                  "initialValue": {
                    "baseExpression": {
                      "id": 1173,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 954,
                      "src": "5760:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$949_storage_$",
                        "typeString": "mapping(uint256 => struct MerkleDropFactory.MerkleTree storage ref)"
                      }
                    },
                    "id": 1175,
                    "indexExpression": {
                      "id": 1174,
                      "name": "treeIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1147,
                      "src": "5772:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5760:22:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$949_storage",
                      "typeString": "struct MerkleDropFactory.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5734:48:3"
                },
                {
                  "assignments": [
                    1178
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1178,
                      "mutability": "mutable",
                      "name": "leaf",
                      "nameLocation": "5864:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1291,
                      "src": "5856:12:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1177,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "5856:7:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1186,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1182,
                            "name": "destination",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1149,
                            "src": "5892:11:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 1183,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1151,
                            "src": "5905:5:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 1180,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "5881:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 1181,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "5881:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 1184,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5881:30:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 1179,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "5871:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 1185,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5871:41:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5856:56:3"
                },
                {
                  "condition": {
                    "baseExpression": {
                      "expression": {
                        "id": 1187,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1172,
                        "src": "5972:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                          "typeString": "struct MerkleDropFactory.MerkleTree storage pointer"
                        }
                      },
                      "id": 1188,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withdrawn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 948,
                      "src": "5972:14:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                        "typeString": "mapping(bytes32 => bool)"
                      }
                    },
                    "id": 1190,
                    "indexExpression": {
                      "id": 1189,
                      "name": "leaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1178,
                      "src": "5987:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "5972:20:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1197,
                  "nodeType": "IfStatement",
                  "src": "5968:93:3",
                  "trueBody": {
                    "id": 1196,
                    "nodeType": "Block",
                    "src": "5994:67:3",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 1192,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1147,
                              "src": "6034:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1193,
                              "name": "leaf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1178,
                              "src": "6045:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 1191,
                            "name": "LeafAlreadyClaimed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 990,
                            "src": "6015:18:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_bytes32_$returns$__$",
                              "typeString": "function (uint256,bytes32) pure"
                            }
                          },
                          "id": 1194,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6015:35:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1195,
                        "nodeType": "RevertStatement",
                        "src": "6008:42:3"
                      }
                    ]
                  }
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 1205,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "id": 1201,
                          "name": "leaf",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1178,
                          "src": "6203:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 1202,
                          "name": "proof",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1154,
                          "src": "6209:5:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                            "typeString": "bytes32[] memory"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                            "typeString": "bytes32[] memory"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "id": 1198,
                            "name": "tree",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1172,
                            "src": "6175:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                              "typeString": "struct MerkleDropFactory.MerkleTree storage pointer"
                            }
                          },
                          "id": 1199,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "merkleRoot",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 936,
                          "src": "6175:15:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "id": 1200,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "verifyProof",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1342,
                        "src": "6175:27:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_delegatecall_pure$_t_bytes32_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes32_$",
                          "typeString": "function (bytes32,bytes32,bytes32[] memory) pure returns (bool)"
                        }
                      },
                      "id": 1203,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6175:40:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "66616c7365",
                      "id": 1204,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6219:5:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "6175:49:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1213,
                  "nodeType": "IfStatement",
                  "src": "6171:119:3",
                  "trueBody": {
                    "id": 1212,
                    "nodeType": "Block",
                    "src": "6226:64:3",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 1207,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1147,
                              "src": "6256:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1208,
                              "name": "leaf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1178,
                              "src": "6267:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 1209,
                              "name": "proof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1154,
                              "src": "6273:5:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                                "typeString": "bytes32[] memory"
                              }
                            ],
                            "id": 1206,
                            "name": "BadProof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 999,
                            "src": "6247:8:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$__$",
                              "typeString": "function (uint256,bytes32,bytes32[] memory) pure"
                            }
                          },
                          "id": 1210,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6247:32:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1211,
                        "nodeType": "RevertStatement",
                        "src": "6240:39:3"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 1220,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "expression": {
                          "id": 1214,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1172,
                          "src": "6357:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                            "typeString": "struct MerkleDropFactory.MerkleTree storage pointer"
                          }
                        },
                        "id": 1217,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "withdrawn",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 948,
                        "src": "6357:14:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_bool_$",
                          "typeString": "mapping(bytes32 => bool)"
                        }
                      },
                      "id": 1218,
                      "indexExpression": {
                        "id": 1216,
                        "name": "leaf",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1178,
                        "src": "6372:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6357:20:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 1219,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6380:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "6357:27:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1221,
                  "nodeType": "ExpressionStatement",
                  "src": "6357:27:3"
                },
                {
                  "assignments": [
                    1224
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1224,
                      "mutability": "mutable",
                      "name": "token",
                      "nameLocation": "6402:5:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1291,
                      "src": "6395:12:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$2837",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "id": 1223,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 1222,
                          "name": "IERC20",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 2837,
                          "src": "6395:6:3"
                        },
                        "referencedDeclaration": 2837,
                        "src": "6395:6:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2837",
                          "typeString": "contract IERC20"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1229,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 1226,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1172,
                          "src": "6417:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                            "typeString": "struct MerkleDropFactory.MerkleTree storage pointer"
                          }
                        },
                        "id": 1227,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "tokenAddress",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 940,
                        "src": "6417:17:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1225,
                      "name": "IERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2837,
                      "src": "6410:6:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC20_$2837_$",
                        "typeString": "type(contract IERC20)"
                      }
                    },
                    "id": 1228,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6410:25:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$2837",
                      "typeString": "contract IERC20"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6395:40:3"
                },
                {
                  "assignments": [
                    1231
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1231,
                      "mutability": "mutable",
                      "name": "balanceBefore",
                      "nameLocation": "6450:13:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1291,
                      "src": "6445:18:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1230,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "6445:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1239,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1236,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "6490:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleDropFactory_$1293",
                              "typeString": "contract MerkleDropFactory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleDropFactory_$1293",
                              "typeString": "contract MerkleDropFactory"
                            }
                          ],
                          "id": 1235,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6482:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1234,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6482:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1237,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6482:13:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1232,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1224,
                        "src": "6466:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2837",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 1233,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2776,
                      "src": "6466:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 1238,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6466:30:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6445:51:3"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1243,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1149,
                        "src": "6898:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1244,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1151,
                        "src": "6911:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 1240,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1224,
                        "src": "6883:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2837",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 1242,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2786,
                      "src": "6883:14:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 1245,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6883:34:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1246,
                  "nodeType": "ExpressionStatement",
                  "src": "6883:34:3"
                },
                {
                  "assignments": [
                    1248
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1248,
                      "mutability": "mutable",
                      "name": "balanceAfter",
                      "nameLocation": "6933:12:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1291,
                      "src": "6928:17:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1247,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "6928:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1256,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 1253,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -28,
                            "src": "6972:4:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_MerkleDropFactory_$1293",
                              "typeString": "contract MerkleDropFactory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_MerkleDropFactory_$1293",
                              "typeString": "contract MerkleDropFactory"
                            }
                          ],
                          "id": 1252,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6964:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 1251,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6964:7:3",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 1254,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6964:13:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1249,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1224,
                        "src": "6948:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2837",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 1250,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2776,
                      "src": "6948:15:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 1255,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6948:30:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6928:50:3"
                },
                {
                  "assignments": [
                    1258
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1258,
                      "mutability": "mutable",
                      "name": "diff",
                      "nameLocation": "6993:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 1291,
                      "src": "6988:9:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1257,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "6988:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1262,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1261,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1259,
                      "name": "balanceBefore",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1231,
                      "src": "7000:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "id": 1260,
                      "name": "balanceAfter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1248,
                      "src": "7016:12:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7000:28:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6988:40:3"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1265,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1263,
                      "name": "diff",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1258,
                      "src": "7042:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 1264,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "7050:1:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "7042:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1272,
                  "nodeType": "IfStatement",
                  "src": "7038:84:3",
                  "trueBody": {
                    "id": 1271,
                    "nodeType": "Block",
                    "src": "7053:69:3",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 1267,
                              "name": "treeIndex",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1147,
                              "src": "7095:9:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1268,
                              "name": "leaf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1178,
                              "src": "7106:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 1266,
                            "name": "TokensNotTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1005,
                            "src": "7074:20:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_bytes32_$returns$__$",
                              "typeString": "function (uint256,bytes32) pure"
                            }
                          },
                          "id": 1269,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7074:37:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1270,
                        "nodeType": "RevertStatement",
                        "src": "7067:44:3"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 1277,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1273,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1172,
                        "src": "7157:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                          "typeString": "struct MerkleDropFactory.MerkleTree storage pointer"
                        }
                      },
                      "id": 1275,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "tokenBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 942,
                      "src": "7157:17:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 1276,
                      "name": "diff",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1258,
                      "src": "7178:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7157:25:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1278,
                  "nodeType": "ExpressionStatement",
                  "src": "7157:25:3"
                },
                {
                  "expression": {
                    "id": 1283,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 1279,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1172,
                        "src": "7192:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$949_storage_ptr",
                          "typeString": "struct MerkleDropFactory.MerkleTree storage pointer"
                        }
                      },
                      "id": 1281,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "spentTokens",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 944,
                      "src": "7192:16:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "id": 1282,
                      "name": "diff",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1258,
                      "src": "7212:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7192:24:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1284,
                  "nodeType": "ExpressionStatement",
                  "src": "7192:24:3"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 1286,
                        "name": "treeIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1147,
                        "src": "7251:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 1287,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1149,
                        "src": "7262:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 1288,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1151,
                        "src": "7275:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1285,
                      "name": "WithdrawalOccurred",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 962,
                      "src": "7232:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (uint256,address,uint256)"
                      }
                    },
                    "id": 1289,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7232:49:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1290,
                  "nodeType": "EmitStatement",
                  "src": "7227:54:3"
                }
              ]
            },
            "documentation": {
              "id": 1145,
              "nodeType": "StructuredDocumentation",
              "src": "4821:598:3",
              "text": "@notice Claim funds as a recipient in the merkle-drop\n @dev Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of\n @dev who provides the proof and pays the gas, msg.sender is not used in this function\n @param treeIndex index into array-like map of merkleTrees, which tree should we apply the proof to?\n @param destination recipient of tokens\n @param value amount of tokens that will be sent to destination\n @param proof array of hashes bridging from leaf (hash of destination | value) to merkle root"
            },
            "functionSelector": "03a4153c",
            "id": 1292,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "5433:8:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1155,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1147,
                  "mutability": "mutable",
                  "name": "treeIndex",
                  "nameLocation": "5447:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1292,
                  "src": "5442:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1146,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5442:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1149,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "5466:11:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1292,
                  "src": "5458:19:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1148,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5458:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1151,
                  "mutability": "mutable",
                  "name": "value",
                  "nameLocation": "5484:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1292,
                  "src": "5479:10:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1150,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "5479:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1154,
                  "mutability": "mutable",
                  "name": "proof",
                  "nameLocation": "5508:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1292,
                  "src": "5491:22:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1152,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "5491:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 1153,
                    "nodeType": "ArrayTypeName",
                    "src": "5491:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5441:73:3"
            },
            "returnParameters": {
              "id": 1156,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5522:0:3"
            },
            "scope": 1293,
            "src": "5424:1864:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 1294,
        "src": "661:6630:3",
        "usedErrors": [
          984,
          990,
          999,
          1005
        ]
      }
    ],
    "src": "42:7249:3"
  },
  "bytecode": "608060405234801561001057600080fd5b50610a16806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806303a4153c1461005c578063390b7c661461007157806385d88cb11461008d578063f1301ccf14610109578063f16ad51e1461011c575b600080fd5b61006f61006a36600461078f565b61012f565b005b61007a60005481565b6040519081526020015b60405180910390f35b6100d361009b366004610871565b60016020819052600091825260409091208054918101546002820154600383015460049093015491926001600160a01b039091169185565b6040805195865260208601949094526001600160a01b03909216928401929092526060830191909152608082015260a001610084565b61006f61011736600461088a565b61049f565b61006f61012a3660046108c7565b61054f565b83158061013d575060005484115b156101635760405163190a97ad60e01b8152600481018590526024015b60405180910390fd5b600084815260016020908152604080832081516001600160a01b03881681850152808301879052825180820384018152606090910183528051908401208085526005820190935292205460ff16156101d857604051631c38e13960e11b8152600481018790526024810182905260440161015a565b8154604051632769cd1f60e21b815273__MerkleLib_____________________________91639da7347c916102149190859088906004016108e9565b602060405180830381865af4158015610231573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610255919061093e565b61027857858184604051630da5a8fd60e41b815260040161015a939291906108e9565b6000818152600583016020526040808220805460ff19166001179055600284015490516370a0823160e01b81523060048201526001600160a01b03909116919082906370a0823190602401602060405180830381865afa1580156102e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103049190610967565b60405163a9059cbb60e01b81526001600160a01b038981166004830152602482018990529192509083169063a9059cbb906044016020604051808303816000875af1158015610357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037b919061093e565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190610967565b905060006103f58284610996565b90508061041f576040516306eb54e960e11b8152600481018b90526024810186905260440161015a565b808660030160008282546104339190610996565b925050819055508086600401600082825461044e91906109ad565b90915550506040518881526001600160a01b038a16908b907fee9ea94d50cffea72be7da20b021e5fd1b0db20ed920d927b659decc48e08e449060200160405180910390a350505050505050505050565b60006001600080600081546104b3906109c5565b9182905550815260208101919091526040016000908120868155600181018690556002810180546001600160a01b0319166001600160a01b0387161790559054909150610500908361054f565b60005460408051878152602081018790526001600160a01b03861692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a35050505050565b81158061055d575060005482115b1561057e5760405163190a97ad60e01b81526004810183905260240161015a565b600082815260016020526040808220600281015491516370a0823160e01b815230600482015290926001600160a01b03909216919082906370a0823190602401602060405180830381865afa1580156105db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ff9190610967565b6040516323b872dd60e01b8152336004820152306024820152604481018690529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610655573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610679919061093e565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156106c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e59190610967565b905060006106f38383610996565b90508085600301600082825461070991906109ad565b909155505060028501546040518281526001600160a01b039091169088907fb162210da7d23d82c18cff5af46d3562661d26b42a6848fa28d64a6bdc70386a9060200160405180910390a350505050505050565b80356001600160a01b038116811461077457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156107a557600080fd5b8435935060206107b681870161075d565b935060408601359250606086013567ffffffffffffffff808211156107da57600080fd5b818801915088601f8301126107ee57600080fd5b81358181111561080057610800610779565b8060051b604051601f19603f8301168101818110858211171561082557610825610779565b60405291825284820192508381018501918b83111561084357600080fd5b938501935b8285101561086157843584529385019392850192610848565b989b979a50959850505050505050565b60006020828403121561088357600080fd5b5035919050565b600080600080608085870312156108a057600080fd5b84359350602085013592506108b76040860161075d565b9396929550929360600135925050565b600080604083850312156108da57600080fd5b50508035926020909101359150565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b8181101561093057845183529383019391830191600101610914565b509098975050505050505050565b60006020828403121561095057600080fd5b8151801515811461096057600080fd5b9392505050565b60006020828403121561097957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156109a8576109a8610980565b500390565b600082198211156109c0576109c0610980565b500190565b60006000198214156109d9576109d9610980565b506001019056fea26469706673582212207042695b61d04cf99fcff03b70f7238923ce728daba7241470a19b69ef518c5664736f6c634300080c0033",
  "bytecodeSha1": "1800d09d7d62209d6ca1954030f45b51bd2a166c",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.12+commit.f00d7308"
  },
  "contractName": "MerkleDropFactory",
  "coverageMap": {
    "branches": {
      "3": {
        "MerkleDropFactory.depositTokens": {
          "22": [
            3794,
            3808,
            true
          ],
          "23": [
            3812,
            3832,
            false
          ]
        },
        "MerkleDropFactory.withdraw": {
          "18": [
            5594,
            5608,
            true
          ],
          "19": [
            5612,
            5632,
            false
          ],
          "20": [
            5972,
            5992,
            false
          ],
          "21": [
            7042,
            7051,
            false
          ]
        }
      },
      "4": {},
      "7": {}
    },
    "statements": {
      "3": {
        "MerkleDropFactory.addMerkleTree": {
          "9": [
            2992,
            3017
          ],
          "10": [
            3027,
            3051
          ],
          "11": [
            3061,
            3093
          ],
          "12": [
            3162,
            3199
          ],
          "13": [
            3277,
            3340
          ]
        },
        "MerkleDropFactory.depositTokens": {
          "14": [
            3790,
            3889
          ],
          "15": [
            4326,
            4378
          ],
          "16": [
            4562,
            4593
          ],
          "17": [
            4746,
            4808
          ]
        },
        "MerkleDropFactory.withdraw": {
          "0": [
            5590,
            5689
          ],
          "1": [
            5968,
            6061
          ],
          "2": [
            6171,
            6290
          ],
          "3": [
            6357,
            6384
          ],
          "4": [
            6883,
            6917
          ],
          "5": [
            7038,
            7122
          ],
          "6": [
            7157,
            7182
          ],
          "7": [
            7192,
            7216
          ],
          "8": [
            7227,
            7281
          ]
        }
      },
      "4": {},
      "7": {}
    }
  },
  "dependencies": [
    "IERC20",
    "MerkleLib"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c806303a4153c1461005c578063390b7c661461007157806385d88cb11461008d578063f1301ccf14610109578063f16ad51e1461011c575b600080fd5b61006f61006a36600461078f565b61012f565b005b61007a60005481565b6040519081526020015b60405180910390f35b6100d361009b366004610871565b60016020819052600091825260409091208054918101546002820154600383015460049093015491926001600160a01b039091169185565b6040805195865260208601949094526001600160a01b03909216928401929092526060830191909152608082015260a001610084565b61006f61011736600461088a565b61049f565b61006f61012a3660046108c7565b61054f565b83158061013d575060005484115b156101635760405163190a97ad60e01b8152600481018590526024015b60405180910390fd5b600084815260016020908152604080832081516001600160a01b03881681850152808301879052825180820384018152606090910183528051908401208085526005820190935292205460ff16156101d857604051631c38e13960e11b8152600481018790526024810182905260440161015a565b8154604051632769cd1f60e21b815273__$61dd25696c02d5bd2863c8d2c1a2324a87$__91639da7347c916102149190859088906004016108e9565b602060405180830381865af4158015610231573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610255919061093e565b61027857858184604051630da5a8fd60e41b815260040161015a939291906108e9565b6000818152600583016020526040808220805460ff19166001179055600284015490516370a0823160e01b81523060048201526001600160a01b03909116919082906370a0823190602401602060405180830381865afa1580156102e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103049190610967565b60405163a9059cbb60e01b81526001600160a01b038981166004830152602482018990529192509083169063a9059cbb906044016020604051808303816000875af1158015610357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037b919061093e565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190610967565b905060006103f58284610996565b90508061041f576040516306eb54e960e11b8152600481018b90526024810186905260440161015a565b808660030160008282546104339190610996565b925050819055508086600401600082825461044e91906109ad565b90915550506040518881526001600160a01b038a16908b907fee9ea94d50cffea72be7da20b021e5fd1b0db20ed920d927b659decc48e08e449060200160405180910390a350505050505050505050565b60006001600080600081546104b3906109c5565b9182905550815260208101919091526040016000908120868155600181018690556002810180546001600160a01b0319166001600160a01b0387161790559054909150610500908361054f565b60005460408051878152602081018790526001600160a01b03861692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a35050505050565b81158061055d575060005482115b1561057e5760405163190a97ad60e01b81526004810183905260240161015a565b600082815260016020526040808220600281015491516370a0823160e01b815230600482015290926001600160a01b03909216919082906370a0823190602401602060405180830381865afa1580156105db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ff9190610967565b6040516323b872dd60e01b8152336004820152306024820152604481018690529091506001600160a01b038316906323b872dd906064016020604051808303816000875af1158015610655573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610679919061093e565b506040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156106c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e59190610967565b905060006106f38383610996565b90508085600301600082825461070991906109ad565b909155505060028501546040518281526001600160a01b039091169088907fb162210da7d23d82c18cff5af46d3562661d26b42a6848fa28d64a6bdc70386a9060200160405180910390a350505050505050565b80356001600160a01b038116811461077457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156107a557600080fd5b8435935060206107b681870161075d565b935060408601359250606086013567ffffffffffffffff808211156107da57600080fd5b818801915088601f8301126107ee57600080fd5b81358181111561080057610800610779565b8060051b604051601f19603f8301168101818110858211171561082557610825610779565b60405291825284820192508381018501918b83111561084357600080fd5b938501935b8285101561086157843584529385019392850192610848565b989b979a50959850505050505050565b60006020828403121561088357600080fd5b5035919050565b600080600080608085870312156108a057600080fd5b84359350602085013592506108b76040860161075d565b9396929550929360600135925050565b600080604083850312156108da57600080fd5b50508035926020909101359150565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b8181101561093057845183529383019391830191600101610914565b509098975050505050505050565b60006020828403121561095057600080fd5b8151801515811461096057600080fd5b9392505050565b60006020828403121561097957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156109a8576109a8610980565b500390565b600082198211156109c0576109c0610980565b500190565b60006000198214156109d9576109d9610980565b506001019056fea26469706673582212207042695b61d04cf99fcff03b70f7238923ce728daba7241470a19b69ef518c5664736f6c634300080c0033",
  "deployedSourceMap": "661:6630:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5424:1864;;;;;;:::i;:::-;;:::i;:::-;;775:20;;;;;;;;;1801:25:8;;;1789:2;1774:18;775:20:3;;;;;;;;1414:47;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1414:47:3;;;;;;;;;;2281:25:8;;;2337:2;2322:18;;2315:34;;;;-1:-1:-1;;;;;2385:32:8;;;2365:18;;;2358:60;;;;2449:2;2434:18;;2427:34;;;;2492:3;2477:19;;2470:35;2268:3;2253:19;1414:47:3;2022:489:8;2761:586:3;;;;;;:::i;:::-;;:::i;3722:1093::-;;;;;;:::i;:::-;;:::i;5424:1864::-;5594:14;;;:38;;;5624:8;;5612:9;:20;5594:38;5590:99;;;5655:23;;-1:-1:-1;;;5655:23:3;;;;;1801:25:8;;;1774:18;;5655:23:3;;;;;;;;5590:99;5734:23;5760:22;;;:11;:22;;;;;;;;5881:30;;-1:-1:-1;;;;;3357:32:8;;5881:30:3;;;3339:51:8;3406:18;;;3399:34;;;5881:30:3;;;;;;;;;3312:18:8;;;;5881:30:3;;5871:41;;;;;;5972:20;;;:14;;;:20;;;;;;;;5968:93;;;6015:35;;-1:-1:-1;;;6015:35:3;;;;;3618:25:8;;;3659:18;;;3652:34;;;3591:18;;6015:35:3;3444:248:8;5968:93:3;6175:15;;:40;;-1:-1:-1;;;6175:40:3;;:27;;;;:40;;:15;6203:4;;6209:5;;6175:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6171:119;;6256:9;6267:4;6273:5;6247:32;;-1:-1:-1;;;6247:32:3;;;;;;;;;;:::i;6171:119::-;6357:20;;;;:14;;;:20;;;;;;:27;;-1:-1:-1;;6357:27:3;6380:4;6357:27;;;6417:17;;;;6466:30;;-1:-1:-1;;;6466:30:3;;6490:4;6466:30;;;5693:51:8;-1:-1:-1;;;;;6417:17:3;;;;6357:20;6417:17;;6466:15;;5666:18:8;;6466:30:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6883:34;;-1:-1:-1;;;6883:34:3;;-1:-1:-1;;;;;3357:32:8;;;6883:34:3;;;3339:51:8;3406:18;;;3399:34;;;6445:51:3;;-1:-1:-1;6883:14:3;;;;;;3312:18:8;;6883:34:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;6948:30:3;;-1:-1:-1;;;6948:30:3;;6972:4;6948:30;;;5693:51:8;6928:17:3;;-1:-1:-1;;;;;6948:15:3;;;;;5666:18:8;;6948:30:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6928:50;-1:-1:-1;6988:9:3;7000:28;6928:50;7000:13;:28;:::i;:::-;6988:40;-1:-1:-1;7042:9:3;7038:84;;7074:37;;-1:-1:-1;;;7074:37:3;;;;;3618:25:8;;;3659:18;;;3652:34;;;3591:18;;7074:37:3;3444:248:8;7038:84:3;7178:4;7157;:17;;;:25;;;;;;;:::i;:::-;;;;;;;;7212:4;7192;:16;;;:24;;;;;;;:::i;:::-;;;;-1:-1:-1;;7232:49:3;;1801:25:8;;;-1:-1:-1;;;;;7232:49:3;;;7251:9;;7232:49;;1789:2:8;1774:18;7232:49:3;;;;;;;5522:1766;;;;;;5424:1864;;;;:::o;2761:586::-;2933:23;2959:11;:23;2973:8;;2971:10;;;;;:::i;:::-;;;;;-1:-1:-1;2959:23:3;;;;;;;;;;;-1:-1:-1;2959:23:3;;;2992:25;;;3027:13;;;:24;;;3061:17;;;:32;;-1:-1:-1;;;;;;3061:32:3;-1:-1:-1;;;;;3061:32:3;;;;;3176:8;;2959:23;;-1:-1:-1;3162:37:3;;3186:12;3162:13;:37::i;:::-;3298:8;;3282:58;;;3618:25:8;;;3674:2;3659:18;;3652:34;;;-1:-1:-1;;;;;3282:58:3;;;3298:8;3282:58;;3591:18:8;3282:58:3;;;;;;;2867:480;2761:586;;;;:::o;3722:1093::-;3794:14;;;:38;;;3824:8;;3812:9;:20;3794:38;3790:99;;;3855:23;;-1:-1:-1;;;3855:23:3;;;;;1801:25:8;;;1774:18;;3855:23:3;1655:177:8;3790:99:3;3938:29;3970:22;;;:11;:22;;;;;;4025:23;;;;4080:30;;-1:-1:-1;;;4080:30:3;;4104:4;4080:30;;;5693:51:8;3970:22:3;;-1:-1:-1;;;;;4025:23:3;;;;3938:29;4025:23;;4080:15;;5666:18:8;;4080:30:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4326:52;;-1:-1:-1;;;4326:52:3;;4345:10;4326:52;;;6972:34:8;4365:4:3;7022:18:8;;;7015:43;7074:18;;;7067:34;;;4059:51:3;;-1:-1:-1;;;;;;4326:18:3;;;;;6907::8;;4326:52:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;4409:30:3;;-1:-1:-1;;;4409:30:3;;4433:4;4409:30;;;5693:51:8;4389:17:3;;-1:-1:-1;;;;;4409:15:3;;;;;5666:18:8;;4409:30:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4389:50;-1:-1:-1;4450:9:3;4462:28;4477:13;4389:50;4462:28;:::i;:::-;4450:40;;4589:4;4562:10;:23;;;:31;;;;;;;:::i;:::-;;;;-1:-1:-1;;4778:23:3;;;;4751:57;;1801:25:8;;;-1:-1:-1;;;;;4778:23:3;;;;4767:9;;4751:57;;1789:2:8;1774:18;4751:57:3;;;;;;;3780:1035;;;;;3722:1093;;:::o;14:173:8:-;82:20;;-1:-1:-1;;;;;131:31:8;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:127::-;253:10;248:3;244:20;241:1;234:31;284:4;281:1;274:15;308:4;305:1;298:15;324:1326;435:6;443;451;459;512:3;500:9;491:7;487:23;483:33;480:53;;;529:1;526;519:12;480:53;565:9;552:23;542:33;;594:2;615:38;649:2;638:9;634:18;615:38;:::i;:::-;605:48;;700:2;689:9;685:18;672:32;662:42;;755:2;744:9;740:18;727:32;778:18;819:2;811:6;808:14;805:34;;;835:1;832;825:12;805:34;873:6;862:9;858:22;848:32;;918:7;911:4;907:2;903:13;899:27;889:55;;940:1;937;930:12;889:55;976:2;963:16;998:2;994;991:10;988:36;;;1004:18;;:::i;:::-;1050:2;1047:1;1043:10;1082:2;1076:9;1145:2;1141:7;1136:2;1132;1128:11;1124:25;1116:6;1112:38;1200:6;1188:10;1185:22;1180:2;1168:10;1165:18;1162:46;1159:72;;;1211:18;;:::i;:::-;1247:2;1240:22;1297:18;;;1331:15;;;;-1:-1:-1;1373:11:8;;;1369:20;;;1401:19;;;1398:39;;;1433:1;1430;1423:12;1398:39;1457:11;;;;1477:142;1493:6;1488:3;1485:15;1477:142;;;1559:17;;1547:30;;1510:12;;;;1597;;;;1477:142;;;324:1326;;;;-1:-1:-1;324:1326:8;;-1:-1:-1;;;;;;;324:1326:8:o;1837:180::-;1896:6;1949:2;1937:9;1928:7;1924:23;1920:32;1917:52;;;1965:1;1962;1955:12;1917:52;-1:-1:-1;1988:23:8;;1837:180;-1:-1:-1;1837:180:8:o;2516:391::-;2602:6;2610;2618;2626;2679:3;2667:9;2658:7;2654:23;2650:33;2647:53;;;2696:1;2693;2686:12;2647:53;2732:9;2719:23;2709:33;;2789:2;2778:9;2774:18;2761:32;2751:42;;2812:38;2846:2;2835:9;2831:18;2812:38;:::i;:::-;2516:391;;;;-1:-1:-1;2802:48:8;;2897:2;2882:18;2869:32;;-1:-1:-1;;2516:391:8:o;2912:248::-;2980:6;2988;3041:2;3029:9;3020:7;3016:23;3012:32;3009:52;;;3057:1;3054;3047:12;3009:52;-1:-1:-1;;3080:23:8;;;3150:2;3135:18;;;3122:32;;-1:-1:-1;2912:248:8:o;3697:783::-;3903:4;3951:2;3940:9;3936:18;3981:6;3970:9;3963:25;4007:2;4045:6;4040:2;4029:9;4025:18;4018:34;4088:2;4083;4072:9;4068:18;4061:30;4111:6;4146;4140:13;4177:6;4169;4162:22;4215:3;4204:9;4200:19;4193:26;;4254:2;4246:6;4242:15;4228:29;;4275:1;4285:169;4299:6;4296:1;4293:13;4285:169;;;4360:13;;4348:26;;4429:15;;;;4394:12;;;;4321:1;4314:9;4285:169;;;-1:-1:-1;4471:3:8;;3697:783;-1:-1:-1;;;;;;;;3697:783:8:o;4485:277::-;4552:6;4605:2;4593:9;4584:7;4580:23;4576:32;4573:52;;;4621:1;4618;4611:12;4573:52;4653:9;4647:16;4706:5;4699:13;4692:21;4685:5;4682:32;4672:60;;4728:1;4725;4718:12;4672:60;4751:5;4485:277;-1:-1:-1;;;4485:277:8:o;5755:184::-;5825:6;5878:2;5866:9;5857:7;5853:23;5849:32;5846:52;;;5894:1;5891;5884:12;5846:52;-1:-1:-1;5917:16:8;;5755:184;-1:-1:-1;5755:184:8:o;5944:127::-;6005:10;6000:3;5996:20;5993:1;5986:31;6036:4;6033:1;6026:15;6060:4;6057:1;6050:15;6076:125;6116:4;6144:1;6141;6138:8;6135:34;;;6149:18;;:::i;:::-;-1:-1:-1;6186:9:8;;6076:125::o;6206:128::-;6246:3;6277:1;6273:6;6270:1;6267:13;6264:39;;;6283:18;;:::i;:::-;-1:-1:-1;6319:9:8;;6206:128::o;6339:135::-;6378:3;-1:-1:-1;;6399:17:8;;6396:43;;;6419:18;;:::i;:::-;-1:-1:-1;6466:1:8;6455:13;;6339:135::o",
  "language": "Solidity",
  "natspec": {
    "author": "metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki",
    "details": "The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof,therefore the total liabilities of the merkle tree are untrusted and tree balances must be managed separately",
    "kind": "dev",
    "methods": {
      "addMerkleTree(bytes32,bytes32,address,uint256)": {
        "details": "Anyone may call this function, therefore we must make sure trees cannot affect each other",
        "notice": "Add a new merkle tree to the contract, creating a new merkle-drop",
        "params": {
          "ipfsHash": "the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable",
          "newRoot": "root hash of merkle tree representing liabilities == (destination, value) pairs",
          "tokenAddress": "the address of the token contract that is being distributed",
          "tokenBalance": "the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
        }
      },
      "depositTokens(uint256,uint256)": {
        "details": "Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious",
        "notice": "Add funds to an existing merkle-drop",
        "params": {
          "treeIndex": "index into array-like map of merkleTrees",
          "value": "the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded"
        }
      },
      "withdraw(uint256,address,uint256,bytes32[])": {
        "details": "Anyone may call this function for anyone else, funds go to destination regardless, it's just a question ofwho provides the proof and pays the gas, msg.sender is not used in this function",
        "notice": "Claim funds as a recipient in the merkle-drop",
        "params": {
          "destination": "recipient of tokens",
          "proof": "array of hashes bridging from leaf (hash of destination | value) to merkle root",
          "treeIndex": "index into array-like map of merkleTrees, which tree should we apply the proof to?",
          "value": "amount of tokens that will be sent to destination"
        }
      }
    },
    "notice": "This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.",
    "title": "A factory pattern for merkledrops, that is, airdrops using merkleproofs to compute eligibility",
    "version": 1
  },
  "offset": [
    661,
    7291
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3A4153C EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x390B7C66 EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x85D88CB1 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0xF1301CCF EQ PUSH2 0x109 JUMPI DUP1 PUSH4 0xF16AD51E EQ PUSH2 0x11C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x78F JUMP JUMPDEST PUSH2 0x12F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7A PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD3 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x871 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x84 JUMP JUMPDEST PUSH2 0x6F PUSH2 0x117 CALLDATASIZE PUSH1 0x4 PUSH2 0x88A JUMP JUMPDEST PUSH2 0x49F JUMP JUMPDEST PUSH2 0x6F PUSH2 0x12A CALLDATASIZE PUSH1 0x4 PUSH2 0x8C7 JUMP JUMPDEST PUSH2 0x54F JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0x13D JUMPI POP PUSH1 0x0 SLOAD DUP5 GT JUMPDEST ISZERO PUSH2 0x163 JUMPI PUSH1 0x40 MLOAD PUSH4 0x190A97AD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP2 DUP6 ADD MSTORE DUP1 DUP4 ADD DUP8 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP3 SUB DUP5 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD DUP4 MSTORE DUP1 MLOAD SWAP1 DUP5 ADD KECCAK256 DUP1 DUP6 MSTORE PUSH1 0x5 DUP3 ADD SWAP1 SWAP4 MSTORE SWAP3 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1D8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1C38E139 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x15A JUMP JUMPDEST DUP2 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2769CD1F PUSH1 0xE2 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x9DA7347C SWAP2 PUSH2 0x214 SWAP2 SWAP1 DUP6 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x8E9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x231 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x93E JUMP JUMPDEST PUSH2 0x278 JUMPI DUP6 DUP2 DUP5 PUSH1 0x40 MLOAD PUSH4 0xDA5A8FD PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8E9 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x2 DUP5 ADD SLOAD SWAP1 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x304 SWAP2 SWAP1 PUSH2 0x967 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP10 SWAP1 MSTORE SWAP2 SWAP3 POP SWAP1 DUP4 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x357 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x37B SWAP2 SWAP1 PUSH2 0x93E JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3E7 SWAP2 SWAP1 PUSH2 0x967 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3F5 DUP3 DUP5 PUSH2 0x996 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x41F JUMPI PUSH1 0x40 MLOAD PUSH4 0x6EB54E9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x15A JUMP JUMPDEST DUP1 DUP7 PUSH1 0x3 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x433 SWAP2 SWAP1 PUSH2 0x996 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 DUP7 PUSH1 0x4 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x44E SWAP2 SWAP1 PUSH2 0x9AD JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP9 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 DUP12 SWAP1 PUSH32 0xEE9EA94D50CFFEA72BE7DA20B021E5FD1B0DB20ED920D927B659DECC48E08E44 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x4B3 SWAP1 PUSH2 0x9C5 JUMP JUMPDEST SWAP2 DUP3 SWAP1 SSTORE POP DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP7 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP7 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND OR SWAP1 SSTORE SWAP1 SLOAD SWAP1 SWAP2 POP PUSH2 0x500 SWAP1 DUP4 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP3 SWAP2 PUSH32 0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x55D JUMPI POP PUSH1 0x0 SLOAD DUP3 GT JUMPDEST ISZERO PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH4 0x190A97AD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x15A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD SWAP2 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5FF SWAP2 SWAP1 PUSH2 0x967 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x655 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x679 SWAP2 SWAP1 PUSH2 0x93E JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6E5 SWAP2 SWAP1 PUSH2 0x967 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6F3 DUP4 DUP4 PUSH2 0x996 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 PUSH1 0x3 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x709 SWAP2 SWAP1 PUSH2 0x9AD JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x2 DUP6 ADD SLOAD PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP9 SWAP1 PUSH32 0xB162210DA7D23D82C18CFF5AF46D3562661D26B42A6848FA28D64A6BDC70386A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x774 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 PUSH2 0x7B6 DUP2 DUP8 ADD PUSH2 0x75D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x800 JUMPI PUSH2 0x800 PUSH2 0x779 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x825 JUMPI PUSH2 0x825 PUSH2 0x779 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP12 DUP4 GT ISZERO PUSH2 0x843 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x861 JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x848 JUMP JUMPDEST SWAP9 SWAP12 SWAP8 SWAP11 POP SWAP6 SWAP9 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x883 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH2 0x8B7 PUSH1 0x40 DUP7 ADD PUSH2 0x75D JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP6 DUP4 MSTORE PUSH1 0x20 DUP6 DUP2 DUP6 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 POP DUP3 DUP8 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x930 JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x914 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x950 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x960 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x979 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x9A8 JUMPI PUSH2 0x9A8 PUSH2 0x980 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x9C0 JUMPI PUSH2 0x9C0 PUSH2 0x980 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x9D9 JUMPI PUSH2 0x9D9 PUSH2 0x980 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0x42695B61D04CF99FCFF03B70F7238923CE PUSH19 0x8DABA7241470A19B69EF518C5664736F6C6343 STOP ADDMOD 0xC STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        661,
        7291
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "5": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "CALLVALUE",
      "path": "3"
    },
    "6": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "DUP1",
      "path": "3"
    },
    "7": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "8": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "12": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "DUP1",
      "path": "3"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "REVERT",
      "path": "3"
    },
    "16": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "17": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "POP",
      "path": "3"
    },
    "18": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "21": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "LT",
      "path": "3"
    },
    "22": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x57"
    },
    "25": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "26": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "29": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "SHR",
      "path": "3"
    },
    "32": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "DUP1",
      "path": "3"
    },
    "33": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x3A4153C"
    },
    "38": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "EQ",
      "path": "3"
    },
    "39": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x5C"
    },
    "42": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "43": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "DUP1",
      "path": "3"
    },
    "44": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x390B7C66"
    },
    "49": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "EQ",
      "path": "3"
    },
    "50": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x71"
    },
    "53": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "54": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "DUP1",
      "path": "3"
    },
    "55": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x85D88CB1"
    },
    "60": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "EQ",
      "path": "3"
    },
    "61": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8D"
    },
    "64": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "65": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "DUP1",
      "path": "3"
    },
    "66": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xF1301CCF"
    },
    "71": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "EQ",
      "path": "3"
    },
    "72": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x109"
    },
    "75": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "76": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "DUP1",
      "path": "3"
    },
    "77": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xF16AD51E"
    },
    "82": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "EQ",
      "path": "3"
    },
    "83": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x11C"
    },
    "86": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "87": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "88": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "90": {
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "DUP1",
      "path": "3"
    },
    "91": {
      "first_revert": true,
      "fn": null,
      "offset": [
        661,
        7291
      ],
      "op": "REVERT",
      "path": "3"
    },
    "92": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "93": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6F"
    },
    "96": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6A"
    },
    "99": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "100": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "102": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x78F"
    },
    "105": {
      "fn": "MerkleDropFactory.withdraw",
      "jump": "i",
      "offset": [
        5424,
        7288
      ],
      "op": "JUMP",
      "path": "3"
    },
    "106": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "107": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x12F"
    },
    "110": {
      "fn": "MerkleDropFactory.withdraw",
      "jump": "i",
      "offset": [
        5424,
        7288
      ],
      "op": "JUMP",
      "path": "3"
    },
    "111": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "112": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "STOP",
      "path": "3"
    },
    "113": {
      "offset": [
        775,
        795
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "114": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x7A"
    },
    "117": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "119": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "120": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "DUP2",
      "path": "3"
    },
    "121": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "JUMP",
      "path": "3"
    },
    "122": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "123": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "125": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "126": {
      "op": "SWAP1"
    },
    "127": {
      "op": "DUP2"
    },
    "128": {
      "op": "MSTORE"
    },
    "129": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "131": {
      "op": "ADD"
    },
    "132": {
      "offset": [
        775,
        795
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "133": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "135": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "136": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "DUP1",
      "path": "3"
    },
    "137": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "138": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "SUB",
      "path": "3"
    },
    "139": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "140": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        775,
        795
      ],
      "op": "RETURN",
      "path": "3"
    },
    "141": {
      "offset": [
        1414,
        1461
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "142": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xD3"
    },
    "145": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x9B"
    },
    "148": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "149": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "151": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x871"
    },
    "154": {
      "fn": "MerkleDropFactory.withdraw",
      "jump": "i",
      "offset": [
        1414,
        1461
      ],
      "op": "JUMP",
      "path": "3"
    },
    "155": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "156": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "158": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "160": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "DUP2",
      "path": "3"
    },
    "161": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "162": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "163": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "165": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "166": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "DUP3",
      "path": "3"
    },
    "167": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "168": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "170": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "171": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "172": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "173": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "DUP1",
      "path": "3"
    },
    "174": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "175": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "176": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "DUP2",
      "path": "3"
    },
    "177": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "ADD",
      "path": "3"
    },
    "178": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "179": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "181": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "DUP3",
      "path": "3"
    },
    "182": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "ADD",
      "path": "3"
    },
    "183": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "184": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "186": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "DUP4",
      "path": "3"
    },
    "187": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "ADD",
      "path": "3"
    },
    "188": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "189": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "191": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "192": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "193": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "ADD",
      "path": "3"
    },
    "194": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "195": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "196": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "197": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "199": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "201": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "203": {
      "op": "SHL"
    },
    "204": {
      "op": "SUB"
    },
    "205": {
      "offset": [
        1414,
        1461
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "206": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "207": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "AND",
      "path": "3"
    },
    "208": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "209": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "DUP6",
      "path": "3"
    },
    "210": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "JUMP",
      "path": "3"
    },
    "211": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "212": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "214": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "DUP1",
      "path": "3"
    },
    "215": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        1414,
        1461
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "216": {
      "op": "SWAP6"
    },
    "217": {
      "op": "DUP7"
    },
    "218": {
      "op": "MSTORE"
    },
    "219": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "221": {
      "op": "DUP7"
    },
    "222": {
      "op": "ADD"
    },
    "223": {
      "op": "SWAP5"
    },
    "224": {
      "op": "SWAP1"
    },
    "225": {
      "op": "SWAP5"
    },
    "226": {
      "op": "MSTORE"
    },
    "227": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "229": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "231": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "233": {
      "op": "SHL"
    },
    "234": {
      "op": "SUB"
    },
    "235": {
      "op": "SWAP1"
    },
    "236": {
      "op": "SWAP3"
    },
    "237": {
      "op": "AND"
    },
    "238": {
      "op": "SWAP3"
    },
    "239": {
      "op": "DUP5"
    },
    "240": {
      "op": "ADD"
    },
    "241": {
      "op": "SWAP3"
    },
    "242": {
      "op": "SWAP1"
    },
    "243": {
      "op": "SWAP3"
    },
    "244": {
      "op": "MSTORE"
    },
    "245": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "247": {
      "op": "DUP4"
    },
    "248": {
      "op": "ADD"
    },
    "249": {
      "op": "SWAP2"
    },
    "250": {
      "op": "SWAP1"
    },
    "251": {
      "op": "SWAP2"
    },
    "252": {
      "op": "MSTORE"
    },
    "253": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "255": {
      "op": "DUP3"
    },
    "256": {
      "op": "ADD"
    },
    "257": {
      "op": "MSTORE"
    },
    "258": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "260": {
      "op": "ADD"
    },
    "261": {
      "offset": [
        1414,
        1461
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x84"
    },
    "264": {
      "op": "JUMP"
    },
    "265": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2761,
        3347
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "266": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2761,
        3347
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6F"
    },
    "269": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2761,
        3347
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x117"
    },
    "272": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2761,
        3347
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "273": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2761,
        3347
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "275": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2761,
        3347
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x88A"
    },
    "278": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "jump": "i",
      "offset": [
        2761,
        3347
      ],
      "op": "JUMP",
      "path": "3"
    },
    "279": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2761,
        3347
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "280": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2761,
        3347
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x49F"
    },
    "283": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "jump": "i",
      "offset": [
        2761,
        3347
      ],
      "op": "JUMP",
      "path": "3"
    },
    "284": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3722,
        4815
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "285": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3722,
        4815
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6F"
    },
    "288": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3722,
        4815
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x12A"
    },
    "291": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3722,
        4815
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "292": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3722,
        4815
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "294": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3722,
        4815
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8C7"
    },
    "297": {
      "fn": "MerkleDropFactory.depositTokens",
      "jump": "i",
      "offset": [
        3722,
        4815
      ],
      "op": "JUMP",
      "path": "3"
    },
    "298": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3722,
        4815
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "299": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3722,
        4815
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x54F"
    },
    "302": {
      "fn": "MerkleDropFactory.depositTokens",
      "jump": "i",
      "offset": [
        3722,
        4815
      ],
      "op": "JUMP",
      "path": "3"
    },
    "303": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "304": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5594,
        5608
      ],
      "op": "DUP4",
      "path": "3",
      "statement": 0
    },
    "305": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5594,
        5608
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "306": {
      "branch": 18,
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5594,
        5608
      ],
      "op": "DUP1",
      "path": "3"
    },
    "307": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5594,
        5632
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x13D"
    },
    "310": {
      "branch": 18,
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5594,
        5632
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "311": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5594,
        5632
      ],
      "op": "POP",
      "path": "3"
    },
    "312": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5624,
        5632
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "314": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5624,
        5632
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "315": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5612,
        5621
      ],
      "op": "DUP5",
      "path": "3"
    },
    "316": {
      "branch": 19,
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5612,
        5632
      ],
      "op": "GT",
      "path": "3"
    },
    "317": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5594,
        5632
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "318": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5590,
        5689
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "319": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5590,
        5689
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x163"
    },
    "322": {
      "branch": 19,
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5590,
        5689
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "323": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "325": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "326": {
      "op": "PUSH4",
      "value": "0x190A97AD"
    },
    "331": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "333": {
      "op": "SHL"
    },
    "334": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "DUP2",
      "path": "3"
    },
    "335": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "336": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "338": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "DUP2",
      "path": "3"
    },
    "339": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "ADD",
      "path": "3"
    },
    "340": {
      "op": "DUP6"
    },
    "341": {
      "op": "SWAP1"
    },
    "342": {
      "op": "MSTORE"
    },
    "343": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "345": {
      "op": "ADD"
    },
    "346": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "347": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "349": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "350": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "DUP1",
      "path": "3"
    },
    "351": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "352": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "SUB",
      "path": "3"
    },
    "353": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "354": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5655,
        5678
      ],
      "op": "REVERT",
      "path": "3"
    },
    "355": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5590,
        5689
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "356": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5734,
        5757
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "358": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5760,
        5782
      ],
      "op": "DUP5",
      "path": "3"
    },
    "359": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5760,
        5782
      ],
      "op": "DUP2",
      "path": "3"
    },
    "360": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5760,
        5782
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "361": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5760,
        5771
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "363": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5760,
        5782
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "365": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5760,
        5782
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "366": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5760,
        5782
      ],
      "op": "DUP2",
      "path": "3"
    },
    "367": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5760,
        5782
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "368": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5760,
        5782
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "370": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5760,
        5782
      ],
      "op": "DUP1",
      "path": "3"
    },
    "371": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5760,
        5782
      ],
      "op": "DUP4",
      "path": "3"
    },
    "372": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5760,
        5782
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "373": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "DUP2",
      "path": "3"
    },
    "374": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "375": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "377": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "379": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "381": {
      "op": "SHL"
    },
    "382": {
      "op": "SUB"
    },
    "383": {
      "op": "DUP9"
    },
    "384": {
      "op": "AND"
    },
    "385": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "DUP2",
      "path": "3"
    },
    "386": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "DUP6",
      "path": "3"
    },
    "387": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "ADD",
      "path": "3"
    },
    "388": {
      "op": "MSTORE"
    },
    "389": {
      "op": "DUP1"
    },
    "390": {
      "op": "DUP4"
    },
    "391": {
      "op": "ADD"
    },
    "392": {
      "op": "DUP8"
    },
    "393": {
      "op": "SWAP1"
    },
    "394": {
      "op": "MSTORE"
    },
    "395": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "DUP3",
      "path": "3"
    },
    "396": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "397": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "DUP1",
      "path": "3"
    },
    "398": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "DUP3",
      "path": "3"
    },
    "399": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "SUB",
      "path": "3"
    },
    "400": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "DUP5",
      "path": "3"
    },
    "401": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "ADD",
      "path": "3"
    },
    "402": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "DUP2",
      "path": "3"
    },
    "403": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "404": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "406": {
      "op": "SWAP1"
    },
    "407": {
      "op": "SWAP2"
    },
    "408": {
      "op": "ADD"
    },
    "409": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "DUP4",
      "path": "3"
    },
    "410": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5881,
        5911
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "411": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5871,
        5912
      ],
      "op": "DUP1",
      "path": "3"
    },
    "412": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5871,
        5912
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "413": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5871,
        5912
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "414": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5871,
        5912
      ],
      "op": "DUP5",
      "path": "3"
    },
    "415": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5871,
        5912
      ],
      "op": "ADD",
      "path": "3"
    },
    "416": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5871,
        5912
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "417": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5972,
        5992
      ],
      "op": "DUP1",
      "path": "3",
      "statement": 1
    },
    "418": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5972,
        5992
      ],
      "op": "DUP6",
      "path": "3"
    },
    "419": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5972,
        5992
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "420": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5972,
        5986
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x5"
    },
    "422": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5972,
        5986
      ],
      "op": "DUP3",
      "path": "3"
    },
    "423": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5972,
        5986
      ],
      "op": "ADD",
      "path": "3"
    },
    "424": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5972,
        5992
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "425": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5972,
        5992
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "426": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5972,
        5992
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "427": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5972,
        5992
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "428": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5972,
        5992
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "429": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5972,
        5992
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "430": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5972,
        5992
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xFF"
    },
    "432": {
      "branch": 20,
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5972,
        5992
      ],
      "op": "AND",
      "path": "3"
    },
    "433": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5968,
        6061
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "434": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5968,
        6061
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1D8"
    },
    "437": {
      "branch": 20,
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5968,
        6061
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "438": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6015,
        6050
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "440": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6015,
        6050
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "441": {
      "op": "PUSH4",
      "value": "0x1C38E139"
    },
    "446": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "448": {
      "op": "SHL"
    },
    "449": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6015,
        6050
      ],
      "op": "DUP2",
      "path": "3"
    },
    "450": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6015,
        6050
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "451": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6015,
        6050
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "453": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6015,
        6050
      ],
      "op": "DUP2",
      "path": "3"
    },
    "454": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6015,
        6050
      ],
      "op": "ADD",
      "path": "3"
    },
    "455": {
      "op": "DUP8"
    },
    "456": {
      "op": "SWAP1"
    },
    "457": {
      "op": "MSTORE"
    },
    "458": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "460": {
      "op": "DUP2"
    },
    "461": {
      "op": "ADD"
    },
    "462": {
      "op": "DUP3"
    },
    "463": {
      "op": "SWAP1"
    },
    "464": {
      "op": "MSTORE"
    },
    "465": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "467": {
      "op": "ADD"
    },
    "468": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6015,
        6050
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x15A"
    },
    "471": {
      "op": "JUMP"
    },
    "472": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5968,
        6061
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "473": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6190
      ],
      "op": "DUP2",
      "path": "3",
      "statement": 2
    },
    "474": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6190
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "475": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "477": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "478": {
      "op": "PUSH4",
      "value": "0x2769CD1F"
    },
    "483": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "485": {
      "op": "SHL"
    },
    "486": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "DUP2",
      "path": "3"
    },
    "487": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "488": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6202
      ],
      "op": "PUSH20",
      "path": "3",
      "value": "0x0"
    },
    "509": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6202
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "510": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6202
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x9DA7347C"
    },
    "515": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6202
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "516": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x214"
    },
    "519": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "520": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6190
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "521": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6203,
        6207
      ],
      "op": "DUP6",
      "path": "3"
    },
    "522": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6203,
        6207
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "523": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6209,
        6214
      ],
      "op": "DUP9",
      "path": "3"
    },
    "524": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6209,
        6214
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "525": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "527": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "ADD",
      "path": "3"
    },
    "528": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8E9"
    },
    "531": {
      "fn": "MerkleDropFactory.withdraw",
      "jump": "i",
      "offset": [
        6175,
        6215
      ],
      "op": "JUMP",
      "path": "3"
    },
    "532": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "533": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "535": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "537": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "538": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "DUP1",
      "path": "3"
    },
    "539": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "DUP4",
      "path": "3"
    },
    "540": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "SUB",
      "path": "3"
    },
    "541": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "DUP2",
      "path": "3"
    },
    "542": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "DUP7",
      "path": "3"
    },
    "543": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "GAS",
      "path": "3"
    },
    "544": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "DELEGATECALL",
      "path": "3"
    },
    "545": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "546": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "DUP1",
      "path": "3"
    },
    "547": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "548": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x231"
    },
    "551": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "552": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "553": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "555": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "DUP1",
      "path": "3"
    },
    "556": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "RETURNDATACOPY",
      "path": "3"
    },
    "557": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "558": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "560": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "REVERT",
      "path": "3"
    },
    "561": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "562": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "POP",
      "path": "3"
    },
    "563": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "POP",
      "path": "3"
    },
    "564": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "POP",
      "path": "3"
    },
    "565": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "POP",
      "path": "3"
    },
    "566": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "568": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "569": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "570": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "572": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "NOT",
      "path": "3"
    },
    "573": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "575": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "DUP3",
      "path": "3"
    },
    "576": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "ADD",
      "path": "3"
    },
    "577": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "AND",
      "path": "3"
    },
    "578": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "DUP3",
      "path": "3"
    },
    "579": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "ADD",
      "path": "3"
    },
    "580": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "DUP1",
      "path": "3"
    },
    "581": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "583": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "584": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "POP",
      "path": "3"
    },
    "585": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "DUP2",
      "path": "3"
    },
    "586": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "ADD",
      "path": "3"
    },
    "587": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "588": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x255"
    },
    "591": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "592": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "593": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x93E"
    },
    "596": {
      "fn": "MerkleDropFactory.withdraw",
      "jump": "i",
      "offset": [
        6175,
        6215
      ],
      "op": "JUMP",
      "path": "3"
    },
    "597": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6175,
        6215
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "598": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6171,
        6290
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x278"
    },
    "601": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6171,
        6290
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "602": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6256,
        6265
      ],
      "op": "DUP6",
      "path": "3"
    },
    "603": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6267,
        6271
      ],
      "op": "DUP2",
      "path": "3"
    },
    "604": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6273,
        6278
      ],
      "op": "DUP5",
      "path": "3"
    },
    "605": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6247,
        6279
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "607": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6247,
        6279
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "608": {
      "op": "PUSH4",
      "value": "0xDA5A8FD"
    },
    "613": {
      "op": "PUSH1",
      "value": "0xE4"
    },
    "615": {
      "op": "SHL"
    },
    "616": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6247,
        6279
      ],
      "op": "DUP2",
      "path": "3"
    },
    "617": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6247,
        6279
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "618": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6247,
        6279
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "620": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6247,
        6279
      ],
      "op": "ADD",
      "path": "3"
    },
    "621": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6247,
        6279
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x15A"
    },
    "624": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6247,
        6279
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "625": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6247,
        6279
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "626": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6247,
        6279
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "627": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6247,
        6279
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "628": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6247,
        6279
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8E9"
    },
    "631": {
      "fn": "MerkleDropFactory.withdraw",
      "jump": "i",
      "offset": [
        6247,
        6279
      ],
      "op": "JUMP",
      "path": "3"
    },
    "632": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6171,
        6290
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "633": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6377
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 3,
      "value": "0x0"
    },
    "635": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6377
      ],
      "op": "DUP2",
      "path": "3"
    },
    "636": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6377
      ],
      "op": "DUP2",
      "path": "3"
    },
    "637": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6377
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "638": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6371
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x5"
    },
    "640": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6371
      ],
      "op": "DUP4",
      "path": "3"
    },
    "641": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6371
      ],
      "op": "ADD",
      "path": "3"
    },
    "642": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6377
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "644": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6377
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "645": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6377
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "647": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6377
      ],
      "op": "DUP1",
      "path": "3"
    },
    "648": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6377
      ],
      "op": "DUP3",
      "path": "3"
    },
    "649": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6377
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "650": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6384
      ],
      "op": "DUP1",
      "path": "3"
    },
    "651": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6384
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "652": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "654": {
      "op": "NOT"
    },
    "655": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6384
      ],
      "op": "AND",
      "path": "3"
    },
    "656": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6380,
        6384
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "658": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6384
      ],
      "op": "OR",
      "path": "3"
    },
    "659": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6384
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "660": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6384
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "661": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6417,
        6434
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "663": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6417,
        6434
      ],
      "op": "DUP5",
      "path": "3"
    },
    "664": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6417,
        6434
      ],
      "op": "ADD",
      "path": "3"
    },
    "665": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6417,
        6434
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "666": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "667": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "668": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "673": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "675": {
      "op": "SHL"
    },
    "676": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "DUP2",
      "path": "3"
    },
    "677": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "678": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6490,
        6494
      ],
      "op": "ADDRESS",
      "path": "3"
    },
    "679": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "681": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "DUP3",
      "path": "3"
    },
    "682": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "ADD",
      "path": "3"
    },
    "683": {
      "op": "MSTORE"
    },
    "684": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "686": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "688": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "690": {
      "op": "SHL"
    },
    "691": {
      "op": "SUB"
    },
    "692": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6417,
        6434
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "693": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6417,
        6434
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "694": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6417,
        6434
      ],
      "op": "AND",
      "path": "3"
    },
    "695": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6417,
        6434
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "696": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6357,
        6377
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "697": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6417,
        6434
      ],
      "op": "DUP3",
      "path": "3"
    },
    "698": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6417,
        6434
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "699": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6481
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x70A08231"
    },
    "704": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6481
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "705": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "707": {
      "op": "ADD"
    },
    "708": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "710": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "712": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "713": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "DUP1",
      "path": "3"
    },
    "714": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "DUP4",
      "path": "3"
    },
    "715": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "SUB",
      "path": "3"
    },
    "716": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "DUP2",
      "path": "3"
    },
    "717": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "DUP7",
      "path": "3"
    },
    "718": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "GAS",
      "path": "3"
    },
    "719": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "STATICCALL",
      "path": "3"
    },
    "720": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "721": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "DUP1",
      "path": "3"
    },
    "722": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "723": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2E0"
    },
    "726": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "727": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "728": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "730": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "DUP1",
      "path": "3"
    },
    "731": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "RETURNDATACOPY",
      "path": "3"
    },
    "732": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "733": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "735": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "REVERT",
      "path": "3"
    },
    "736": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "737": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "POP",
      "path": "3"
    },
    "738": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "POP",
      "path": "3"
    },
    "739": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "POP",
      "path": "3"
    },
    "740": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "POP",
      "path": "3"
    },
    "741": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "743": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "744": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "745": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "747": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "NOT",
      "path": "3"
    },
    "748": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "750": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "DUP3",
      "path": "3"
    },
    "751": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "ADD",
      "path": "3"
    },
    "752": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "AND",
      "path": "3"
    },
    "753": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "DUP3",
      "path": "3"
    },
    "754": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "ADD",
      "path": "3"
    },
    "755": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "DUP1",
      "path": "3"
    },
    "756": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "758": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "759": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "POP",
      "path": "3"
    },
    "760": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "DUP2",
      "path": "3"
    },
    "761": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "ADD",
      "path": "3"
    },
    "762": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "763": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x304"
    },
    "766": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "767": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "768": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x967"
    },
    "771": {
      "fn": "MerkleDropFactory.withdraw",
      "jump": "i",
      "offset": [
        6466,
        6496
      ],
      "op": "JUMP",
      "path": "3"
    },
    "772": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6466,
        6496
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "773": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 4,
      "value": "0x40"
    },
    "775": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "776": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "781": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "783": {
      "op": "SHL"
    },
    "784": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "DUP2",
      "path": "3"
    },
    "785": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "786": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "788": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "790": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "792": {
      "op": "SHL"
    },
    "793": {
      "op": "SUB"
    },
    "794": {
      "op": "DUP10"
    },
    "795": {
      "op": "DUP2"
    },
    "796": {
      "op": "AND"
    },
    "797": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "799": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "DUP4",
      "path": "3"
    },
    "800": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "ADD",
      "path": "3"
    },
    "801": {
      "op": "MSTORE"
    },
    "802": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "804": {
      "op": "DUP3"
    },
    "805": {
      "op": "ADD"
    },
    "806": {
      "op": "DUP10"
    },
    "807": {
      "op": "SWAP1"
    },
    "808": {
      "op": "MSTORE"
    },
    "809": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6445,
        6496
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "810": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6445,
        6496
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "811": {
      "op": "POP"
    },
    "812": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6897
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "813": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6897
      ],
      "op": "DUP4",
      "path": "3"
    },
    "814": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6897
      ],
      "op": "AND",
      "path": "3"
    },
    "815": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6897
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "816": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6897
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xA9059CBB"
    },
    "821": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6897
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "822": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "824": {
      "op": "ADD"
    },
    "825": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "827": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "829": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "830": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "DUP1",
      "path": "3"
    },
    "831": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "DUP4",
      "path": "3"
    },
    "832": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "SUB",
      "path": "3"
    },
    "833": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "DUP2",
      "path": "3"
    },
    "834": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "836": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "DUP8",
      "path": "3"
    },
    "837": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "GAS",
      "path": "3"
    },
    "838": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "CALL",
      "path": "3"
    },
    "839": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "840": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "DUP1",
      "path": "3"
    },
    "841": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "842": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x357"
    },
    "845": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "846": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "847": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "849": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "DUP1",
      "path": "3"
    },
    "850": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "RETURNDATACOPY",
      "path": "3"
    },
    "851": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "852": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "854": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "REVERT",
      "path": "3"
    },
    "855": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "856": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "POP",
      "path": "3"
    },
    "857": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "POP",
      "path": "3"
    },
    "858": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "POP",
      "path": "3"
    },
    "859": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "POP",
      "path": "3"
    },
    "860": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "862": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "863": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "864": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "866": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "NOT",
      "path": "3"
    },
    "867": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "869": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "DUP3",
      "path": "3"
    },
    "870": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "ADD",
      "path": "3"
    },
    "871": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "AND",
      "path": "3"
    },
    "872": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "DUP3",
      "path": "3"
    },
    "873": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "ADD",
      "path": "3"
    },
    "874": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "DUP1",
      "path": "3"
    },
    "875": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "877": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "878": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "POP",
      "path": "3"
    },
    "879": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "DUP2",
      "path": "3"
    },
    "880": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "ADD",
      "path": "3"
    },
    "881": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "882": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x37B"
    },
    "885": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "886": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "887": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x93E"
    },
    "890": {
      "fn": "MerkleDropFactory.withdraw",
      "jump": "i",
      "offset": [
        6883,
        6917
      ],
      "op": "JUMP",
      "path": "3"
    },
    "891": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6883,
        6917
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "892": {
      "op": "POP"
    },
    "893": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "895": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "896": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "901": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "903": {
      "op": "SHL"
    },
    "904": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "DUP2",
      "path": "3"
    },
    "905": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "906": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6972,
        6976
      ],
      "op": "ADDRESS",
      "path": "3"
    },
    "907": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "909": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "DUP3",
      "path": "3"
    },
    "910": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "ADD",
      "path": "3"
    },
    "911": {
      "op": "MSTORE"
    },
    "912": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6928,
        6945
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "914": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6928,
        6945
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "915": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "917": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "919": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "921": {
      "op": "SHL"
    },
    "922": {
      "op": "SUB"
    },
    "923": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6963
      ],
      "op": "DUP5",
      "path": "3"
    },
    "924": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6963
      ],
      "op": "AND",
      "path": "3"
    },
    "925": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6963
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "926": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6963
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x70A08231"
    },
    "931": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6963
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "932": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "934": {
      "op": "ADD"
    },
    "935": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "937": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "939": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "940": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "DUP1",
      "path": "3"
    },
    "941": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "DUP4",
      "path": "3"
    },
    "942": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "SUB",
      "path": "3"
    },
    "943": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "DUP2",
      "path": "3"
    },
    "944": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "DUP7",
      "path": "3"
    },
    "945": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "GAS",
      "path": "3"
    },
    "946": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "STATICCALL",
      "path": "3"
    },
    "947": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "948": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "DUP1",
      "path": "3"
    },
    "949": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "950": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3C3"
    },
    "953": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "954": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "955": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "957": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "DUP1",
      "path": "3"
    },
    "958": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "RETURNDATACOPY",
      "path": "3"
    },
    "959": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "960": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "962": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "REVERT",
      "path": "3"
    },
    "963": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "964": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "POP",
      "path": "3"
    },
    "965": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "POP",
      "path": "3"
    },
    "966": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "POP",
      "path": "3"
    },
    "967": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "POP",
      "path": "3"
    },
    "968": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "970": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "971": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "972": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "974": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "NOT",
      "path": "3"
    },
    "975": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "977": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "DUP3",
      "path": "3"
    },
    "978": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "ADD",
      "path": "3"
    },
    "979": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "AND",
      "path": "3"
    },
    "980": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "DUP3",
      "path": "3"
    },
    "981": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "ADD",
      "path": "3"
    },
    "982": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "DUP1",
      "path": "3"
    },
    "983": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "985": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "986": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "POP",
      "path": "3"
    },
    "987": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "DUP2",
      "path": "3"
    },
    "988": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "ADD",
      "path": "3"
    },
    "989": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "990": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3E7"
    },
    "993": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "994": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "995": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x967"
    },
    "998": {
      "fn": "MerkleDropFactory.withdraw",
      "jump": "i",
      "offset": [
        6948,
        6978
      ],
      "op": "JUMP",
      "path": "3"
    },
    "999": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6948,
        6978
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1000": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6928,
        6978
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1001": {
      "op": "POP"
    },
    "1002": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6988,
        6997
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1004": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7000,
        7028
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x3F5"
    },
    "1007": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6928,
        6978
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1008": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7000,
        7013
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1009": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7000,
        7028
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x996"
    },
    "1012": {
      "fn": "MerkleDropFactory.withdraw",
      "jump": "i",
      "offset": [
        7000,
        7028
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1013": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7000,
        7028
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1014": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        6988,
        7028
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1015": {
      "op": "POP"
    },
    "1016": {
      "branch": 21,
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7042,
        7051
      ],
      "op": "DUP1",
      "path": "3",
      "statement": 5
    },
    "1017": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7038,
        7122
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x41F"
    },
    "1020": {
      "branch": 21,
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7038,
        7122
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1021": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7074,
        7111
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1023": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7074,
        7111
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1024": {
      "op": "PUSH4",
      "value": "0x6EB54E9"
    },
    "1029": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "1031": {
      "op": "SHL"
    },
    "1032": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7074,
        7111
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1033": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7074,
        7111
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1034": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7074,
        7111
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1036": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7074,
        7111
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1037": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7074,
        7111
      ],
      "op": "ADD",
      "path": "3"
    },
    "1038": {
      "op": "DUP12"
    },
    "1039": {
      "op": "SWAP1"
    },
    "1040": {
      "op": "MSTORE"
    },
    "1041": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1043": {
      "op": "DUP2"
    },
    "1044": {
      "op": "ADD"
    },
    "1045": {
      "op": "DUP7"
    },
    "1046": {
      "op": "SWAP1"
    },
    "1047": {
      "op": "MSTORE"
    },
    "1048": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1050": {
      "op": "ADD"
    },
    "1051": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7074,
        7111
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x15A"
    },
    "1054": {
      "op": "JUMP"
    },
    "1055": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7038,
        7122
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1056": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7178,
        7182
      ],
      "op": "DUP1",
      "path": "3",
      "statement": 6
    },
    "1057": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7161
      ],
      "op": "DUP7",
      "path": "3"
    },
    "1058": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7174
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "1060": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7174
      ],
      "op": "ADD",
      "path": "3"
    },
    "1061": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7174
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1063": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1064": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1065": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1066": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x433"
    },
    "1069": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1070": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1071": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x996"
    },
    "1074": {
      "fn": "MerkleDropFactory.withdraw",
      "jump": "i",
      "offset": [
        7157,
        7182
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1075": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1076": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1077": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "POP",
      "path": "3"
    },
    "1078": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "POP",
      "path": "3"
    },
    "1079": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1080": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1081": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1082": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7157,
        7182
      ],
      "op": "POP",
      "path": "3"
    },
    "1083": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7212,
        7216
      ],
      "op": "DUP1",
      "path": "3",
      "statement": 7
    },
    "1084": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7196
      ],
      "op": "DUP7",
      "path": "3"
    },
    "1085": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7208
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1087": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7208
      ],
      "op": "ADD",
      "path": "3"
    },
    "1088": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7208
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1090": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7216
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1091": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7216
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1092": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7216
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1093": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7216
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x44E"
    },
    "1096": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7216
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1097": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7216
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1098": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7216
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x9AD"
    },
    "1101": {
      "fn": "MerkleDropFactory.withdraw",
      "jump": "i",
      "offset": [
        7192,
        7216
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1102": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7216
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1103": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7216
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1104": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7216
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1105": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7192,
        7216
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1106": {
      "op": "POP"
    },
    "1107": {
      "op": "POP"
    },
    "1108": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7232,
        7281
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 8,
      "value": "0x40"
    },
    "1110": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7232,
        7281
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1111": {
      "op": "DUP9"
    },
    "1112": {
      "op": "DUP2"
    },
    "1113": {
      "op": "MSTORE"
    },
    "1114": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1116": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1118": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1120": {
      "op": "SHL"
    },
    "1121": {
      "op": "SUB"
    },
    "1122": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7232,
        7281
      ],
      "op": "DUP11",
      "path": "3"
    },
    "1123": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7232,
        7281
      ],
      "op": "AND",
      "path": "3"
    },
    "1124": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7232,
        7281
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1125": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7251,
        7260
      ],
      "op": "DUP12",
      "path": "3"
    },
    "1126": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7251,
        7260
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1127": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7232,
        7281
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0xEE9EA94D50CFFEA72BE7DA20B021E5FD1B0DB20ED920D927B659DECC48E08E44"
    },
    "1160": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7232,
        7281
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1161": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1163": {
      "op": "ADD"
    },
    "1164": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7232,
        7281
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1166": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7232,
        7281
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1167": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7232,
        7281
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1168": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7232,
        7281
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1169": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7232,
        7281
      ],
      "op": "SUB",
      "path": "3"
    },
    "1170": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7232,
        7281
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1171": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        7232,
        7281
      ],
      "op": "LOG3",
      "path": "3"
    },
    "1172": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5522,
        7288
      ],
      "op": "POP",
      "path": "3"
    },
    "1173": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5522,
        7288
      ],
      "op": "POP",
      "path": "3"
    },
    "1174": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5522,
        7288
      ],
      "op": "POP",
      "path": "3"
    },
    "1175": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5522,
        7288
      ],
      "op": "POP",
      "path": "3"
    },
    "1176": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5522,
        7288
      ],
      "op": "POP",
      "path": "3"
    },
    "1177": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5522,
        7288
      ],
      "op": "POP",
      "path": "3"
    },
    "1178": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "POP",
      "path": "3"
    },
    "1179": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "POP",
      "path": "3"
    },
    "1180": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "POP",
      "path": "3"
    },
    "1181": {
      "fn": "MerkleDropFactory.withdraw",
      "offset": [
        5424,
        7288
      ],
      "op": "POP",
      "path": "3"
    },
    "1182": {
      "fn": "MerkleDropFactory.withdraw",
      "jump": "o",
      "offset": [
        5424,
        7288
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1183": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2761,
        3347
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1184": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2933,
        2956
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1186": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2970
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1188": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1190": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2973,
        2981
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1191": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2973,
        2981
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1193": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2971,
        2981
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1194": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2971,
        2981
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1195": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2971,
        2981
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4B3"
    },
    "1198": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2971,
        2981
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1199": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2971,
        2981
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x9C5"
    },
    "1202": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "jump": "i",
      "offset": [
        2971,
        2981
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1203": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2971,
        2981
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1204": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2971,
        2981
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1205": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2971,
        2981
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1206": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2971,
        2981
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1207": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2971,
        2981
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1208": {
      "op": "POP"
    },
    "1209": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1210": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1211": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1213": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1214": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "ADD",
      "path": "3"
    },
    "1215": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1216": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1217": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1218": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1219": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1221": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "ADD",
      "path": "3"
    },
    "1222": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1224": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1225": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1226": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1227": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2992,
        3017
      ],
      "op": "DUP7",
      "path": "3",
      "statement": 9
    },
    "1228": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2992,
        3017
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1229": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2992,
        3017
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1230": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3027,
        3040
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 10,
      "value": "0x1"
    },
    "1232": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3027,
        3040
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1233": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3027,
        3040
      ],
      "op": "ADD",
      "path": "3"
    },
    "1234": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3027,
        3051
      ],
      "op": "DUP7",
      "path": "3"
    },
    "1235": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3027,
        3051
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1236": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3027,
        3051
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1237": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3061,
        3078
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 11,
      "value": "0x2"
    },
    "1239": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3061,
        3078
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1240": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3061,
        3078
      ],
      "op": "ADD",
      "path": "3"
    },
    "1241": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3061,
        3093
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1242": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3061,
        3093
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1243": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1245": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1247": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1249": {
      "op": "SHL"
    },
    "1250": {
      "op": "SUB"
    },
    "1251": {
      "op": "NOT"
    },
    "1252": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3061,
        3093
      ],
      "op": "AND",
      "path": "3"
    },
    "1253": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1255": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1257": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1259": {
      "op": "SHL"
    },
    "1260": {
      "op": "SUB"
    },
    "1261": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3061,
        3093
      ],
      "op": "DUP8",
      "path": "3"
    },
    "1262": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3061,
        3093
      ],
      "op": "AND",
      "path": "3"
    },
    "1263": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3061,
        3093
      ],
      "op": "OR",
      "path": "3"
    },
    "1264": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3061,
        3093
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1265": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3061,
        3093
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1266": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3176,
        3184
      ],
      "op": "SWAP1",
      "path": "3",
      "statement": 12
    },
    "1267": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3176,
        3184
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1268": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1269": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2959,
        2982
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1270": {
      "op": "POP"
    },
    "1271": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3162,
        3199
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x500"
    },
    "1274": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3162,
        3199
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1275": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3186,
        3198
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1276": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3162,
        3175
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x54F"
    },
    "1279": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "jump": "i",
      "offset": [
        3162,
        3199
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1280": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3162,
        3199
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1281": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3298,
        3306
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 13,
      "value": "0x0"
    },
    "1283": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3298,
        3306
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1284": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1286": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1287": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1288": {
      "op": "DUP8"
    },
    "1289": {
      "op": "DUP2"
    },
    "1290": {
      "op": "MSTORE"
    },
    "1291": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1293": {
      "op": "DUP2"
    },
    "1294": {
      "op": "ADD"
    },
    "1295": {
      "op": "DUP8"
    },
    "1296": {
      "op": "SWAP1"
    },
    "1297": {
      "op": "MSTORE"
    },
    "1298": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1300": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1302": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1304": {
      "op": "SHL"
    },
    "1305": {
      "op": "SUB"
    },
    "1306": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "DUP7",
      "path": "3"
    },
    "1307": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "AND",
      "path": "3"
    },
    "1308": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1309": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3298,
        3306
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1310": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45"
    },
    "1343": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1344": {
      "op": "ADD"
    },
    "1345": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1347": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1348": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1349": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1350": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "SUB",
      "path": "3"
    },
    "1351": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1352": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        3282,
        3340
      ],
      "op": "LOG3",
      "path": "3"
    },
    "1353": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2867,
        3347
      ],
      "op": "POP",
      "path": "3"
    },
    "1354": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2761,
        3347
      ],
      "op": "POP",
      "path": "3"
    },
    "1355": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2761,
        3347
      ],
      "op": "POP",
      "path": "3"
    },
    "1356": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2761,
        3347
      ],
      "op": "POP",
      "path": "3"
    },
    "1357": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "offset": [
        2761,
        3347
      ],
      "op": "POP",
      "path": "3"
    },
    "1358": {
      "fn": "MerkleDropFactory.addMerkleTree",
      "jump": "o",
      "offset": [
        2761,
        3347
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1359": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3722,
        4815
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1360": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3794,
        3808
      ],
      "op": "DUP2",
      "path": "3",
      "statement": 14
    },
    "1361": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3794,
        3808
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1362": {
      "branch": 22,
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3794,
        3808
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1363": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3794,
        3832
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x55D"
    },
    "1366": {
      "branch": 22,
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3794,
        3832
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1367": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3794,
        3832
      ],
      "op": "POP",
      "path": "3"
    },
    "1368": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3824,
        3832
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1370": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3824,
        3832
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1371": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3812,
        3821
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1372": {
      "branch": 23,
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3812,
        3832
      ],
      "op": "GT",
      "path": "3"
    },
    "1373": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3794,
        3832
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1374": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3790,
        3889
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1375": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3790,
        3889
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x57E"
    },
    "1378": {
      "branch": 23,
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3790,
        3889
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1379": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3855,
        3878
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1381": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3855,
        3878
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1382": {
      "op": "PUSH4",
      "value": "0x190A97AD"
    },
    "1387": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1389": {
      "op": "SHL"
    },
    "1390": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3855,
        3878
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1391": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3855,
        3878
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1392": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3855,
        3878
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1394": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3855,
        3878
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1395": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3855,
        3878
      ],
      "op": "ADD",
      "path": "3"
    },
    "1396": {
      "op": "DUP4"
    },
    "1397": {
      "op": "SWAP1"
    },
    "1398": {
      "op": "MSTORE"
    },
    "1399": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1401": {
      "op": "ADD"
    },
    "1402": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3855,
        3878
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x15A"
    },
    "1405": {
      "op": "JUMP"
    },
    "1406": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3790,
        3889
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1407": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3938,
        3967
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1409": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3970,
        3992
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1410": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3970,
        3992
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1411": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3970,
        3992
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1412": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3970,
        3981
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1414": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3970,
        3992
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1416": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3970,
        3992
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1417": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3970,
        3992
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1419": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3970,
        3992
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1420": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3970,
        3992
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1421": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3970,
        3992
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1422": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4025,
        4048
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1424": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4025,
        4048
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1425": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4025,
        4048
      ],
      "op": "ADD",
      "path": "3"
    },
    "1426": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4025,
        4048
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1427": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1428": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1429": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "1434": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1436": {
      "op": "SHL"
    },
    "1437": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1438": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1439": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4104,
        4108
      ],
      "op": "ADDRESS",
      "path": "3"
    },
    "1440": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1442": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1443": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "ADD",
      "path": "3"
    },
    "1444": {
      "op": "MSTORE"
    },
    "1445": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3970,
        3992
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1446": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3970,
        3992
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1447": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1449": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1451": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1453": {
      "op": "SHL"
    },
    "1454": {
      "op": "SUB"
    },
    "1455": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4025,
        4048
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1456": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4025,
        4048
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1457": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4025,
        4048
      ],
      "op": "AND",
      "path": "3"
    },
    "1458": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4025,
        4048
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1459": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3938,
        3967
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1460": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4025,
        4048
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1461": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4025,
        4048
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1462": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4095
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x70A08231"
    },
    "1467": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4095
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1468": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1470": {
      "op": "ADD"
    },
    "1471": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1473": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1475": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1476": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1477": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1478": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "SUB",
      "path": "3"
    },
    "1479": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1480": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "DUP7",
      "path": "3"
    },
    "1481": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "GAS",
      "path": "3"
    },
    "1482": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "STATICCALL",
      "path": "3"
    },
    "1483": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1484": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1485": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1486": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x5DB"
    },
    "1489": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1490": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1491": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1493": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1494": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "RETURNDATACOPY",
      "path": "3"
    },
    "1495": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1496": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1498": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "REVERT",
      "path": "3"
    },
    "1499": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1500": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "POP",
      "path": "3"
    },
    "1501": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "POP",
      "path": "3"
    },
    "1502": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "POP",
      "path": "3"
    },
    "1503": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "POP",
      "path": "3"
    },
    "1504": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1506": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1507": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1508": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1510": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "NOT",
      "path": "3"
    },
    "1511": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1513": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1514": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "ADD",
      "path": "3"
    },
    "1515": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "AND",
      "path": "3"
    },
    "1516": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1517": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "ADD",
      "path": "3"
    },
    "1518": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1519": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1521": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1522": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "POP",
      "path": "3"
    },
    "1523": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1524": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "ADD",
      "path": "3"
    },
    "1525": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1526": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x5FF"
    },
    "1529": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1530": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1531": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x967"
    },
    "1534": {
      "fn": "MerkleDropFactory.depositTokens",
      "jump": "i",
      "offset": [
        4080,
        4110
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1535": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4080,
        4110
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1536": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 15,
      "value": "0x40"
    },
    "1538": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1539": {
      "op": "PUSH4",
      "value": "0x23B872DD"
    },
    "1544": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1546": {
      "op": "SHL"
    },
    "1547": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1548": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1549": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4345,
        4355
      ],
      "op": "CALLER",
      "path": "3"
    },
    "1550": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1552": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1553": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "ADD",
      "path": "3"
    },
    "1554": {
      "op": "MSTORE"
    },
    "1555": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4365,
        4369
      ],
      "op": "ADDRESS",
      "path": "3"
    },
    "1556": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1558": {
      "op": "DUP3"
    },
    "1559": {
      "op": "ADD"
    },
    "1560": {
      "op": "MSTORE"
    },
    "1561": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1563": {
      "op": "DUP2"
    },
    "1564": {
      "op": "ADD"
    },
    "1565": {
      "op": "DUP7"
    },
    "1566": {
      "op": "SWAP1"
    },
    "1567": {
      "op": "MSTORE"
    },
    "1568": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4059,
        4110
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1569": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4059,
        4110
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1570": {
      "op": "POP"
    },
    "1571": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1573": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1575": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1577": {
      "op": "SHL"
    },
    "1578": {
      "op": "SUB"
    },
    "1579": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4344
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1580": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4344
      ],
      "op": "AND",
      "path": "3"
    },
    "1581": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4344
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1582": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4344
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x23B872DD"
    },
    "1587": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4344
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1588": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1590": {
      "op": "ADD"
    },
    "1591": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1593": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1595": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1596": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1597": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1598": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "SUB",
      "path": "3"
    },
    "1599": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1600": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1602": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "DUP8",
      "path": "3"
    },
    "1603": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "GAS",
      "path": "3"
    },
    "1604": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "CALL",
      "path": "3"
    },
    "1605": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1606": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1607": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1608": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x655"
    },
    "1611": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1612": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1613": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1615": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1616": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "RETURNDATACOPY",
      "path": "3"
    },
    "1617": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1618": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1620": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "REVERT",
      "path": "3"
    },
    "1621": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1622": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "POP",
      "path": "3"
    },
    "1623": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "POP",
      "path": "3"
    },
    "1624": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "POP",
      "path": "3"
    },
    "1625": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "POP",
      "path": "3"
    },
    "1626": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1628": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1629": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1630": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1632": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "NOT",
      "path": "3"
    },
    "1633": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1635": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1636": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "ADD",
      "path": "3"
    },
    "1637": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "AND",
      "path": "3"
    },
    "1638": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1639": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "ADD",
      "path": "3"
    },
    "1640": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1641": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1643": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1644": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "POP",
      "path": "3"
    },
    "1645": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1646": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "ADD",
      "path": "3"
    },
    "1647": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1648": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x679"
    },
    "1651": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1652": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1653": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x93E"
    },
    "1656": {
      "fn": "MerkleDropFactory.depositTokens",
      "jump": "i",
      "offset": [
        4326,
        4378
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1657": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4326,
        4378
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1658": {
      "op": "POP"
    },
    "1659": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1661": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1662": {
      "op": "PUSH4",
      "value": "0x70A08231"
    },
    "1667": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1669": {
      "op": "SHL"
    },
    "1670": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1671": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1672": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4433,
        4437
      ],
      "op": "ADDRESS",
      "path": "3"
    },
    "1673": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1675": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1676": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "ADD",
      "path": "3"
    },
    "1677": {
      "op": "MSTORE"
    },
    "1678": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4389,
        4406
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1680": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4389,
        4406
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1681": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1683": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1685": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1687": {
      "op": "SHL"
    },
    "1688": {
      "op": "SUB"
    },
    "1689": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4424
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1690": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4424
      ],
      "op": "AND",
      "path": "3"
    },
    "1691": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4424
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1692": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4424
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x70A08231"
    },
    "1697": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4424
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1698": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1700": {
      "op": "ADD"
    },
    "1701": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1703": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1705": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1706": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1707": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1708": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "SUB",
      "path": "3"
    },
    "1709": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1710": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "DUP7",
      "path": "3"
    },
    "1711": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "GAS",
      "path": "3"
    },
    "1712": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "STATICCALL",
      "path": "3"
    },
    "1713": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1714": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1715": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1716": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6C1"
    },
    "1719": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1720": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1721": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1723": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1724": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "RETURNDATACOPY",
      "path": "3"
    },
    "1725": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1726": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1728": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "REVERT",
      "path": "3"
    },
    "1729": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1730": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "POP",
      "path": "3"
    },
    "1731": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "POP",
      "path": "3"
    },
    "1732": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "POP",
      "path": "3"
    },
    "1733": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "POP",
      "path": "3"
    },
    "1734": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1736": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1737": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1738": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1740": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "NOT",
      "path": "3"
    },
    "1741": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1743": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1744": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "ADD",
      "path": "3"
    },
    "1745": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "AND",
      "path": "3"
    },
    "1746": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1747": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "ADD",
      "path": "3"
    },
    "1748": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1749": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1751": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1752": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "POP",
      "path": "3"
    },
    "1753": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1754": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "ADD",
      "path": "3"
    },
    "1755": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1756": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6E5"
    },
    "1759": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1760": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1761": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x967"
    },
    "1764": {
      "fn": "MerkleDropFactory.depositTokens",
      "jump": "i",
      "offset": [
        4409,
        4439
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1765": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4409,
        4439
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1766": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4389,
        4439
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1767": {
      "op": "POP"
    },
    "1768": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4450,
        4459
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1770": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4462,
        4490
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6F3"
    },
    "1773": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4477,
        4490
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1774": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4389,
        4439
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1775": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4462,
        4490
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x996"
    },
    "1778": {
      "fn": "MerkleDropFactory.depositTokens",
      "jump": "i",
      "offset": [
        4462,
        4490
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1779": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4462,
        4490
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1780": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4450,
        4490
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1781": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4450,
        4490
      ],
      "op": "POP",
      "path": "3"
    },
    "1782": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4589,
        4593
      ],
      "op": "DUP1",
      "path": "3",
      "statement": 16
    },
    "1783": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4572
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1784": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4585
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "1786": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4585
      ],
      "op": "ADD",
      "path": "3"
    },
    "1787": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4585
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1789": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4593
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1790": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4593
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1791": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4593
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1792": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4593
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x709"
    },
    "1795": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4593
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1796": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4593
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1797": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4593
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x9AD"
    },
    "1800": {
      "fn": "MerkleDropFactory.depositTokens",
      "jump": "i",
      "offset": [
        4562,
        4593
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1801": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4593
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1802": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4593
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1803": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4593
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1804": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4562,
        4593
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1805": {
      "op": "POP"
    },
    "1806": {
      "op": "POP"
    },
    "1807": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4778,
        4801
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 17,
      "value": "0x2"
    },
    "1809": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4778,
        4801
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1810": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4778,
        4801
      ],
      "op": "ADD",
      "path": "3"
    },
    "1811": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4778,
        4801
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1812": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4751,
        4808
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1814": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4751,
        4808
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1815": {
      "op": "DUP3"
    },
    "1816": {
      "op": "DUP2"
    },
    "1817": {
      "op": "MSTORE"
    },
    "1818": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1820": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1822": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1824": {
      "op": "SHL"
    },
    "1825": {
      "op": "SUB"
    },
    "1826": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4778,
        4801
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1827": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4778,
        4801
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1828": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4778,
        4801
      ],
      "op": "AND",
      "path": "3"
    },
    "1829": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4778,
        4801
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1830": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4767,
        4776
      ],
      "op": "DUP9",
      "path": "3"
    },
    "1831": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4767,
        4776
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1832": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4751,
        4808
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0xB162210DA7D23D82C18CFF5AF46D3562661D26B42A6848FA28D64A6BDC70386A"
    },
    "1865": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4751,
        4808
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1866": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1868": {
      "op": "ADD"
    },
    "1869": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4751,
        4808
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1871": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4751,
        4808
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1872": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4751,
        4808
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1873": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4751,
        4808
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1874": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4751,
        4808
      ],
      "op": "SUB",
      "path": "3"
    },
    "1875": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4751,
        4808
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1876": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        4751,
        4808
      ],
      "op": "LOG3",
      "path": "3"
    },
    "1877": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3780,
        4815
      ],
      "op": "POP",
      "path": "3"
    },
    "1878": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3780,
        4815
      ],
      "op": "POP",
      "path": "3"
    },
    "1879": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3780,
        4815
      ],
      "op": "POP",
      "path": "3"
    },
    "1880": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3780,
        4815
      ],
      "op": "POP",
      "path": "3"
    },
    "1881": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3780,
        4815
      ],
      "op": "POP",
      "path": "3"
    },
    "1882": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3722,
        4815
      ],
      "op": "POP",
      "path": "3"
    },
    "1883": {
      "fn": "MerkleDropFactory.depositTokens",
      "offset": [
        3722,
        4815
      ],
      "op": "POP",
      "path": "3"
    },
    "1884": {
      "fn": "MerkleDropFactory.depositTokens",
      "jump": "o",
      "offset": [
        3722,
        4815
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1885": {
      "op": "JUMPDEST"
    },
    "1886": {
      "op": "DUP1"
    },
    "1887": {
      "op": "CALLDATALOAD"
    },
    "1888": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1890": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1892": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1894": {
      "op": "SHL"
    },
    "1895": {
      "op": "SUB"
    },
    "1896": {
      "op": "DUP2"
    },
    "1897": {
      "op": "AND"
    },
    "1898": {
      "op": "DUP2"
    },
    "1899": {
      "op": "EQ"
    },
    "1900": {
      "op": "PUSH2",
      "value": "0x774"
    },
    "1903": {
      "op": "JUMPI"
    },
    "1904": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1906": {
      "op": "DUP1"
    },
    "1907": {
      "op": "REVERT"
    },
    "1908": {
      "op": "JUMPDEST"
    },
    "1909": {
      "op": "SWAP2"
    },
    "1910": {
      "op": "SWAP1"
    },
    "1911": {
      "op": "POP"
    },
    "1912": {
      "jump": "o",
      "op": "JUMP"
    },
    "1913": {
      "op": "JUMPDEST"
    },
    "1914": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1919": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1921": {
      "op": "SHL"
    },
    "1922": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1924": {
      "op": "MSTORE"
    },
    "1925": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "1927": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1929": {
      "op": "MSTORE"
    },
    "1930": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1932": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1934": {
      "op": "REVERT"
    },
    "1935": {
      "op": "JUMPDEST"
    },
    "1936": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1938": {
      "op": "DUP1"
    },
    "1939": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1941": {
      "op": "DUP1"
    },
    "1942": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "1944": {
      "op": "DUP6"
    },
    "1945": {
      "op": "DUP8"
    },
    "1946": {
      "op": "SUB"
    },
    "1947": {
      "op": "SLT"
    },
    "1948": {
      "op": "ISZERO"
    },
    "1949": {
      "op": "PUSH2",
      "value": "0x7A5"
    },
    "1952": {
      "op": "JUMPI"
    },
    "1953": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1955": {
      "op": "DUP1"
    },
    "1956": {
      "op": "REVERT"
    },
    "1957": {
      "op": "JUMPDEST"
    },
    "1958": {
      "op": "DUP5"
    },
    "1959": {
      "op": "CALLDATALOAD"
    },
    "1960": {
      "op": "SWAP4"
    },
    "1961": {
      "op": "POP"
    },
    "1962": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1964": {
      "op": "PUSH2",
      "value": "0x7B6"
    },
    "1967": {
      "op": "DUP2"
    },
    "1968": {
      "op": "DUP8"
    },
    "1969": {
      "op": "ADD"
    },
    "1970": {
      "op": "PUSH2",
      "value": "0x75D"
    },
    "1973": {
      "jump": "i",
      "op": "JUMP"
    },
    "1974": {
      "op": "JUMPDEST"
    },
    "1975": {
      "op": "SWAP4"
    },
    "1976": {
      "op": "POP"
    },
    "1977": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1979": {
      "op": "DUP7"
    },
    "1980": {
      "op": "ADD"
    },
    "1981": {
      "op": "CALLDATALOAD"
    },
    "1982": {
      "op": "SWAP3"
    },
    "1983": {
      "op": "POP"
    },
    "1984": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "1986": {
      "op": "DUP7"
    },
    "1987": {
      "op": "ADD"
    },
    "1988": {
      "op": "CALLDATALOAD"
    },
    "1989": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "1998": {
      "op": "DUP1"
    },
    "1999": {
      "op": "DUP3"
    },
    "2000": {
      "op": "GT"
    },
    "2001": {
      "op": "ISZERO"
    },
    "2002": {
      "op": "PUSH2",
      "value": "0x7DA"
    },
    "2005": {
      "op": "JUMPI"
    },
    "2006": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2008": {
      "op": "DUP1"
    },
    "2009": {
      "op": "REVERT"
    },
    "2010": {
      "op": "JUMPDEST"
    },
    "2011": {
      "op": "DUP2"
    },
    "2012": {
      "op": "DUP9"
    },
    "2013": {
      "op": "ADD"
    },
    "2014": {
      "op": "SWAP2"
    },
    "2015": {
      "op": "POP"
    },
    "2016": {
      "op": "DUP9"
    },
    "2017": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2019": {
      "op": "DUP4"
    },
    "2020": {
      "op": "ADD"
    },
    "2021": {
      "op": "SLT"
    },
    "2022": {
      "op": "PUSH2",
      "value": "0x7EE"
    },
    "2025": {
      "op": "JUMPI"
    },
    "2026": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2028": {
      "op": "DUP1"
    },
    "2029": {
      "op": "REVERT"
    },
    "2030": {
      "op": "JUMPDEST"
    },
    "2031": {
      "op": "DUP2"
    },
    "2032": {
      "op": "CALLDATALOAD"
    },
    "2033": {
      "op": "DUP2"
    },
    "2034": {
      "op": "DUP2"
    },
    "2035": {
      "op": "GT"
    },
    "2036": {
      "op": "ISZERO"
    },
    "2037": {
      "op": "PUSH2",
      "value": "0x800"
    },
    "2040": {
      "op": "JUMPI"
    },
    "2041": {
      "op": "PUSH2",
      "value": "0x800"
    },
    "2044": {
      "op": "PUSH2",
      "value": "0x779"
    },
    "2047": {
      "jump": "i",
      "op": "JUMP"
    },
    "2048": {
      "op": "JUMPDEST"
    },
    "2049": {
      "op": "DUP1"
    },
    "2050": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "2052": {
      "op": "SHL"
    },
    "2053": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2055": {
      "op": "MLOAD"
    },
    "2056": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2058": {
      "op": "NOT"
    },
    "2059": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "2061": {
      "op": "DUP4"
    },
    "2062": {
      "op": "ADD"
    },
    "2063": {
      "op": "AND"
    },
    "2064": {
      "op": "DUP2"
    },
    "2065": {
      "op": "ADD"
    },
    "2066": {
      "op": "DUP2"
    },
    "2067": {
      "op": "DUP2"
    },
    "2068": {
      "op": "LT"
    },
    "2069": {
      "op": "DUP6"
    },
    "2070": {
      "op": "DUP3"
    },
    "2071": {
      "op": "GT"
    },
    "2072": {
      "op": "OR"
    },
    "2073": {
      "op": "ISZERO"
    },
    "2074": {
      "op": "PUSH2",
      "value": "0x825"
    },
    "2077": {
      "op": "JUMPI"
    },
    "2078": {
      "op": "PUSH2",
      "value": "0x825"
    },
    "2081": {
      "op": "PUSH2",
      "value": "0x779"
    },
    "2084": {
      "jump": "i",
      "op": "JUMP"
    },
    "2085": {
      "op": "JUMPDEST"
    },
    "2086": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2088": {
      "op": "MSTORE"
    },
    "2089": {
      "op": "SWAP2"
    },
    "2090": {
      "op": "DUP3"
    },
    "2091": {
      "op": "MSTORE"
    },
    "2092": {
      "op": "DUP5"
    },
    "2093": {
      "op": "DUP3"
    },
    "2094": {
      "op": "ADD"
    },
    "2095": {
      "op": "SWAP3"
    },
    "2096": {
      "op": "POP"
    },
    "2097": {
      "op": "DUP4"
    },
    "2098": {
      "op": "DUP2"
    },
    "2099": {
      "op": "ADD"
    },
    "2100": {
      "op": "DUP6"
    },
    "2101": {
      "op": "ADD"
    },
    "2102": {
      "op": "SWAP2"
    },
    "2103": {
      "op": "DUP12"
    },
    "2104": {
      "op": "DUP4"
    },
    "2105": {
      "op": "GT"
    },
    "2106": {
      "op": "ISZERO"
    },
    "2107": {
      "op": "PUSH2",
      "value": "0x843"
    },
    "2110": {
      "op": "JUMPI"
    },
    "2111": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2113": {
      "op": "DUP1"
    },
    "2114": {
      "op": "REVERT"
    },
    "2115": {
      "op": "JUMPDEST"
    },
    "2116": {
      "op": "SWAP4"
    },
    "2117": {
      "op": "DUP6"
    },
    "2118": {
      "op": "ADD"
    },
    "2119": {
      "op": "SWAP4"
    },
    "2120": {
      "op": "JUMPDEST"
    },
    "2121": {
      "op": "DUP3"
    },
    "2122": {
      "op": "DUP6"
    },
    "2123": {
      "op": "LT"
    },
    "2124": {
      "op": "ISZERO"
    },
    "2125": {
      "op": "PUSH2",
      "value": "0x861"
    },
    "2128": {
      "op": "JUMPI"
    },
    "2129": {
      "op": "DUP5"
    },
    "2130": {
      "op": "CALLDATALOAD"
    },
    "2131": {
      "op": "DUP5"
    },
    "2132": {
      "op": "MSTORE"
    },
    "2133": {
      "op": "SWAP4"
    },
    "2134": {
      "op": "DUP6"
    },
    "2135": {
      "op": "ADD"
    },
    "2136": {
      "op": "SWAP4"
    },
    "2137": {
      "op": "SWAP3"
    },
    "2138": {
      "op": "DUP6"
    },
    "2139": {
      "op": "ADD"
    },
    "2140": {
      "op": "SWAP3"
    },
    "2141": {
      "op": "PUSH2",
      "value": "0x848"
    },
    "2144": {
      "op": "JUMP"
    },
    "2145": {
      "op": "JUMPDEST"
    },
    "2146": {
      "op": "SWAP9"
    },
    "2147": {
      "op": "SWAP12"
    },
    "2148": {
      "op": "SWAP8"
    },
    "2149": {
      "op": "SWAP11"
    },
    "2150": {
      "op": "POP"
    },
    "2151": {
      "op": "SWAP6"
    },
    "2152": {
      "op": "SWAP9"
    },
    "2153": {
      "op": "POP"
    },
    "2154": {
      "op": "POP"
    },
    "2155": {
      "op": "POP"
    },
    "2156": {
      "op": "POP"
    },
    "2157": {
      "op": "POP"
    },
    "2158": {
      "op": "POP"
    },
    "2159": {
      "op": "POP"
    },
    "2160": {
      "jump": "o",
      "op": "JUMP"
    },
    "2161": {
      "op": "JUMPDEST"
    },
    "2162": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2164": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2166": {
      "op": "DUP3"
    },
    "2167": {
      "op": "DUP5"
    },
    "2168": {
      "op": "SUB"
    },
    "2169": {
      "op": "SLT"
    },
    "2170": {
      "op": "ISZERO"
    },
    "2171": {
      "op": "PUSH2",
      "value": "0x883"
    },
    "2174": {
      "op": "JUMPI"
    },
    "2175": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2177": {
      "op": "DUP1"
    },
    "2178": {
      "op": "REVERT"
    },
    "2179": {
      "op": "JUMPDEST"
    },
    "2180": {
      "op": "POP"
    },
    "2181": {
      "op": "CALLDATALOAD"
    },
    "2182": {
      "op": "SWAP2"
    },
    "2183": {
      "op": "SWAP1"
    },
    "2184": {
      "op": "POP"
    },
    "2185": {
      "jump": "o",
      "op": "JUMP"
    },
    "2186": {
      "op": "JUMPDEST"
    },
    "2187": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2189": {
      "op": "DUP1"
    },
    "2190": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2192": {
      "op": "DUP1"
    },
    "2193": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2195": {
      "op": "DUP6"
    },
    "2196": {
      "op": "DUP8"
    },
    "2197": {
      "op": "SUB"
    },
    "2198": {
      "op": "SLT"
    },
    "2199": {
      "op": "ISZERO"
    },
    "2200": {
      "op": "PUSH2",
      "value": "0x8A0"
    },
    "2203": {
      "op": "JUMPI"
    },
    "2204": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2206": {
      "op": "DUP1"
    },
    "2207": {
      "op": "REVERT"
    },
    "2208": {
      "op": "JUMPDEST"
    },
    "2209": {
      "op": "DUP5"
    },
    "2210": {
      "op": "CALLDATALOAD"
    },
    "2211": {
      "op": "SWAP4"
    },
    "2212": {
      "op": "POP"
    },
    "2213": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2215": {
      "op": "DUP6"
    },
    "2216": {
      "op": "ADD"
    },
    "2217": {
      "op": "CALLDATALOAD"
    },
    "2218": {
      "op": "SWAP3"
    },
    "2219": {
      "op": "POP"
    },
    "2220": {
      "op": "PUSH2",
      "value": "0x8B7"
    },
    "2223": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2225": {
      "op": "DUP7"
    },
    "2226": {
      "op": "ADD"
    },
    "2227": {
      "op": "PUSH2",
      "value": "0x75D"
    },
    "2230": {
      "jump": "i",
      "op": "JUMP"
    },
    "2231": {
      "op": "JUMPDEST"
    },
    "2232": {
      "op": "SWAP4"
    },
    "2233": {
      "op": "SWAP7"
    },
    "2234": {
      "op": "SWAP3"
    },
    "2235": {
      "op": "SWAP6"
    },
    "2236": {
      "op": "POP"
    },
    "2237": {
      "op": "SWAP3"
    },
    "2238": {
      "op": "SWAP4"
    },
    "2239": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2241": {
      "op": "ADD"
    },
    "2242": {
      "op": "CALLDATALOAD"
    },
    "2243": {
      "op": "SWAP3"
    },
    "2244": {
      "op": "POP"
    },
    "2245": {
      "op": "POP"
    },
    "2246": {
      "jump": "o",
      "op": "JUMP"
    },
    "2247": {
      "op": "JUMPDEST"
    },
    "2248": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2250": {
      "op": "DUP1"
    },
    "2251": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2253": {
      "op": "DUP4"
    },
    "2254": {
      "op": "DUP6"
    },
    "2255": {
      "op": "SUB"
    },
    "2256": {
      "op": "SLT"
    },
    "2257": {
      "op": "ISZERO"
    },
    "2258": {
      "op": "PUSH2",
      "value": "0x8DA"
    },
    "2261": {
      "op": "JUMPI"
    },
    "2262": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2264": {
      "op": "DUP1"
    },
    "2265": {
      "op": "REVERT"
    },
    "2266": {
      "op": "JUMPDEST"
    },
    "2267": {
      "op": "POP"
    },
    "2268": {
      "op": "POP"
    },
    "2269": {
      "op": "DUP1"
    },
    "2270": {
      "op": "CALLDATALOAD"
    },
    "2271": {
      "op": "SWAP3"
    },
    "2272": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2274": {
      "op": "SWAP1"
    },
    "2275": {
      "op": "SWAP2"
    },
    "2276": {
      "op": "ADD"
    },
    "2277": {
      "op": "CALLDATALOAD"
    },
    "2278": {
      "op": "SWAP2"
    },
    "2279": {
      "op": "POP"
    },
    "2280": {
      "jump": "o",
      "op": "JUMP"
    },
    "2281": {
      "op": "JUMPDEST"
    },
    "2282": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2284": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2286": {
      "op": "DUP3"
    },
    "2287": {
      "op": "ADD"
    },
    "2288": {
      "op": "DUP6"
    },
    "2289": {
      "op": "DUP4"
    },
    "2290": {
      "op": "MSTORE"
    },
    "2291": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2293": {
      "op": "DUP6"
    },
    "2294": {
      "op": "DUP2"
    },
    "2295": {
      "op": "DUP6"
    },
    "2296": {
      "op": "ADD"
    },
    "2297": {
      "op": "MSTORE"
    },
    "2298": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2300": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2302": {
      "op": "DUP6"
    },
    "2303": {
      "op": "ADD"
    },
    "2304": {
      "op": "MSTORE"
    },
    "2305": {
      "op": "DUP2"
    },
    "2306": {
      "op": "DUP6"
    },
    "2307": {
      "op": "MLOAD"
    },
    "2308": {
      "op": "DUP1"
    },
    "2309": {
      "op": "DUP5"
    },
    "2310": {
      "op": "MSTORE"
    },
    "2311": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2313": {
      "op": "DUP7"
    },
    "2314": {
      "op": "ADD"
    },
    "2315": {
      "op": "SWAP2"
    },
    "2316": {
      "op": "POP"
    },
    "2317": {
      "op": "DUP3"
    },
    "2318": {
      "op": "DUP8"
    },
    "2319": {
      "op": "ADD"
    },
    "2320": {
      "op": "SWAP4"
    },
    "2321": {
      "op": "POP"
    },
    "2322": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2324": {
      "op": "JUMPDEST"
    },
    "2325": {
      "op": "DUP2"
    },
    "2326": {
      "op": "DUP2"
    },
    "2327": {
      "op": "LT"
    },
    "2328": {
      "op": "ISZERO"
    },
    "2329": {
      "op": "PUSH2",
      "value": "0x930"
    },
    "2332": {
      "op": "JUMPI"
    },
    "2333": {
      "op": "DUP5"
    },
    "2334": {
      "op": "MLOAD"
    },
    "2335": {
      "op": "DUP4"
    },
    "2336": {
      "op": "MSTORE"
    },
    "2337": {
      "op": "SWAP4"
    },
    "2338": {
      "op": "DUP4"
    },
    "2339": {
      "op": "ADD"
    },
    "2340": {
      "op": "SWAP4"
    },
    "2341": {
      "op": "SWAP2"
    },
    "2342": {
      "op": "DUP4"
    },
    "2343": {
      "op": "ADD"
    },
    "2344": {
      "op": "SWAP2"
    },
    "2345": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2347": {
      "op": "ADD"
    },
    "2348": {
      "op": "PUSH2",
      "value": "0x914"
    },
    "2351": {
      "op": "JUMP"
    },
    "2352": {
      "op": "JUMPDEST"
    },
    "2353": {
      "op": "POP"
    },
    "2354": {
      "op": "SWAP1"
    },
    "2355": {
      "op": "SWAP9"
    },
    "2356": {
      "op": "SWAP8"
    },
    "2357": {
      "op": "POP"
    },
    "2358": {
      "op": "POP"
    },
    "2359": {
      "op": "POP"
    },
    "2360": {
      "op": "POP"
    },
    "2361": {
      "op": "POP"
    },
    "2362": {
      "op": "POP"
    },
    "2363": {
      "op": "POP"
    },
    "2364": {
      "op": "POP"
    },
    "2365": {
      "jump": "o",
      "op": "JUMP"
    },
    "2366": {
      "op": "JUMPDEST"
    },
    "2367": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2369": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2371": {
      "op": "DUP3"
    },
    "2372": {
      "op": "DUP5"
    },
    "2373": {
      "op": "SUB"
    },
    "2374": {
      "op": "SLT"
    },
    "2375": {
      "op": "ISZERO"
    },
    "2376": {
      "op": "PUSH2",
      "value": "0x950"
    },
    "2379": {
      "op": "JUMPI"
    },
    "2380": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2382": {
      "op": "DUP1"
    },
    "2383": {
      "op": "REVERT"
    },
    "2384": {
      "op": "JUMPDEST"
    },
    "2385": {
      "op": "DUP2"
    },
    "2386": {
      "op": "MLOAD"
    },
    "2387": {
      "op": "DUP1"
    },
    "2388": {
      "op": "ISZERO"
    },
    "2389": {
      "op": "ISZERO"
    },
    "2390": {
      "op": "DUP2"
    },
    "2391": {
      "op": "EQ"
    },
    "2392": {
      "op": "PUSH2",
      "value": "0x960"
    },
    "2395": {
      "op": "JUMPI"
    },
    "2396": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2398": {
      "op": "DUP1"
    },
    "2399": {
      "op": "REVERT"
    },
    "2400": {
      "op": "JUMPDEST"
    },
    "2401": {
      "op": "SWAP4"
    },
    "2402": {
      "op": "SWAP3"
    },
    "2403": {
      "op": "POP"
    },
    "2404": {
      "op": "POP"
    },
    "2405": {
      "op": "POP"
    },
    "2406": {
      "jump": "o",
      "op": "JUMP"
    },
    "2407": {
      "op": "JUMPDEST"
    },
    "2408": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2410": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2412": {
      "op": "DUP3"
    },
    "2413": {
      "op": "DUP5"
    },
    "2414": {
      "op": "SUB"
    },
    "2415": {
      "op": "SLT"
    },
    "2416": {
      "op": "ISZERO"
    },
    "2417": {
      "op": "PUSH2",
      "value": "0x979"
    },
    "2420": {
      "op": "JUMPI"
    },
    "2421": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2423": {
      "op": "DUP1"
    },
    "2424": {
      "op": "REVERT"
    },
    "2425": {
      "op": "JUMPDEST"
    },
    "2426": {
      "op": "POP"
    },
    "2427": {
      "op": "MLOAD"
    },
    "2428": {
      "op": "SWAP2"
    },
    "2429": {
      "op": "SWAP1"
    },
    "2430": {
      "op": "POP"
    },
    "2431": {
      "jump": "o",
      "op": "JUMP"
    },
    "2432": {
      "op": "JUMPDEST"
    },
    "2433": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2438": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2440": {
      "op": "SHL"
    },
    "2441": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2443": {
      "op": "MSTORE"
    },
    "2444": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2446": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2448": {
      "op": "MSTORE"
    },
    "2449": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2451": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2453": {
      "op": "REVERT"
    },
    "2454": {
      "op": "JUMPDEST"
    },
    "2455": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2457": {
      "op": "DUP3"
    },
    "2458": {
      "op": "DUP3"
    },
    "2459": {
      "op": "LT"
    },
    "2460": {
      "op": "ISZERO"
    },
    "2461": {
      "op": "PUSH2",
      "value": "0x9A8"
    },
    "2464": {
      "op": "JUMPI"
    },
    "2465": {
      "op": "PUSH2",
      "value": "0x9A8"
    },
    "2468": {
      "op": "PUSH2",
      "value": "0x980"
    },
    "2471": {
      "jump": "i",
      "op": "JUMP"
    },
    "2472": {
      "op": "JUMPDEST"
    },
    "2473": {
      "op": "POP"
    },
    "2474": {
      "op": "SUB"
    },
    "2475": {
      "op": "SWAP1"
    },
    "2476": {
      "jump": "o",
      "op": "JUMP"
    },
    "2477": {
      "op": "JUMPDEST"
    },
    "2478": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2480": {
      "op": "DUP3"
    },
    "2481": {
      "op": "NOT"
    },
    "2482": {
      "op": "DUP3"
    },
    "2483": {
      "op": "GT"
    },
    "2484": {
      "op": "ISZERO"
    },
    "2485": {
      "op": "PUSH2",
      "value": "0x9C0"
    },
    "2488": {
      "op": "JUMPI"
    },
    "2489": {
      "op": "PUSH2",
      "value": "0x9C0"
    },
    "2492": {
      "op": "PUSH2",
      "value": "0x980"
    },
    "2495": {
      "jump": "i",
      "op": "JUMP"
    },
    "2496": {
      "op": "JUMPDEST"
    },
    "2497": {
      "op": "POP"
    },
    "2498": {
      "op": "ADD"
    },
    "2499": {
      "op": "SWAP1"
    },
    "2500": {
      "jump": "o",
      "op": "JUMP"
    },
    "2501": {
      "op": "JUMPDEST"
    },
    "2502": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2504": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2506": {
      "op": "NOT"
    },
    "2507": {
      "op": "DUP3"
    },
    "2508": {
      "op": "EQ"
    },
    "2509": {
      "op": "ISZERO"
    },
    "2510": {
      "op": "PUSH2",
      "value": "0x9D9"
    },
    "2513": {
      "op": "JUMPI"
    },
    "2514": {
      "op": "PUSH2",
      "value": "0x9D9"
    },
    "2517": {
      "op": "PUSH2",
      "value": "0x980"
    },
    "2520": {
      "jump": "i",
      "op": "JUMP"
    },
    "2521": {
      "op": "JUMPDEST"
    },
    "2522": {
      "op": "POP"
    },
    "2523": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2525": {
      "op": "ADD"
    },
    "2526": {
      "op": "SWAP1"
    },
    "2527": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "48eeb8403523e160ac801bd97935d66027c61be5",
  "source": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.12;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./MerkleLib.sol\";\n\n/// @title A factory pattern for merkledrops, that is, airdrops using merkleproofs to compute eligibility\n/// @author metapriest, adrian.wachel, marek.babiarz, radoslaw.gorecki\n/// @notice This contract is permissionless and public facing. Any fees must be included in the data of the merkle tree.\n/// @dev The contract cannot introspect into the contents of the merkle tree, except when provided a merkle proof,\n/// @dev therefore the total liabilities of the merkle tree are untrusted and tree balances must be managed separately\ncontract MerkleDropFactory {\n    using MerkleLib for bytes32;\n\n    // the number of airdrops in this contract\n    uint public numTrees;\n\n    // this represents a single airdrop\n    struct MerkleTree {\n        bytes32 merkleRoot;  // merkleroot of tree whose leaves are (address,uint) pairs representing amount owed to user\n        bytes32 ipfsHash; // ipfs hash of entire dataset, as backup in case our servers turn off...\n        address tokenAddress; // address of token that is being airdropped\n        uint tokenBalance; // amount of tokens allocated for this tree\n        uint spentTokens; // amount of tokens dispensed from this tree\n        mapping (bytes32 => bool) withdrawn;\n    }\n\n    // array-like map for all ze merkle trees (airdrops)\n    mapping (uint => MerkleTree) public merkleTrees;\n\n    // every time there's a withdraw\n    event WithdrawalOccurred(uint indexed treeIndex, address indexed destination, uint value);\n\n    // every time a tree is added\n    event MerkleTreeAdded(uint indexed treeIndex, address indexed tokenAddress, bytes32 newRoot, bytes32 ipfsHash);\n\n    // every time a tree is topped up\n    event TokensDeposited(uint indexed treeIndex, address indexed tokenAddress, uint amount);\n\n    error BadTreeIndex(uint treeIndex);\n    error LeafAlreadyClaimed(uint treeIndex, bytes32 leafHash);\n    error BadProof(uint treeIndex, bytes32 leaf, bytes32[] proof);\n    error TokensNotTransferred(uint treeIndex, bytes32 leaf);\n\n    /// @notice Add a new merkle tree to the contract, creating a new merkle-drop\n    /// @dev Anyone may call this function, therefore we must make sure trees cannot affect each other\n    /// @param newRoot root hash of merkle tree representing liabilities == (destination, value) pairs\n    /// @param ipfsHash the ipfs hash of the entire dataset, used for redundance so that creator can ensure merkleproof are always computable\n    /// @param tokenAddress the address of the token contract that is being distributed\n    /// @param tokenBalance the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded\n    function addMerkleTree(bytes32 newRoot, bytes32 ipfsHash, address tokenAddress, uint tokenBalance) public {\n        // prefix operator ++ increments then evaluates\n        MerkleTree storage tree = merkleTrees[++numTrees];\n        tree.merkleRoot = newRoot;\n        tree.ipfsHash = ipfsHash;\n        tree.tokenAddress = tokenAddress;\n\n        // you don't get to add a tree without funding it\n        depositTokens(numTrees, tokenBalance);\n        // I guess we should tell people (interfaces) what happened\n        emit MerkleTreeAdded(numTrees, tokenAddress, newRoot, ipfsHash);\n    }\n\n    /// @notice Add funds to an existing merkle-drop\n    /// @dev Anyone may call this function, the only risk here is that the token contract is malicious, rendering the tree malicious\n    /// @param treeIndex index into array-like map of merkleTrees\n    /// @param value the amount of tokens user wishes to use to fund the airdrop, note trees can be under/overfunded\n    function depositTokens(uint treeIndex, uint value) public {\n        if (treeIndex == 0 || treeIndex > numTrees) {\n            revert BadTreeIndex(treeIndex);\n        }\n        // storage since we are editing\n        MerkleTree storage merkleTree = merkleTrees[treeIndex];\n\n        IERC20 token = IERC20(merkleTree.tokenAddress);\n        uint balanceBefore = token.balanceOf(address(this));\n\n        // yes this could fail, but the balance checker will handle that\n        // balance checking also handles fee-on-transfer tokens\n        // but not malicious tokens, which could lie about balances\n        token.transferFrom(msg.sender, address(this), value);\n\n        uint balanceAfter = token.balanceOf(address(this));\n\n        uint diff = balanceAfter - balanceBefore;\n\n        // bookkeeping to make sure trees don't share tokens\n        merkleTree.tokenBalance += diff;\n\n        // transfer tokens, if this is a malicious token, then this whole tree is malicious\n        // but it does not effect the other trees\n        emit TokensDeposited(treeIndex, merkleTree.tokenAddress, diff);\n    }\n\n    /// @notice Claim funds as a recipient in the merkle-drop\n    /// @dev Anyone may call this function for anyone else, funds go to destination regardless, it's just a question of\n    /// @dev who provides the proof and pays the gas, msg.sender is not used in this function\n    /// @param treeIndex index into array-like map of merkleTrees, which tree should we apply the proof to?\n    /// @param destination recipient of tokens\n    /// @param value amount of tokens that will be sent to destination\n    /// @param proof array of hashes bridging from leaf (hash of destination | value) to merkle root\n    function withdraw(uint treeIndex, address destination, uint value, bytes32[] memory proof) public {\n        // no withdrawing from uninitialized merkle trees\n        if (treeIndex == 0 || treeIndex > numTrees) {\n            revert BadTreeIndex(treeIndex);\n        }\n\n        // storage because we edit\n        MerkleTree storage tree = merkleTrees[treeIndex];\n\n        // compute merkle leaf, this is first element of proof\n        bytes32 leaf = keccak256(abi.encode(destination, value));\n\n        // no withdrawing same airdrop twice\n        if (tree.withdrawn[leaf]) {\n            revert LeafAlreadyClaimed(treeIndex, leaf);\n        }\n\n        // this calls to MerkleLib, will return false if recursive hashes do not end in merkle root\n        if (tree.merkleRoot.verifyProof(leaf, proof) == false) {\n            revert BadProof(treeIndex, leaf, proof);\n        }\n\n        // close re-entrance gate, prevent double claims\n        tree.withdrawn[leaf] = true;\n\n        IERC20 token = IERC20(tree.tokenAddress);\n        uint balanceBefore = token.balanceOf(address(this));\n\n        // transfer the tokens\n        // NOTE: if the token contract is malicious this call could re-enter this function\n        // which will fail because withdrawn will be set to true\n        // Also if this line silently fails then diff will be 0, reverting whole transaction\n        // This also covers the case of fee-on-transfer tokens, but again, not malicious tokens\n        token.transfer(destination, value);\n\n        uint balanceAfter = token.balanceOf(address(this));\n        uint diff = balanceBefore - balanceAfter;\n        if (diff == 0) {\n            revert TokensNotTransferred(treeIndex, leaf);\n        }\n\n        // update struct\n        tree.tokenBalance -= diff;\n        tree.spentTokens += diff;\n\n        emit WithdrawalOccurred(treeIndex, destination, value);\n    }\n\n}",
  "sourceMap": "661:6630:3:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/MerkleDropFactory.sol",
  "type": "contract"
}