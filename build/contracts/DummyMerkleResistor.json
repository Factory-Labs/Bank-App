{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        }
      ],
      "name": "MerkleTreeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensLeft",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "merkleIndex",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalOccurred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERROR_TOLERANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pctUpFront",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "depositToken",
          "type": "address"
        }
      ],
      "name": "addMerkleTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "merkleIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "merkleTrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ipfsHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pctUpFront",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numTrees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tranches",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentCoins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coinsPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastWithdrawalTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "merkleIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalPayments",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalPayments",
          "type": "uint256"
        }
      ],
      "name": "verifyVestingSchedule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "merkleIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "contracts/DummyMerkleResistor.sol",
    "4": "contracts/MerkleLib.sol",
    "7": "interfaces/IERC20.sol"
  },
  "ast": {
    "absolutePath": "contracts/DummyMerkleResistor.sol",
    "exportedSymbols": {
      "DummyMerkleResistor": [
        664
      ],
      "IERC20": [
        2201
      ],
      "MerkleLib": [
        1224
      ]
    },
    "id": 665,
    "license": "GPL-3.0-only",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 177,
        "literals": [
          "solidity",
          "0.8",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "42:22:1"
      },
      {
        "absolutePath": "interfaces/IERC20.sol",
        "file": "../interfaces/IERC20.sol",
        "id": 178,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 665,
        "sourceUnit": 2202,
        "src": "66:34:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/MerkleLib.sol",
        "file": "./MerkleLib.sol",
        "id": 179,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 665,
        "sourceUnit": 1225,
        "src": "101:25:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "DummyMerkleResistor",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 664,
        "linearizedBaseContracts": [
          664
        ],
        "name": "DummyMerkleResistor",
        "nameLocation": "137:19:1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 182,
            "libraryName": {
              "id": 180,
              "name": "MerkleLib",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1224,
              "src": "169:9:1"
            },
            "nodeType": "UsingForDirective",
            "src": "163:28:1",
            "typeName": {
              "id": 181,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "183:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "390b7c66",
            "id": 185,
            "mutability": "mutable",
            "name": "numTrees",
            "nameLocation": "209:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 664,
            "src": "197:24:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 183,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "197:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "30",
              "id": 184,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "220:1:1",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "18369a2a",
            "id": 187,
            "mutability": "mutable",
            "name": "initialBalance",
            "nameLocation": "239:14:1",
            "nodeType": "VariableDeclaration",
            "scope": 664,
            "src": "227:26:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 186,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "227:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "canonicalName": "DummyMerkleResistor.Tranche",
            "id": 200,
            "members": [
              {
                "constant": false,
                "id": 189,
                "mutability": "mutable",
                "name": "totalCoins",
                "nameLocation": "290:10:1",
                "nodeType": "VariableDeclaration",
                "scope": 200,
                "src": "285:15:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 188,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "285:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 191,
                "mutability": "mutable",
                "name": "currentCoins",
                "nameLocation": "315:12:1",
                "nodeType": "VariableDeclaration",
                "scope": 200,
                "src": "310:17:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 190,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "310:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 193,
                "mutability": "mutable",
                "name": "startTime",
                "nameLocation": "342:9:1",
                "nodeType": "VariableDeclaration",
                "scope": 200,
                "src": "337:14:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 192,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "337:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 195,
                "mutability": "mutable",
                "name": "endTime",
                "nameLocation": "366:7:1",
                "nodeType": "VariableDeclaration",
                "scope": 200,
                "src": "361:12:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 194,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "361:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 197,
                "mutability": "mutable",
                "name": "coinsPerSecond",
                "nameLocation": "388:14:1",
                "nodeType": "VariableDeclaration",
                "scope": 200,
                "src": "383:19:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 196,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "383:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 199,
                "mutability": "mutable",
                "name": "lastWithdrawalTime",
                "nameLocation": "417:18:1",
                "nodeType": "VariableDeclaration",
                "scope": 200,
                "src": "412:23:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 198,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "412:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Tranche",
            "nameLocation": "267:7:1",
            "nodeType": "StructDefinition",
            "scope": 664,
            "src": "260:182:1",
            "visibility": "public"
          },
          {
            "canonicalName": "DummyMerkleResistor.MerkleTree",
            "id": 213,
            "members": [
              {
                "constant": false,
                "id": 202,
                "mutability": "mutable",
                "name": "merkleRoot",
                "nameLocation": "484:10:1",
                "nodeType": "VariableDeclaration",
                "scope": 213,
                "src": "476:18:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 201,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "476:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 204,
                "mutability": "mutable",
                "name": "ipfsHash",
                "nameLocation": "512:8:1",
                "nodeType": "VariableDeclaration",
                "scope": 213,
                "src": "504:16:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 203,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "504:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 206,
                "mutability": "mutable",
                "name": "minEndTime",
                "nameLocation": "535:10:1",
                "nodeType": "VariableDeclaration",
                "scope": 213,
                "src": "530:15:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 205,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "530:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 208,
                "mutability": "mutable",
                "name": "maxEndTime",
                "nameLocation": "571:10:1",
                "nodeType": "VariableDeclaration",
                "scope": 213,
                "src": "566:15:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 207,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "566:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 210,
                "mutability": "mutable",
                "name": "pctUpFront",
                "nameLocation": "607:10:1",
                "nodeType": "VariableDeclaration",
                "scope": 213,
                "src": "602:15:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 209,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "602:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 212,
                "mutability": "mutable",
                "name": "tokenAddress",
                "nameLocation": "635:12:1",
                "nodeType": "VariableDeclaration",
                "scope": 213,
                "src": "627:20:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 211,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "627:7:1",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "MerkleTree",
            "nameLocation": "455:10:1",
            "nodeType": "StructDefinition",
            "scope": 664,
            "src": "448:206:1",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "86bb8249",
            "id": 219,
            "mutability": "mutable",
            "name": "initialized",
            "nameLocation": "711:11:1",
            "nodeType": "VariableDeclaration",
            "scope": 664,
            "src": "660:62:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
              "typeString": "mapping(address => mapping(uint256 => bool))"
            },
            "typeName": {
              "id": 218,
              "keyType": {
                "id": 214,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "669:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "660:43:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                "typeString": "mapping(address => mapping(uint256 => bool))"
              },
              "valueType": {
                "id": 217,
                "keyType": {
                  "id": 215,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "689:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "680:22:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                  "typeString": "mapping(uint256 => bool)"
                },
                "valueType": {
                  "id": 216,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "697:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "85d88cb1",
            "id": 224,
            "mutability": "mutable",
            "name": "merkleTrees",
            "nameLocation": "764:11:1",
            "nodeType": "VariableDeclaration",
            "scope": 664,
            "src": "728:47:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$213_storage_$",
              "typeString": "mapping(uint256 => struct DummyMerkleResistor.MerkleTree)"
            },
            "typeName": {
              "id": 223,
              "keyType": {
                "id": 220,
                "name": "uint",
                "nodeType": "ElementaryTypeName",
                "src": "737:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "728:28:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$213_storage_$",
                "typeString": "mapping(uint256 => struct DummyMerkleResistor.MerkleTree)"
              },
              "valueType": {
                "id": 222,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 221,
                  "name": "MerkleTree",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 213,
                  "src": "745:10:1"
                },
                "referencedDeclaration": 213,
                "src": "745:10:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_MerkleTree_$213_storage_ptr",
                  "typeString": "struct DummyMerkleResistor.MerkleTree"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "c26cb54f",
            "id": 231,
            "mutability": "mutable",
            "name": "tranches",
            "nameLocation": "835:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 664,
            "src": "781:62:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$200_storage_$_$",
              "typeString": "mapping(address => mapping(uint256 => struct DummyMerkleResistor.Tranche))"
            },
            "typeName": {
              "id": 230,
              "keyType": {
                "id": 225,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "790:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "781:46:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$200_storage_$_$",
                "typeString": "mapping(address => mapping(uint256 => struct DummyMerkleResistor.Tranche))"
              },
              "valueType": {
                "id": 229,
                "keyType": {
                  "id": 226,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "810:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "Mapping",
                "src": "801:25:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$200_storage_$",
                  "typeString": "mapping(uint256 => struct DummyMerkleResistor.Tranche)"
                },
                "valueType": {
                  "id": 228,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 227,
                    "name": "Tranche",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 200,
                    "src": "818:7:1"
                  },
                  "referencedDeclaration": 200,
                  "src": "818:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Tranche_$200_storage_ptr",
                    "typeString": "struct DummyMerkleResistor.Tranche"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "aaf5eb68",
            "id": 234,
            "mutability": "constant",
            "name": "PRECISION",
            "nameLocation": "871:9:1",
            "nodeType": "VariableDeclaration",
            "scope": 664,
            "src": "850:40:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 232,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "850:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31303030303030",
              "id": 233,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "883:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000_by_1",
                "typeString": "int_const 1000000"
              },
              "value": "1000000"
            },
            "visibility": "public"
          },
          {
            "constant": true,
            "functionSelector": "2811e253",
            "id": 237,
            "mutability": "constant",
            "name": "ERROR_TOLERANCE",
            "nameLocation": "917:15:1",
            "nodeType": "VariableDeclaration",
            "scope": 664,
            "src": "896:40:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 235,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "896:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31",
              "id": 236,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "935:1:1",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 247,
            "name": "WithdrawalOccurred",
            "nameLocation": "949:18:1",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 246,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 239,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "984:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 247,
                  "src": "968:27:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 238,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "968:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 241,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "numTokens",
                  "nameLocation": "1002:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 247,
                  "src": "997:14:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 240,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "997:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 243,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokensLeft",
                  "nameLocation": "1018:10:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 247,
                  "src": "1013:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 242,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1013:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 245,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "merkleIndex",
                  "nameLocation": "1043:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 247,
                  "src": "1030:24:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 244,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1030:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "967:88:1"
            },
            "src": "943:113:1"
          },
          {
            "anonymous": false,
            "id": 257,
            "name": "MerkleTreeAdded",
            "nameLocation": "1067:15:1",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 256,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 249,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "index",
                  "nameLocation": "1096:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 257,
                  "src": "1083:18:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 248,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1083:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 251,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "1119:12:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 257,
                  "src": "1103:28:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 250,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1103:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 253,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "1141:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 257,
                  "src": "1133:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 252,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1133:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 255,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "1158:8:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 257,
                  "src": "1150:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 254,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1150:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1082:85:1"
            },
            "src": "1061:107:1"
          },
          {
            "body": {
              "id": 260,
              "nodeType": "Block",
              "src": "1188:7:1",
              "statements": []
            },
            "id": 261,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 258,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1185:2:1"
            },
            "returnParameters": {
              "id": 259,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1188:0:1"
            },
            "scope": 664,
            "src": "1174:21:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 311,
              "nodeType": "Block",
              "src": "1339:418:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 279,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 277,
                          "name": "pctUpFront",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 271,
                          "src": "1357:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "hexValue": "313030",
                          "id": 278,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1370:3:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_100_by_1",
                            "typeString": "int_const 100"
                          },
                          "value": "100"
                        },
                        "src": "1357:16:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "706374557046726f6e74203e3d20313030",
                        "id": 280,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1375:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5d62361d64e7f8cf4fff457bf47173a531e51b64da30badb8e72846a2642165f",
                          "typeString": "literal_string \"pctUpFront >= 100\""
                        },
                        "value": "pctUpFront >= 100"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5d62361d64e7f8cf4fff457bf47173a531e51b64da30badb8e72846a2642165f",
                          "typeString": "literal_string \"pctUpFront >= 100\""
                        }
                      ],
                      "id": 276,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1349:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 281,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1349:46:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 282,
                  "nodeType": "ExpressionStatement",
                  "src": "1349:46:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 286,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 284,
                          "name": "minEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 267,
                          "src": "1413:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "id": 285,
                          "name": "maxEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 269,
                          "src": "1426:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1413:23:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6d696e456e6454696d65206d757374206265206c657373207468616e206d6178456e6454696d65",
                        "id": 287,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1438:41:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_b9f494a656d13b13a08d4cf899120fa0e5253d75c531a056af397669b40d9b3e",
                          "typeString": "literal_string \"minEndTime must be less than maxEndTime\""
                        },
                        "value": "minEndTime must be less than maxEndTime"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_b9f494a656d13b13a08d4cf899120fa0e5253d75c531a056af397669b40d9b3e",
                          "typeString": "literal_string \"minEndTime must be less than maxEndTime\""
                        }
                      ],
                      "id": 283,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1405:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 288,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1405:75:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 289,
                  "nodeType": "ExpressionStatement",
                  "src": "1405:75:1"
                },
                {
                  "expression": {
                    "id": 302,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 290,
                        "name": "merkleTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 224,
                        "src": "1490:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$213_storage_$",
                          "typeString": "mapping(uint256 => struct DummyMerkleResistor.MerkleTree storage ref)"
                        }
                      },
                      "id": 293,
                      "indexExpression": {
                        "id": 292,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "++",
                        "prefix": true,
                        "src": "1502:10:1",
                        "subExpression": {
                          "id": 291,
                          "name": "numTrees",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 185,
                          "src": "1504:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1490:23:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$213_storage",
                        "typeString": "struct DummyMerkleResistor.MerkleTree storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 295,
                          "name": "newRoot",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 263,
                          "src": "1540:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 296,
                          "name": "ipfsHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 265,
                          "src": "1561:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 297,
                          "name": "minEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 267,
                          "src": "1583:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 298,
                          "name": "maxEndTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 269,
                          "src": "1607:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 299,
                          "name": "pctUpFront",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 271,
                          "src": "1631:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 300,
                          "name": "depositToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 273,
                          "src": "1655:12:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 294,
                        "name": "MerkleTree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 213,
                        "src": "1516:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_MerkleTree_$213_storage_ptr_$",
                          "typeString": "type(struct DummyMerkleResistor.MerkleTree storage pointer)"
                        }
                      },
                      "id": 301,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1516:161:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$213_memory_ptr",
                        "typeString": "struct DummyMerkleResistor.MerkleTree memory"
                      }
                    },
                    "src": "1490:187:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$213_storage",
                      "typeString": "struct DummyMerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "id": 303,
                  "nodeType": "ExpressionStatement",
                  "src": "1490:187:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 305,
                        "name": "numTrees",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 185,
                        "src": "1708:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 306,
                        "name": "depositToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 273,
                        "src": "1718:12:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 307,
                        "name": "newRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 263,
                        "src": "1732:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 308,
                        "name": "ipfsHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 265,
                        "src": "1741:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 304,
                      "name": "MerkleTreeAdded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 257,
                      "src": "1692:15:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_bytes32_$_t_bytes32_$returns$__$",
                        "typeString": "function (uint256,address,bytes32,bytes32)"
                      }
                    },
                    "id": 309,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1692:58:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 310,
                  "nodeType": "EmitStatement",
                  "src": "1687:63:1"
                }
              ]
            },
            "functionSelector": "0997eaa1",
            "id": 312,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addMerkleTree",
            "nameLocation": "1210:13:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 274,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 263,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "1232:7:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 312,
                  "src": "1224:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 262,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1224:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 265,
                  "mutability": "mutable",
                  "name": "ipfsHash",
                  "nameLocation": "1249:8:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 312,
                  "src": "1241:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 264,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1241:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 267,
                  "mutability": "mutable",
                  "name": "minEndTime",
                  "nameLocation": "1264:10:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 312,
                  "src": "1259:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 266,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1259:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 269,
                  "mutability": "mutable",
                  "name": "maxEndTime",
                  "nameLocation": "1281:10:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 312,
                  "src": "1276:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 268,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1276:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 271,
                  "mutability": "mutable",
                  "name": "pctUpFront",
                  "nameLocation": "1298:10:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 312,
                  "src": "1293:15:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 270,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1293:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 273,
                  "mutability": "mutable",
                  "name": "depositToken",
                  "nameLocation": "1318:12:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 312,
                  "src": "1310:20:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 272,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1310:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1223:108:1"
            },
            "returnParameters": {
              "id": 275,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1339:0:1"
            },
            "scope": 664,
            "src": "1201:556:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 425,
              "nodeType": "Block",
              "src": "1919:963:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 332,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 329,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1937:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 330,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1937:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 331,
                          "name": "destination",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 316,
                          "src": "1951:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1937:25:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616e636865",
                        "id": 333,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1964:38:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0d840bbe3638dabb5a6e726d796a00fcf265be6e5ba2e71e838f9bed65dfcb15",
                          "typeString": "literal_string \"Can only initialize your own tranche\""
                        },
                        "value": "Can only initialize your own tranche"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0d840bbe3638dabb5a6e726d796a00fcf265be6e5ba2e71e838f9bed65dfcb15",
                          "typeString": "literal_string \"Can only initialize your own tranche\""
                        }
                      ],
                      "id": 328,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1929:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 334,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1929:74:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 335,
                  "nodeType": "ExpressionStatement",
                  "src": "1929:74:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 342,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "2021:38:1",
                        "subExpression": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 337,
                              "name": "initialized",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 219,
                              "src": "2022:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                                "typeString": "mapping(address => mapping(uint256 => bool))"
                              }
                            },
                            "id": 339,
                            "indexExpression": {
                              "id": 338,
                              "name": "destination",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 316,
                              "src": "2034:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2022:24:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                              "typeString": "mapping(uint256 => bool)"
                            }
                          },
                          "id": 341,
                          "indexExpression": {
                            "id": 340,
                            "name": "merkleIndex",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 314,
                            "src": "2047:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2022:37:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "416c726561647920696e697469616c697a6564",
                        "id": 343,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2061:21:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0",
                          "typeString": "literal_string \"Already initialized\""
                        },
                        "value": "Already initialized"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0",
                          "typeString": "literal_string \"Already initialized\""
                        }
                      ],
                      "id": 336,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2013:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 344,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2013:70:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 345,
                  "nodeType": "ExpressionStatement",
                  "src": "2013:70:1"
                },
                {
                  "assignments": [
                    347
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 347,
                      "mutability": "mutable",
                      "name": "leaf",
                      "nameLocation": "2101:4:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 425,
                      "src": "2093:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 346,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2093:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 356,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 351,
                            "name": "destination",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 316,
                            "src": "2129:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 352,
                            "name": "minTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 320,
                            "src": "2142:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "id": 353,
                            "name": "maxTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 322,
                            "src": "2160:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 349,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "2118:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 350,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encode",
                          "nodeType": "MemberAccess",
                          "src": "2118:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 354,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2118:59:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 348,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "2108:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 355,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2108:70:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2093:85:1"
                },
                {
                  "assignments": [
                    359
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 359,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "2206:4:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 425,
                      "src": "2188:22:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$213_memory_ptr",
                        "typeString": "struct DummyMerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 358,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 357,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 213,
                          "src": "2188:10:1"
                        },
                        "referencedDeclaration": 213,
                        "src": "2188:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$213_storage_ptr",
                          "typeString": "struct DummyMerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 363,
                  "initialValue": {
                    "baseExpression": {
                      "id": 360,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 224,
                      "src": "2213:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$213_storage_$",
                        "typeString": "mapping(uint256 => struct DummyMerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 362,
                    "indexExpression": {
                      "id": 361,
                      "name": "merkleIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 314,
                      "src": "2225:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2213:24:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$213_storage",
                      "typeString": "struct DummyMerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2188:49:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 368,
                            "name": "leaf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 347,
                            "src": "2283:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 369,
                            "name": "proof",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 325,
                            "src": "2289:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                              "typeString": "bytes32[] memory"
                            }
                          ],
                          "expression": {
                            "expression": {
                              "id": 365,
                              "name": "tree",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 359,
                              "src": "2255:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MerkleTree_$213_memory_ptr",
                                "typeString": "struct DummyMerkleResistor.MerkleTree memory"
                              }
                            },
                            "id": 366,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "merkleRoot",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 202,
                            "src": "2255:15:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "id": 367,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "verifyProof",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1191,
                          "src": "2255:27:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_delegatecall_pure$_t_bytes32_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes32_$",
                            "typeString": "function (bytes32,bytes32,bytes32[] memory) pure returns (bool)"
                          }
                        },
                        "id": 370,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2255:40:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5468652070726f6f6620636f756c64206e6f742062652076657269666965642e",
                        "id": 371,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2297:34:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6befa95a15378f3fa320a9fc597710e04d31854374b1378d40ad4268234fd91c",
                          "typeString": "literal_string \"The proof could not be verified.\""
                        },
                        "value": "The proof could not be verified."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6befa95a15378f3fa320a9fc597710e04d31854374b1378d40ad4268234fd91c",
                          "typeString": "literal_string \"The proof could not be verified.\""
                        }
                      ],
                      "id": 364,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2247:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 372,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2247:85:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 373,
                  "nodeType": "ExpressionStatement",
                  "src": "2247:85:1"
                },
                {
                  "expression": {
                    "id": 380,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 374,
                          "name": "initialized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 219,
                          "src": "2342:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                            "typeString": "mapping(address => mapping(uint256 => bool))"
                          }
                        },
                        "id": 377,
                        "indexExpression": {
                          "id": 375,
                          "name": "destination",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 316,
                          "src": "2354:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2342:24:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                          "typeString": "mapping(uint256 => bool)"
                        }
                      },
                      "id": 378,
                      "indexExpression": {
                        "id": 376,
                        "name": "merkleIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 314,
                        "src": "2367:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2342:37:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 379,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2382:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2342:44:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 381,
                  "nodeType": "ExpressionStatement",
                  "src": "2342:44:1"
                },
                {
                  "assignments": [
                    383,
                    385,
                    387,
                    389
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 383,
                      "mutability": "mutable",
                      "name": "valid",
                      "nameLocation": "2403:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 425,
                      "src": "2398:10:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 382,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2398:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 385,
                      "mutability": "mutable",
                      "name": "totalCoins",
                      "nameLocation": "2415:10:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 425,
                      "src": "2410:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 384,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2410:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 387,
                      "mutability": "mutable",
                      "name": "coinsPerSecond",
                      "nameLocation": "2432:14:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 425,
                      "src": "2427:19:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 386,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2427:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 389,
                      "mutability": "mutable",
                      "name": "startTime",
                      "nameLocation": "2453:9:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 425,
                      "src": "2448:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 388,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2448:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 396,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 391,
                        "name": "merkleIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 314,
                        "src": "2488:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 392,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 318,
                        "src": "2501:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 393,
                        "name": "minTotalPayments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 320,
                        "src": "2514:16:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 394,
                        "name": "maxTotalPayments",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 322,
                        "src": "2532:16:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 390,
                      "name": "verifyVestingSchedule",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 663,
                      "src": "2466:21:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                        "typeString": "function (uint256,uint256,uint256,uint256) view returns (bool,uint256,uint256,uint256)"
                      }
                    },
                    "id": 395,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2466:83:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(bool,uint256,uint256,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2397:152:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 398,
                        "name": "valid",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 383,
                        "src": "2567:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e76616c69642076657374696e67207363686564756c65",
                        "id": 399,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2574:26:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e7aa6925863169bd8cb1c379b7045e79f109b7df282905e5a05c3523fee8c286",
                          "typeString": "literal_string \"Invalid vesting schedule\""
                        },
                        "value": "Invalid vesting schedule"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e7aa6925863169bd8cb1c379b7045e79f109b7df282905e5a05c3523fee8c286",
                          "typeString": "literal_string \"Invalid vesting schedule\""
                        }
                      ],
                      "id": 397,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2559:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 400,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2559:42:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 401,
                  "nodeType": "ExpressionStatement",
                  "src": "2559:42:1"
                },
                {
                  "expression": {
                    "id": 418,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 402,
                          "name": "tranches",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 231,
                          "src": "2612:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$200_storage_$_$",
                            "typeString": "mapping(address => mapping(uint256 => struct DummyMerkleResistor.Tranche storage ref))"
                          }
                        },
                        "id": 405,
                        "indexExpression": {
                          "id": 403,
                          "name": "destination",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 316,
                          "src": "2621:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2612:21:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$200_storage_$",
                          "typeString": "mapping(uint256 => struct DummyMerkleResistor.Tranche storage ref)"
                        }
                      },
                      "id": 406,
                      "indexExpression": {
                        "id": 404,
                        "name": "merkleIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 314,
                        "src": "2634:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2612:34:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$200_storage",
                        "typeString": "struct DummyMerkleResistor.Tranche storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 408,
                          "name": "totalCoins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 385,
                          "src": "2670:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 409,
                          "name": "totalCoins",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 385,
                          "src": "2694:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 410,
                          "name": "startTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 389,
                          "src": "2718:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 414,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "id": 411,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -4,
                              "src": "2741:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 412,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "2741:15:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "id": 413,
                            "name": "vestingTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 318,
                            "src": "2759:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2741:29:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 415,
                          "name": "coinsPerSecond",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 387,
                          "src": "2784:14:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 416,
                          "name": "startTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 389,
                          "src": "2812:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 407,
                        "name": "Tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 200,
                        "src": "2649:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_Tranche_$200_storage_ptr_$",
                          "typeString": "type(struct DummyMerkleResistor.Tranche storage pointer)"
                        }
                      },
                      "id": 417,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2649:182:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$200_memory_ptr",
                        "typeString": "struct DummyMerkleResistor.Tranche memory"
                      }
                    },
                    "src": "2612:219:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$200_storage",
                      "typeString": "struct DummyMerkleResistor.Tranche storage ref"
                    }
                  },
                  "id": 419,
                  "nodeType": "ExpressionStatement",
                  "src": "2612:219:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 421,
                        "name": "merkleIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 314,
                        "src": "2850:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 422,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 316,
                        "src": "2863:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 420,
                      "name": "withdraw",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 526,
                      "src": "2841:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$__$",
                        "typeString": "function (uint256,address)"
                      }
                    },
                    "id": 423,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2841:34:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 424,
                  "nodeType": "ExpressionStatement",
                  "src": "2841:34:1"
                }
              ]
            },
            "functionSelector": "f287ad04",
            "id": 426,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "initialize",
            "nameLocation": "1772:10:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 326,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 314,
                  "mutability": "mutable",
                  "name": "merkleIndex",
                  "nameLocation": "1788:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 426,
                  "src": "1783:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 313,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1783:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 316,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "1809:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 426,
                  "src": "1801:19:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 315,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1801:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 318,
                  "mutability": "mutable",
                  "name": "vestingTime",
                  "nameLocation": "1827:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 426,
                  "src": "1822:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 317,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1822:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 320,
                  "mutability": "mutable",
                  "name": "minTotalPayments",
                  "nameLocation": "1845:16:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 426,
                  "src": "1840:21:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 319,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1840:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 322,
                  "mutability": "mutable",
                  "name": "maxTotalPayments",
                  "nameLocation": "1868:16:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 426,
                  "src": "1863:21:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 321,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1863:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 325,
                  "mutability": "mutable",
                  "name": "proof",
                  "nameLocation": "1903:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 426,
                  "src": "1886:22:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 323,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1886:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 324,
                    "nodeType": "ArrayTypeName",
                    "src": "1886:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1782:127:1"
            },
            "returnParameters": {
              "id": 327,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1919:0:1"
            },
            "scope": 664,
            "src": "1763:1119:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 525,
              "nodeType": "Block",
              "src": "2952:1039:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "baseExpression": {
                            "id": 434,
                            "name": "initialized",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 219,
                            "src": "2970:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$",
                              "typeString": "mapping(address => mapping(uint256 => bool))"
                            }
                          },
                          "id": 436,
                          "indexExpression": {
                            "id": 435,
                            "name": "destination",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 430,
                            "src": "2982:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2970:24:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$",
                            "typeString": "mapping(uint256 => bool)"
                          }
                        },
                        "id": 438,
                        "indexExpression": {
                          "id": 437,
                          "name": "merkleIndex",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 428,
                          "src": "2995:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2970:37:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "596f75206d75737420696e697469616c697a6520796f7572206163636f756e742066697273742e",
                        "id": 439,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3009:41:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_4abd8331dd14b306cce990886a8c58b8be69cac04657ffd8c84a7e7c5940d2d1",
                          "typeString": "literal_string \"You must initialize your account first.\""
                        },
                        "value": "You must initialize your account first."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_4abd8331dd14b306cce990886a8c58b8be69cac04657ffd8c84a7e7c5940d2d1",
                          "typeString": "literal_string \"You must initialize your account first.\""
                        }
                      ],
                      "id": 433,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2962:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 440,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2962:89:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 441,
                  "nodeType": "ExpressionStatement",
                  "src": "2962:89:1"
                },
                {
                  "assignments": [
                    444
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 444,
                      "mutability": "mutable",
                      "name": "tranche",
                      "nameLocation": "3077:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 525,
                      "src": "3061:23:1",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$200_storage_ptr",
                        "typeString": "struct DummyMerkleResistor.Tranche"
                      },
                      "typeName": {
                        "id": 443,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 442,
                          "name": "Tranche",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 200,
                          "src": "3061:7:1"
                        },
                        "referencedDeclaration": 200,
                        "src": "3061:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$200_storage_ptr",
                          "typeString": "struct DummyMerkleResistor.Tranche"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 450,
                  "initialValue": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 445,
                        "name": "tranches",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 231,
                        "src": "3087:8:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$200_storage_$_$",
                          "typeString": "mapping(address => mapping(uint256 => struct DummyMerkleResistor.Tranche storage ref))"
                        }
                      },
                      "id": 447,
                      "indexExpression": {
                        "id": 446,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 430,
                        "src": "3096:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "3087:21:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$200_storage_$",
                        "typeString": "mapping(uint256 => struct DummyMerkleResistor.Tranche storage ref)"
                      }
                    },
                    "id": 449,
                    "indexExpression": {
                      "id": 448,
                      "name": "merkleIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 428,
                      "src": "3109:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3087:34:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$200_storage",
                      "typeString": "struct DummyMerkleResistor.Tranche storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3061:60:1"
                },
                {
                  "assignments": [
                    453
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 453,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "3149:4:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 525,
                      "src": "3131:22:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$213_memory_ptr",
                        "typeString": "struct DummyMerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 452,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 451,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 213,
                          "src": "3131:10:1"
                        },
                        "referencedDeclaration": 213,
                        "src": "3131:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$213_storage_ptr",
                          "typeString": "struct DummyMerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 457,
                  "initialValue": {
                    "baseExpression": {
                      "id": 454,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 224,
                      "src": "3156:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$213_storage_$",
                        "typeString": "mapping(uint256 => struct DummyMerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 456,
                    "indexExpression": {
                      "id": 455,
                      "name": "merkleIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 428,
                      "src": "3168:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3156:24:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$213_storage",
                      "typeString": "struct DummyMerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3131:49:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 462,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 459,
                            "name": "tranche",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 444,
                            "src": "3198:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Tranche_$200_storage_ptr",
                              "typeString": "struct DummyMerkleResistor.Tranche storage pointer"
                            }
                          },
                          "id": 460,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "currentCoins",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 191,
                          "src": "3198:20:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 461,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3222:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "3198:25:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f20636f696e73206c65667420746f207769746864726177",
                        "id": 463,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "3225:27:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f5408369ba8a5a8ab8865a5c8cf9d54818bf598d281aa43e2647b1ce4add273e",
                          "typeString": "literal_string \"No coins left to withdraw\""
                        },
                        "value": "No coins left to withdraw"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f5408369ba8a5a8ab8865a5c8cf9d54818bf598d281aa43e2647b1ce4add273e",
                          "typeString": "literal_string \"No coins left to withdraw\""
                        }
                      ],
                      "id": 458,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3190:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 464,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3190:63:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 465,
                  "nodeType": "ExpressionStatement",
                  "src": "3190:63:1"
                },
                {
                  "assignments": [
                    467
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 467,
                      "mutability": "mutable",
                      "name": "currentWithdrawal",
                      "nameLocation": "3268:17:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 525,
                      "src": "3263:22:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 466,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "3263:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 469,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 468,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3288:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3263:26:1"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 474,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 470,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "3375:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 471,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "3375:15:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "expression": {
                        "id": 472,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 444,
                        "src": "3394:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$200_storage_ptr",
                          "typeString": "struct DummyMerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 473,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "endTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 195,
                      "src": "3394:15:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3375:34:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 493,
                    "nodeType": "Block",
                    "src": "3482:158:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 491,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 481,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 467,
                            "src": "3538:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 490,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 486,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 482,
                                      "name": "block",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -4,
                                      "src": "3559:5:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_block",
                                        "typeString": "block"
                                      }
                                    },
                                    "id": 483,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "timestamp",
                                    "nodeType": "MemberAccess",
                                    "src": "3559:15:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "expression": {
                                      "id": 484,
                                      "name": "tranche",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 444,
                                      "src": "3577:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Tranche_$200_storage_ptr",
                                        "typeString": "struct DummyMerkleResistor.Tranche storage pointer"
                                      }
                                    },
                                    "id": 485,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "lastWithdrawalTime",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 199,
                                    "src": "3577:26:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "3559:44:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 487,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "3558:46:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "expression": {
                                "id": 488,
                                "name": "tranche",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 444,
                                "src": "3607:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Tranche_$200_storage_ptr",
                                  "typeString": "struct DummyMerkleResistor.Tranche storage pointer"
                                }
                              },
                              "id": 489,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "coinsPerSecond",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 197,
                              "src": "3607:22:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3558:71:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3538:91:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 492,
                        "nodeType": "ExpressionStatement",
                        "src": "3538:91:1"
                      }
                    ]
                  },
                  "id": 494,
                  "nodeType": "IfStatement",
                  "src": "3371:269:1",
                  "trueBody": {
                    "id": 480,
                    "nodeType": "Block",
                    "src": "3411:65:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 478,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 475,
                            "name": "currentWithdrawal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 467,
                            "src": "3425:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 476,
                              "name": "tranche",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 444,
                              "src": "3445:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Tranche_$200_storage_ptr",
                                "typeString": "struct DummyMerkleResistor.Tranche storage pointer"
                              }
                            },
                            "id": 477,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "currentCoins",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 191,
                            "src": "3445:20:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3425:40:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 479,
                        "nodeType": "ExpressionStatement",
                        "src": "3425:40:1"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "id": 499,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 495,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 444,
                        "src": "3675:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$200_storage_ptr",
                          "typeString": "struct DummyMerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 497,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "currentCoins",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 191,
                      "src": "3675:20:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 498,
                      "name": "currentWithdrawal",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 467,
                      "src": "3699:17:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3675:41:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 500,
                  "nodeType": "ExpressionStatement",
                  "src": "3675:41:1"
                },
                {
                  "expression": {
                    "id": 506,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 501,
                        "name": "tranche",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 444,
                        "src": "3726:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$200_storage_ptr",
                          "typeString": "struct DummyMerkleResistor.Tranche storage pointer"
                        }
                      },
                      "id": 503,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "lastWithdrawalTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 199,
                      "src": "3726:26:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 504,
                        "name": "block",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -4,
                        "src": "3755:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_block",
                          "typeString": "block"
                        }
                      },
                      "id": 505,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "timestamp",
                      "nodeType": "MemberAccess",
                      "src": "3755:15:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3726:44:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 507,
                  "nodeType": "ExpressionStatement",
                  "src": "3726:44:1"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 513,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 430,
                        "src": "3853:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 514,
                        "name": "currentWithdrawal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 467,
                        "src": "3866:17:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 509,
                              "name": "tree",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 453,
                              "src": "3825:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_MerkleTree_$213_memory_ptr",
                                "typeString": "struct DummyMerkleResistor.MerkleTree memory"
                              }
                            },
                            "id": 510,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "tokenAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 212,
                            "src": "3825:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 508,
                          "name": "IERC20",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2201,
                          "src": "3818:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IERC20_$2201_$",
                            "typeString": "type(contract IERC20)"
                          }
                        },
                        "id": 511,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3818:25:1",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$2201",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 512,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2150,
                      "src": "3818:34:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 515,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3818:66:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 516,
                  "nodeType": "ExpressionStatement",
                  "src": "3818:66:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 518,
                        "name": "destination",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 430,
                        "src": "3918:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 519,
                        "name": "currentWithdrawal",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 467,
                        "src": "3931:17:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 520,
                          "name": "tranche",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 444,
                          "src": "3950:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$200_storage_ptr",
                            "typeString": "struct DummyMerkleResistor.Tranche storage pointer"
                          }
                        },
                        "id": 521,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "currentCoins",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 191,
                        "src": "3950:20:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 522,
                        "name": "merkleIndex",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 428,
                        "src": "3972:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 517,
                      "name": "WithdrawalOccurred",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 247,
                      "src": "3899:18:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256,uint256,uint256)"
                      }
                    },
                    "id": 523,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3899:85:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 524,
                  "nodeType": "EmitStatement",
                  "src": "3894:90:1"
                }
              ]
            },
            "functionSelector": "00f714ce",
            "id": 526,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "2897:8:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 431,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 428,
                  "mutability": "mutable",
                  "name": "merkleIndex",
                  "nameLocation": "2911:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 526,
                  "src": "2906:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 427,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "2906:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 430,
                  "mutability": "mutable",
                  "name": "destination",
                  "nameLocation": "2932:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 526,
                  "src": "2924:19:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 429,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2924:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2905:39:1"
            },
            "returnParameters": {
              "id": 432,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2952:0:1"
            },
            "scope": 664,
            "src": "2888:1103:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 662,
              "nodeType": "Block",
              "src": "4155:897:1",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 547,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 545,
                      "name": "merkleIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 528,
                      "src": "4169:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "id": 546,
                      "name": "numTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 185,
                      "src": "4183:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4169:22:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 555,
                  "nodeType": "IfStatement",
                  "src": "4165:76:1",
                  "trueBody": {
                    "id": 554,
                    "nodeType": "Block",
                    "src": "4193:48:1",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "hexValue": "66616c7365",
                              "id": 548,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4215:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "hexValue": "30",
                              "id": 549,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4222:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 550,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4225:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 551,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4228:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "id": 552,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "4214:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$",
                            "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"
                          }
                        },
                        "functionReturnParameters": 544,
                        "id": 553,
                        "nodeType": "Return",
                        "src": "4207:23:1"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    558
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 558,
                      "mutability": "mutable",
                      "name": "tree",
                      "nameLocation": "4269:4:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 662,
                      "src": "4251:22:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_MerkleTree_$213_memory_ptr",
                        "typeString": "struct DummyMerkleResistor.MerkleTree"
                      },
                      "typeName": {
                        "id": 557,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 556,
                          "name": "MerkleTree",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 213,
                          "src": "4251:10:1"
                        },
                        "referencedDeclaration": 213,
                        "src": "4251:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$213_storage_ptr",
                          "typeString": "struct DummyMerkleResistor.MerkleTree"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 562,
                  "initialValue": {
                    "baseExpression": {
                      "id": 559,
                      "name": "merkleTrees",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 224,
                      "src": "4276:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$213_storage_$",
                        "typeString": "mapping(uint256 => struct DummyMerkleResistor.MerkleTree storage ref)"
                      }
                    },
                    "id": 561,
                    "indexExpression": {
                      "id": 560,
                      "name": "merkleIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 528,
                      "src": "4288:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4276:24:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MerkleTree_$213_storage",
                      "typeString": "struct DummyMerkleResistor.MerkleTree storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4251:49:1"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 571,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 566,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 563,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 530,
                        "src": "4315:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "expression": {
                          "id": 564,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 558,
                          "src": "4329:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$213_memory_ptr",
                            "typeString": "struct DummyMerkleResistor.MerkleTree memory"
                          }
                        },
                        "id": 565,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "maxEndTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 208,
                        "src": "4329:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "4315:29:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 570,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 567,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 530,
                        "src": "4348:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "<",
                      "rightExpression": {
                        "expression": {
                          "id": 568,
                          "name": "tree",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 558,
                          "src": "4362:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_MerkleTree_$213_memory_ptr",
                            "typeString": "struct DummyMerkleResistor.MerkleTree memory"
                          }
                        },
                        "id": 569,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "minEndTime",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 206,
                        "src": "4362:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "4348:29:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "4315:62:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 579,
                  "nodeType": "IfStatement",
                  "src": "4311:116:1",
                  "trueBody": {
                    "id": 578,
                    "nodeType": "Block",
                    "src": "4379:48:1",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "hexValue": "66616c7365",
                              "id": 572,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4401:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "hexValue": "30",
                              "id": 573,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4408:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 574,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4411:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            {
                              "hexValue": "30",
                              "id": 575,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4414:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "id": 576,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "4400:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$",
                            "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"
                          }
                        },
                        "functionReturnParameters": 544,
                        "id": 577,
                        "nodeType": "Return",
                        "src": "4393:23:1"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    581
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 581,
                      "mutability": "mutable",
                      "name": "totalCoins",
                      "nameLocation": "4442:10:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 662,
                      "src": "4437:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 580,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "4437:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 582,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4437:15:1"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 586,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 583,
                      "name": "vestingTime",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 530,
                      "src": "4466:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 584,
                        "name": "tree",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 558,
                        "src": "4481:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_MerkleTree_$213_memory_ptr",
                          "typeString": "struct DummyMerkleResistor.MerkleTree memory"
                        }
                      },
                      "id": 585,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "maxEndTime",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 208,
                      "src": "4481:15:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4466:30:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 623,
                    "nodeType": "Block",
                    "src": "4558:238:1",
                    "statements": [
                      {
                        "assignments": [
                          593
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 593,
                            "mutability": "mutable",
                            "name": "paymentSlope",
                            "nameLocation": "4577:12:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 623,
                            "src": "4572:17:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 592,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "4572:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 607,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 606,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 599,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 596,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 594,
                                    "name": "maxTotalPayments",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 534,
                                    "src": "4593:16:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "id": 595,
                                    "name": "minTotalPayments",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 532,
                                    "src": "4612:16:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4593:35:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 597,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "4592:37:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "*",
                            "rightExpression": {
                              "id": 598,
                              "name": "PRECISION",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 234,
                              "src": "4632:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "4592:49:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 604,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 600,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 558,
                                    "src": "4645:4:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$213_memory_ptr",
                                      "typeString": "struct DummyMerkleResistor.MerkleTree memory"
                                    }
                                  },
                                  "id": 601,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "maxEndTime",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 208,
                                  "src": "4645:15:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "expression": {
                                    "id": 602,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 558,
                                    "src": "4663:4:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$213_memory_ptr",
                                      "typeString": "struct DummyMerkleResistor.MerkleTree memory"
                                    }
                                  },
                                  "id": 603,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "minEndTime",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 206,
                                  "src": "4663:15:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4645:33:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 605,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "4644:35:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4592:87:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4572:107:1"
                      },
                      {
                        "expression": {
                          "id": 621,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 608,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 581,
                            "src": "4693:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 620,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 617,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 615,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 609,
                                      "name": "paymentSlope",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 593,
                                      "src": "4707:12:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "*",
                                    "rightExpression": {
                                      "components": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 613,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "id": 610,
                                            "name": "vestingTime",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 530,
                                            "src": "4723:11:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "-",
                                          "rightExpression": {
                                            "expression": {
                                              "id": 611,
                                              "name": "tree",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 558,
                                              "src": "4737:4:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_MerkleTree_$213_memory_ptr",
                                                "typeString": "struct DummyMerkleResistor.MerkleTree memory"
                                              }
                                            },
                                            "id": 612,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "minEndTime",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 206,
                                            "src": "4737:15:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "4723:29:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "id": 614,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "4722:31:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "4707:46:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "/",
                                  "rightExpression": {
                                    "id": 616,
                                    "name": "PRECISION",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 234,
                                    "src": "4756:9:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "4707:58:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 618,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "4706:60:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "id": 619,
                              "name": "minTotalPayments",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 532,
                              "src": "4769:16:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "4706:79:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4693:92:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 622,
                        "nodeType": "ExpressionStatement",
                        "src": "4693:92:1"
                      }
                    ]
                  },
                  "id": 624,
                  "nodeType": "IfStatement",
                  "src": "4462:334:1",
                  "trueBody": {
                    "id": 591,
                    "nodeType": "Block",
                    "src": "4498:54:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 589,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 587,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 581,
                            "src": "4512:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 588,
                            "name": "maxTotalPayments",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 534,
                            "src": "4525:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4512:29:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 590,
                        "nodeType": "ExpressionStatement",
                        "src": "4512:29:1"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    626
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 626,
                      "mutability": "mutable",
                      "name": "coinsPerSecond",
                      "nameLocation": "4811:14:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 662,
                      "src": "4806:19:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 625,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "4806:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 643,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 642,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 636,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 627,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 581,
                            "src": "4829:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 634,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "arguments": [
                                    {
                                      "hexValue": "313030",
                                      "id": 630,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "4848:3:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      },
                                      "value": "100"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      }
                                    ],
                                    "id": 629,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4843:4:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": {
                                      "id": 628,
                                      "name": "uint",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4843:4:1",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 631,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4843:9:1",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "expression": {
                                    "id": 632,
                                    "name": "tree",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 558,
                                    "src": "4855:4:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_MerkleTree_$213_memory_ptr",
                                      "typeString": "struct DummyMerkleResistor.MerkleTree memory"
                                    }
                                  },
                                  "id": 633,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "pctUpFront",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 210,
                                  "src": "4855:15:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4843:27:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 635,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "4842:29:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4829:42:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 637,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "4828:44:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "/",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 640,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 638,
                            "name": "vestingTime",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 530,
                            "src": "4876:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "hexValue": "313030",
                            "id": 639,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4890:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_100_by_1",
                              "typeString": "int_const 100"
                            },
                            "value": "100"
                          },
                          "src": "4876:17:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 641,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "4875:19:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4828:66:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4806:88:1"
                },
                {
                  "assignments": [
                    645
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 645,
                      "mutability": "mutable",
                      "name": "startTime",
                      "nameLocation": "4909:9:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 662,
                      "src": "4904:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 644,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "4904:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 655,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 654,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 649,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 646,
                          "name": "block",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -4,
                          "src": "4921:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_block",
                            "typeString": "block"
                          }
                        },
                        "id": 647,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "timestamp",
                        "nodeType": "MemberAccess",
                        "src": "4921:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "+",
                      "rightExpression": {
                        "id": 648,
                        "name": "vestingTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 530,
                        "src": "4939:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "src": "4921:29:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "components": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 652,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 650,
                            "name": "totalCoins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 581,
                            "src": "4954:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "id": 651,
                            "name": "coinsPerSecond",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 626,
                            "src": "4967:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4954:27:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 653,
                      "isConstant": false,
                      "isInlineArray": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "TupleExpression",
                      "src": "4953:29:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "4921:61:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4904:78:1"
                },
                {
                  "expression": {
                    "components": [
                      {
                        "hexValue": "74727565",
                        "id": 656,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5001:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      {
                        "id": 657,
                        "name": "totalCoins",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 581,
                        "src": "5007:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 658,
                        "name": "coinsPerSecond",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 626,
                        "src": "5019:14:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 659,
                        "name": "startTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 645,
                        "src": "5035:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 660,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "5000:45:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(bool,uint256,uint256,uint256)"
                    }
                  },
                  "functionReturnParameters": 544,
                  "id": 661,
                  "nodeType": "Return",
                  "src": "4993:52:1"
                }
              ]
            },
            "functionSelector": "6fb6ec41",
            "id": 663,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "verifyVestingSchedule",
            "nameLocation": "4006:21:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 535,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 528,
                  "mutability": "mutable",
                  "name": "merkleIndex",
                  "nameLocation": "4033:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 663,
                  "src": "4028:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 527,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4028:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 530,
                  "mutability": "mutable",
                  "name": "vestingTime",
                  "nameLocation": "4051:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 663,
                  "src": "4046:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 529,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4046:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 532,
                  "mutability": "mutable",
                  "name": "minTotalPayments",
                  "nameLocation": "4069:16:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 663,
                  "src": "4064:21:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 531,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4064:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 534,
                  "mutability": "mutable",
                  "name": "maxTotalPayments",
                  "nameLocation": "4092:16:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 663,
                  "src": "4087:21:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 533,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4087:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4027:82:1"
            },
            "returnParameters": {
              "id": 544,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 537,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 663,
                  "src": "4131:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 536,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4131:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 539,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 663,
                  "src": "4137:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 538,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4137:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 541,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 663,
                  "src": "4143:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 540,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4143:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 543,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 663,
                  "src": "4149:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 542,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "4149:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4130:24:1"
            },
            "scope": 664,
            "src": "3997:1055:1",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 665,
        "src": "128:4927:1",
        "usedErrors": []
      }
    ],
    "src": "42:5014:1"
  },
  "bytecode": "60806040526000805534801561001457600080fd5b50610f47806100246000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c80636fb6ec41116100715780636fb6ec411461010257806385d88cb11461013757806386bb8249146101bc578063aaf5eb68146101fa578063c26cb54f14610204578063f287ad041461027c57600080fd5b8062f714ce146100ad5780630997eaa1146100c257806318369a2a146100d55780632811e253146100f1578063390b7c66146100f9575b600080fd5b6100c06100bb366004610bf4565b61028f565b005b6100c06100d0366004610c20565b610512565b6100de60015481565b6040519081526020015b60405180910390f35b6100de600181565b6100de60005481565b610115610110366004610c71565b6106aa565b60408051941515855260208501939093529183015260608201526080016100e8565b610186610145366004610ca3565b60036020819052600091825260409091208054600182015460028301549383015460048401546005909401549294919391929091906001600160a01b031686565b60408051968752602087019590955293850192909252606084015260808301526001600160a01b031660a082015260c0016100e8565b6101ea6101ca366004610cbc565b600260209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100e8565b6100de620f424081565b61024f610212366004610cbc565b6004602081815260009384526040808520909152918352912080546001820154600283015460038401549484015460059094015492949193909286565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100e8565b6100c061028a366004610cfc565b610848565b6001600160a01b038116600090815260026020908152604080832085845290915290205460ff166103175760405162461bcd60e51b815260206004820152602760248201527f596f75206d75737420696e697469616c697a6520796f7572206163636f756e74604482015266103334b939ba1760c91b60648201526084015b60405180910390fd5b6001600160a01b0380821660009081526004602081815260408084208785528252808420600380845294829020825160c081018452815481526001808301549582019590955260028201549381019390935294850154606083015292840154608082015260059093015490931660a0830152918201546103d95760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f696e73206c65667420746f20776974686472617700000000000000604482015260640161030e565b6000826003015442106103f157506001820154610412565b600483015460058401546104059042610e08565b61040f9190610e1f565b90505b808360010160008282546104269190610e08565b909155505042600584015560a082015160405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561048157600080fd5b505af1158015610495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b99190610e3e565b5084846001600160a01b03167f5ffb4b63dec15ba26308386f1d5ca61843b29ba365511062a887d95aa27532d3838660010154604051610503929190918252602082015260400190565b60405180910390a35050505050565b606482106105565760405162461bcd60e51b81526020600482015260116024820152700706374557046726f6e74203e3d2031303607c1b604482015260640161030e565b8284106105b55760405162461bcd60e51b815260206004820152602760248201527f6d696e456e6454696d65206d757374206265206c657373207468616e206d6178604482015266456e6454696d6560c81b606482015260840161030e565b6040518060c00160405280878152602001868152602001858152602001848152602001838152602001826001600160a01b03168152506003600080600081546105fd90610e67565b918290555081526020808201929092526040908101600090812084518155848401516001820155848301516002820155606085015160038201556080850151600482015560a090940151600590940180546001600160a01b0319166001600160a01b039586161790555481518a815292830189905292841692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a3505050505050565b6000806000806000548811156106cb5750600092508291508190508061083d565b600088815260036020818152604092839020835160c081018552815481526001820154928101929092526002810154938201939093529082015460608201819052600483015460808301526005909201546001600160a01b031660a08201529088118061073b5750806040015188105b156107545760008060008094509450945094505061083d565b600081606001518914156107695750856107da565b60008260400151836060015161077f9190610e08565b620f424061078d8b8b610e08565b6107979190610e1f565b6107a19190610e82565b905088620f424084604001518c6107b89190610e08565b6107c29084610e1f565b6107cc9190610e82565b6107d69190610ea4565b9150505b60006107e78a6064610e1f565b60808401516107f7906064610e08565b6108019084610e1f565b61080b9190610e82565b905060006108198284610e82565b6108238c42610ea4565b61082d9190610e08565b6001985092965090945090925050505b945094509450949050565b336001600160a01b038616146108ac5760405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616044820152636e63686560e01b606482015260840161030e565b6001600160a01b038516600090815260026020908152604080832089845290915290205460ff16156109165760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015260640161030e565b604080516001600160a01b03871660208201529081018490526060810183905260009060800160408051601f19818403018152828252805160209182012060008b815260038084529084902060c086018552805480875260018201549487019490945260028101548686015290810154606086015260048082015460808701526005909101546001600160a01b031660a08601529251632769cd1f60e21b815290945073__MerkleLib_____________________________92639da7347c926109e59290918791899101610ebc565b60206040518083038186803b1580156109fd57600080fd5b505af4158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a359190610e3e565b610a815760405162461bcd60e51b815260206004820181905260248201527f5468652070726f6f6620636f756c64206e6f742062652076657269666965642e604482015260640161030e565b6001600160a01b03871660009081526002602090815260408083208b84529091528120805460ff19166001179055808080610abe8c8b8b8b6106aa565b935093509350935083610b135760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67207363686564756c650000000000000000604482015260640161030e565b6040518060c001604052808481526020018481526020018281526020018b42610b3c9190610ea4565b815260200183815260200182815250600460008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050610bca8c8c61028f565b505050505050505050505050565b80356001600160a01b0381168114610bef57600080fd5b919050565b60008060408385031215610c0757600080fd5b82359150610c1760208401610bd8565b90509250929050565b60008060008060008060c08789031215610c3957600080fd5b8635955060208701359450604087013593506060870135925060808701359150610c6560a08801610bd8565b90509295509295509295565b60008060008060808587031215610c8757600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215610cb557600080fd5b5035919050565b60008060408385031215610ccf57600080fd5b610cd883610bd8565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610d1557600080fd5b863595506020610d26818901610bd8565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610d5857600080fd5b818a0191508a601f830112610d6c57600080fd5b813581811115610d7e57610d7e610ce6565b8060051b604051601f19603f83011681018181108582111715610da357610da3610ce6565b60405291825284820192508381018501918d831115610dc157600080fd5b938501935b82851015610ddf57843584529385019392850192610dc6565b8096505050505050509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015610e1a57610e1a610df2565b500390565b6000816000190483118215151615610e3957610e39610df2565b500290565b600060208284031215610e5057600080fd5b81518015158114610e6057600080fd5b9392505050565b6000600019821415610e7b57610e7b610df2565b5060010190565b600082610e9f57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610eb757610eb7610df2565b500190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b81811015610f0357845183529383019391830191600101610ee7565b50909897505050505050505056fea2646970667358221220d74713884523b8ad49733bb4edc64746f17086976828e898c637ca79e3aec04464736f6c63430008090033",
  "bytecodeSha1": "1e6bfa6da7db8c667184f437938c6ee37382fc5c",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.9+commit.e5eed63a"
  },
  "contractName": "DummyMerkleResistor",
  "coverageMap": {
    "branches": {
      "1": {
        "DummyMerkleResistor.addMerkleTree": {
          "26": [
            1357,
            1373,
            true
          ],
          "27": [
            1413,
            1436,
            true
          ]
        },
        "DummyMerkleResistor.initialize": {
          "32": [
            1937,
            1962,
            true
          ],
          "33": [
            2021,
            2059,
            true
          ],
          "34": [
            2255,
            2295,
            true
          ],
          "35": [
            2567,
            2572,
            true
          ]
        },
        "DummyMerkleResistor.verifyVestingSchedule": {
          "28": [
            4169,
            4191,
            false
          ],
          "29": [
            4315,
            4344,
            true
          ],
          "30": [
            4348,
            4377,
            false
          ],
          "31": [
            4466,
            4496,
            false
          ]
        },
        "DummyMerkleResistor.withdraw": {
          "24": [
            2970,
            3007,
            true
          ],
          "25": [
            3375,
            3409,
            false
          ]
        }
      },
      "4": {},
      "7": {}
    },
    "statements": {
      "1": {
        "DummyMerkleResistor.addMerkleTree": {
          "8": [
            1349,
            1395
          ],
          "9": [
            1405,
            1480
          ],
          "10": [
            1490,
            1677
          ],
          "11": [
            1687,
            1750
          ]
        },
        "DummyMerkleResistor.initialize": {
          "17": [
            1929,
            2003
          ],
          "18": [
            2013,
            2083
          ],
          "19": [
            2247,
            2332
          ],
          "20": [
            2342,
            2386
          ],
          "21": [
            2559,
            2601
          ],
          "22": [
            2612,
            2831
          ],
          "23": [
            2841,
            2875
          ]
        },
        "DummyMerkleResistor.verifyVestingSchedule": {
          "12": [
            4207,
            4230
          ],
          "13": [
            4393,
            4416
          ],
          "14": [
            4512,
            4541
          ],
          "15": [
            4693,
            4785
          ],
          "16": [
            4993,
            5045
          ]
        },
        "DummyMerkleResistor.withdraw": {
          "0": [
            2962,
            3051
          ],
          "1": [
            3190,
            3253
          ],
          "2": [
            3425,
            3465
          ],
          "3": [
            3538,
            3629
          ],
          "4": [
            3675,
            3716
          ],
          "5": [
            3726,
            3770
          ],
          "6": [
            3818,
            3884
          ],
          "7": [
            3894,
            3984
          ]
        }
      },
      "4": {},
      "7": {}
    }
  },
  "dependencies": [
    "IERC20",
    "MerkleLib"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100a85760003560e01c80636fb6ec41116100715780636fb6ec411461010257806385d88cb11461013757806386bb8249146101bc578063aaf5eb68146101fa578063c26cb54f14610204578063f287ad041461027c57600080fd5b8062f714ce146100ad5780630997eaa1146100c257806318369a2a146100d55780632811e253146100f1578063390b7c66146100f9575b600080fd5b6100c06100bb366004610bf4565b61028f565b005b6100c06100d0366004610c20565b610512565b6100de60015481565b6040519081526020015b60405180910390f35b6100de600181565b6100de60005481565b610115610110366004610c71565b6106aa565b60408051941515855260208501939093529183015260608201526080016100e8565b610186610145366004610ca3565b60036020819052600091825260409091208054600182015460028301549383015460048401546005909401549294919391929091906001600160a01b031686565b60408051968752602087019590955293850192909252606084015260808301526001600160a01b031660a082015260c0016100e8565b6101ea6101ca366004610cbc565b600260209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100e8565b6100de620f424081565b61024f610212366004610cbc565b6004602081815260009384526040808520909152918352912080546001820154600283015460038401549484015460059094015492949193909286565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100e8565b6100c061028a366004610cfc565b610848565b6001600160a01b038116600090815260026020908152604080832085845290915290205460ff166103175760405162461bcd60e51b815260206004820152602760248201527f596f75206d75737420696e697469616c697a6520796f7572206163636f756e74604482015266103334b939ba1760c91b60648201526084015b60405180910390fd5b6001600160a01b0380821660009081526004602081815260408084208785528252808420600380845294829020825160c081018452815481526001808301549582019590955260028201549381019390935294850154606083015292840154608082015260059093015490931660a0830152918201546103d95760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f696e73206c65667420746f20776974686472617700000000000000604482015260640161030e565b6000826003015442106103f157506001820154610412565b600483015460058401546104059042610e08565b61040f9190610e1f565b90505b808360010160008282546104269190610e08565b909155505042600584015560a082015160405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561048157600080fd5b505af1158015610495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b99190610e3e565b5084846001600160a01b03167f5ffb4b63dec15ba26308386f1d5ca61843b29ba365511062a887d95aa27532d3838660010154604051610503929190918252602082015260400190565b60405180910390a35050505050565b606482106105565760405162461bcd60e51b81526020600482015260116024820152700706374557046726f6e74203e3d2031303607c1b604482015260640161030e565b8284106105b55760405162461bcd60e51b815260206004820152602760248201527f6d696e456e6454696d65206d757374206265206c657373207468616e206d6178604482015266456e6454696d6560c81b606482015260840161030e565b6040518060c00160405280878152602001868152602001858152602001848152602001838152602001826001600160a01b03168152506003600080600081546105fd90610e67565b918290555081526020808201929092526040908101600090812084518155848401516001820155848301516002820155606085015160038201556080850151600482015560a090940151600590940180546001600160a01b0319166001600160a01b039586161790555481518a815292830189905292841692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a3505050505050565b6000806000806000548811156106cb5750600092508291508190508061083d565b600088815260036020818152604092839020835160c081018552815481526001820154928101929092526002810154938201939093529082015460608201819052600483015460808301526005909201546001600160a01b031660a08201529088118061073b5750806040015188105b156107545760008060008094509450945094505061083d565b600081606001518914156107695750856107da565b60008260400151836060015161077f9190610e08565b620f424061078d8b8b610e08565b6107979190610e1f565b6107a19190610e82565b905088620f424084604001518c6107b89190610e08565b6107c29084610e1f565b6107cc9190610e82565b6107d69190610ea4565b9150505b60006107e78a6064610e1f565b60808401516107f7906064610e08565b6108019084610e1f565b61080b9190610e82565b905060006108198284610e82565b6108238c42610ea4565b61082d9190610e08565b6001985092965090945090925050505b945094509450949050565b336001600160a01b038616146108ac5760405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616044820152636e63686560e01b606482015260840161030e565b6001600160a01b038516600090815260026020908152604080832089845290915290205460ff16156109165760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015260640161030e565b604080516001600160a01b03871660208201529081018490526060810183905260009060800160408051601f19818403018152828252805160209182012060008b815260038084529084902060c086018552805480875260018201549487019490945260028101548686015290810154606086015260048082015460808701526005909101546001600160a01b031660a08601529251632769cd1f60e21b815290945073__$61dd25696c02d5bd2863c8d2c1a2324a87$__92639da7347c926109e59290918791899101610ebc565b60206040518083038186803b1580156109fd57600080fd5b505af4158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a359190610e3e565b610a815760405162461bcd60e51b815260206004820181905260248201527f5468652070726f6f6620636f756c64206e6f742062652076657269666965642e604482015260640161030e565b6001600160a01b03871660009081526002602090815260408083208b84529091528120805460ff19166001179055808080610abe8c8b8b8b6106aa565b935093509350935083610b135760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67207363686564756c650000000000000000604482015260640161030e565b6040518060c001604052808481526020018481526020018281526020018b42610b3c9190610ea4565b815260200183815260200182815250600460008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050610bca8c8c61028f565b505050505050505050505050565b80356001600160a01b0381168114610bef57600080fd5b919050565b60008060408385031215610c0757600080fd5b82359150610c1760208401610bd8565b90509250929050565b60008060008060008060c08789031215610c3957600080fd5b8635955060208701359450604087013593506060870135925060808701359150610c6560a08801610bd8565b90509295509295509295565b60008060008060808587031215610c8757600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215610cb557600080fd5b5035919050565b60008060408385031215610ccf57600080fd5b610cd883610bd8565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610d1557600080fd5b863595506020610d26818901610bd8565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610d5857600080fd5b818a0191508a601f830112610d6c57600080fd5b813581811115610d7e57610d7e610ce6565b8060051b604051601f19603f83011681018181108582111715610da357610da3610ce6565b60405291825284820192508381018501918d831115610dc157600080fd5b938501935b82851015610ddf57843584529385019392850192610dc6565b8096505050505050509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015610e1a57610e1a610df2565b500390565b6000816000190483118215151615610e3957610e39610df2565b500290565b600060208284031215610e5057600080fd5b81518015158114610e6057600080fd5b9392505050565b6000600019821415610e7b57610e7b610df2565b5060010190565b600082610e9f57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610eb757610eb7610df2565b500190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b81811015610f0357845183529383019391830191600101610ee7565b50909897505050505050505056fea2646970667358221220d74713884523b8ad49733bb4edc64746f17086976828e898c637ca79e3aec04464736f6c63430008090033",
  "deployedSourceMap": "128:4927:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2888:1103;;;;;;:::i;:::-;;:::i;:::-;;1201:556;;;;;;:::i;:::-;;:::i;227:26::-;;;;;;;;;1131:25:8;;;1119:2;1104:18;227:26:1;;;;;;;;896:40;;935:1;896:40;;197:24;;;;;;3997:1055;;;;;;:::i;:::-;;:::i;:::-;;;;1807:14:8;;1800:22;1782:41;;1854:2;1839:18;;1832:34;;;;1882:18;;;1875:34;1940:2;1925:18;;1918:34;1769:3;1754:19;3997:1055:1;1557:401:8;728:47:1;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;728:47:1;;;;;;;2435:25:8;;;2491:2;2476:18;;2469:34;;;;2519:18;;;2512:34;;;;2577:2;2562:18;;2555:34;2620:3;2605:19;;2598:35;-1:-1:-1;;;;;2670:32:8;2690:3;2649:19;;2642:61;2422:3;2407:19;728:47:1;2148:561:8;660:62:1;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3138:14:8;;3131:22;3113:41;;3101:2;3086:18;660:62:1;2973:187:8;850:40:1;;883:7;850:40;;781:62;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3452:25:8;;;3508:2;3493:18;;3486:34;;;;3536:18;;;3529:34;;;;3594:2;3579:18;;3572:34;3637:3;3622:19;;3615:35;3681:3;3666:19;;3659:35;3439:3;3424:19;781:62:1;3165:535:8;1763:1119:1;;;;;;:::i;:::-;;:::i;2888:1103::-;-1:-1:-1;;;;;2970:24:1;;;;;;:11;:24;;;;;;;;:37;;;;;;;;;;;2962:89;;;;-1:-1:-1;;;2962:89:1;;5508:2:8;2962:89:1;;;5490:21:8;5547:2;5527:18;;;5520:30;5586:34;5566:18;;;5559:62;-1:-1:-1;;;5637:18:8;;;5630:37;5684:19;;2962:89:1;;;;;;;;;-1:-1:-1;;;;;3087:21:1;;;3061:23;3087:21;;;:8;:21;;;;;;;;:34;;;;;;;;3156:11;:24;;;;;;;3131:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3198:20;;;;3190:63;;;;-1:-1:-1;;;3190:63:1;;5916:2:8;3190:63:1;;;5898:21:8;5955:2;5935:18;;;5928:30;5994:27;5974:18;;;5967:55;6039:18;;3190:63:1;5714:349:8;3190:63:1;3263:22;3394:7;:15;;;3375;:34;3371:269;;-1:-1:-1;3445:20:1;;;;3371:269;;;3607:22;;;;3577:26;;;;3559:44;;:15;:44;:::i;:::-;3558:71;;;;:::i;:::-;3538:91;;3371:269;3699:17;3675:7;:20;;;:41;;;;;;;:::i;:::-;;;;-1:-1:-1;;3755:15:1;3726:26;;;:44;3825:17;;;;3818:66;;-1:-1:-1;;;3818:66:1;;-1:-1:-1;;;;;6695:32:8;;;3818:66:1;;;6677:51:8;6744:18;;;6737:34;;;3818::1;;;;;;6650:18:8;;3818:66:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3972:11;3918;-1:-1:-1;;;;;3899:85:1;;3931:17;3950:7;:20;;;3899:85;;;;;;7238:25:8;;;7294:2;7279:18;;7272:34;7226:2;7211:18;;7064:248;3899:85:1;;;;;;;;2952:1039;;;2888:1103;;:::o;1201:556::-;1370:3;1357:10;:16;1349:46;;;;-1:-1:-1;;;1349:46:1;;7519:2:8;1349:46:1;;;7501:21:8;7558:2;7538:18;;;7531:30;-1:-1:-1;;;7577:18:8;;;7570:47;7634:18;;1349:46:1;7317:341:8;1349:46:1;1426:10;1413;:23;1405:75;;;;-1:-1:-1;;;1405:75:1;;7865:2:8;1405:75:1;;;7847:21:8;7904:2;7884:18;;;7877:30;7943:34;7923:18;;;7916:62;-1:-1:-1;;;7994:18:8;;;7987:37;8041:19;;1405:75:1;7663:403:8;1405:75:1;1516:161;;;;;;;;1540:7;1516:161;;;;1561:8;1516:161;;;;1583:10;1516:161;;;;1607:10;1516:161;;;;1631:10;1516:161;;;;1655:12;-1:-1:-1;;;;;1516:161:1;;;;1490:11;:23;1504:8;;1502:10;;;;;:::i;:::-;;;;;-1:-1:-1;1490:23:1;;;;;;;;;;;;;;-1:-1:-1;1490:23:1;;;:187;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1490:187:1;-1:-1:-1;;;;;1490:187:1;;;;;;1708:8;1692:58;;7238:25:8;;;7279:18;;;7272:34;;;1692:58:1;;;;1708:8;1692:58;;7211:18:8;1692:58:1;;;;;;;1201:556;;;;;;:::o;3997:1055::-;4131:4;4137;4143;4149;4183:8;;4169:11;:22;4165:76;;;-1:-1:-1;4215:5:1;;-1:-1:-1;4215:5:1;;-1:-1:-1;4215:5:1;;-1:-1:-1;4215:5:1;4207:23;;4165:76;4251:22;4276:24;;;:11;:24;;;;;;;;;4251:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4251:49:1;;;;;;4315:29;;;:62;;;4362:4;:15;;;4348:11;:29;4315:62;4311:116;;;4401:5;4408:1;4411;4414;4393:23;;;;;;;;;;;4311:116;4437:15;4481:4;:15;;;4466:11;:30;4462:334;;;-1:-1:-1;4525:16:1;4462:334;;;4572:17;4663:4;:15;;;4645:4;:15;;;:33;;;;:::i;:::-;883:7;4593:35;4612:16;4593;:35;:::i;:::-;4592:49;;;;:::i;:::-;:87;;;;:::i;:::-;4572:107;;4769:16;883:7;4737:4;:15;;;4723:11;:29;;;;:::i;:::-;4707:46;;:12;:46;:::i;:::-;:58;;;;:::i;:::-;4706:79;;;;:::i;:::-;4693:92;;4558:238;4462:334;4806:19;4876:17;:11;4890:3;4876:17;:::i;:::-;4855:15;;;;4843:27;;4848:3;4843:27;:::i;:::-;4829:42;;:10;:42;:::i;:::-;4828:66;;;;:::i;:::-;4806:88;-1:-1:-1;4904:14:1;4954:27;4806:88;4954:10;:27;:::i;:::-;4921:29;4939:11;4921:15;:29;:::i;:::-;:61;;;;:::i;:::-;5001:4;;-1:-1:-1;5007:10:1;;-1:-1:-1;5019:14:1;;-1:-1:-1;4904:78:1;;-1:-1:-1;;;3997:1055:1;;;;;;;;;;:::o;1763:1119::-;1937:10;-1:-1:-1;;;;;1937:25:1;;;1929:74;;;;-1:-1:-1;;;1929:74:1;;9021:2:8;1929:74:1;;;9003:21:8;9060:2;9040:18;;;9033:30;9099:34;9079:18;;;9072:62;-1:-1:-1;;;9150:18:8;;;9143:34;9194:19;;1929:74:1;8819:400:8;1929:74:1;-1:-1:-1;;;;;2022:24:1;;;;;;:11;:24;;;;;;;;:37;;;;;;;;;;;2021:38;2013:70;;;;-1:-1:-1;;;2013:70:1;;9426:2:8;2013:70:1;;;9408:21:8;9465:2;9445:18;;;9438:30;-1:-1:-1;;;9484:18:8;;;9477:49;9543:18;;2013:70:1;9224:343:8;2013:70:1;2118:59;;;-1:-1:-1;;;;;9792:32:8;;2118:59:1;;;9774:51:8;9841:18;;;9834:34;;;9884:18;;;9877:34;;;2093:12:1;;9747:18:8;;2118:59:1;;;-1:-1:-1;;2118:59:1;;;;;;;;;2108:70;;2118:59;2108:70;;;;2188:22;2213:24;;;:11;:24;;;;;;;2188:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2188:49:1;;;;;2255:40;;-1:-1:-1;;;2255:40:1;;2108:70;;-1:-1:-1;2255:27:1;;;;:40;;2188:49;;2108:70;;2289:5;;2255:40;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2247:85;;;;-1:-1:-1;;;2247:85:1;;10912:2:8;2247:85:1;;;10894:21:8;;;10931:18;;;10924:30;10990:34;10970:18;;;10963:62;11042:18;;2247:85:1;10710:356:8;2247:85:1;-1:-1:-1;;;;;2342:24:1;;;;;;:11;:24;;;;;;;;:37;;;;;;;;:44;;-1:-1:-1;;2342:44:1;2382:4;2342:44;;;:24;;;2466:83;2367:11;2501;2514:16;2532;2466:21;:83::i;:::-;2397:152;;;;;;;;2567:5;2559:42;;;;-1:-1:-1;;;2559:42:1;;11273:2:8;2559:42:1;;;11255:21:8;11312:2;11292:18;;;11285:30;11351:26;11331:18;;;11324:54;11395:18;;2559:42:1;11071:348:8;2559:42:1;2649:182;;;;;;;;2670:10;2649:182;;;;2694:10;2649:182;;;;2718:9;2649:182;;;;2759:11;2741:15;:29;;;;:::i;:::-;2649:182;;;;2784:14;2649:182;;;;2812:9;2649:182;;;2612:8;:21;2621:11;-1:-1:-1;;;;;2612:21:1;-1:-1:-1;;;;;2612:21:1;;;;;;;;;;;;:34;2634:11;2612:34;;;;;;;;;;;:219;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2841:34;2850:11;2863;2841:8;:34::i;:::-;1919:963;;;;;;1763:1119;;;;;;:::o;14:173:8:-;82:20;;-1:-1:-1;;;;;131:31:8;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;373:9;360:23;350:33;;402:38;436:2;425:9;421:18;402:38;:::i;:::-;392:48;;192:254;;;;;:::o;451:529::-;555:6;563;571;579;587;595;648:3;636:9;627:7;623:23;619:33;616:53;;;665:1;662;655:12;616:53;701:9;688:23;678:33;;758:2;747:9;743:18;730:32;720:42;;809:2;798:9;794:18;781:32;771:42;;860:2;849:9;845:18;832:32;822:42;;911:3;900:9;896:19;883:33;873:43;;935:39;969:3;958:9;954:19;935:39;:::i;:::-;925:49;;451:529;;;;;;;;:::o;1167:385::-;1253:6;1261;1269;1277;1330:3;1318:9;1309:7;1305:23;1301:33;1298:53;;;1347:1;1344;1337:12;1298:53;-1:-1:-1;;1370:23:8;;;1440:2;1425:18;;1412:32;;-1:-1:-1;1491:2:8;1476:18;;1463:32;;1542:2;1527:18;1514:32;;-1:-1:-1;1167:385:8;-1:-1:-1;1167:385:8:o;1963:180::-;2022:6;2075:2;2063:9;2054:7;2050:23;2046:32;2043:52;;;2091:1;2088;2081:12;2043:52;-1:-1:-1;2114:23:8;;1963:180;-1:-1:-1;1963:180:8:o;2714:254::-;2782:6;2790;2843:2;2831:9;2822:7;2818:23;2814:32;2811:52;;;2859:1;2856;2849:12;2811:52;2882:29;2901:9;2882:29;:::i;:::-;2872:39;2958:2;2943:18;;;;2930:32;;-1:-1:-1;;;2714:254:8:o;3705:127::-;3766:10;3761:3;3757:20;3754:1;3747:31;3797:4;3794:1;3787:15;3821:4;3818:1;3811:15;3837:1464;3966:6;3974;3982;3990;3998;4006;4059:3;4047:9;4038:7;4034:23;4030:33;4027:53;;;4076:1;4073;4066:12;4027:53;4112:9;4099:23;4089:33;;4141:2;4162:38;4196:2;4185:9;4181:18;4162:38;:::i;:::-;4152:48;;4247:2;4236:9;4232:18;4219:32;4209:42;;4298:2;4287:9;4283:18;4270:32;4260:42;;4349:3;4338:9;4334:19;4321:33;4311:43;;4405:3;4394:9;4390:19;4377:33;4429:18;4470:2;4462:6;4459:14;4456:34;;;4486:1;4483;4476:12;4456:34;4524:6;4513:9;4509:22;4499:32;;4569:7;4562:4;4558:2;4554:13;4550:27;4540:55;;4591:1;4588;4581:12;4540:55;4627:2;4614:16;4649:2;4645;4642:10;4639:36;;;4655:18;;:::i;:::-;4701:2;4698:1;4694:10;4733:2;4727:9;4796:2;4792:7;4787:2;4783;4779:11;4775:25;4767:6;4763:38;4851:6;4839:10;4836:22;4831:2;4819:10;4816:18;4813:46;4810:72;;;4862:18;;:::i;:::-;4898:2;4891:22;4948:18;;;4982:15;;;;-1:-1:-1;5024:11:8;;;5020:20;;;5052:19;;;5049:39;;;5084:1;5081;5074:12;5049:39;5108:11;;;;5128:142;5144:6;5139:3;5136:15;5128:142;;;5210:17;;5198:30;;5161:12;;;;5248;;;;5128:142;;;5289:6;5279:16;;;;;;;;3837:1464;;;;;;;;:::o;6068:127::-;6129:10;6124:3;6120:20;6117:1;6110:31;6160:4;6157:1;6150:15;6184:4;6181:1;6174:15;6200:125;6240:4;6268:1;6265;6262:8;6259:34;;;6273:18;;:::i;:::-;-1:-1:-1;6310:9:8;;6200:125::o;6330:168::-;6370:7;6436:1;6432;6428:6;6424:14;6421:1;6418:21;6413:1;6406:9;6399:17;6395:45;6392:71;;;6443:18;;:::i;:::-;-1:-1:-1;6483:9:8;;6330:168::o;6782:277::-;6849:6;6902:2;6890:9;6881:7;6877:23;6873:32;6870:52;;;6918:1;6915;6908:12;6870:52;6950:9;6944:16;7003:5;6996:13;6989:21;6982:5;6979:32;6969:60;;7025:1;7022;7015:12;6969:60;7048:5;6782:277;-1:-1:-1;;;6782:277:8:o;8071:135::-;8110:3;-1:-1:-1;;8131:17:8;;8128:43;;;8151:18;;:::i;:::-;-1:-1:-1;8198:1:8;8187:13;;8071:135::o;8464:217::-;8504:1;8530;8520:132;;8574:10;8569:3;8565:20;8562:1;8555:31;8609:4;8606:1;8599:15;8637:4;8634:1;8627:15;8520:132;-1:-1:-1;8666:9:8;;8464:217::o;8686:128::-;8726:3;8757:1;8753:6;8750:1;8747:13;8744:39;;;8763:18;;:::i;:::-;-1:-1:-1;8799:9:8;;8686:128::o;9922:783::-;10128:4;10176:2;10165:9;10161:18;10206:6;10195:9;10188:25;10232:2;10270:6;10265:2;10254:9;10250:18;10243:34;10313:2;10308;10297:9;10293:18;10286:30;10336:6;10371;10365:13;10402:6;10394;10387:22;10440:3;10429:9;10425:19;10418:26;;10479:2;10471:6;10467:15;10453:29;;10500:1;10510:169;10524:6;10521:1;10518:13;10510:169;;;10585:13;;10573:26;;10654:15;;;;10619:12;;;;10546:1;10539:9;10510:169;;;-1:-1:-1;10696:3:8;;9922:783;-1:-1:-1;;;;;;;;9922:783:8:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    128,
    5055
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FB6EC41 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x6FB6EC41 EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0x85D88CB1 EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0x86BB8249 EQ PUSH2 0x1BC JUMPI DUP1 PUSH4 0xAAF5EB68 EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0xC26CB54F EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0xF287AD04 EQ PUSH2 0x27C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xF714CE EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0x997EAA1 EQ PUSH2 0xC2 JUMPI DUP1 PUSH4 0x18369A2A EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0x2811E253 EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0x390B7C66 EQ PUSH2 0xF9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC0 PUSH2 0xBB CALLDATASIZE PUSH1 0x4 PUSH2 0xBF4 JUMP JUMPDEST PUSH2 0x28F JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC0 PUSH2 0xD0 CALLDATASIZE PUSH1 0x4 PUSH2 0xC20 JUMP JUMPDEST PUSH2 0x512 JUMP JUMPDEST PUSH2 0xDE PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDE PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0xDE PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x115 PUSH2 0x110 CALLDATASIZE PUSH1 0x4 PUSH2 0xC71 JUMP JUMPDEST PUSH2 0x6AA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 ISZERO ISZERO DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0xE8 JUMP JUMPDEST PUSH2 0x186 PUSH2 0x145 CALLDATASIZE PUSH1 0x4 PUSH2 0xCA3 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD SWAP4 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP5 SWAP2 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0xE8 JUMP JUMPDEST PUSH2 0x1EA PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0xCBC JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE8 JUMP JUMPDEST PUSH2 0xDE PUSH3 0xF4240 DUP2 JUMP JUMPDEST PUSH2 0x24F PUSH2 0x212 CALLDATASIZE PUSH1 0x4 PUSH2 0xCBC JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD SWAP5 DUP5 ADD SLOAD PUSH1 0x5 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0xE8 JUMP JUMPDEST PUSH2 0xC0 PUSH2 0x28A CALLDATASIZE PUSH1 0x4 PUSH2 0xCFC JUMP JUMPDEST PUSH2 0x848 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x317 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75206D75737420696E697469616C697A6520796F7572206163636F756E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x103334B939BA17 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP8 DUP6 MSTORE DUP3 MSTORE DUP1 DUP5 KECCAK256 PUSH1 0x3 DUP1 DUP5 MSTORE SWAP5 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xC0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP1 DUP4 ADD SLOAD SWAP6 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x2 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP5 DUP6 ADD SLOAD PUSH1 0x60 DUP4 ADD MSTORE SWAP3 DUP5 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 SWAP1 SWAP4 ADD SLOAD SWAP1 SWAP4 AND PUSH1 0xA0 DUP4 ADD MSTORE SWAP2 DUP3 ADD SLOAD PUSH2 0x3D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F20636F696E73206C65667420746F20776974686472617700000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x3F1 JUMPI POP PUSH1 0x1 DUP3 ADD SLOAD PUSH2 0x412 JUMP JUMPDEST PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x5 DUP5 ADD SLOAD PUSH2 0x405 SWAP1 TIMESTAMP PUSH2 0xE08 JUMP JUMPDEST PUSH2 0x40F SWAP2 SWAP1 PUSH2 0xE1F JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP4 PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x426 SWAP2 SWAP1 PUSH2 0xE08 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP TIMESTAMP PUSH1 0x5 DUP5 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x495 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4B9 SWAP2 SWAP1 PUSH2 0xE3E JUMP JUMPDEST POP DUP5 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x5FFB4B63DEC15BA26308386F1D5CA61843B29BA365511062A887D95AA27532D3 DUP4 DUP7 PUSH1 0x1 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x503 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x64 DUP3 LT PUSH2 0x556 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x706374557046726F6E74203E3D2031303 PUSH1 0x7C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30E JUMP JUMPDEST DUP3 DUP5 LT PUSH2 0x5B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D696E456E6454696D65206D757374206265206C657373207468616E206D6178 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x456E6454696D65 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH1 0x3 PUSH1 0x0 DUP1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x5FD SWAP1 PUSH2 0xE67 JUMP JUMPDEST SWAP2 DUP3 SWAP1 SSTORE POP DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP5 MLOAD DUP2 SSTORE DUP5 DUP5 ADD MLOAD PUSH1 0x1 DUP3 ADD SSTORE DUP5 DUP4 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0xA0 SWAP1 SWAP5 ADD MLOAD PUSH1 0x5 SWAP1 SWAP5 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND OR SWAP1 SSTORE SLOAD DUP2 MLOAD DUP11 DUP2 MSTORE SWAP3 DUP4 ADD DUP10 SWAP1 MSTORE SWAP3 DUP5 AND SWAP3 SWAP2 PUSH32 0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 SLOAD DUP9 GT ISZERO PUSH2 0x6CB JUMPI POP PUSH1 0x0 SWAP3 POP DUP3 SWAP2 POP DUP2 SWAP1 POP DUP1 PUSH2 0x83D JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0xC0 DUP2 ADD DUP6 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP1 DUP3 ADD SLOAD PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP3 ADD MSTORE SWAP1 DUP9 GT DUP1 PUSH2 0x73B JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD DUP9 LT JUMPDEST ISZERO PUSH2 0x754 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP POP PUSH2 0x83D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 ADD MLOAD DUP10 EQ ISZERO PUSH2 0x769 JUMPI POP DUP6 PUSH2 0x7DA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0x77F SWAP2 SWAP1 PUSH2 0xE08 JUMP JUMPDEST PUSH3 0xF4240 PUSH2 0x78D DUP12 DUP12 PUSH2 0xE08 JUMP JUMPDEST PUSH2 0x797 SWAP2 SWAP1 PUSH2 0xE1F JUMP JUMPDEST PUSH2 0x7A1 SWAP2 SWAP1 PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP DUP9 PUSH3 0xF4240 DUP5 PUSH1 0x40 ADD MLOAD DUP13 PUSH2 0x7B8 SWAP2 SWAP1 PUSH2 0xE08 JUMP JUMPDEST PUSH2 0x7C2 SWAP1 DUP5 PUSH2 0xE1F JUMP JUMPDEST PUSH2 0x7CC SWAP2 SWAP1 PUSH2 0xE82 JUMP JUMPDEST PUSH2 0x7D6 SWAP2 SWAP1 PUSH2 0xEA4 JUMP JUMPDEST SWAP2 POP POP JUMPDEST PUSH1 0x0 PUSH2 0x7E7 DUP11 PUSH1 0x64 PUSH2 0xE1F JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x7F7 SWAP1 PUSH1 0x64 PUSH2 0xE08 JUMP JUMPDEST PUSH2 0x801 SWAP1 DUP5 PUSH2 0xE1F JUMP JUMPDEST PUSH2 0x80B SWAP2 SWAP1 PUSH2 0xE82 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x819 DUP3 DUP5 PUSH2 0xE82 JUMP JUMPDEST PUSH2 0x823 DUP13 TIMESTAMP PUSH2 0xEA4 JUMP JUMPDEST PUSH2 0x82D SWAP2 SWAP1 PUSH2 0xE08 JUMP JUMPDEST PUSH1 0x1 SWAP9 POP SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP1 SWAP3 POP POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ PUSH2 0x8AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x43616E206F6E6C7920696E697469616C697A6520796F7572206F776E20747261 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x6E636865 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x30E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x916 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x105B1C9958591E481A5B9A5D1A585B1A5E9959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x3 DUP1 DUP5 MSTORE SWAP1 DUP5 SWAP1 KECCAK256 PUSH1 0xC0 DUP7 ADD DUP6 MSTORE DUP1 SLOAD DUP1 DUP8 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP5 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x2 DUP2 ADD SLOAD DUP7 DUP7 ADD MSTORE SWAP1 DUP2 ADD SLOAD PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x4 DUP1 DUP3 ADD SLOAD PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0x5 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP7 ADD MSTORE SWAP3 MLOAD PUSH4 0x2769CD1F PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP5 POP PUSH20 0x0 SWAP3 PUSH4 0x9DA7347C SWAP3 PUSH2 0x9E5 SWAP3 SWAP1 SWAP2 DUP8 SWAP2 DUP10 SWAP2 ADD PUSH2 0xEBC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xA11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA35 SWAP2 SWAP1 PUSH2 0xE3E JUMP JUMPDEST PUSH2 0xA81 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652070726F6F6620636F756C64206E6F742062652076657269666965642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 DUP1 DUP1 PUSH2 0xABE DUP13 DUP12 DUP12 DUP12 PUSH2 0x6AA JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP4 PUSH2 0xB13 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642076657374696E67207363686564756C650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x30E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD DUP12 TIMESTAMP PUSH2 0xB3C SWAP2 SWAP1 PUSH2 0xEA4 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP PUSH1 0x4 PUSH1 0x0 DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP15 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE SWAP1 POP POP PUSH2 0xBCA DUP13 DUP13 PUSH2 0x28F JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xBEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xC17 PUSH1 0x20 DUP5 ADD PUSH2 0xBD8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xC39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0xC65 PUSH1 0xA0 DUP9 ADD PUSH2 0xBD8 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xC87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCD8 DUP4 PUSH2 0xBD8 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xD15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 PUSH2 0xD26 DUP2 DUP10 ADD PUSH2 0xBD8 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xD58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP11 ADD SWAP2 POP DUP11 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xD7E JUMPI PUSH2 0xD7E PUSH2 0xCE6 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xDA3 JUMPI PUSH2 0xDA3 PUSH2 0xCE6 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP14 DUP4 GT ISZERO PUSH2 0xDC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xDDF JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xDC6 JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xE1A JUMPI PUSH2 0xE1A PUSH2 0xDF2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xE39 JUMPI PUSH2 0xE39 PUSH2 0xDF2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0xE7B JUMPI PUSH2 0xE7B PUSH2 0xDF2 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xE9F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xEB7 JUMPI PUSH2 0xEB7 PUSH2 0xDF2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP6 DUP4 MSTORE PUSH1 0x20 DUP6 DUP2 DUP6 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 POP DUP3 DUP8 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF03 JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xEE7 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD7 SELFBALANCE SGT DUP9 GASLIMIT 0x23 0xB8 0xAD 0x49 PUSH20 0x3BB4EDC64746F17086976828E898C637CA79E3AE 0xC0 DIFFICULTY PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        128,
        5055
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "CALLVALUE",
      "path": "1"
    },
    "6": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "7": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "8": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "12": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "REVERT",
      "path": "1"
    },
    "16": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "17": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "POP",
      "path": "1"
    },
    "18": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "21": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "LT",
      "path": "1"
    },
    "22": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA8"
    },
    "25": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "26": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "29": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "SHR",
      "path": "1"
    },
    "32": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "33": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x6FB6EC41"
    },
    "38": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "GT",
      "path": "1"
    },
    "39": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "43": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "44": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x6FB6EC41"
    },
    "49": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "EQ",
      "path": "1"
    },
    "50": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x102"
    },
    "53": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "54": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "55": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x85D88CB1"
    },
    "60": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "EQ",
      "path": "1"
    },
    "61": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x137"
    },
    "64": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "65": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "66": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x86BB8249"
    },
    "71": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "EQ",
      "path": "1"
    },
    "72": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1BC"
    },
    "75": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "76": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "77": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xAAF5EB68"
    },
    "82": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "EQ",
      "path": "1"
    },
    "83": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1FA"
    },
    "86": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "87": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "88": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xC26CB54F"
    },
    "93": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "EQ",
      "path": "1"
    },
    "94": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x204"
    },
    "97": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "98": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "99": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xF287AD04"
    },
    "104": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "EQ",
      "path": "1"
    },
    "105": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x27C"
    },
    "108": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "109": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "112": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "REVERT",
      "path": "1"
    },
    "113": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "114": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "115": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0xF714CE"
    },
    "119": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "EQ",
      "path": "1"
    },
    "120": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xAD"
    },
    "123": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "124": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "125": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x997EAA1"
    },
    "130": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "EQ",
      "path": "1"
    },
    "131": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC2"
    },
    "134": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "135": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "136": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x18369A2A"
    },
    "141": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "EQ",
      "path": "1"
    },
    "142": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD5"
    },
    "145": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "146": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "147": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x2811E253"
    },
    "152": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "EQ",
      "path": "1"
    },
    "153": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF1"
    },
    "156": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "157": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "158": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x390B7C66"
    },
    "163": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "EQ",
      "path": "1"
    },
    "164": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF9"
    },
    "167": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "168": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "169": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "171": {
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "DUP1",
      "path": "1"
    },
    "172": {
      "first_revert": true,
      "fn": null,
      "offset": [
        128,
        5055
      ],
      "op": "REVERT",
      "path": "1"
    },
    "173": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2888,
        3991
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "174": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2888,
        3991
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC0"
    },
    "177": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2888,
        3991
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xBB"
    },
    "180": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2888,
        3991
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "181": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2888,
        3991
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "183": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2888,
        3991
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xBF4"
    },
    "186": {
      "fn": "DummyMerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        2888,
        3991
      ],
      "op": "JUMP",
      "path": "1"
    },
    "187": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2888,
        3991
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "188": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2888,
        3991
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x28F"
    },
    "191": {
      "fn": "DummyMerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        2888,
        3991
      ],
      "op": "JUMP",
      "path": "1"
    },
    "192": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2888,
        3991
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "193": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2888,
        3991
      ],
      "op": "STOP",
      "path": "1"
    },
    "194": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "195": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC0"
    },
    "198": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD0"
    },
    "201": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "202": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "204": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC20"
    },
    "207": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        1201,
        1757
      ],
      "op": "JUMP",
      "path": "1"
    },
    "208": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "209": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x512"
    },
    "212": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        1201,
        1757
      ],
      "op": "JUMP",
      "path": "1"
    },
    "213": {
      "offset": [
        227,
        253
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "214": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDE"
    },
    "217": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "219": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "220": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "DUP2",
      "path": "1"
    },
    "221": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "JUMP",
      "path": "1"
    },
    "222": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "223": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "225": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "226": {
      "op": "SWAP1"
    },
    "227": {
      "op": "DUP2"
    },
    "228": {
      "op": "MSTORE"
    },
    "229": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "231": {
      "op": "ADD"
    },
    "232": {
      "offset": [
        227,
        253
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "233": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "235": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "236": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "DUP1",
      "path": "1"
    },
    "237": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "238": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "SUB",
      "path": "1"
    },
    "239": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "240": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        227,
        253
      ],
      "op": "RETURN",
      "path": "1"
    },
    "241": {
      "offset": [
        896,
        936
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "242": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        896,
        936
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDE"
    },
    "245": {
      "offset": [
        935,
        936
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "247": {
      "offset": [
        896,
        936
      ],
      "op": "DUP2",
      "path": "1"
    },
    "248": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        896,
        936
      ],
      "op": "JUMP",
      "path": "1"
    },
    "249": {
      "offset": [
        197,
        221
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "250": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        197,
        221
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDE"
    },
    "253": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        197,
        221
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "255": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        197,
        221
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "256": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        197,
        221
      ],
      "op": "DUP2",
      "path": "1"
    },
    "257": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        197,
        221
      ],
      "op": "JUMP",
      "path": "1"
    },
    "258": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "259": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x115"
    },
    "262": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x110"
    },
    "265": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "266": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "268": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC71"
    },
    "271": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        3997,
        5052
      ],
      "op": "JUMP",
      "path": "1"
    },
    "272": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "273": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6AA"
    },
    "276": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        3997,
        5052
      ],
      "op": "JUMP",
      "path": "1"
    },
    "277": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "278": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "280": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "DUP1",
      "path": "1"
    },
    "281": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "282": {
      "op": "SWAP5"
    },
    "283": {
      "op": "ISZERO"
    },
    "284": {
      "op": "ISZERO"
    },
    "285": {
      "op": "DUP6"
    },
    "286": {
      "op": "MSTORE"
    },
    "287": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "289": {
      "op": "DUP6"
    },
    "290": {
      "op": "ADD"
    },
    "291": {
      "op": "SWAP4"
    },
    "292": {
      "op": "SWAP1"
    },
    "293": {
      "op": "SWAP4"
    },
    "294": {
      "op": "MSTORE"
    },
    "295": {
      "op": "SWAP2"
    },
    "296": {
      "op": "DUP4"
    },
    "297": {
      "op": "ADD"
    },
    "298": {
      "op": "MSTORE"
    },
    "299": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "301": {
      "op": "DUP3"
    },
    "302": {
      "op": "ADD"
    },
    "303": {
      "op": "MSTORE"
    },
    "304": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "306": {
      "op": "ADD"
    },
    "307": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE8"
    },
    "310": {
      "op": "JUMP"
    },
    "311": {
      "offset": [
        728,
        775
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "312": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x186"
    },
    "315": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x145"
    },
    "318": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "319": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "321": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCA3"
    },
    "324": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        728,
        775
      ],
      "op": "JUMP",
      "path": "1"
    },
    "325": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "326": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "328": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "330": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "DUP2",
      "path": "1"
    },
    "331": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "332": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "333": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "335": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "336": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "DUP3",
      "path": "1"
    },
    "337": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "338": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "340": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "341": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "342": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "343": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "DUP1",
      "path": "1"
    },
    "344": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "345": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "347": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "DUP3",
      "path": "1"
    },
    "348": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "ADD",
      "path": "1"
    },
    "349": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "350": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "352": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "DUP4",
      "path": "1"
    },
    "353": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "ADD",
      "path": "1"
    },
    "354": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "355": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "356": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "DUP4",
      "path": "1"
    },
    "357": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "ADD",
      "path": "1"
    },
    "358": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "359": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "361": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "DUP5",
      "path": "1"
    },
    "362": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "ADD",
      "path": "1"
    },
    "363": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "364": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "366": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "367": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "368": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "ADD",
      "path": "1"
    },
    "369": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "370": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "371": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "372": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "373": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "374": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "375": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "376": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "377": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "378": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "379": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "381": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "383": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "385": {
      "op": "SHL"
    },
    "386": {
      "op": "SUB"
    },
    "387": {
      "offset": [
        728,
        775
      ],
      "op": "AND",
      "path": "1"
    },
    "388": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "DUP7",
      "path": "1"
    },
    "389": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "JUMP",
      "path": "1"
    },
    "390": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "391": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "393": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "DUP1",
      "path": "1"
    },
    "394": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        728,
        775
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "395": {
      "op": "SWAP7"
    },
    "396": {
      "op": "DUP8"
    },
    "397": {
      "op": "MSTORE"
    },
    "398": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "400": {
      "op": "DUP8"
    },
    "401": {
      "op": "ADD"
    },
    "402": {
      "op": "SWAP6"
    },
    "403": {
      "op": "SWAP1"
    },
    "404": {
      "op": "SWAP6"
    },
    "405": {
      "op": "MSTORE"
    },
    "406": {
      "op": "SWAP4"
    },
    "407": {
      "op": "DUP6"
    },
    "408": {
      "op": "ADD"
    },
    "409": {
      "op": "SWAP3"
    },
    "410": {
      "op": "SWAP1"
    },
    "411": {
      "op": "SWAP3"
    },
    "412": {
      "op": "MSTORE"
    },
    "413": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "415": {
      "op": "DUP5"
    },
    "416": {
      "op": "ADD"
    },
    "417": {
      "op": "MSTORE"
    },
    "418": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "420": {
      "op": "DUP4"
    },
    "421": {
      "op": "ADD"
    },
    "422": {
      "op": "MSTORE"
    },
    "423": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "425": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "427": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "429": {
      "op": "SHL"
    },
    "430": {
      "op": "SUB"
    },
    "431": {
      "op": "AND"
    },
    "432": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "434": {
      "op": "DUP3"
    },
    "435": {
      "op": "ADD"
    },
    "436": {
      "op": "MSTORE"
    },
    "437": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "439": {
      "op": "ADD"
    },
    "440": {
      "offset": [
        728,
        775
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE8"
    },
    "443": {
      "op": "JUMP"
    },
    "444": {
      "offset": [
        660,
        722
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "445": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1EA"
    },
    "448": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1CA"
    },
    "451": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "452": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "454": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCBC"
    },
    "457": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        660,
        722
      ],
      "op": "JUMP",
      "path": "1"
    },
    "458": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "459": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "461": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "463": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "464": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "DUP2",
      "path": "1"
    },
    "465": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "466": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "468": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "469": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "DUP4",
      "path": "1"
    },
    "470": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "471": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "473": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "DUP1",
      "path": "1"
    },
    "474": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "DUP5",
      "path": "1"
    },
    "475": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "476": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "477": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "478": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "479": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "480": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "DUP3",
      "path": "1"
    },
    "481": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "482": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "483": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "484": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "485": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "487": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "AND",
      "path": "1"
    },
    "488": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "DUP2",
      "path": "1"
    },
    "489": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "JUMP",
      "path": "1"
    },
    "490": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "491": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "493": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        660,
        722
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "494": {
      "op": "SWAP1"
    },
    "495": {
      "op": "ISZERO"
    },
    "496": {
      "op": "ISZERO"
    },
    "497": {
      "op": "DUP2"
    },
    "498": {
      "op": "MSTORE"
    },
    "499": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "501": {
      "op": "ADD"
    },
    "502": {
      "offset": [
        660,
        722
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE8"
    },
    "505": {
      "op": "JUMP"
    },
    "506": {
      "offset": [
        850,
        890
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "507": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        850,
        890
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xDE"
    },
    "510": {
      "offset": [
        883,
        890
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0xF4240"
    },
    "514": {
      "offset": [
        850,
        890
      ],
      "op": "DUP2",
      "path": "1"
    },
    "515": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        850,
        890
      ],
      "op": "JUMP",
      "path": "1"
    },
    "516": {
      "offset": [
        781,
        843
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "517": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x24F"
    },
    "520": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x212"
    },
    "523": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "524": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "526": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCBC"
    },
    "529": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        781,
        843
      ],
      "op": "JUMP",
      "path": "1"
    },
    "530": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "531": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "533": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "535": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "DUP2",
      "path": "1"
    },
    "536": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "DUP2",
      "path": "1"
    },
    "537": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "538": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "540": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "541": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "DUP5",
      "path": "1"
    },
    "542": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "543": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "545": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "DUP1",
      "path": "1"
    },
    "546": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "DUP6",
      "path": "1"
    },
    "547": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "548": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "549": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "550": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "551": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "552": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "DUP4",
      "path": "1"
    },
    "553": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "554": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "555": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "556": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "DUP1",
      "path": "1"
    },
    "557": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "558": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "560": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "DUP3",
      "path": "1"
    },
    "561": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "ADD",
      "path": "1"
    },
    "562": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "563": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "565": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "DUP4",
      "path": "1"
    },
    "566": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "ADD",
      "path": "1"
    },
    "567": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "568": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "570": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "DUP5",
      "path": "1"
    },
    "571": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "ADD",
      "path": "1"
    },
    "572": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "573": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "574": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "DUP5",
      "path": "1"
    },
    "575": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "ADD",
      "path": "1"
    },
    "576": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "577": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "579": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "580": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "581": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "ADD",
      "path": "1"
    },
    "582": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "583": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "584": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "585": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "586": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "587": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "588": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "589": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "DUP7",
      "path": "1"
    },
    "590": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "JUMP",
      "path": "1"
    },
    "591": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "592": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "594": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "DUP1",
      "path": "1"
    },
    "595": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        781,
        843
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "596": {
      "op": "SWAP7"
    },
    "597": {
      "op": "DUP8"
    },
    "598": {
      "op": "MSTORE"
    },
    "599": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "601": {
      "op": "DUP8"
    },
    "602": {
      "op": "ADD"
    },
    "603": {
      "op": "SWAP6"
    },
    "604": {
      "op": "SWAP1"
    },
    "605": {
      "op": "SWAP6"
    },
    "606": {
      "op": "MSTORE"
    },
    "607": {
      "op": "SWAP4"
    },
    "608": {
      "op": "DUP6"
    },
    "609": {
      "op": "ADD"
    },
    "610": {
      "op": "SWAP3"
    },
    "611": {
      "op": "SWAP1"
    },
    "612": {
      "op": "SWAP3"
    },
    "613": {
      "op": "MSTORE"
    },
    "614": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "616": {
      "op": "DUP5"
    },
    "617": {
      "op": "ADD"
    },
    "618": {
      "op": "MSTORE"
    },
    "619": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "621": {
      "op": "DUP4"
    },
    "622": {
      "op": "ADD"
    },
    "623": {
      "op": "MSTORE"
    },
    "624": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "626": {
      "op": "DUP3"
    },
    "627": {
      "op": "ADD"
    },
    "628": {
      "op": "MSTORE"
    },
    "629": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "631": {
      "op": "ADD"
    },
    "632": {
      "offset": [
        781,
        843
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE8"
    },
    "635": {
      "op": "JUMP"
    },
    "636": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "637": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xC0"
    },
    "640": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x28A"
    },
    "643": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "644": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "646": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xCFC"
    },
    "649": {
      "fn": "DummyMerkleResistor.initialize",
      "jump": "i",
      "offset": [
        1763,
        2882
      ],
      "op": "JUMP",
      "path": "1"
    },
    "650": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "651": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x848"
    },
    "654": {
      "fn": "DummyMerkleResistor.initialize",
      "jump": "i",
      "offset": [
        1763,
        2882
      ],
      "op": "JUMP",
      "path": "1"
    },
    "655": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2888,
        3991
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "656": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "658": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "660": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "662": {
      "op": "SHL"
    },
    "663": {
      "op": "SUB"
    },
    "664": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2994
      ],
      "op": "DUP2",
      "path": "1",
      "statement": 0
    },
    "665": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2994
      ],
      "op": "AND",
      "path": "1"
    },
    "666": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2994
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "668": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2994
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "669": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2994
      ],
      "op": "DUP2",
      "path": "1"
    },
    "670": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2994
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "671": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2981
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "673": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2994
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "675": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2994
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "676": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2994
      ],
      "op": "DUP2",
      "path": "1"
    },
    "677": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2994
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "678": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2994
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "680": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2994
      ],
      "op": "DUP1",
      "path": "1"
    },
    "681": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2994
      ],
      "op": "DUP4",
      "path": "1"
    },
    "682": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        2994
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "683": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        3007
      ],
      "op": "DUP6",
      "path": "1"
    },
    "684": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        3007
      ],
      "op": "DUP5",
      "path": "1"
    },
    "685": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        3007
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "686": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        3007
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "687": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        3007
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "688": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        3007
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "689": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        3007
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "690": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        3007
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "691": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        3007
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "692": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        3007
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "694": {
      "branch": 24,
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2970,
        3007
      ],
      "op": "AND",
      "path": "1"
    },
    "695": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x317"
    },
    "698": {
      "branch": 24,
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "699": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "701": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "702": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "706": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "708": {
      "op": "SHL"
    },
    "709": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "DUP2",
      "path": "1"
    },
    "710": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "711": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "713": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "715": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "DUP3",
      "path": "1"
    },
    "716": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "ADD",
      "path": "1"
    },
    "717": {
      "op": "MSTORE"
    },
    "718": {
      "op": "PUSH1",
      "value": "0x27"
    },
    "720": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "722": {
      "op": "DUP3"
    },
    "723": {
      "op": "ADD"
    },
    "724": {
      "op": "MSTORE"
    },
    "725": {
      "op": "PUSH32",
      "value": "0x596F75206D75737420696E697469616C697A6520796F7572206163636F756E74"
    },
    "758": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "760": {
      "op": "DUP3"
    },
    "761": {
      "op": "ADD"
    },
    "762": {
      "op": "MSTORE"
    },
    "763": {
      "op": "PUSH7",
      "value": "0x103334B939BA17"
    },
    "771": {
      "op": "PUSH1",
      "value": "0xC9"
    },
    "773": {
      "op": "SHL"
    },
    "774": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "776": {
      "op": "DUP3"
    },
    "777": {
      "op": "ADD"
    },
    "778": {
      "op": "MSTORE"
    },
    "779": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "781": {
      "op": "ADD"
    },
    "782": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "783": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "785": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "786": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "DUP1",
      "path": "1"
    },
    "787": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "788": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "SUB",
      "path": "1"
    },
    "789": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "790": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "1"
    },
    "791": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2962,
        3051
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "792": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "794": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "796": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "798": {
      "op": "SHL"
    },
    "799": {
      "op": "SUB"
    },
    "800": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3108
      ],
      "op": "DUP1",
      "path": "1"
    },
    "801": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3108
      ],
      "op": "DUP3",
      "path": "1"
    },
    "802": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3108
      ],
      "op": "AND",
      "path": "1"
    },
    "803": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3061,
        3084
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "805": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3108
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "806": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3108
      ],
      "op": "DUP2",
      "path": "1"
    },
    "807": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3108
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "808": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3095
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "810": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3108
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "812": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3108
      ],
      "op": "DUP2",
      "path": "1"
    },
    "813": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3108
      ],
      "op": "DUP2",
      "path": "1"
    },
    "814": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3108
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "815": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3108
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "817": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3108
      ],
      "op": "DUP1",
      "path": "1"
    },
    "818": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3108
      ],
      "op": "DUP5",
      "path": "1"
    },
    "819": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3108
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "820": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3121
      ],
      "op": "DUP8",
      "path": "1"
    },
    "821": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3121
      ],
      "op": "DUP6",
      "path": "1"
    },
    "822": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3121
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "823": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3121
      ],
      "op": "DUP3",
      "path": "1"
    },
    "824": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3121
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "825": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3121
      ],
      "op": "DUP1",
      "path": "1"
    },
    "826": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3121
      ],
      "op": "DUP5",
      "path": "1"
    },
    "827": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3087,
        3121
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "828": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3156,
        3167
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "830": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3156,
        3180
      ],
      "op": "DUP1",
      "path": "1"
    },
    "831": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3156,
        3180
      ],
      "op": "DUP5",
      "path": "1"
    },
    "832": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3156,
        3180
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "833": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3156,
        3180
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "834": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3156,
        3180
      ],
      "op": "DUP3",
      "path": "1"
    },
    "835": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3156,
        3180
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "836": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3156,
        3180
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "837": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP3",
      "path": "1"
    },
    "838": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "839": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xC0"
    },
    "841": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP2",
      "path": "1"
    },
    "842": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "ADD",
      "path": "1"
    },
    "843": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP5",
      "path": "1"
    },
    "844": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "845": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP2",
      "path": "1"
    },
    "846": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "847": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP2",
      "path": "1"
    },
    "848": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "849": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "851": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP1",
      "path": "1"
    },
    "852": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP4",
      "path": "1"
    },
    "853": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "ADD",
      "path": "1"
    },
    "854": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "855": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP6",
      "path": "1"
    },
    "856": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP3",
      "path": "1"
    },
    "857": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "ADD",
      "path": "1"
    },
    "858": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP6",
      "path": "1"
    },
    "859": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "860": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP6",
      "path": "1"
    },
    "861": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "862": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "864": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP3",
      "path": "1"
    },
    "865": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "ADD",
      "path": "1"
    },
    "866": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "867": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "868": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP2",
      "path": "1"
    },
    "869": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "ADD",
      "path": "1"
    },
    "870": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "871": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "872": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "873": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "874": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "875": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP6",
      "path": "1"
    },
    "876": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "ADD",
      "path": "1"
    },
    "877": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "878": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "880": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP4",
      "path": "1"
    },
    "881": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "ADD",
      "path": "1"
    },
    "882": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "883": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "884": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP5",
      "path": "1"
    },
    "885": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "ADD",
      "path": "1"
    },
    "886": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "887": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "889": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP3",
      "path": "1"
    },
    "890": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "ADD",
      "path": "1"
    },
    "891": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "892": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "894": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "895": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "896": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "ADD",
      "path": "1"
    },
    "897": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "898": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "899": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "900": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "AND",
      "path": "1"
    },
    "901": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "903": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "DUP4",
      "path": "1"
    },
    "904": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "ADD",
      "path": "1"
    },
    "905": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3131,
        3180
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "906": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3198,
        3218
      ],
      "op": "SWAP2",
      "path": "1",
      "statement": 1
    },
    "907": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3198,
        3218
      ],
      "op": "DUP3",
      "path": "1"
    },
    "908": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3198,
        3218
      ],
      "op": "ADD",
      "path": "1"
    },
    "909": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3198,
        3218
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "910": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3190,
        3253
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3D9"
    },
    "913": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3190,
        3253
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "914": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3190,
        3253
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "916": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3190,
        3253
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "917": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "921": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "923": {
      "op": "SHL"
    },
    "924": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3190,
        3253
      ],
      "op": "DUP2",
      "path": "1"
    },
    "925": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3190,
        3253
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "926": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "928": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3190,
        3253
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "930": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3190,
        3253
      ],
      "op": "DUP3",
      "path": "1"
    },
    "931": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3190,
        3253
      ],
      "op": "ADD",
      "path": "1"
    },
    "932": {
      "op": "MSTORE"
    },
    "933": {
      "op": "PUSH1",
      "value": "0x19"
    },
    "935": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "937": {
      "op": "DUP3"
    },
    "938": {
      "op": "ADD"
    },
    "939": {
      "op": "MSTORE"
    },
    "940": {
      "op": "PUSH32",
      "value": "0x4E6F20636F696E73206C65667420746F20776974686472617700000000000000"
    },
    "973": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "975": {
      "op": "DUP3"
    },
    "976": {
      "op": "ADD"
    },
    "977": {
      "op": "MSTORE"
    },
    "978": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "980": {
      "op": "ADD"
    },
    "981": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3190,
        3253
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x30E"
    },
    "984": {
      "op": "JUMP"
    },
    "985": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3190,
        3253
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "986": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3263,
        3285
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "988": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3394,
        3401
      ],
      "op": "DUP3",
      "path": "1"
    },
    "989": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3394,
        3409
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "991": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3394,
        3409
      ],
      "op": "ADD",
      "path": "1"
    },
    "992": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3394,
        3409
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "993": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3375,
        3390
      ],
      "op": "TIMESTAMP",
      "path": "1"
    },
    "994": {
      "branch": 25,
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3375,
        3409
      ],
      "op": "LT",
      "path": "1"
    },
    "995": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3371,
        3640
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x3F1"
    },
    "998": {
      "branch": 25,
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3371,
        3640
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "999": {
      "op": "POP"
    },
    "1000": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3445,
        3465
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 2,
      "value": "0x1"
    },
    "1002": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3445,
        3465
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1003": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3445,
        3465
      ],
      "op": "ADD",
      "path": "1"
    },
    "1004": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3445,
        3465
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1005": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3371,
        3640
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x412"
    },
    "1008": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3371,
        3640
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1009": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3371,
        3640
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1010": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3607,
        3629
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 3,
      "value": "0x4"
    },
    "1012": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3607,
        3629
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1013": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3607,
        3629
      ],
      "op": "ADD",
      "path": "1"
    },
    "1014": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3607,
        3629
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1015": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3577,
        3603
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "1017": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3577,
        3603
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1018": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3577,
        3603
      ],
      "op": "ADD",
      "path": "1"
    },
    "1019": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3577,
        3603
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1020": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3559,
        3603
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x405"
    },
    "1023": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3559,
        3603
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1024": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3559,
        3574
      ],
      "op": "TIMESTAMP",
      "path": "1"
    },
    "1025": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3559,
        3603
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE08"
    },
    "1028": {
      "fn": "DummyMerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        3559,
        3603
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1029": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3559,
        3603
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1030": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3558,
        3629
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x40F"
    },
    "1033": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3558,
        3629
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1034": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3558,
        3629
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1035": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3558,
        3629
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE1F"
    },
    "1038": {
      "fn": "DummyMerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        3558,
        3629
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1039": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3558,
        3629
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1040": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3538,
        3629
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1041": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3538,
        3629
      ],
      "op": "POP",
      "path": "1"
    },
    "1042": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3371,
        3640
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1043": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3699,
        3716
      ],
      "op": "DUP1",
      "path": "1",
      "statement": 4
    },
    "1044": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3682
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1045": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3695
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1047": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3695
      ],
      "op": "ADD",
      "path": "1"
    },
    "1048": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3695
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1050": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3716
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1051": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3716
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1052": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3716
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1053": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3716
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x426"
    },
    "1056": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3716
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1057": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3716
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1058": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3716
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE08"
    },
    "1061": {
      "fn": "DummyMerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        3675,
        3716
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1062": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3716
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1063": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3716
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1064": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3716
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1065": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3675,
        3716
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1066": {
      "op": "POP"
    },
    "1067": {
      "op": "POP"
    },
    "1068": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3755,
        3770
      ],
      "op": "TIMESTAMP",
      "path": "1",
      "statement": 5
    },
    "1069": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3726,
        3752
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "1071": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3726,
        3752
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1072": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3726,
        3752
      ],
      "op": "ADD",
      "path": "1"
    },
    "1073": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3726,
        3770
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1074": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3825,
        3842
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 6,
      "value": "0xA0"
    },
    "1076": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3825,
        3842
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1077": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3825,
        3842
      ],
      "op": "ADD",
      "path": "1"
    },
    "1078": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3825,
        3842
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1079": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1081": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1082": {
      "op": "PUSH4",
      "value": "0xA9059CBB"
    },
    "1087": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1089": {
      "op": "SHL"
    },
    "1090": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1091": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1092": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1094": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1096": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1098": {
      "op": "SHL"
    },
    "1099": {
      "op": "SUB"
    },
    "1100": {
      "op": "DUP7"
    },
    "1101": {
      "op": "DUP2"
    },
    "1102": {
      "op": "AND"
    },
    "1103": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1105": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1106": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "ADD",
      "path": "1"
    },
    "1107": {
      "op": "MSTORE"
    },
    "1108": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1110": {
      "op": "DUP3"
    },
    "1111": {
      "op": "ADD"
    },
    "1112": {
      "op": "DUP5"
    },
    "1113": {
      "op": "SWAP1"
    },
    "1114": {
      "op": "MSTORE"
    },
    "1115": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3852
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1116": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3852
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1117": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3852
      ],
      "op": "AND",
      "path": "1"
    },
    "1118": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3852
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1119": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3852
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xA9059CBB"
    },
    "1124": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3852
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1125": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1127": {
      "op": "ADD"
    },
    "1128": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1130": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1132": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1133": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1134": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1135": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "SUB",
      "path": "1"
    },
    "1136": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1137": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1139": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP8",
      "path": "1"
    },
    "1140": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1141": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "EXTCODESIZE",
      "path": "1"
    },
    "1142": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1143": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1144": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1145": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x481"
    },
    "1148": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1149": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1151": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1152": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "REVERT",
      "path": "1"
    },
    "1153": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1154": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "POP",
      "path": "1"
    },
    "1155": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "GAS",
      "path": "1"
    },
    "1156": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "CALL",
      "path": "1"
    },
    "1157": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1158": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1159": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1160": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x495"
    },
    "1163": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1164": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1165": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1167": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1168": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "1169": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1170": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1172": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "REVERT",
      "path": "1"
    },
    "1173": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1174": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "POP",
      "path": "1"
    },
    "1175": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "POP",
      "path": "1"
    },
    "1176": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "POP",
      "path": "1"
    },
    "1177": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "POP",
      "path": "1"
    },
    "1178": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1180": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1181": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "1182": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1184": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "NOT",
      "path": "1"
    },
    "1185": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "1187": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1188": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "ADD",
      "path": "1"
    },
    "1189": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "AND",
      "path": "1"
    },
    "1190": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1191": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "ADD",
      "path": "1"
    },
    "1192": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1193": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1195": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1196": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "POP",
      "path": "1"
    },
    "1197": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1198": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "ADD",
      "path": "1"
    },
    "1199": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1200": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x4B9"
    },
    "1203": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1204": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1205": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE3E"
    },
    "1208": {
      "fn": "DummyMerkleResistor.withdraw",
      "jump": "i",
      "offset": [
        3818,
        3884
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1209": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1210": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3818,
        3884
      ],
      "op": "POP",
      "path": "1"
    },
    "1211": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3972,
        3983
      ],
      "op": "DUP5",
      "path": "1",
      "statement": 7
    },
    "1212": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3918,
        3929
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1213": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1215": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1217": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1219": {
      "op": "SHL"
    },
    "1220": {
      "op": "SUB"
    },
    "1221": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "AND",
      "path": "1"
    },
    "1222": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x5FFB4B63DEC15BA26308386F1D5CA61843B29BA365511062A887D95AA27532D3"
    },
    "1255": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3931,
        3948
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1256": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3950,
        3957
      ],
      "op": "DUP7",
      "path": "1"
    },
    "1257": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3950,
        3970
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1259": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3950,
        3970
      ],
      "op": "ADD",
      "path": "1"
    },
    "1260": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3950,
        3970
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1261": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1263": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1264": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x503"
    },
    "1267": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1268": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1269": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1270": {
      "op": "SWAP2"
    },
    "1271": {
      "op": "DUP3"
    },
    "1272": {
      "op": "MSTORE"
    },
    "1273": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1275": {
      "op": "DUP3"
    },
    "1276": {
      "op": "ADD"
    },
    "1277": {
      "op": "MSTORE"
    },
    "1278": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1280": {
      "op": "ADD"
    },
    "1281": {
      "op": "SWAP1"
    },
    "1282": {
      "op": "JUMP"
    },
    "1283": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1284": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1286": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1287": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1288": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1289": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "SUB",
      "path": "1"
    },
    "1290": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1291": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        3899,
        3984
      ],
      "op": "LOG3",
      "path": "1"
    },
    "1292": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2952,
        3991
      ],
      "op": "POP",
      "path": "1"
    },
    "1293": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2952,
        3991
      ],
      "op": "POP",
      "path": "1"
    },
    "1294": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2952,
        3991
      ],
      "op": "POP",
      "path": "1"
    },
    "1295": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2888,
        3991
      ],
      "op": "POP",
      "path": "1"
    },
    "1296": {
      "fn": "DummyMerkleResistor.withdraw",
      "offset": [
        2888,
        3991
      ],
      "op": "POP",
      "path": "1"
    },
    "1297": {
      "fn": "DummyMerkleResistor.withdraw",
      "jump": "o",
      "offset": [
        2888,
        3991
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1298": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1299": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1370,
        1373
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 8,
      "value": "0x64"
    },
    "1301": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1357,
        1367
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1302": {
      "branch": 26,
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1357,
        1373
      ],
      "op": "LT",
      "path": "1"
    },
    "1303": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1349,
        1395
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x556"
    },
    "1306": {
      "branch": 26,
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1349,
        1395
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1307": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1349,
        1395
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1309": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1349,
        1395
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1310": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1314": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1316": {
      "op": "SHL"
    },
    "1317": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1349,
        1395
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1318": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1349,
        1395
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1319": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1321": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1349,
        1395
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1323": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1349,
        1395
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1324": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1349,
        1395
      ],
      "op": "ADD",
      "path": "1"
    },
    "1325": {
      "op": "MSTORE"
    },
    "1326": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "1328": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1330": {
      "op": "DUP3"
    },
    "1331": {
      "op": "ADD"
    },
    "1332": {
      "op": "MSTORE"
    },
    "1333": {
      "op": "PUSH17",
      "value": "0x706374557046726F6E74203E3D2031303"
    },
    "1351": {
      "op": "PUSH1",
      "value": "0x7C"
    },
    "1353": {
      "op": "SHL"
    },
    "1354": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1356": {
      "op": "DUP3"
    },
    "1357": {
      "op": "ADD"
    },
    "1358": {
      "op": "MSTORE"
    },
    "1359": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1361": {
      "op": "ADD"
    },
    "1362": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1349,
        1395
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x30E"
    },
    "1365": {
      "op": "JUMP"
    },
    "1366": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1349,
        1395
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1367": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1426,
        1436
      ],
      "op": "DUP3",
      "path": "1",
      "statement": 9
    },
    "1368": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1413,
        1423
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1369": {
      "branch": 27,
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1413,
        1436
      ],
      "op": "LT",
      "path": "1"
    },
    "1370": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1405,
        1480
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5B5"
    },
    "1373": {
      "branch": 27,
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1405,
        1480
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1374": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1405,
        1480
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1376": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1405,
        1480
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1377": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1381": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1383": {
      "op": "SHL"
    },
    "1384": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1405,
        1480
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1385": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1405,
        1480
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1386": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1388": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1405,
        1480
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1390": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1405,
        1480
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1391": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1405,
        1480
      ],
      "op": "ADD",
      "path": "1"
    },
    "1392": {
      "op": "MSTORE"
    },
    "1393": {
      "op": "PUSH1",
      "value": "0x27"
    },
    "1395": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1397": {
      "op": "DUP3"
    },
    "1398": {
      "op": "ADD"
    },
    "1399": {
      "op": "MSTORE"
    },
    "1400": {
      "op": "PUSH32",
      "value": "0x6D696E456E6454696D65206D757374206265206C657373207468616E206D6178"
    },
    "1433": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1435": {
      "op": "DUP3"
    },
    "1436": {
      "op": "ADD"
    },
    "1437": {
      "op": "MSTORE"
    },
    "1438": {
      "op": "PUSH7",
      "value": "0x456E6454696D65"
    },
    "1446": {
      "op": "PUSH1",
      "value": "0xC8"
    },
    "1448": {
      "op": "SHL"
    },
    "1449": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1451": {
      "op": "DUP3"
    },
    "1452": {
      "op": "ADD"
    },
    "1453": {
      "op": "MSTORE"
    },
    "1454": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1456": {
      "op": "ADD"
    },
    "1457": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1405,
        1480
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x30E"
    },
    "1460": {
      "op": "JUMP"
    },
    "1461": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1405,
        1480
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1462": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 10,
      "value": "0x40"
    },
    "1464": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1465": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1466": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xC0"
    },
    "1468": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1469": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1471": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1472": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1473": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1540,
        1547
      ],
      "op": "DUP8",
      "path": "1"
    },
    "1474": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1475": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1476": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1478": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1479": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1561,
        1569
      ],
      "op": "DUP7",
      "path": "1"
    },
    "1480": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1481": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1482": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1484": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1485": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1583,
        1593
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1486": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1487": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1488": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1490": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1491": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1607,
        1617
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1492": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1493": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1494": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1496": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1497": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1631,
        1641
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1498": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1499": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1500": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1502": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1503": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1655,
        1667
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1504": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1506": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1508": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1510": {
      "op": "SHL"
    },
    "1511": {
      "op": "SUB"
    },
    "1512": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "AND",
      "path": "1"
    },
    "1513": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1514": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1515": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1516,
        1677
      ],
      "op": "POP",
      "path": "1"
    },
    "1516": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1501
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "1518": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1520": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1504,
        1512
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1521": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1504,
        1512
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1523": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1502,
        1512
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1524": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1502,
        1512
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1525": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1502,
        1512
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5FD"
    },
    "1528": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1502,
        1512
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1529": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1502,
        1512
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE67"
    },
    "1532": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "jump": "i",
      "offset": [
        1502,
        1512
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1533": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1502,
        1512
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1534": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1502,
        1512
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1535": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1502,
        1512
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1536": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1502,
        1512
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1537": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1502,
        1512
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1538": {
      "op": "POP"
    },
    "1539": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1540": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1541": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1543": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1544": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1545": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "ADD",
      "path": "1"
    },
    "1546": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1547": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1548": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1549": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1550": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1552": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1553": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1554": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "ADD",
      "path": "1"
    },
    "1555": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1557": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1558": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1559": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1513
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1560": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1561": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1562": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1563": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1564": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1565": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1566": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1567": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1568": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1570": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1571": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1572": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1573": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1574": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1575": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1576": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1577": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "1579": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1580": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1581": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1582": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "1584": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1585": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1586": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1587": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "1589": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1590": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1591": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1592": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "1594": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1595": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1596": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1597": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1599": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1600": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1601": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1602": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1604": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1605": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1606": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1607": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1608": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "1610": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1611": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1612": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "ADD",
      "path": "1"
    },
    "1613": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1614": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1615": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1617": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1619": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1621": {
      "op": "SHL"
    },
    "1622": {
      "op": "SUB"
    },
    "1623": {
      "op": "NOT"
    },
    "1624": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "AND",
      "path": "1"
    },
    "1625": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1627": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1629": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1631": {
      "op": "SHL"
    },
    "1632": {
      "op": "SUB"
    },
    "1633": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "SWAP6",
      "path": "1"
    },
    "1634": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "DUP7",
      "path": "1"
    },
    "1635": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "AND",
      "path": "1"
    },
    "1636": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "OR",
      "path": "1"
    },
    "1637": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1638": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1490,
        1677
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "1639": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1708,
        1716
      ],
      "op": "SLOAD",
      "path": "1",
      "statement": 11
    },
    "1640": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1641": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1642": {
      "op": "DUP11"
    },
    "1643": {
      "op": "DUP2"
    },
    "1644": {
      "op": "MSTORE"
    },
    "1645": {
      "op": "SWAP3"
    },
    "1646": {
      "op": "DUP4"
    },
    "1647": {
      "op": "ADD"
    },
    "1648": {
      "op": "DUP10"
    },
    "1649": {
      "op": "SWAP1"
    },
    "1650": {
      "op": "MSTORE"
    },
    "1651": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1652": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1653": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "AND",
      "path": "1"
    },
    "1654": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1655": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1708,
        1716
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1656": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45"
    },
    "1689": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1690": {
      "op": "ADD"
    },
    "1691": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1693": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1694": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1695": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1696": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "SUB",
      "path": "1"
    },
    "1697": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1698": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1692,
        1750
      ],
      "op": "LOG3",
      "path": "1"
    },
    "1699": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "POP",
      "path": "1"
    },
    "1700": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "POP",
      "path": "1"
    },
    "1701": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "POP",
      "path": "1"
    },
    "1702": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "POP",
      "path": "1"
    },
    "1703": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "POP",
      "path": "1"
    },
    "1704": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "offset": [
        1201,
        1757
      ],
      "op": "POP",
      "path": "1"
    },
    "1705": {
      "fn": "DummyMerkleResistor.addMerkleTree",
      "jump": "o",
      "offset": [
        1201,
        1757
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1706": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1707": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4131,
        4135
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1709": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4137,
        4141
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1710": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4143,
        4147
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1712": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4149,
        4153
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1713": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4183,
        4191
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1715": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4183,
        4191
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1716": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4169,
        4180
      ],
      "op": "DUP9",
      "path": "1"
    },
    "1717": {
      "branch": 28,
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4169,
        4191
      ],
      "op": "GT",
      "path": "1"
    },
    "1718": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4165,
        4241
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1719": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4165,
        4241
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6CB"
    },
    "1722": {
      "branch": 28,
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4165,
        4241
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1723": {
      "op": "POP"
    },
    "1724": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4215,
        4220
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 12,
      "value": "0x0"
    },
    "1726": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4215,
        4220
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1727": {
      "op": "POP"
    },
    "1728": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4215,
        4220
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1729": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4215,
        4220
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1730": {
      "op": "POP"
    },
    "1731": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4215,
        4220
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1732": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4215,
        4220
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1733": {
      "op": "POP"
    },
    "1734": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4215,
        4220
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1735": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4207,
        4230
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x83D"
    },
    "1738": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4207,
        4230
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1739": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4165,
        4241
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1740": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4273
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1742": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4276,
        4300
      ],
      "op": "DUP9",
      "path": "1"
    },
    "1743": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4276,
        4300
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1744": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4276,
        4300
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1745": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4276,
        4287
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "1747": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4276,
        4300
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "1749": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4276,
        4300
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1750": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4276,
        4300
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1751": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4276,
        4300
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1752": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4276,
        4300
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1754": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4276,
        4300
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1755": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4276,
        4300
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1756": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4276,
        4300
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1757": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4276,
        4300
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "1758": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1759": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1760": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xC0"
    },
    "1762": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1763": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "ADD",
      "path": "1"
    },
    "1764": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP6",
      "path": "1"
    },
    "1765": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1766": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1767": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1768": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1769": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1770": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "1772": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1773": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "ADD",
      "path": "1"
    },
    "1774": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1775": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1776": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1777": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "ADD",
      "path": "1"
    },
    "1778": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1779": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1780": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1781": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1782": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "1784": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1785": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "ADD",
      "path": "1"
    },
    "1786": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1787": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1788": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1789": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "ADD",
      "path": "1"
    },
    "1790": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1791": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1792": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "1793": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1794": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1795": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1796": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "ADD",
      "path": "1"
    },
    "1797": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1798": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "1800": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1801": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "ADD",
      "path": "1"
    },
    "1802": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1803": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1804": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1805": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "1807": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1808": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "ADD",
      "path": "1"
    },
    "1809": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1810": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "1812": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1813": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "ADD",
      "path": "1"
    },
    "1814": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1815": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "1817": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1818": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "1819": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "ADD",
      "path": "1"
    },
    "1820": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "1821": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1823": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1825": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1827": {
      "op": "SHL"
    },
    "1828": {
      "op": "SUB"
    },
    "1829": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "AND",
      "path": "1"
    },
    "1830": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "1832": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1833": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "ADD",
      "path": "1"
    },
    "1834": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "1835": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4251,
        4300
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1836": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4315,
        4344
      ],
      "op": "DUP9",
      "path": "1"
    },
    "1837": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4315,
        4344
      ],
      "op": "GT",
      "path": "1"
    },
    "1838": {
      "branch": 29,
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4315,
        4344
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1839": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4315,
        4377
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x73B"
    },
    "1842": {
      "branch": 29,
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4315,
        4377
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1843": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4315,
        4377
      ],
      "op": "POP",
      "path": "1"
    },
    "1844": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4362,
        4366
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1845": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4362,
        4377
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1847": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4362,
        4377
      ],
      "op": "ADD",
      "path": "1"
    },
    "1848": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4362,
        4377
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1849": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4348,
        4359
      ],
      "op": "DUP9",
      "path": "1"
    },
    "1850": {
      "branch": 30,
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4348,
        4377
      ],
      "op": "LT",
      "path": "1"
    },
    "1851": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4315,
        4377
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1852": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4311,
        4427
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1853": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4311,
        4427
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x754"
    },
    "1856": {
      "branch": 30,
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4311,
        4427
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1857": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4401,
        4406
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 13,
      "value": "0x0"
    },
    "1859": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4408,
        4409
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1860": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4411,
        4412
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1862": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4414,
        4415
      ],
      "op": "DUP1",
      "path": "1"
    },
    "1863": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4393,
        4416
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1864": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4393,
        4416
      ],
      "op": "POP",
      "path": "1"
    },
    "1865": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4393,
        4416
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1866": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4393,
        4416
      ],
      "op": "POP",
      "path": "1"
    },
    "1867": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4393,
        4416
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1868": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4393,
        4416
      ],
      "op": "POP",
      "path": "1"
    },
    "1869": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4393,
        4416
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "1870": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4393,
        4416
      ],
      "op": "POP",
      "path": "1"
    },
    "1871": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4393,
        4416
      ],
      "op": "POP",
      "path": "1"
    },
    "1872": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4393,
        4416
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x83D"
    },
    "1875": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4393,
        4416
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1876": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4311,
        4427
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1877": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4437,
        4452
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1879": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4481,
        4485
      ],
      "op": "DUP2",
      "path": "1"
    },
    "1880": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4481,
        4496
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "1882": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4481,
        4496
      ],
      "op": "ADD",
      "path": "1"
    },
    "1883": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4481,
        4496
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1884": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4466,
        4477
      ],
      "op": "DUP10",
      "path": "1"
    },
    "1885": {
      "branch": 31,
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4466,
        4496
      ],
      "op": "EQ",
      "path": "1"
    },
    "1886": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4462,
        4796
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "1887": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4462,
        4796
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x769"
    },
    "1890": {
      "branch": 31,
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4462,
        4796
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "1891": {
      "op": "POP"
    },
    "1892": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4525,
        4541
      ],
      "op": "DUP6",
      "path": "1",
      "statement": 14
    },
    "1893": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4462,
        4796
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7DA"
    },
    "1896": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4462,
        4796
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1897": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4462,
        4796
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1898": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4572,
        4589
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "1900": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4663,
        4667
      ],
      "op": "DUP3",
      "path": "1"
    },
    "1901": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4663,
        4678
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1903": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4663,
        4678
      ],
      "op": "ADD",
      "path": "1"
    },
    "1904": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4663,
        4678
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1905": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4645,
        4649
      ],
      "op": "DUP4",
      "path": "1"
    },
    "1906": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4645,
        4660
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "1908": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4645,
        4660
      ],
      "op": "ADD",
      "path": "1"
    },
    "1909": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4645,
        4660
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1910": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4645,
        4678
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x77F"
    },
    "1913": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4645,
        4678
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1914": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4645,
        4678
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1915": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4645,
        4678
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE08"
    },
    "1918": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4645,
        4678
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1919": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4645,
        4678
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1920": {
      "offset": [
        883,
        890
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0xF4240"
    },
    "1924": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4593,
        4628
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x78D"
    },
    "1927": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4612,
        4628
      ],
      "op": "DUP12",
      "path": "1"
    },
    "1928": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4593,
        4609
      ],
      "op": "DUP12",
      "path": "1"
    },
    "1929": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4593,
        4628
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE08"
    },
    "1932": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4593,
        4628
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1933": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4593,
        4628
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1934": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4592,
        4641
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x797"
    },
    "1937": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4592,
        4641
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1938": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4592,
        4641
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1939": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4592,
        4641
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE1F"
    },
    "1942": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4592,
        4641
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1943": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4592,
        4641
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1944": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4592,
        4679
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7A1"
    },
    "1947": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4592,
        4679
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1948": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4592,
        4679
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1949": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4592,
        4679
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE82"
    },
    "1952": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4592,
        4679
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1953": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4592,
        4679
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1954": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4572,
        4679
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1955": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4572,
        4679
      ],
      "op": "POP",
      "path": "1"
    },
    "1956": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4769,
        4785
      ],
      "op": "DUP9",
      "path": "1",
      "statement": 15
    },
    "1957": {
      "offset": [
        883,
        890
      ],
      "op": "PUSH3",
      "path": "1",
      "value": "0xF4240"
    },
    "1961": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4737,
        4741
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1962": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4737,
        4752
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "1964": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4737,
        4752
      ],
      "op": "ADD",
      "path": "1"
    },
    "1965": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4737,
        4752
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "1966": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4723,
        4734
      ],
      "op": "DUP13",
      "path": "1"
    },
    "1967": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4723,
        4752
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7B8"
    },
    "1970": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4723,
        4752
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1971": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4723,
        4752
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1972": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4723,
        4752
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE08"
    },
    "1975": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4723,
        4752
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1976": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4723,
        4752
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1977": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4707,
        4753
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7C2"
    },
    "1980": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4707,
        4753
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1981": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4707,
        4719
      ],
      "op": "DUP5",
      "path": "1"
    },
    "1982": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4707,
        4753
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE1F"
    },
    "1985": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4707,
        4753
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1986": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4707,
        4753
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1987": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4707,
        4765
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7CC"
    },
    "1990": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4707,
        4765
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "1991": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4707,
        4765
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "1992": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4707,
        4765
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE82"
    },
    "1995": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4707,
        4765
      ],
      "op": "JUMP",
      "path": "1"
    },
    "1996": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4707,
        4765
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "1997": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4706,
        4785
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7D6"
    },
    "2000": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4706,
        4785
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2001": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4706,
        4785
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2002": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4706,
        4785
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xEA4"
    },
    "2005": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4706,
        4785
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2006": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4706,
        4785
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2007": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4693,
        4785
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2008": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4693,
        4785
      ],
      "op": "POP",
      "path": "1"
    },
    "2009": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4558,
        4796
      ],
      "op": "POP",
      "path": "1"
    },
    "2010": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4462,
        4796
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2011": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4806,
        4825
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2013": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4876,
        4893
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7E7"
    },
    "2016": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4876,
        4887
      ],
      "op": "DUP11",
      "path": "1"
    },
    "2017": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4890,
        4893
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x64"
    },
    "2019": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4876,
        4893
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE1F"
    },
    "2022": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4876,
        4893
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2023": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4876,
        4893
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2024": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4855,
        4870
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2026": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4855,
        4870
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2027": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4855,
        4870
      ],
      "op": "ADD",
      "path": "1"
    },
    "2028": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4855,
        4870
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2029": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4843,
        4870
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7F7"
    },
    "2032": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4843,
        4870
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2033": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4848,
        4851
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x64"
    },
    "2035": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4843,
        4870
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE08"
    },
    "2038": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4843,
        4870
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2039": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4843,
        4870
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2040": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4829,
        4871
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x801"
    },
    "2043": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4829,
        4871
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2044": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4829,
        4839
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2045": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4829,
        4871
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE1F"
    },
    "2048": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4829,
        4871
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2049": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4829,
        4871
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2050": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4828,
        4894
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x80B"
    },
    "2053": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4828,
        4894
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2054": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4828,
        4894
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2055": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4828,
        4894
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE82"
    },
    "2058": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4828,
        4894
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2059": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4828,
        4894
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2060": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4806,
        4894
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2061": {
      "op": "POP"
    },
    "2062": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4904,
        4918
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2064": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4954,
        4981
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x819"
    },
    "2067": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4806,
        4894
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2068": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4954,
        4964
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2069": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4954,
        4981
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE82"
    },
    "2072": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4954,
        4981
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2073": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4954,
        4981
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2074": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4921,
        4950
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x823"
    },
    "2077": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4939,
        4950
      ],
      "op": "DUP13",
      "path": "1"
    },
    "2078": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4921,
        4936
      ],
      "op": "TIMESTAMP",
      "path": "1"
    },
    "2079": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4921,
        4950
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xEA4"
    },
    "2082": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4921,
        4950
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2083": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4921,
        4950
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2084": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4921,
        4982
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x82D"
    },
    "2087": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4921,
        4982
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2088": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4921,
        4982
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2089": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4921,
        4982
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE08"
    },
    "2092": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "i",
      "offset": [
        4921,
        4982
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2093": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4921,
        4982
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2094": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        5001,
        5005
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 16,
      "value": "0x1"
    },
    "2096": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        5001,
        5005
      ],
      "op": "SWAP9",
      "path": "1"
    },
    "2097": {
      "op": "POP"
    },
    "2098": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        5007,
        5017
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "2099": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        5007,
        5017
      ],
      "op": "SWAP7",
      "path": "1"
    },
    "2100": {
      "op": "POP"
    },
    "2101": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        5019,
        5033
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2102": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        5019,
        5033
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "2103": {
      "op": "POP"
    },
    "2104": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4904,
        4982
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2105": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        4904,
        4982
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "2106": {
      "op": "POP"
    },
    "2107": {
      "op": "POP"
    },
    "2108": {
      "op": "POP"
    },
    "2109": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2110": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "2111": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "POP",
      "path": "1"
    },
    "2112": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "2113": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "POP",
      "path": "1"
    },
    "2114": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "2115": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "POP",
      "path": "1"
    },
    "2116": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "2117": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2118": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "offset": [
        3997,
        5052
      ],
      "op": "POP",
      "path": "1"
    },
    "2119": {
      "fn": "DummyMerkleResistor.verifyVestingSchedule",
      "jump": "o",
      "offset": [
        3997,
        5052
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2120": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2121": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1937,
        1947
      ],
      "op": "CALLER",
      "path": "1",
      "statement": 17
    },
    "2122": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2124": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2126": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2128": {
      "op": "SHL"
    },
    "2129": {
      "op": "SUB"
    },
    "2130": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1937,
        1962
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2131": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1937,
        1962
      ],
      "op": "AND",
      "path": "1"
    },
    "2132": {
      "branch": 32,
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1937,
        1962
      ],
      "op": "EQ",
      "path": "1"
    },
    "2133": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1929,
        2003
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8AC"
    },
    "2136": {
      "branch": 32,
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1929,
        2003
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2137": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1929,
        2003
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2139": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1929,
        2003
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2140": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2144": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2146": {
      "op": "SHL"
    },
    "2147": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1929,
        2003
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2148": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1929,
        2003
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2149": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2151": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1929,
        2003
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2153": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1929,
        2003
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2154": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1929,
        2003
      ],
      "op": "ADD",
      "path": "1"
    },
    "2155": {
      "op": "MSTORE"
    },
    "2156": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2158": {
      "op": "DUP1"
    },
    "2159": {
      "op": "DUP3"
    },
    "2160": {
      "op": "ADD"
    },
    "2161": {
      "op": "MSTORE"
    },
    "2162": {
      "op": "PUSH32",
      "value": "0x43616E206F6E6C7920696E697469616C697A6520796F7572206F776E20747261"
    },
    "2195": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2197": {
      "op": "DUP3"
    },
    "2198": {
      "op": "ADD"
    },
    "2199": {
      "op": "MSTORE"
    },
    "2200": {
      "op": "PUSH4",
      "value": "0x6E636865"
    },
    "2205": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2207": {
      "op": "SHL"
    },
    "2208": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2210": {
      "op": "DUP3"
    },
    "2211": {
      "op": "ADD"
    },
    "2212": {
      "op": "MSTORE"
    },
    "2213": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2215": {
      "op": "ADD"
    },
    "2216": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1929,
        2003
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x30E"
    },
    "2219": {
      "op": "JUMP"
    },
    "2220": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1929,
        2003
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2221": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2223": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2225": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2227": {
      "op": "SHL"
    },
    "2228": {
      "op": "SUB"
    },
    "2229": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2046
      ],
      "op": "DUP6",
      "path": "1",
      "statement": 18
    },
    "2230": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2046
      ],
      "op": "AND",
      "path": "1"
    },
    "2231": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2046
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2233": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2046
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2234": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2046
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2235": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2046
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2236": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2033
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "2238": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2046
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2240": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2046
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2241": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2046
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2242": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2046
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2243": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2046
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2245": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2046
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2246": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2046
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2247": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2046
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "2248": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2059
      ],
      "op": "DUP10",
      "path": "1"
    },
    "2249": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2059
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2250": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2059
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2251": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2059
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2252": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2059
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2253": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2059
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2254": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2059
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2255": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2059
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "2256": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2059
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2257": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2059
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "2259": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2022,
        2059
      ],
      "op": "AND",
      "path": "1"
    },
    "2260": {
      "branch": 33,
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2021,
        2059
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2261": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2013,
        2083
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x916"
    },
    "2264": {
      "branch": 33,
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2013,
        2083
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2265": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2013,
        2083
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2267": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2013,
        2083
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2268": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2272": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2274": {
      "op": "SHL"
    },
    "2275": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2013,
        2083
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2276": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2013,
        2083
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2277": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2279": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2013,
        2083
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2281": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2013,
        2083
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2282": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2013,
        2083
      ],
      "op": "ADD",
      "path": "1"
    },
    "2283": {
      "op": "MSTORE"
    },
    "2284": {
      "op": "PUSH1",
      "value": "0x13"
    },
    "2286": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2288": {
      "op": "DUP3"
    },
    "2289": {
      "op": "ADD"
    },
    "2290": {
      "op": "MSTORE"
    },
    "2291": {
      "op": "PUSH19",
      "value": "0x105B1C9958591E481A5B9A5D1A585B1A5E9959"
    },
    "2311": {
      "op": "PUSH1",
      "value": "0x6A"
    },
    "2313": {
      "op": "SHL"
    },
    "2314": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2316": {
      "op": "DUP3"
    },
    "2317": {
      "op": "ADD"
    },
    "2318": {
      "op": "MSTORE"
    },
    "2319": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2321": {
      "op": "ADD"
    },
    "2322": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2013,
        2083
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x30E"
    },
    "2325": {
      "op": "JUMP"
    },
    "2326": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2013,
        2083
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2327": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2329": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2330": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2331": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2333": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2335": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2337": {
      "op": "SHL"
    },
    "2338": {
      "op": "SUB"
    },
    "2339": {
      "op": "DUP8"
    },
    "2340": {
      "op": "AND"
    },
    "2341": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2343": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2344": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "ADD",
      "path": "1"
    },
    "2345": {
      "op": "MSTORE"
    },
    "2346": {
      "op": "SWAP1"
    },
    "2347": {
      "op": "DUP2"
    },
    "2348": {
      "op": "ADD"
    },
    "2349": {
      "op": "DUP5"
    },
    "2350": {
      "op": "SWAP1"
    },
    "2351": {
      "op": "MSTORE"
    },
    "2352": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2354": {
      "op": "DUP2"
    },
    "2355": {
      "op": "ADD"
    },
    "2356": {
      "op": "DUP4"
    },
    "2357": {
      "op": "SWAP1"
    },
    "2358": {
      "op": "MSTORE"
    },
    "2359": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2093,
        2105
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2361": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2093,
        2105
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2362": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2364": {
      "op": "ADD"
    },
    "2365": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2367": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2368": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2369": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2371": {
      "op": "NOT"
    },
    "2372": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2373": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2374": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "SUB",
      "path": "1"
    },
    "2375": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "ADD",
      "path": "1"
    },
    "2376": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2377": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2378": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2379": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2380": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2381": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2108,
        2178
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2382": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2108,
        2178
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2383": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2118,
        2177
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2385": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2108,
        2178
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2386": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2108,
        2178
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2387": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2108,
        2178
      ],
      "op": "ADD",
      "path": "1"
    },
    "2388": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2108,
        2178
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "2389": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2210
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2391": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2213,
        2237
      ],
      "op": "DUP12",
      "path": "1"
    },
    "2392": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2213,
        2237
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2393": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2213,
        2237
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2394": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2213,
        2224
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "2396": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2213,
        2237
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2397": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2213,
        2237
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2398": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2213,
        2237
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2399": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2213,
        2237
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2400": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2213,
        2237
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2401": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2213,
        2237
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2402": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2213,
        2237
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "2403": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xC0"
    },
    "2405": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2406": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "ADD",
      "path": "1"
    },
    "2407": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP6",
      "path": "1"
    },
    "2408": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2409": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2410": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2411": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2412": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP8",
      "path": "1"
    },
    "2413": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2414": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2416": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2417": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "ADD",
      "path": "1"
    },
    "2418": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2419": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "2420": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP8",
      "path": "1"
    },
    "2421": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "ADD",
      "path": "1"
    },
    "2422": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "2423": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2424": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "2425": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2426": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "2428": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2429": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "ADD",
      "path": "1"
    },
    "2430": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2431": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2432": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2433": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "ADD",
      "path": "1"
    },
    "2434": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2435": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2436": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2437": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "ADD",
      "path": "1"
    },
    "2438": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2439": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "2441": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2442": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "ADD",
      "path": "1"
    },
    "2443": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2444": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2446": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2447": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2448": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "ADD",
      "path": "1"
    },
    "2449": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2450": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2452": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP8",
      "path": "1"
    },
    "2453": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "ADD",
      "path": "1"
    },
    "2454": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2455": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "2457": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2458": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2459": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "ADD",
      "path": "1"
    },
    "2460": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2461": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2463": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2465": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2467": {
      "op": "SHL"
    },
    "2468": {
      "op": "SUB"
    },
    "2469": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "AND",
      "path": "1"
    },
    "2470": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "2472": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2473": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "ADD",
      "path": "1"
    },
    "2474": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2475": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "SWAP3",
      "path": "1",
      "statement": 19
    },
    "2476": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2477": {
      "op": "PUSH4",
      "value": "0x2769CD1F"
    },
    "2482": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "2484": {
      "op": "SHL"
    },
    "2485": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2486": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2487": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2108,
        2178
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2488": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2108,
        2178
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "2489": {
      "op": "POP"
    },
    "2490": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2282
      ],
      "op": "PUSH20",
      "path": "1",
      "value": "0x0"
    },
    "2511": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2282
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "2512": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2282
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x9DA7347C"
    },
    "2517": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2282
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "2518": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x9E5"
    },
    "2521": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "2522": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2523": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2188,
        2237
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2524": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2108,
        2178
      ],
      "op": "DUP8",
      "path": "1"
    },
    "2525": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2108,
        2178
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2526": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2289,
        2294
      ],
      "op": "DUP10",
      "path": "1"
    },
    "2527": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2289,
        2294
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2528": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "ADD",
      "path": "1"
    },
    "2529": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xEBC"
    },
    "2532": {
      "fn": "DummyMerkleResistor.initialize",
      "jump": "i",
      "offset": [
        2255,
        2295
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2533": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2534": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2536": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2538": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2539": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2540": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2541": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "SUB",
      "path": "1"
    },
    "2542": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2543": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DUP7",
      "path": "1"
    },
    "2544": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2545": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "EXTCODESIZE",
      "path": "1"
    },
    "2546": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2547": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2548": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2549": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x9FD"
    },
    "2552": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2553": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2555": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2556": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "REVERT",
      "path": "1"
    },
    "2557": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2558": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "POP",
      "path": "1"
    },
    "2559": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "GAS",
      "path": "1"
    },
    "2560": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DELEGATECALL",
      "path": "1"
    },
    "2561": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2562": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2563": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "2564": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA11"
    },
    "2567": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2568": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2569": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2571": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2572": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "2573": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2574": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2576": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "REVERT",
      "path": "1"
    },
    "2577": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2578": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "POP",
      "path": "1"
    },
    "2579": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "POP",
      "path": "1"
    },
    "2580": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "POP",
      "path": "1"
    },
    "2581": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "POP",
      "path": "1"
    },
    "2582": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2584": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2585": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "2586": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "2588": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "NOT",
      "path": "1"
    },
    "2589": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1F"
    },
    "2591": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2592": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "ADD",
      "path": "1"
    },
    "2593": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "AND",
      "path": "1"
    },
    "2594": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2595": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "ADD",
      "path": "1"
    },
    "2596": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2597": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2599": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2600": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "POP",
      "path": "1"
    },
    "2601": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2602": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "ADD",
      "path": "1"
    },
    "2603": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2604": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA35"
    },
    "2607": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2608": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2609": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE3E"
    },
    "2612": {
      "fn": "DummyMerkleResistor.initialize",
      "jump": "i",
      "offset": [
        2255,
        2295
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2613": {
      "branch": 34,
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2255,
        2295
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2614": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2247,
        2332
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA81"
    },
    "2617": {
      "branch": 34,
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2247,
        2332
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2618": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2247,
        2332
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2620": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2247,
        2332
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2621": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2625": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2627": {
      "op": "SHL"
    },
    "2628": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2247,
        2332
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2629": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2247,
        2332
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2630": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2632": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2247,
        2332
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2634": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2247,
        2332
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2635": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2247,
        2332
      ],
      "op": "ADD",
      "path": "1"
    },
    "2636": {
      "op": "DUP2"
    },
    "2637": {
      "op": "SWAP1"
    },
    "2638": {
      "op": "MSTORE"
    },
    "2639": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2641": {
      "op": "DUP3"
    },
    "2642": {
      "op": "ADD"
    },
    "2643": {
      "op": "MSTORE"
    },
    "2644": {
      "op": "PUSH32",
      "value": "0x5468652070726F6F6620636F756C64206E6F742062652076657269666965642E"
    },
    "2677": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2679": {
      "op": "DUP3"
    },
    "2680": {
      "op": "ADD"
    },
    "2681": {
      "op": "MSTORE"
    },
    "2682": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2684": {
      "op": "ADD"
    },
    "2685": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2247,
        2332
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x30E"
    },
    "2688": {
      "op": "JUMP"
    },
    "2689": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2247,
        2332
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2690": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2692": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2694": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2696": {
      "op": "SHL"
    },
    "2697": {
      "op": "SUB"
    },
    "2698": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "DUP8",
      "path": "1",
      "statement": 20
    },
    "2699": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "AND",
      "path": "1"
    },
    "2700": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2702": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2703": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2704": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2705": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2353
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "2707": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2709": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2710": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2711": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2712": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2714": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2715": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2716": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "2717": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2379
      ],
      "op": "DUP12",
      "path": "1"
    },
    "2718": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2379
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2719": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2379
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2720": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2379
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2721": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2379
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2722": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2379
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2723": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2379
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2724": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2379
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "2725": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2386
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2726": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2386
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "2727": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "2729": {
      "op": "NOT"
    },
    "2730": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2386
      ],
      "op": "AND",
      "path": "1"
    },
    "2731": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2382,
        2386
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2733": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2386
      ],
      "op": "OR",
      "path": "1"
    },
    "2734": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2386
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2735": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2386
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "2736": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2737": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2738": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2342,
        2366
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2739": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2466,
        2549
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xABE"
    },
    "2742": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2367,
        2378
      ],
      "op": "DUP13",
      "path": "1"
    },
    "2743": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2501,
        2512
      ],
      "op": "DUP12",
      "path": "1"
    },
    "2744": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2514,
        2530
      ],
      "op": "DUP12",
      "path": "1"
    },
    "2745": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2532,
        2548
      ],
      "op": "DUP12",
      "path": "1"
    },
    "2746": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2466,
        2487
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6AA"
    },
    "2749": {
      "fn": "DummyMerkleResistor.initialize",
      "jump": "i",
      "offset": [
        2466,
        2549
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2750": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2466,
        2549
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2751": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2397,
        2549
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "2752": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2397,
        2549
      ],
      "op": "POP",
      "path": "1"
    },
    "2753": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2397,
        2549
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "2754": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2397,
        2549
      ],
      "op": "POP",
      "path": "1"
    },
    "2755": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2397,
        2549
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "2756": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2397,
        2549
      ],
      "op": "POP",
      "path": "1"
    },
    "2757": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2397,
        2549
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "2758": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2397,
        2549
      ],
      "op": "POP",
      "path": "1"
    },
    "2759": {
      "branch": 35,
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2567,
        2572
      ],
      "op": "DUP4",
      "path": "1",
      "statement": 21
    },
    "2760": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2559,
        2601
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB13"
    },
    "2763": {
      "branch": 35,
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2559,
        2601
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "2764": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2559,
        2601
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2766": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2559,
        2601
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2767": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2771": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2773": {
      "op": "SHL"
    },
    "2774": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2559,
        2601
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2775": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2559,
        2601
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2776": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2778": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2559,
        2601
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2780": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2559,
        2601
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2781": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2559,
        2601
      ],
      "op": "ADD",
      "path": "1"
    },
    "2782": {
      "op": "MSTORE"
    },
    "2783": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "2785": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2787": {
      "op": "DUP3"
    },
    "2788": {
      "op": "ADD"
    },
    "2789": {
      "op": "MSTORE"
    },
    "2790": {
      "op": "PUSH32",
      "value": "0x496E76616C69642076657374696E67207363686564756C650000000000000000"
    },
    "2823": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2825": {
      "op": "DUP3"
    },
    "2826": {
      "op": "ADD"
    },
    "2827": {
      "op": "MSTORE"
    },
    "2828": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2830": {
      "op": "ADD"
    },
    "2831": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2559,
        2601
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x30E"
    },
    "2834": {
      "op": "JUMP"
    },
    "2835": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2559,
        2601
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2836": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 22,
      "value": "0x40"
    },
    "2838": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2839": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2840": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xC0"
    },
    "2842": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2843": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2845": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2846": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "DUP1",
      "path": "1"
    },
    "2847": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2670,
        2680
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2848": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2849": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2850": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2852": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2853": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2694,
        2704
      ],
      "op": "DUP5",
      "path": "1"
    },
    "2854": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2855": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2856": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2858": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2859": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2718,
        2727
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2860": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2861": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2862": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2864": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2865": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2759,
        2770
      ],
      "op": "DUP12",
      "path": "1"
    },
    "2866": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2741,
        2756
      ],
      "op": "TIMESTAMP",
      "path": "1"
    },
    "2867": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2741,
        2770
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xB3C"
    },
    "2870": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2741,
        2770
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "2871": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2741,
        2770
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2872": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2741,
        2770
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xEA4"
    },
    "2875": {
      "fn": "DummyMerkleResistor.initialize",
      "jump": "i",
      "offset": [
        2741,
        2770
      ],
      "op": "JUMP",
      "path": "1"
    },
    "2876": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2741,
        2770
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "2877": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2878": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2879": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2881": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2882": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2784,
        2798
      ],
      "op": "DUP4",
      "path": "1"
    },
    "2883": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2884": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2885": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2887": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2888": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2812,
        2821
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2889": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2890": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2891": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2649,
        2831
      ],
      "op": "POP",
      "path": "1"
    },
    "2892": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2620
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2894": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2633
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2896": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2621,
        2632
      ],
      "op": "DUP14",
      "path": "1"
    },
    "2897": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2899": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2901": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2903": {
      "op": "SHL"
    },
    "2904": {
      "op": "SUB"
    },
    "2905": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2633
      ],
      "op": "AND",
      "path": "1"
    },
    "2906": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2908": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2910": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2912": {
      "op": "SHL"
    },
    "2913": {
      "op": "SUB"
    },
    "2914": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2633
      ],
      "op": "AND",
      "path": "1"
    },
    "2915": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2633
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2916": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2633
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2917": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2633
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2919": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2633
      ],
      "op": "ADD",
      "path": "1"
    },
    "2920": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2633
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2921": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2633
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2922": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2633
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2923": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2633
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2925": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2633
      ],
      "op": "ADD",
      "path": "1"
    },
    "2926": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2633
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2928": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2633
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "2929": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2646
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2931": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2634,
        2645
      ],
      "op": "DUP15",
      "path": "1"
    },
    "2932": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2646
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2933": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2646
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2934": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2646
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2936": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2646
      ],
      "op": "ADD",
      "path": "1"
    },
    "2937": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2646
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "2938": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2646
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2939": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2646
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "2940": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2646
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2942": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2646
      ],
      "op": "ADD",
      "path": "1"
    },
    "2943": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2646
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2945": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2646
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "2946": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2948": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2949": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2950": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2951": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2952": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "2954": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2955": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "2956": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "2958": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2959": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2960": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2961": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2962": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "2964": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2965": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "2966": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "2968": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2969": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2970": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2971": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2972": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "2974": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2975": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "2976": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "2978": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2979": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2980": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2981": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2982": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "2984": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2985": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "2986": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2988": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2989": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2990": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "2991": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "DUP2",
      "path": "1"
    },
    "2992": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "2994": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "2995": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "2996": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xA0"
    },
    "2998": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "DUP3",
      "path": "1"
    },
    "2999": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "3000": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3001": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3002": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x5"
    },
    "3004": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "ADD",
      "path": "1"
    },
    "3005": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "3006": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3007": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "POP",
      "path": "1"
    },
    "3008": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2612,
        2831
      ],
      "op": "POP",
      "path": "1"
    },
    "3009": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2841,
        2875
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 23,
      "value": "0xBCA"
    },
    "3012": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2850,
        2861
      ],
      "op": "DUP13",
      "path": "1"
    },
    "3013": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2863,
        2874
      ],
      "op": "DUP13",
      "path": "1"
    },
    "3014": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2841,
        2849
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x28F"
    },
    "3017": {
      "fn": "DummyMerkleResistor.initialize",
      "jump": "i",
      "offset": [
        2841,
        2875
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3018": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        2841,
        2875
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3019": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1919,
        2882
      ],
      "op": "POP",
      "path": "1"
    },
    "3020": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1919,
        2882
      ],
      "op": "POP",
      "path": "1"
    },
    "3021": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1919,
        2882
      ],
      "op": "POP",
      "path": "1"
    },
    "3022": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1919,
        2882
      ],
      "op": "POP",
      "path": "1"
    },
    "3023": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1919,
        2882
      ],
      "op": "POP",
      "path": "1"
    },
    "3024": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1919,
        2882
      ],
      "op": "POP",
      "path": "1"
    },
    "3025": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "POP",
      "path": "1"
    },
    "3026": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "POP",
      "path": "1"
    },
    "3027": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "POP",
      "path": "1"
    },
    "3028": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "POP",
      "path": "1"
    },
    "3029": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "POP",
      "path": "1"
    },
    "3030": {
      "fn": "DummyMerkleResistor.initialize",
      "offset": [
        1763,
        2882
      ],
      "op": "POP",
      "path": "1"
    },
    "3031": {
      "fn": "DummyMerkleResistor.initialize",
      "jump": "o",
      "offset": [
        1763,
        2882
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3032": {
      "op": "JUMPDEST"
    },
    "3033": {
      "op": "DUP1"
    },
    "3034": {
      "op": "CALLDATALOAD"
    },
    "3035": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3037": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3039": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3041": {
      "op": "SHL"
    },
    "3042": {
      "op": "SUB"
    },
    "3043": {
      "op": "DUP2"
    },
    "3044": {
      "op": "AND"
    },
    "3045": {
      "op": "DUP2"
    },
    "3046": {
      "op": "EQ"
    },
    "3047": {
      "op": "PUSH2",
      "value": "0xBEF"
    },
    "3050": {
      "op": "JUMPI"
    },
    "3051": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3053": {
      "op": "DUP1"
    },
    "3054": {
      "op": "REVERT"
    },
    "3055": {
      "op": "JUMPDEST"
    },
    "3056": {
      "op": "SWAP2"
    },
    "3057": {
      "op": "SWAP1"
    },
    "3058": {
      "op": "POP"
    },
    "3059": {
      "jump": "o",
      "op": "JUMP"
    },
    "3060": {
      "op": "JUMPDEST"
    },
    "3061": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3063": {
      "op": "DUP1"
    },
    "3064": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3066": {
      "op": "DUP4"
    },
    "3067": {
      "op": "DUP6"
    },
    "3068": {
      "op": "SUB"
    },
    "3069": {
      "op": "SLT"
    },
    "3070": {
      "op": "ISZERO"
    },
    "3071": {
      "op": "PUSH2",
      "value": "0xC07"
    },
    "3074": {
      "op": "JUMPI"
    },
    "3075": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3077": {
      "op": "DUP1"
    },
    "3078": {
      "op": "REVERT"
    },
    "3079": {
      "op": "JUMPDEST"
    },
    "3080": {
      "op": "DUP3"
    },
    "3081": {
      "op": "CALLDATALOAD"
    },
    "3082": {
      "op": "SWAP2"
    },
    "3083": {
      "op": "POP"
    },
    "3084": {
      "op": "PUSH2",
      "value": "0xC17"
    },
    "3087": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3089": {
      "op": "DUP5"
    },
    "3090": {
      "op": "ADD"
    },
    "3091": {
      "op": "PUSH2",
      "value": "0xBD8"
    },
    "3094": {
      "jump": "i",
      "op": "JUMP"
    },
    "3095": {
      "op": "JUMPDEST"
    },
    "3096": {
      "op": "SWAP1"
    },
    "3097": {
      "op": "POP"
    },
    "3098": {
      "op": "SWAP3"
    },
    "3099": {
      "op": "POP"
    },
    "3100": {
      "op": "SWAP3"
    },
    "3101": {
      "op": "SWAP1"
    },
    "3102": {
      "op": "POP"
    },
    "3103": {
      "jump": "o",
      "op": "JUMP"
    },
    "3104": {
      "op": "JUMPDEST"
    },
    "3105": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3107": {
      "op": "DUP1"
    },
    "3108": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3110": {
      "op": "DUP1"
    },
    "3111": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3113": {
      "op": "DUP1"
    },
    "3114": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "3116": {
      "op": "DUP8"
    },
    "3117": {
      "op": "DUP10"
    },
    "3118": {
      "op": "SUB"
    },
    "3119": {
      "op": "SLT"
    },
    "3120": {
      "op": "ISZERO"
    },
    "3121": {
      "op": "PUSH2",
      "value": "0xC39"
    },
    "3124": {
      "op": "JUMPI"
    },
    "3125": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3127": {
      "op": "DUP1"
    },
    "3128": {
      "op": "REVERT"
    },
    "3129": {
      "op": "JUMPDEST"
    },
    "3130": {
      "op": "DUP7"
    },
    "3131": {
      "op": "CALLDATALOAD"
    },
    "3132": {
      "op": "SWAP6"
    },
    "3133": {
      "op": "POP"
    },
    "3134": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3136": {
      "op": "DUP8"
    },
    "3137": {
      "op": "ADD"
    },
    "3138": {
      "op": "CALLDATALOAD"
    },
    "3139": {
      "op": "SWAP5"
    },
    "3140": {
      "op": "POP"
    },
    "3141": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3143": {
      "op": "DUP8"
    },
    "3144": {
      "op": "ADD"
    },
    "3145": {
      "op": "CALLDATALOAD"
    },
    "3146": {
      "op": "SWAP4"
    },
    "3147": {
      "op": "POP"
    },
    "3148": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3150": {
      "op": "DUP8"
    },
    "3151": {
      "op": "ADD"
    },
    "3152": {
      "op": "CALLDATALOAD"
    },
    "3153": {
      "op": "SWAP3"
    },
    "3154": {
      "op": "POP"
    },
    "3155": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3157": {
      "op": "DUP8"
    },
    "3158": {
      "op": "ADD"
    },
    "3159": {
      "op": "CALLDATALOAD"
    },
    "3160": {
      "op": "SWAP2"
    },
    "3161": {
      "op": "POP"
    },
    "3162": {
      "op": "PUSH2",
      "value": "0xC65"
    },
    "3165": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3167": {
      "op": "DUP9"
    },
    "3168": {
      "op": "ADD"
    },
    "3169": {
      "op": "PUSH2",
      "value": "0xBD8"
    },
    "3172": {
      "jump": "i",
      "op": "JUMP"
    },
    "3173": {
      "op": "JUMPDEST"
    },
    "3174": {
      "op": "SWAP1"
    },
    "3175": {
      "op": "POP"
    },
    "3176": {
      "op": "SWAP3"
    },
    "3177": {
      "op": "SWAP6"
    },
    "3178": {
      "op": "POP"
    },
    "3179": {
      "op": "SWAP3"
    },
    "3180": {
      "op": "SWAP6"
    },
    "3181": {
      "op": "POP"
    },
    "3182": {
      "op": "SWAP3"
    },
    "3183": {
      "op": "SWAP6"
    },
    "3184": {
      "jump": "o",
      "op": "JUMP"
    },
    "3185": {
      "op": "JUMPDEST"
    },
    "3186": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3188": {
      "op": "DUP1"
    },
    "3189": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3191": {
      "op": "DUP1"
    },
    "3192": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3194": {
      "op": "DUP6"
    },
    "3195": {
      "op": "DUP8"
    },
    "3196": {
      "op": "SUB"
    },
    "3197": {
      "op": "SLT"
    },
    "3198": {
      "op": "ISZERO"
    },
    "3199": {
      "op": "PUSH2",
      "value": "0xC87"
    },
    "3202": {
      "op": "JUMPI"
    },
    "3203": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3205": {
      "op": "DUP1"
    },
    "3206": {
      "op": "REVERT"
    },
    "3207": {
      "op": "JUMPDEST"
    },
    "3208": {
      "op": "POP"
    },
    "3209": {
      "op": "POP"
    },
    "3210": {
      "op": "DUP3"
    },
    "3211": {
      "op": "CALLDATALOAD"
    },
    "3212": {
      "op": "SWAP5"
    },
    "3213": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3215": {
      "op": "DUP5"
    },
    "3216": {
      "op": "ADD"
    },
    "3217": {
      "op": "CALLDATALOAD"
    },
    "3218": {
      "op": "SWAP5"
    },
    "3219": {
      "op": "POP"
    },
    "3220": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3222": {
      "op": "DUP5"
    },
    "3223": {
      "op": "ADD"
    },
    "3224": {
      "op": "CALLDATALOAD"
    },
    "3225": {
      "op": "SWAP4"
    },
    "3226": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3228": {
      "op": "ADD"
    },
    "3229": {
      "op": "CALLDATALOAD"
    },
    "3230": {
      "op": "SWAP3"
    },
    "3231": {
      "op": "POP"
    },
    "3232": {
      "op": "SWAP1"
    },
    "3233": {
      "op": "POP"
    },
    "3234": {
      "jump": "o",
      "op": "JUMP"
    },
    "3235": {
      "op": "JUMPDEST"
    },
    "3236": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3238": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3240": {
      "op": "DUP3"
    },
    "3241": {
      "op": "DUP5"
    },
    "3242": {
      "op": "SUB"
    },
    "3243": {
      "op": "SLT"
    },
    "3244": {
      "op": "ISZERO"
    },
    "3245": {
      "op": "PUSH2",
      "value": "0xCB5"
    },
    "3248": {
      "op": "JUMPI"
    },
    "3249": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3251": {
      "op": "DUP1"
    },
    "3252": {
      "op": "REVERT"
    },
    "3253": {
      "op": "JUMPDEST"
    },
    "3254": {
      "op": "POP"
    },
    "3255": {
      "op": "CALLDATALOAD"
    },
    "3256": {
      "op": "SWAP2"
    },
    "3257": {
      "op": "SWAP1"
    },
    "3258": {
      "op": "POP"
    },
    "3259": {
      "jump": "o",
      "op": "JUMP"
    },
    "3260": {
      "op": "JUMPDEST"
    },
    "3261": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3263": {
      "op": "DUP1"
    },
    "3264": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3266": {
      "op": "DUP4"
    },
    "3267": {
      "op": "DUP6"
    },
    "3268": {
      "op": "SUB"
    },
    "3269": {
      "op": "SLT"
    },
    "3270": {
      "op": "ISZERO"
    },
    "3271": {
      "op": "PUSH2",
      "value": "0xCCF"
    },
    "3274": {
      "op": "JUMPI"
    },
    "3275": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3277": {
      "op": "DUP1"
    },
    "3278": {
      "op": "REVERT"
    },
    "3279": {
      "op": "JUMPDEST"
    },
    "3280": {
      "op": "PUSH2",
      "value": "0xCD8"
    },
    "3283": {
      "op": "DUP4"
    },
    "3284": {
      "op": "PUSH2",
      "value": "0xBD8"
    },
    "3287": {
      "jump": "i",
      "op": "JUMP"
    },
    "3288": {
      "op": "JUMPDEST"
    },
    "3289": {
      "op": "SWAP5"
    },
    "3290": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3292": {
      "op": "SWAP4"
    },
    "3293": {
      "op": "SWAP1"
    },
    "3294": {
      "op": "SWAP4"
    },
    "3295": {
      "op": "ADD"
    },
    "3296": {
      "op": "CALLDATALOAD"
    },
    "3297": {
      "op": "SWAP4"
    },
    "3298": {
      "op": "POP"
    },
    "3299": {
      "op": "POP"
    },
    "3300": {
      "op": "POP"
    },
    "3301": {
      "jump": "o",
      "op": "JUMP"
    },
    "3302": {
      "op": "JUMPDEST"
    },
    "3303": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3308": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3310": {
      "op": "SHL"
    },
    "3311": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3313": {
      "op": "MSTORE"
    },
    "3314": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "3316": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3318": {
      "op": "MSTORE"
    },
    "3319": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3321": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3323": {
      "op": "REVERT"
    },
    "3324": {
      "op": "JUMPDEST"
    },
    "3325": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3327": {
      "op": "DUP1"
    },
    "3328": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3330": {
      "op": "DUP1"
    },
    "3331": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3333": {
      "op": "DUP1"
    },
    "3334": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "3336": {
      "op": "DUP8"
    },
    "3337": {
      "op": "DUP10"
    },
    "3338": {
      "op": "SUB"
    },
    "3339": {
      "op": "SLT"
    },
    "3340": {
      "op": "ISZERO"
    },
    "3341": {
      "op": "PUSH2",
      "value": "0xD15"
    },
    "3344": {
      "op": "JUMPI"
    },
    "3345": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3347": {
      "op": "DUP1"
    },
    "3348": {
      "op": "REVERT"
    },
    "3349": {
      "op": "JUMPDEST"
    },
    "3350": {
      "op": "DUP7"
    },
    "3351": {
      "op": "CALLDATALOAD"
    },
    "3352": {
      "op": "SWAP6"
    },
    "3353": {
      "op": "POP"
    },
    "3354": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3356": {
      "op": "PUSH2",
      "value": "0xD26"
    },
    "3359": {
      "op": "DUP2"
    },
    "3360": {
      "op": "DUP10"
    },
    "3361": {
      "op": "ADD"
    },
    "3362": {
      "op": "PUSH2",
      "value": "0xBD8"
    },
    "3365": {
      "jump": "i",
      "op": "JUMP"
    },
    "3366": {
      "op": "JUMPDEST"
    },
    "3367": {
      "op": "SWAP6"
    },
    "3368": {
      "op": "POP"
    },
    "3369": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3371": {
      "op": "DUP9"
    },
    "3372": {
      "op": "ADD"
    },
    "3373": {
      "op": "CALLDATALOAD"
    },
    "3374": {
      "op": "SWAP5"
    },
    "3375": {
      "op": "POP"
    },
    "3376": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3378": {
      "op": "DUP9"
    },
    "3379": {
      "op": "ADD"
    },
    "3380": {
      "op": "CALLDATALOAD"
    },
    "3381": {
      "op": "SWAP4"
    },
    "3382": {
      "op": "POP"
    },
    "3383": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3385": {
      "op": "DUP9"
    },
    "3386": {
      "op": "ADD"
    },
    "3387": {
      "op": "CALLDATALOAD"
    },
    "3388": {
      "op": "SWAP3"
    },
    "3389": {
      "op": "POP"
    },
    "3390": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3392": {
      "op": "DUP9"
    },
    "3393": {
      "op": "ADD"
    },
    "3394": {
      "op": "CALLDATALOAD"
    },
    "3395": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "3404": {
      "op": "DUP1"
    },
    "3405": {
      "op": "DUP3"
    },
    "3406": {
      "op": "GT"
    },
    "3407": {
      "op": "ISZERO"
    },
    "3408": {
      "op": "PUSH2",
      "value": "0xD58"
    },
    "3411": {
      "op": "JUMPI"
    },
    "3412": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3414": {
      "op": "DUP1"
    },
    "3415": {
      "op": "REVERT"
    },
    "3416": {
      "op": "JUMPDEST"
    },
    "3417": {
      "op": "DUP2"
    },
    "3418": {
      "op": "DUP11"
    },
    "3419": {
      "op": "ADD"
    },
    "3420": {
      "op": "SWAP2"
    },
    "3421": {
      "op": "POP"
    },
    "3422": {
      "op": "DUP11"
    },
    "3423": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3425": {
      "op": "DUP4"
    },
    "3426": {
      "op": "ADD"
    },
    "3427": {
      "op": "SLT"
    },
    "3428": {
      "op": "PUSH2",
      "value": "0xD6C"
    },
    "3431": {
      "op": "JUMPI"
    },
    "3432": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3434": {
      "op": "DUP1"
    },
    "3435": {
      "op": "REVERT"
    },
    "3436": {
      "op": "JUMPDEST"
    },
    "3437": {
      "op": "DUP2"
    },
    "3438": {
      "op": "CALLDATALOAD"
    },
    "3439": {
      "op": "DUP2"
    },
    "3440": {
      "op": "DUP2"
    },
    "3441": {
      "op": "GT"
    },
    "3442": {
      "op": "ISZERO"
    },
    "3443": {
      "op": "PUSH2",
      "value": "0xD7E"
    },
    "3446": {
      "op": "JUMPI"
    },
    "3447": {
      "op": "PUSH2",
      "value": "0xD7E"
    },
    "3450": {
      "op": "PUSH2",
      "value": "0xCE6"
    },
    "3453": {
      "jump": "i",
      "op": "JUMP"
    },
    "3454": {
      "op": "JUMPDEST"
    },
    "3455": {
      "op": "DUP1"
    },
    "3456": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "3458": {
      "op": "SHL"
    },
    "3459": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3461": {
      "op": "MLOAD"
    },
    "3462": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "3464": {
      "op": "NOT"
    },
    "3465": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "3467": {
      "op": "DUP4"
    },
    "3468": {
      "op": "ADD"
    },
    "3469": {
      "op": "AND"
    },
    "3470": {
      "op": "DUP2"
    },
    "3471": {
      "op": "ADD"
    },
    "3472": {
      "op": "DUP2"
    },
    "3473": {
      "op": "DUP2"
    },
    "3474": {
      "op": "LT"
    },
    "3475": {
      "op": "DUP6"
    },
    "3476": {
      "op": "DUP3"
    },
    "3477": {
      "op": "GT"
    },
    "3478": {
      "op": "OR"
    },
    "3479": {
      "op": "ISZERO"
    },
    "3480": {
      "op": "PUSH2",
      "value": "0xDA3"
    },
    "3483": {
      "op": "JUMPI"
    },
    "3484": {
      "op": "PUSH2",
      "value": "0xDA3"
    },
    "3487": {
      "op": "PUSH2",
      "value": "0xCE6"
    },
    "3490": {
      "jump": "i",
      "op": "JUMP"
    },
    "3491": {
      "op": "JUMPDEST"
    },
    "3492": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3494": {
      "op": "MSTORE"
    },
    "3495": {
      "op": "SWAP2"
    },
    "3496": {
      "op": "DUP3"
    },
    "3497": {
      "op": "MSTORE"
    },
    "3498": {
      "op": "DUP5"
    },
    "3499": {
      "op": "DUP3"
    },
    "3500": {
      "op": "ADD"
    },
    "3501": {
      "op": "SWAP3"
    },
    "3502": {
      "op": "POP"
    },
    "3503": {
      "op": "DUP4"
    },
    "3504": {
      "op": "DUP2"
    },
    "3505": {
      "op": "ADD"
    },
    "3506": {
      "op": "DUP6"
    },
    "3507": {
      "op": "ADD"
    },
    "3508": {
      "op": "SWAP2"
    },
    "3509": {
      "op": "DUP14"
    },
    "3510": {
      "op": "DUP4"
    },
    "3511": {
      "op": "GT"
    },
    "3512": {
      "op": "ISZERO"
    },
    "3513": {
      "op": "PUSH2",
      "value": "0xDC1"
    },
    "3516": {
      "op": "JUMPI"
    },
    "3517": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3519": {
      "op": "DUP1"
    },
    "3520": {
      "op": "REVERT"
    },
    "3521": {
      "op": "JUMPDEST"
    },
    "3522": {
      "op": "SWAP4"
    },
    "3523": {
      "op": "DUP6"
    },
    "3524": {
      "op": "ADD"
    },
    "3525": {
      "op": "SWAP4"
    },
    "3526": {
      "op": "JUMPDEST"
    },
    "3527": {
      "op": "DUP3"
    },
    "3528": {
      "op": "DUP6"
    },
    "3529": {
      "op": "LT"
    },
    "3530": {
      "op": "ISZERO"
    },
    "3531": {
      "op": "PUSH2",
      "value": "0xDDF"
    },
    "3534": {
      "op": "JUMPI"
    },
    "3535": {
      "op": "DUP5"
    },
    "3536": {
      "op": "CALLDATALOAD"
    },
    "3537": {
      "op": "DUP5"
    },
    "3538": {
      "op": "MSTORE"
    },
    "3539": {
      "op": "SWAP4"
    },
    "3540": {
      "op": "DUP6"
    },
    "3541": {
      "op": "ADD"
    },
    "3542": {
      "op": "SWAP4"
    },
    "3543": {
      "op": "SWAP3"
    },
    "3544": {
      "op": "DUP6"
    },
    "3545": {
      "op": "ADD"
    },
    "3546": {
      "op": "SWAP3"
    },
    "3547": {
      "op": "PUSH2",
      "value": "0xDC6"
    },
    "3550": {
      "op": "JUMP"
    },
    "3551": {
      "op": "JUMPDEST"
    },
    "3552": {
      "op": "DUP1"
    },
    "3553": {
      "op": "SWAP7"
    },
    "3554": {
      "op": "POP"
    },
    "3555": {
      "op": "POP"
    },
    "3556": {
      "op": "POP"
    },
    "3557": {
      "op": "POP"
    },
    "3558": {
      "op": "POP"
    },
    "3559": {
      "op": "POP"
    },
    "3560": {
      "op": "POP"
    },
    "3561": {
      "op": "SWAP3"
    },
    "3562": {
      "op": "SWAP6"
    },
    "3563": {
      "op": "POP"
    },
    "3564": {
      "op": "SWAP3"
    },
    "3565": {
      "op": "SWAP6"
    },
    "3566": {
      "op": "POP"
    },
    "3567": {
      "op": "SWAP3"
    },
    "3568": {
      "op": "SWAP6"
    },
    "3569": {
      "jump": "o",
      "op": "JUMP"
    },
    "3570": {
      "op": "JUMPDEST"
    },
    "3571": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3576": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3578": {
      "op": "SHL"
    },
    "3579": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3581": {
      "op": "MSTORE"
    },
    "3582": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "3584": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3586": {
      "op": "MSTORE"
    },
    "3587": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3589": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3591": {
      "op": "REVERT"
    },
    "3592": {
      "op": "JUMPDEST"
    },
    "3593": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3595": {
      "op": "DUP3"
    },
    "3596": {
      "op": "DUP3"
    },
    "3597": {
      "op": "LT"
    },
    "3598": {
      "op": "ISZERO"
    },
    "3599": {
      "op": "PUSH2",
      "value": "0xE1A"
    },
    "3602": {
      "op": "JUMPI"
    },
    "3603": {
      "op": "PUSH2",
      "value": "0xE1A"
    },
    "3606": {
      "op": "PUSH2",
      "value": "0xDF2"
    },
    "3609": {
      "jump": "i",
      "op": "JUMP"
    },
    "3610": {
      "op": "JUMPDEST"
    },
    "3611": {
      "op": "POP"
    },
    "3612": {
      "op": "SUB"
    },
    "3613": {
      "op": "SWAP1"
    },
    "3614": {
      "jump": "o",
      "op": "JUMP"
    },
    "3615": {
      "op": "JUMPDEST"
    },
    "3616": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3618": {
      "op": "DUP2"
    },
    "3619": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3621": {
      "op": "NOT"
    },
    "3622": {
      "op": "DIV"
    },
    "3623": {
      "op": "DUP4"
    },
    "3624": {
      "op": "GT"
    },
    "3625": {
      "op": "DUP3"
    },
    "3626": {
      "op": "ISZERO"
    },
    "3627": {
      "op": "ISZERO"
    },
    "3628": {
      "op": "AND"
    },
    "3629": {
      "op": "ISZERO"
    },
    "3630": {
      "op": "PUSH2",
      "value": "0xE39"
    },
    "3633": {
      "op": "JUMPI"
    },
    "3634": {
      "op": "PUSH2",
      "value": "0xE39"
    },
    "3637": {
      "op": "PUSH2",
      "value": "0xDF2"
    },
    "3640": {
      "jump": "i",
      "op": "JUMP"
    },
    "3641": {
      "op": "JUMPDEST"
    },
    "3642": {
      "op": "POP"
    },
    "3643": {
      "op": "MUL"
    },
    "3644": {
      "op": "SWAP1"
    },
    "3645": {
      "jump": "o",
      "op": "JUMP"
    },
    "3646": {
      "op": "JUMPDEST"
    },
    "3647": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3649": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3651": {
      "op": "DUP3"
    },
    "3652": {
      "op": "DUP5"
    },
    "3653": {
      "op": "SUB"
    },
    "3654": {
      "op": "SLT"
    },
    "3655": {
      "op": "ISZERO"
    },
    "3656": {
      "op": "PUSH2",
      "value": "0xE50"
    },
    "3659": {
      "op": "JUMPI"
    },
    "3660": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3662": {
      "op": "DUP1"
    },
    "3663": {
      "op": "REVERT"
    },
    "3664": {
      "op": "JUMPDEST"
    },
    "3665": {
      "op": "DUP2"
    },
    "3666": {
      "op": "MLOAD"
    },
    "3667": {
      "op": "DUP1"
    },
    "3668": {
      "op": "ISZERO"
    },
    "3669": {
      "op": "ISZERO"
    },
    "3670": {
      "op": "DUP2"
    },
    "3671": {
      "op": "EQ"
    },
    "3672": {
      "op": "PUSH2",
      "value": "0xE60"
    },
    "3675": {
      "op": "JUMPI"
    },
    "3676": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3678": {
      "op": "DUP1"
    },
    "3679": {
      "op": "REVERT"
    },
    "3680": {
      "op": "JUMPDEST"
    },
    "3681": {
      "op": "SWAP4"
    },
    "3682": {
      "op": "SWAP3"
    },
    "3683": {
      "op": "POP"
    },
    "3684": {
      "op": "POP"
    },
    "3685": {
      "op": "POP"
    },
    "3686": {
      "jump": "o",
      "op": "JUMP"
    },
    "3687": {
      "op": "JUMPDEST"
    },
    "3688": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3690": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3692": {
      "op": "NOT"
    },
    "3693": {
      "op": "DUP3"
    },
    "3694": {
      "op": "EQ"
    },
    "3695": {
      "op": "ISZERO"
    },
    "3696": {
      "op": "PUSH2",
      "value": "0xE7B"
    },
    "3699": {
      "op": "JUMPI"
    },
    "3700": {
      "op": "PUSH2",
      "value": "0xE7B"
    },
    "3703": {
      "op": "PUSH2",
      "value": "0xDF2"
    },
    "3706": {
      "jump": "i",
      "op": "JUMP"
    },
    "3707": {
      "op": "JUMPDEST"
    },
    "3708": {
      "op": "POP"
    },
    "3709": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3711": {
      "op": "ADD"
    },
    "3712": {
      "op": "SWAP1"
    },
    "3713": {
      "jump": "o",
      "op": "JUMP"
    },
    "3714": {
      "op": "JUMPDEST"
    },
    "3715": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3717": {
      "op": "DUP3"
    },
    "3718": {
      "op": "PUSH2",
      "value": "0xE9F"
    },
    "3721": {
      "op": "JUMPI"
    },
    "3722": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "3727": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "3729": {
      "op": "SHL"
    },
    "3730": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3732": {
      "op": "MSTORE"
    },
    "3733": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "3735": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "3737": {
      "op": "MSTORE"
    },
    "3738": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3740": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3742": {
      "op": "REVERT"
    },
    "3743": {
      "op": "JUMPDEST"
    },
    "3744": {
      "op": "POP"
    },
    "3745": {
      "op": "DIV"
    },
    "3746": {
      "op": "SWAP1"
    },
    "3747": {
      "jump": "o",
      "op": "JUMP"
    },
    "3748": {
      "op": "JUMPDEST"
    },
    "3749": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3751": {
      "op": "DUP3"
    },
    "3752": {
      "op": "NOT"
    },
    "3753": {
      "op": "DUP3"
    },
    "3754": {
      "op": "GT"
    },
    "3755": {
      "op": "ISZERO"
    },
    "3756": {
      "op": "PUSH2",
      "value": "0xEB7"
    },
    "3759": {
      "op": "JUMPI"
    },
    "3760": {
      "op": "PUSH2",
      "value": "0xEB7"
    },
    "3763": {
      "op": "PUSH2",
      "value": "0xDF2"
    },
    "3766": {
      "jump": "i",
      "op": "JUMP"
    },
    "3767": {
      "op": "JUMPDEST"
    },
    "3768": {
      "op": "POP"
    },
    "3769": {
      "op": "ADD"
    },
    "3770": {
      "op": "SWAP1"
    },
    "3771": {
      "jump": "o",
      "op": "JUMP"
    },
    "3772": {
      "op": "JUMPDEST"
    },
    "3773": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3775": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3777": {
      "op": "DUP3"
    },
    "3778": {
      "op": "ADD"
    },
    "3779": {
      "op": "DUP6"
    },
    "3780": {
      "op": "DUP4"
    },
    "3781": {
      "op": "MSTORE"
    },
    "3782": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "3784": {
      "op": "DUP6"
    },
    "3785": {
      "op": "DUP2"
    },
    "3786": {
      "op": "DUP6"
    },
    "3787": {
      "op": "ADD"
    },
    "3788": {
      "op": "MSTORE"
    },
    "3789": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "3791": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "3793": {
      "op": "DUP6"
    },
    "3794": {
      "op": "ADD"
    },
    "3795": {
      "op": "MSTORE"
    },
    "3796": {
      "op": "DUP2"
    },
    "3797": {
      "op": "DUP6"
    },
    "3798": {
      "op": "MLOAD"
    },
    "3799": {
      "op": "DUP1"
    },
    "3800": {
      "op": "DUP5"
    },
    "3801": {
      "op": "MSTORE"
    },
    "3802": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "3804": {
      "op": "DUP7"
    },
    "3805": {
      "op": "ADD"
    },
    "3806": {
      "op": "SWAP2"
    },
    "3807": {
      "op": "POP"
    },
    "3808": {
      "op": "DUP3"
    },
    "3809": {
      "op": "DUP8"
    },
    "3810": {
      "op": "ADD"
    },
    "3811": {
      "op": "SWAP4"
    },
    "3812": {
      "op": "POP"
    },
    "3813": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3815": {
      "op": "JUMPDEST"
    },
    "3816": {
      "op": "DUP2"
    },
    "3817": {
      "op": "DUP2"
    },
    "3818": {
      "op": "LT"
    },
    "3819": {
      "op": "ISZERO"
    },
    "3820": {
      "op": "PUSH2",
      "value": "0xF03"
    },
    "3823": {
      "op": "JUMPI"
    },
    "3824": {
      "op": "DUP5"
    },
    "3825": {
      "op": "MLOAD"
    },
    "3826": {
      "op": "DUP4"
    },
    "3827": {
      "op": "MSTORE"
    },
    "3828": {
      "op": "SWAP4"
    },
    "3829": {
      "op": "DUP4"
    },
    "3830": {
      "op": "ADD"
    },
    "3831": {
      "op": "SWAP4"
    },
    "3832": {
      "op": "SWAP2"
    },
    "3833": {
      "op": "DUP4"
    },
    "3834": {
      "op": "ADD"
    },
    "3835": {
      "op": "SWAP2"
    },
    "3836": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3838": {
      "op": "ADD"
    },
    "3839": {
      "op": "PUSH2",
      "value": "0xEE7"
    },
    "3842": {
      "op": "JUMP"
    },
    "3843": {
      "op": "JUMPDEST"
    },
    "3844": {
      "op": "POP"
    },
    "3845": {
      "op": "SWAP1"
    },
    "3846": {
      "op": "SWAP9"
    },
    "3847": {
      "op": "SWAP8"
    },
    "3848": {
      "op": "POP"
    },
    "3849": {
      "op": "POP"
    },
    "3850": {
      "op": "POP"
    },
    "3851": {
      "op": "POP"
    },
    "3852": {
      "op": "POP"
    },
    "3853": {
      "op": "POP"
    },
    "3854": {
      "op": "POP"
    },
    "3855": {
      "op": "POP"
    },
    "3856": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "229e10fb934c366bd6fca5b5c0c8c0afc41531b9",
  "source": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./MerkleLib.sol\";\n\ncontract DummyMerkleResistor {\n    using MerkleLib for bytes32;\n\n    uint public numTrees = 0;\n    uint public initialBalance;\n\n    struct Tranche {\n        uint totalCoins;\n        uint currentCoins;\n        uint startTime;\n        uint endTime;\n        uint coinsPerSecond;\n        uint lastWithdrawalTime;\n    }\n\n    struct MerkleTree {\n        bytes32 merkleRoot;\n        bytes32 ipfsHash;\n        uint minEndTime; // offsets\n        uint maxEndTime; // offsets\n        uint pctUpFront;\n        address tokenAddress;\n    }\n\n    mapping (address => mapping (uint => bool)) public initialized;\n    mapping (uint => MerkleTree) public merkleTrees;\n    mapping (address => mapping (uint => Tranche)) public tranches;\n\n    uint constant public PRECISION = 1000000;\n    uint constant public ERROR_TOLERANCE = 1;\n\n    event WithdrawalOccurred(address indexed destination, uint numTokens, uint tokensLeft, uint indexed merkleIndex);\n    event MerkleTreeAdded(uint indexed index, address indexed tokenAddress, bytes32 newRoot, bytes32 ipfsHash);\n\n    constructor() {\n    }\n\n    function addMerkleTree(bytes32 newRoot, bytes32 ipfsHash, uint minEndTime, uint maxEndTime, uint pctUpFront, address depositToken) public {\n        require(pctUpFront < 100, 'pctUpFront >= 100');\n        require(minEndTime < maxEndTime, 'minEndTime must be less than maxEndTime');\n        merkleTrees[++numTrees] = MerkleTree(\n            newRoot,\n            ipfsHash,\n            minEndTime,\n            maxEndTime,\n            pctUpFront,\n            depositToken\n        );\n        emit MerkleTreeAdded(numTrees, depositToken, newRoot, ipfsHash);\n    }\n\n    function initialize(uint merkleIndex, address destination, uint vestingTime, uint minTotalPayments, uint maxTotalPayments, bytes32[] memory proof) external {\n        require(msg.sender == destination, 'Can only initialize your own tranche');\n        require(!initialized[destination][merkleIndex], \"Already initialized\");\n        bytes32 leaf = keccak256(abi.encode(destination, minTotalPayments, maxTotalPayments));\n        MerkleTree memory tree = merkleTrees[merkleIndex];\n        require(tree.merkleRoot.verifyProof(leaf, proof), \"The proof could not be verified.\");\n        initialized[destination][merkleIndex] = true;\n\n        (bool valid, uint totalCoins, uint coinsPerSecond, uint startTime) = verifyVestingSchedule(merkleIndex, vestingTime, minTotalPayments, maxTotalPayments);\n        require(valid, 'Invalid vesting schedule');\n\n        tranches[destination][merkleIndex] = Tranche(\n            totalCoins,\n            totalCoins,\n            startTime,\n            block.timestamp + vestingTime,\n            coinsPerSecond,\n            startTime\n        );\n        withdraw(merkleIndex, destination);\n    }\n\n    function withdraw(uint merkleIndex, address destination) public {\n        require(initialized[destination][merkleIndex], \"You must initialize your account first.\");\n        Tranche storage tranche = tranches[destination][merkleIndex];\n        MerkleTree memory tree = merkleTrees[merkleIndex];\n        require(tranche.currentCoins >  0, 'No coins left to withdraw');\n        uint currentWithdrawal = 0;\n\n        // if after vesting period ends, give them the remaining coins\n        if (block.timestamp >= tranche.endTime) {\n            currentWithdrawal = tranche.currentCoins;\n        } else {\n            // compute allowed withdrawal\n            currentWithdrawal = (block.timestamp - tranche.lastWithdrawalTime) * tranche.coinsPerSecond;\n        }\n\n        // update struct\n        tranche.currentCoins -= currentWithdrawal;\n        tranche.lastWithdrawalTime = block.timestamp;\n\n        // transfer the tokens, brah\n        IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal);\n        emit WithdrawalOccurred(destination, currentWithdrawal, tranche.currentCoins, merkleIndex);\n    }\n\n    function verifyVestingSchedule(uint merkleIndex, uint vestingTime, uint minTotalPayments, uint maxTotalPayments) public view returns (bool, uint, uint, uint) {\n        if (merkleIndex > numTrees) {\n            return (false, 0, 0, 0);\n        }\n\n        MerkleTree memory tree = merkleTrees[merkleIndex];\n\n        if (vestingTime > tree.maxEndTime || vestingTime < tree.minEndTime) {\n            return (false, 0, 0, 0);\n        }\n\n        uint totalCoins;\n        if (vestingTime == tree.maxEndTime) {\n            totalCoins = maxTotalPayments;\n        } else {\n            uint paymentSlope = (maxTotalPayments - minTotalPayments) * PRECISION / (tree.maxEndTime - tree.minEndTime);\n            totalCoins = (paymentSlope * (vestingTime - tree.minEndTime) / PRECISION) + minTotalPayments;\n        }\n\n        uint coinsPerSecond = (totalCoins * (uint(100) - tree.pctUpFront)) / (vestingTime * 100);\n        uint startTime = block.timestamp + vestingTime - (totalCoins / coinsPerSecond);\n\n        return (true, totalCoins, coinsPerSecond, startTime);\n    }\n\n}\n",
  "sourceMap": "128:4927:1:-:0;;;220:1;197:24;;1174:21;;;;;;;;;;128:4927;;;;;;",
  "sourcePath": "contracts/DummyMerkleResistor.sol",
  "type": "contract"
}