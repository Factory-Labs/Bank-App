{"abi": [{"anonymous": false, "inputs": [{"indexed": true, "internalType": "uint256", "name": "index", "type": "uint256"}, {"indexed": true, "internalType": "address", "name": "tokenAddress", "type": "address"}, {"indexed": false, "internalType": "bytes32", "name": "newRoot", "type": "bytes32"}, {"indexed": false, "internalType": "bytes32", "name": "ipfsHash", "type": "bytes32"}], "name": "MerkleTreeAdded", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "uint256", "name": "index", "type": "uint256"}, {"indexed": true, "internalType": "address", "name": "tokenAddress", "type": "address"}, {"indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256"}], "name": "TokensDeposited", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "destination", "type": "address"}, {"indexed": false, "internalType": "uint256", "name": "numTokens", "type": "uint256"}, {"indexed": false, "internalType": "uint256", "name": "tokensLeft", "type": "uint256"}, {"indexed": true, "internalType": "uint256", "name": "merkleIndex", "type": "uint256"}], "name": "WithdrawalOccurred", "type": "event"}, {"inputs": [], "name": "PRECISION", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "bytes32", "name": "newRoot", "type": "bytes32"}, {"internalType": "bytes32", "name": "ipfsHash", "type": "bytes32"}, {"internalType": "uint256", "name": "minEndTime", "type": "uint256"}, {"internalType": "uint256", "name": "maxEndTime", "type": "uint256"}, {"internalType": "uint256", "name": "pctUpFront", "type": "uint256"}, {"internalType": "address", "name": "depositToken", "type": "address"}, {"internalType": "uint256", "name": "tokenBalance", "type": "uint256"}], "name": "addMerkleTree", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "treeIndex", "type": "uint256"}, {"internalType": "uint256", "name": "value", "type": "uint256"}], "name": "depositTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "merkleIndex", "type": "uint256"}, {"internalType": "address", "name": "destination", "type": "address"}, {"internalType": "uint256", "name": "vestingTime", "type": "uint256"}, {"internalType": "uint256", "name": "minTotalPayments", "type": "uint256"}, {"internalType": "uint256", "name": "maxTotalPayments", "type": "uint256"}, {"internalType": "bytes32[]", "name": "proof", "type": "bytes32[]"}], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "", "type": "address"}, {"internalType": "uint256", "name": "", "type": "uint256"}], "name": "initialized", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "name": "merkleTrees", "outputs": [{"internalType": "bytes32", "name": "merkleRoot", "type": "bytes32"}, {"internalType": "bytes32", "name": "ipfsHash", "type": "bytes32"}, {"internalType": "uint256", "name": "minEndTime", "type": "uint256"}, {"internalType": "uint256", "name": "maxEndTime", "type": "uint256"}, {"internalType": "uint256", "name": "pctUpFront", "type": "uint256"}, {"internalType": "address", "name": "tokenAddress", "type": "address"}, {"internalType": "uint256", "name": "tokenBalance", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "numTrees", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "", "type": "address"}, {"internalType": "uint256", "name": "", "type": "uint256"}], "name": "tranches", "outputs": [{"internalType": "uint256", "name": "totalCoins", "type": "uint256"}, {"internalType": "uint256", "name": "currentCoins", "type": "uint256"}, {"internalType": "uint256", "name": "startTime", "type": "uint256"}, {"internalType": "uint256", "name": "endTime", "type": "uint256"}, {"internalType": "uint256", "name": "coinsPerSecond", "type": "uint256"}, {"internalType": "uint256", "name": "lastWithdrawalTime", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "merkleIndex", "type": "uint256"}, {"internalType": "uint256", "name": "vestingTime", "type": "uint256"}, {"internalType": "uint256", "name": "minTotalPayments", "type": "uint256"}, {"internalType": "uint256", "name": "maxTotalPayments", "type": "uint256"}], "name": "verifyVestingSchedule", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}, {"internalType": "uint256", "name": "", "type": "uint256"}, {"internalType": "uint256", "name": "", "type": "uint256"}, {"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "merkleIndex", "type": "uint256"}, {"internalType": "address", "name": "destination", "type": "address"}], "name": "withdraw", "outputs": [], "stateMutability": "nonpayable", "type": "function"}], "allSourcePaths": {"0": "contracts/MerkleLib.sol", "1": "contracts/MerkleResistor.sol", "2": "interfaces/IERC20.sol"}, "ast": {"absolutePath": "contracts/MerkleResistor.sol", "exportedSymbols": {"IERC20": [708], "MerkleLib": [630], "MerkleResistor": [551]}, "id": 552, "license": "GPL-3.0-only", "nodeType": "SourceUnit", "nodes": [{"id": 1, "literals": ["solidity", "0.8", ".9"], "nodeType": "PragmaDirective", "src": "42:22:1"}, {"absolutePath": "interfaces/IERC20.sol", "file": "../interfaces/IERC20.sol", "id": 2, "nameLocation": "-1:-1:-1", "nodeType": "ImportDirective", "scope": 552, "sourceUnit": 709, "src": "66:34:1", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/MerkleLib.sol", "file": "./MerkleLib.sol", "id": 3, "nameLocation": "-1:-1:-1", "nodeType": "ImportDirective", "scope": 552, "sourceUnit": 631, "src": "101:25:1", "symbolAliases": [], "unitAlias": ""}, {"abstract": false, "baseContracts": [], "canonicalName": "MerkleResistor", "contractDependencies": [], "contractKind": "contract", "fullyImplemented": true, "id": 551, "linearizedBaseContracts": [551], "name": "MerkleResistor", "nameLocation": "239:14:1", "nodeType": "ContractDefinition", "nodes": [{"id": 6, "libraryName": {"id": 4, "name": "MerkleLib", "nodeType": "IdentifierPath", "referencedDeclaration": 630, "src": "266:9:1"}, "nodeType": "UsingForDirective", "src": "260:28:1", "typeName": {"id": 5, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "280:7:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}}, {"constant": false, "functionSelector": "390b7c66", "id": 9, "mutability": "mutable", "name": "numTrees", "nameLocation": "345:8:1", "nodeType": "VariableDeclaration", "scope": 551, "src": "333:24:1", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 7, "name": "uint", "nodeType": "ElementaryTypeName", "src": "333:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": {"hexValue": "30", "id": 8, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "356:1:1", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "visibility": "public"}, {"canonicalName": "MerkleResistor.Tranche", "id": 22, "members": [{"constant": false, "id": 11, "mutability": "mutable", "name": "totalCoins", "nameLocation": "465:10:1", "nodeType": "VariableDeclaration", "scope": 22, "src": "460:15:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 10, "name": "uint", "nodeType": "ElementaryTypeName", "src": "460:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 13, "mutability": "mutable", "name": "currentCoins", "nameLocation": "537:12:1", "nodeType": "VariableDeclaration", "scope": 22, "src": "532:17:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 12, "name": "uint", "nodeType": "ElementaryTypeName", "src": "532:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 15, "mutability": "mutable", "name": "startTime", "nameLocation": "631:9:1", "nodeType": "VariableDeclaration", "scope": 22, "src": "626:14:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 14, "name": "uint", "nodeType": "ElementaryTypeName", "src": "626:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 17, "mutability": "mutable", "name": "endTime", "nameLocation": "693:7:1", "nodeType": "VariableDeclaration", "scope": 22, "src": "688:12:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 16, "name": "uint", "nodeType": "ElementaryTypeName", "src": "688:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 19, "mutability": "mutable", "name": "coinsPerSecond", "nameLocation": "753:14:1", "nodeType": "VariableDeclaration", "scope": 22, "src": "748:19:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 18, "name": "uint", "nodeType": "ElementaryTypeName", "src": "748:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 21, "mutability": "mutable", "name": "lastWithdrawalTime", "nameLocation": "870:18:1", "nodeType": "VariableDeclaration", "scope": 22, "src": "865:23:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 20, "name": "uint", "nodeType": "ElementaryTypeName", "src": "865:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "name": "Tranche", "nameLocation": "442:7:1", "nodeType": "StructDefinition", "scope": 551, "src": "435:548:1", "visibility": "public"}, {"canonicalName": "MerkleResistor.MerkleTree", "id": 37, "members": [{"constant": false, "id": 24, "mutability": "mutable", "name": "merkleRoot", "nameLocation": "1138:10:1", "nodeType": "VariableDeclaration", "scope": 37, "src": "1130:18:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 23, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "1130:7:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 26, "mutability": "mutable", "name": "ipfsHash", "nameLocation": "1253:8:1", "nodeType": "VariableDeclaration", "scope": 37, "src": "1245:16:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 25, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "1245:7:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 28, "mutability": "mutable", "name": "minEndTime", "nameLocation": "1372:10:1", "nodeType": "VariableDeclaration", "scope": 37, "src": "1367:15:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 27, "name": "uint", "nodeType": "ElementaryTypeName", "src": "1367:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 30, "mutability": "mutable", "name": "maxEndTime", "nameLocation": "1469:10:1", "nodeType": "VariableDeclaration", "scope": 37, "src": "1464:15:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 29, "name": "uint", "nodeType": "ElementaryTypeName", "src": "1464:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 32, "mutability": "mutable", "name": "pctUpFront", "nameLocation": "1566:10:1", "nodeType": "VariableDeclaration", "scope": 37, "src": "1561:15:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 31, "name": "uint", "nodeType": "ElementaryTypeName", "src": "1561:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 34, "mutability": "mutable", "name": "tokenAddress", "nameLocation": "1678:12:1", "nodeType": "VariableDeclaration", "scope": 37, "src": "1670:20:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 33, "name": "address", "nodeType": "ElementaryTypeName", "src": "1670:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 36, "mutability": "mutable", "name": "tokenBalance", "nameLocation": "1743:12:1", "nodeType": "VariableDeclaration", "scope": 37, "src": "1738:17:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 35, "name": "uint", "nodeType": "ElementaryTypeName", "src": "1738:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "name": "MerkleTree", "nameLocation": "1109:10:1", "nodeType": "StructDefinition", "scope": 551, "src": "1102:745:1", "visibility": "public"}, {"constant": false, "functionSelector": "86bb8249", "id": 43, "mutability": "mutable", "name": "initialized", "nameLocation": "2224:11:1", "nodeType": "VariableDeclaration", "scope": 551, "src": "2173:62:1", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$", "typeString": "mapping(address => mapping(uint256 => bool))"}, "typeName": {"id": 42, "keyType": {"id": 38, "name": "address", "nodeType": "ElementaryTypeName", "src": "2182:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Mapping", "src": "2173:43:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$", "typeString": "mapping(address => mapping(uint256 => bool))"}, "valueType": {"id": 41, "keyType": {"id": 39, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2202:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Mapping", "src": "2193:22:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$", "typeString": "mapping(uint256 => bool)"}, "valueType": {"id": 40, "name": "bool", "nodeType": "ElementaryTypeName", "src": "2210:4:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}}}, "visibility": "public"}, {"constant": false, "functionSelector": "85d88cb1", "id": 48, "mutability": "mutable", "name": "merkleTrees", "nameLocation": "2369:11:1", "nodeType": "VariableDeclaration", "scope": 551, "src": "2333:47:1", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$37_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree)"}, "typeName": {"id": 47, "keyType": {"id": 44, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2342:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Mapping", "src": "2333:28:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$37_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree)"}, "valueType": {"id": 46, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 45, "name": "MerkleTree", "nodeType": "IdentifierPath", "referencedDeclaration": 37, "src": "2350:10:1"}, "referencedDeclaration": 37, "src": "2350:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree"}}}, "visibility": "public"}, {"constant": false, "functionSelector": "c26cb54f", "id": 55, "mutability": "mutable", "name": "tranches", "nameLocation": "2503:8:1", "nodeType": "VariableDeclaration", "scope": 551, "src": "2449:62:1", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$22_storage_$_$", "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche))"}, "typeName": {"id": 54, "keyType": {"id": 49, "name": "address", "nodeType": "ElementaryTypeName", "src": "2458:7:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Mapping", "src": "2449:46:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$22_storage_$_$", "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche))"}, "valueType": {"id": 53, "keyType": {"id": 50, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2478:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Mapping", "src": "2469:25:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$22_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.Tranche)"}, "valueType": {"id": 52, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 51, "name": "Tranche", "nodeType": "IdentifierPath", "referencedDeclaration": 22, "src": "2486:7:1"}, "referencedDeclaration": 22, "src": "2486:7:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_storage_ptr", "typeString": "struct MerkleResistor.Tranche"}}}}, "visibility": "public"}, {"constant": true, "functionSelector": "aaf5eb68", "id": 58, "mutability": "constant", "name": "PRECISION", "nameLocation": "2605:9:1", "nodeType": "VariableDeclaration", "scope": 551, "src": "2584:40:1", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 56, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2584:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": {"hexValue": "31303030303030", "id": 57, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2617:7:1", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "value": "1000000"}, "visibility": "public"}, {"anonymous": false, "id": 68, "name": "WithdrawalOccurred", "nameLocation": "2675:18:1", "nodeType": "EventDefinition", "parameters": {"id": 67, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 60, "indexed": true, "mutability": "mutable", "name": "destination", "nameLocation": "2710:11:1", "nodeType": "VariableDeclaration", "scope": 68, "src": "2694:27:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 59, "name": "address", "nodeType": "ElementaryTypeName", "src": "2694:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 62, "indexed": false, "mutability": "mutable", "name": "numTokens", "nameLocation": "2728:9:1", "nodeType": "VariableDeclaration", "scope": 68, "src": "2723:14:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 61, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2723:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 64, "indexed": false, "mutability": "mutable", "name": "tokensLeft", "nameLocation": "2744:10:1", "nodeType": "VariableDeclaration", "scope": 68, "src": "2739:15:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 63, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2739:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 66, "indexed": true, "mutability": "mutable", "name": "merkleIndex", "nameLocation": "2769:11:1", "nodeType": "VariableDeclaration", "scope": 68, "src": "2756:24:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 65, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2756:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "2693:88:1"}, "src": "2669:113:1"}, {"anonymous": false, "id": 78, "name": "MerkleTreeAdded", "nameLocation": "2827:15:1", "nodeType": "EventDefinition", "parameters": {"id": 77, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 70, "indexed": true, "mutability": "mutable", "name": "index", "nameLocation": "2856:5:1", "nodeType": "VariableDeclaration", "scope": 78, "src": "2843:18:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 69, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2843:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 72, "indexed": true, "mutability": "mutable", "name": "tokenAddress", "nameLocation": "2879:12:1", "nodeType": "VariableDeclaration", "scope": 78, "src": "2863:28:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 71, "name": "address", "nodeType": "ElementaryTypeName", "src": "2863:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 74, "indexed": false, "mutability": "mutable", "name": "newRoot", "nameLocation": "2901:7:1", "nodeType": "VariableDeclaration", "scope": 78, "src": "2893:15:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 73, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "2893:7:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 76, "indexed": false, "mutability": "mutable", "name": "ipfsHash", "nameLocation": "2918:8:1", "nodeType": "VariableDeclaration", "scope": 78, "src": "2910:16:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 75, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "2910:7:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "2842:85:1"}, "src": "2821:107:1"}, {"anonymous": false, "id": 86, "name": "TokensDeposited", "nameLocation": "2977:15:1", "nodeType": "EventDefinition", "parameters": {"id": 85, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 80, "indexed": true, "mutability": "mutable", "name": "index", "nameLocation": "3006:5:1", "nodeType": "VariableDeclaration", "scope": 86, "src": "2993:18:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 79, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2993:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 82, "indexed": true, "mutability": "mutable", "name": "tokenAddress", "nameLocation": "3029:12:1", "nodeType": "VariableDeclaration", "scope": 86, "src": "3013:28:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 81, "name": "address", "nodeType": "ElementaryTypeName", "src": "3013:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 84, "indexed": false, "mutability": "mutable", "name": "amount", "nameLocation": "3048:6:1", "nodeType": "VariableDeclaration", "scope": 86, "src": "3043:11:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 83, "name": "uint", "nodeType": "ElementaryTypeName", "src": "3043:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "2992:63:1"}, "src": "2971:85:1"}, {"body": {"id": 144, "nodeType": "Block", "src": "3248:918:1", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 106, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 104, "name": "pctUpFront", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 96, "src": "3310:10:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "313030", "id": 105, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3323:3:1", "typeDescriptions": {"typeIdentifier": "t_rational_100_by_1", "typeString": "int_const 100"}, "value": "100"}, "src": "3310:16:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "706374557046726f6e74203e3d20313030", "id": 107, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "3328:19:1", "typeDescriptions": {"typeIdentifier": "t_stringliteral_5d62361d64e7f8cf4fff457bf47173a531e51b64da30badb8e72846a2642165f", "typeString": "literal_string \"pctUpFront >= 100\""}, "value": "pctUpFront >= 100"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_5d62361d64e7f8cf4fff457bf47173a531e51b64da30badb8e72846a2642165f", "typeString": "literal_string \"pctUpFront >= 100\""}], "id": 103, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "3302:7:1", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 108, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3302:46:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 109, "nodeType": "ExpressionStatement", "src": "3302:46:1"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 113, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 111, "name": "minEndTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 92, "src": "3366:10:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"id": 112, "name": "maxEndTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 94, "src": "3379:10:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3366:23:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "6d696e456e6454696d65206d757374206265206c657373207468616e206d6178456e6454696d65", "id": 114, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "3391:41:1", "typeDescriptions": {"typeIdentifier": "t_stringliteral_b9f494a656d13b13a08d4cf899120fa0e5253d75c531a056af397669b40d9b3e", "typeString": "literal_string \"minEndTime must be less than maxEndTime\""}, "value": "minEndTime must be less than maxEndTime"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_b9f494a656d13b13a08d4cf899120fa0e5253d75c531a056af397669b40d9b3e", "typeString": "literal_string \"minEndTime must be less than maxEndTime\""}], "id": 110, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "3358:7:1", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 115, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3358:75:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 116, "nodeType": "ExpressionStatement", "src": "3358:75:1"}, {"expression": {"id": 130, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"id": 117, "name": "merkleTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 48, "src": "3500:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$37_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"}}, "id": 120, "indexExpression": {"id": 119, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": true, "src": "3512:10:1", "subExpression": {"id": 118, "name": "numTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 9, "src": "3514:8:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "3500:23:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage", "typeString": "struct MerkleResistor.MerkleTree storage ref"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 122, "name": "newRoot", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 88, "src": "3550:7:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"id": 123, "name": "ipfsHash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 90, "src": "3571:8:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"id": 124, "name": "minEndTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 92, "src": "3593:10:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 125, "name": "maxEndTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 94, "src": "3617:10:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 126, "name": "pctUpFront", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 96, "src": "3641:10:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 127, "name": "depositToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 98, "src": "3665:12:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"hexValue": "30", "id": 128, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3691:1:1", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}], "id": 121, "name": "MerkleTree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 37, "src": "3526:10:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_struct$_MerkleTree_$37_storage_ptr_$", "typeString": "type(struct MerkleResistor.MerkleTree storage pointer)"}}, "id": 129, "isConstant": false, "isLValue": false, "isPure": false, "kind": "structConstructorCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3526:247:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "src": "3500:273:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage", "typeString": "struct MerkleResistor.MerkleTree storage ref"}}, "id": 131, "nodeType": "ExpressionStatement", "src": "3500:273:1"}, {"expression": {"arguments": [{"id": 133, "name": "numTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 9, "src": "4063:8:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 134, "name": "tokenBalance", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 100, "src": "4073:12:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 132, "name": "depositTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 190, "src": "4049:13:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$", "typeString": "function (uint256,uint256)"}}, "id": 135, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4049:37:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 136, "nodeType": "ExpressionStatement", "src": "4049:37:1"}, {"eventCall": {"arguments": [{"id": 138, "name": "numTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 9, "src": "4117:8:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 139, "name": "depositToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 98, "src": "4127:12:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 140, "name": "newRoot", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 88, "src": "4141:7:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"id": 141, "name": "ipfsHash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 90, "src": "4150:8:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 137, "name": "MerkleTreeAdded", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 78, "src": "4101:15:1", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_bytes32_$_t_bytes32_$returns$__$", "typeString": "function (uint256,address,bytes32,bytes32)"}}, "id": 142, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "4101:58:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 143, "nodeType": "EmitStatement", "src": "4096:63:1"}]}, "functionSelector": "d71383ed", "id": 145, "implemented": true, "kind": "function", "modifiers": [], "name": "addMerkleTree", "nameLocation": "3100:13:1", "nodeType": "FunctionDefinition", "parameters": {"id": 101, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 88, "mutability": "mutable", "name": "newRoot", "nameLocation": "3122:7:1", "nodeType": "VariableDeclaration", "scope": 145, "src": "3114:15:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 87, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "3114:7:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 90, "mutability": "mutable", "name": "ipfsHash", "nameLocation": "3139:8:1", "nodeType": "VariableDeclaration", "scope": 145, "src": "3131:16:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 89, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "3131:7:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 92, "mutability": "mutable", "name": "minEndTime", "nameLocation": "3154:10:1", "nodeType": "VariableDeclaration", "scope": 145, "src": "3149:15:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 91, "name": "uint", "nodeType": "ElementaryTypeName", "src": "3149:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 94, "mutability": "mutable", "name": "maxEndTime", "nameLocation": "3171:10:1", "nodeType": "VariableDeclaration", "scope": 145, "src": "3166:15:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 93, "name": "uint", "nodeType": "ElementaryTypeName", "src": "3166:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 96, "mutability": "mutable", "name": "pctUpFront", "nameLocation": "3188:10:1", "nodeType": "VariableDeclaration", "scope": 145, "src": "3183:15:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 95, "name": "uint", "nodeType": "ElementaryTypeName", "src": "3183:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 98, "mutability": "mutable", "name": "depositToken", "nameLocation": "3208:12:1", "nodeType": "VariableDeclaration", "scope": 145, "src": "3200:20:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 97, "name": "address", "nodeType": "ElementaryTypeName", "src": "3200:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 100, "mutability": "mutable", "name": "tokenBalance", "nameLocation": "3227:12:1", "nodeType": "VariableDeclaration", "scope": 145, "src": "3222:17:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 99, "name": "uint", "nodeType": "ElementaryTypeName", "src": "3222:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "3113:127:1"}, "returnParameters": {"id": 102, "nodeType": "ParameterList", "parameters": [], "src": "3248:0:1"}, "scope": 551, "src": "3091:1075:1", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 189, "nodeType": "Block", "src": "4262:1128:1", "statements": [{"assignments": [154], "declarations": [{"constant": false, "id": 154, "mutability": "mutable", "name": "merkleTree", "nameLocation": "4326:10:1", "nodeType": "VariableDeclaration", "scope": 189, "src": "4307:29:1", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree"}, "typeName": {"id": 153, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 152, "name": "MerkleTree", "nodeType": "IdentifierPath", "referencedDeclaration": 37, "src": "4307:10:1"}, "referencedDeclaration": 37, "src": "4307:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree"}}, "visibility": "internal"}], "id": 158, "initialValue": {"baseExpression": {"id": 155, "name": "merkleTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 48, "src": "4339:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$37_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"}}, "id": 157, "indexExpression": {"id": 156, "name": "treeIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 147, "src": "4351:9:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "4339:22:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage", "typeString": "struct MerkleResistor.MerkleTree storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "4307:54:1"}, {"expression": {"id": 163, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 159, "name": "merkleTree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 154, "src": "4434:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree storage pointer"}}, "id": 161, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "tokenBalance", "nodeType": "MemberAccess", "referencedDeclaration": 36, "src": "4434:23:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "+=", "rightHandSide": {"id": 162, "name": "value", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 149, "src": "4461:5:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "4434:32:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 164, "nodeType": "ExpressionStatement", "src": "4434:32:1"}, {"expression": {"arguments": [{"arguments": [{"expression": {"id": 171, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -15, "src": "5251:3:1", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 172, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "src": "5251:10:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"arguments": [{"id": 175, "name": "this", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -28, "src": "5271:4:1", "typeDescriptions": {"typeIdentifier": "t_contract$_MerkleResistor_$551", "typeString": "contract MerkleResistor"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_contract$_MerkleResistor_$551", "typeString": "contract MerkleResistor"}], "id": 174, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "5263:7:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": {"id": 173, "name": "address", "nodeType": "ElementaryTypeName", "src": "5263:7:1", "typeDescriptions": {}}}, "id": 176, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5263:13:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 177, "name": "value", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 149, "src": "5278:5:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"expression": {"id": 167, "name": "merkleTree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 154, "src": "5213:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree storage pointer"}}, "id": 168, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 34, "src": "5213:23:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 166, "name": "IERC20", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 708, "src": "5206:6:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_IERC20_$708_$", "typeString": "type(contract IERC20)"}}, "id": 169, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5206:31:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$708", "typeString": "contract IERC20"}}, "id": 170, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "transferFrom", "nodeType": "MemberAccess", "referencedDeclaration": 689, "src": "5206:44:1", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$", "typeString": "function (address,address,uint256) external returns (bool)"}}, "id": 178, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5206:78:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4552433230207472616e73666572206661696c6564", "id": 179, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "5286:23:1", "typeDescriptions": {"typeIdentifier": "t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff", "typeString": "literal_string \"ERC20 transfer failed\""}, "value": "ERC20 transfer failed"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff", "typeString": "literal_string \"ERC20 transfer failed\""}], "id": 165, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "5198:7:1", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 180, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5198:112:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 181, "nodeType": "ExpressionStatement", "src": "5198:112:1"}, {"eventCall": {"arguments": [{"id": 183, "name": "treeIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 147, "src": "5341:9:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 184, "name": "merkleTree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 154, "src": "5352:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree storage pointer"}}, "id": 185, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 34, "src": "5352:23:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 186, "name": "value", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 149, "src": "5377:5:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 182, "name": "TokensDeposited", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 86, "src": "5325:15:1", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$", "typeString": "function (uint256,address,uint256)"}}, "id": 187, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5325:58:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 188, "nodeType": "EmitStatement", "src": "5320:63:1"}]}, "functionSelector": "f16ad51e", "id": 190, "implemented": true, "kind": "function", "modifiers": [], "name": "depositTokens", "nameLocation": "4213:13:1", "nodeType": "FunctionDefinition", "parameters": {"id": 150, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 147, "mutability": "mutable", "name": "treeIndex", "nameLocation": "4232:9:1", "nodeType": "VariableDeclaration", "scope": 190, "src": "4227:14:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 146, "name": "uint", "nodeType": "ElementaryTypeName", "src": "4227:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 149, "mutability": "mutable", "name": "value", "nameLocation": "4248:5:1", "nodeType": "VariableDeclaration", "scope": 190, "src": "4243:10:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 148, "name": "uint", "nodeType": "ElementaryTypeName", "src": "4243:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "4226:28:1"}, "returnParameters": {"id": 151, "nodeType": "ParameterList", "parameters": [], "src": "4262:0:1"}, "scope": 551, "src": "4204:1186:1", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 303, "nodeType": "Block", "src": "5807:1830:1", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 210, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 207, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -15, "src": "5882:3:1", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 208, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "src": "5882:10:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"id": 209, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 194, "src": "5896:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "5882:25:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616e636865", "id": 211, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "5909:38:1", "typeDescriptions": {"typeIdentifier": "t_stringliteral_0d840bbe3638dabb5a6e726d796a00fcf265be6e5ba2e71e838f9bed65dfcb15", "typeString": "literal_string \"Can only initialize your own tranche\""}, "value": "Can only initialize your own tranche"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_0d840bbe3638dabb5a6e726d796a00fcf265be6e5ba2e71e838f9bed65dfcb15", "typeString": "literal_string \"Can only initialize your own tranche\""}], "id": 206, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "5874:7:1", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 212, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5874:74:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 213, "nodeType": "ExpressionStatement", "src": "5874:74:1"}, {"expression": {"arguments": [{"id": 220, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "!", "prefix": true, "src": "6002:38:1", "subExpression": {"baseExpression": {"baseExpression": {"id": 215, "name": "initialized", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43, "src": "6003:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$", "typeString": "mapping(address => mapping(uint256 => bool))"}}, "id": 217, "indexExpression": {"id": 216, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 194, "src": "6015:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6003:24:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$", "typeString": "mapping(uint256 => bool)"}}, "id": 219, "indexExpression": {"id": 218, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 192, "src": "6028:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6003:37:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "416c726561647920696e697469616c697a6564", "id": 221, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "6042:21:1", "typeDescriptions": {"typeIdentifier": "t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0", "typeString": "literal_string \"Already initialized\""}, "value": "Already initialized"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0", "typeString": "literal_string \"Already initialized\""}], "id": 214, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "5994:7:1", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 222, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5994:70:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 223, "nodeType": "ExpressionStatement", "src": "5994:70:1"}, {"assignments": [225], "declarations": [{"constant": false, "id": 225, "mutability": "mutable", "name": "leaf", "nameLocation": "6145:4:1", "nodeType": "VariableDeclaration", "scope": 303, "src": "6137:12:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 224, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "6137:7:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "id": 234, "initialValue": {"arguments": [{"arguments": [{"id": 229, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 194, "src": "6173:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 230, "name": "minTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 198, "src": "6186:16:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 231, "name": "maxTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 200, "src": "6204:16:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 227, "name": "abi", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -1, "src": "6162:3:1", "typeDescriptions": {"typeIdentifier": "t_magic_abi", "typeString": "abi"}}, "id": 228, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "encode", "nodeType": "MemberAccess", "src": "6162:10:1", "typeDescriptions": {"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$", "typeString": "function () pure returns (bytes memory)"}}, "id": 232, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6162:59:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}], "id": 226, "name": "keccak256", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -8, "src": "6152:9:1", "typeDescriptions": {"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$", "typeString": "function (bytes memory) pure returns (bytes32)"}}, "id": 233, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6152:70:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "VariableDeclarationStatement", "src": "6137:85:1"}, {"assignments": [237], "declarations": [{"constant": false, "id": 237, "mutability": "mutable", "name": "tree", "nameLocation": "6291:4:1", "nodeType": "VariableDeclaration", "scope": 303, "src": "6273:22:1", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree"}, "typeName": {"id": 236, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 235, "name": "MerkleTree", "nodeType": "IdentifierPath", "referencedDeclaration": 37, "src": "6273:10:1"}, "referencedDeclaration": 37, "src": "6273:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree"}}, "visibility": "internal"}], "id": 241, "initialValue": {"baseExpression": {"id": 238, "name": "merkleTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 48, "src": "6298:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$37_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"}}, "id": 240, "indexExpression": {"id": 239, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 192, "src": "6310:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6298:24:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage", "typeString": "struct MerkleResistor.MerkleTree storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "6273:49:1"}, {"expression": {"arguments": [{"arguments": [{"id": 246, "name": "leaf", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 225, "src": "6446:4:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"id": 247, "name": "proof", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 203, "src": "6452:5:1", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr", "typeString": "bytes32[] memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr", "typeString": "bytes32[] memory"}], "expression": {"expression": {"id": 243, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 237, "src": "6418:4:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 244, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "merkleRoot", "nodeType": "MemberAccess", "referencedDeclaration": 24, "src": "6418:15:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 245, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "verifyProof", "nodeType": "MemberAccess", "referencedDeclaration": 597, "src": "6418:27:1", "typeDescriptions": {"typeIdentifier": "t_function_delegatecall_pure$_t_bytes32_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes32_$", "typeString": "function (bytes32,bytes32,bytes32[] memory) pure returns (bool)"}}, "id": 248, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6418:40:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "5468652070726f6f6620636f756c64206e6f742062652076657269666965642e", "id": 249, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "6460:34:1", "typeDescriptions": {"typeIdentifier": "t_stringliteral_6befa95a15378f3fa320a9fc597710e04d31854374b1378d40ad4268234fd91c", "typeString": "literal_string \"The proof could not be verified.\""}, "value": "The proof could not be verified."}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_6befa95a15378f3fa320a9fc597710e04d31854374b1378d40ad4268234fd91c", "typeString": "literal_string \"The proof could not be verified.\""}], "id": 242, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "6410:7:1", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 250, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6410:85:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 251, "nodeType": "ExpressionStatement", "src": "6410:85:1"}, {"expression": {"id": 258, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"baseExpression": {"id": 252, "name": "initialized", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43, "src": "6593:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$", "typeString": "mapping(address => mapping(uint256 => bool))"}}, "id": 255, "indexExpression": {"id": 253, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 194, "src": "6605:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6593:24:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$", "typeString": "mapping(uint256 => bool)"}}, "id": 256, "indexExpression": {"id": 254, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 192, "src": "6618:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "6593:37:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"hexValue": "74727565", "id": 257, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "6633:4:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "true"}, "src": "6593:44:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 259, "nodeType": "ExpressionStatement", "src": "6593:44:1"}, {"assignments": [261, 263, 265, 267], "declarations": [{"constant": false, "id": 261, "mutability": "mutable", "name": "valid", "nameLocation": "6654:5:1", "nodeType": "VariableDeclaration", "scope": 303, "src": "6649:10:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 260, "name": "bool", "nodeType": "ElementaryTypeName", "src": "6649:4:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}, {"constant": false, "id": 263, "mutability": "mutable", "name": "totalCoins", "nameLocation": "6666:10:1", "nodeType": "VariableDeclaration", "scope": 303, "src": "6661:15:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 262, "name": "uint", "nodeType": "ElementaryTypeName", "src": "6661:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 265, "mutability": "mutable", "name": "coinsPerSecond", "nameLocation": "6683:14:1", "nodeType": "VariableDeclaration", "scope": 303, "src": "6678:19:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 264, "name": "uint", "nodeType": "ElementaryTypeName", "src": "6678:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 267, "mutability": "mutable", "name": "startTime", "nameLocation": "6704:9:1", "nodeType": "VariableDeclaration", "scope": 303, "src": "6699:14:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 266, "name": "uint", "nodeType": "ElementaryTypeName", "src": "6699:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 274, "initialValue": {"arguments": [{"id": 269, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 192, "src": "6739:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 270, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 196, "src": "6752:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 271, "name": "minTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 198, "src": "6765:16:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 272, "name": "maxTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 200, "src": "6783:16:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 268, "name": "verifyVestingSchedule", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 550, "src": "6717:21:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$", "typeString": "function (uint256,uint256,uint256,uint256) view returns (bool,uint256,uint256,uint256)"}}, "id": 273, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6717:83:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$", "typeString": "tuple(bool,uint256,uint256,uint256)"}}, "nodeType": "VariableDeclarationStatement", "src": "6648:152:1"}, {"expression": {"arguments": [{"id": 276, "name": "valid", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 261, "src": "6818:5:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "496e76616c69642076657374696e67207363686564756c65", "id": 277, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "6825:26:1", "typeDescriptions": {"typeIdentifier": "t_stringliteral_e7aa6925863169bd8cb1c379b7045e79f109b7df282905e5a05c3523fee8c286", "typeString": "literal_string \"Invalid vesting schedule\""}, "value": "Invalid vesting schedule"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_e7aa6925863169bd8cb1c379b7045e79f109b7df282905e5a05c3523fee8c286", "typeString": "literal_string \"Invalid vesting schedule\""}], "id": 275, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "6810:7:1", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 278, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6810:42:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 279, "nodeType": "ExpressionStatement", "src": "6810:42:1"}, {"expression": {"id": 296, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"baseExpression": {"id": 280, "name": "tranches", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 55, "src": "7046:8:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$22_storage_$_$", "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche storage ref))"}}, "id": 283, "indexExpression": {"id": 281, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 194, "src": "7055:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "7046:21:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$22_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"}}, "id": 284, "indexExpression": {"id": 282, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 192, "src": "7068:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "7046:34:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_storage", "typeString": "struct MerkleResistor.Tranche storage ref"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 286, "name": "totalCoins", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 263, "src": "7104:10:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 287, "name": "totalCoins", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 263, "src": "7180:10:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 288, "name": "startTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 267, "src": "7226:9:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 292, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 289, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "7314:5:1", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 290, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "7314:15:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"id": 291, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 196, "src": "7332:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "7314:29:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 293, "name": "coinsPerSecond", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 265, "src": "7401:14:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 294, "name": "startTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 267, "src": "7469:9:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 285, "name": "Tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 22, "src": "7083:7:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_struct$_Tranche_$22_storage_ptr_$", "typeString": "type(struct MerkleResistor.Tranche storage pointer)"}}, "id": 295, "isConstant": false, "isLValue": false, "isPure": false, "kind": "structConstructorCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7083:503:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_memory_ptr", "typeString": "struct MerkleResistor.Tranche memory"}}, "src": "7046:540:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_storage", "typeString": "struct MerkleResistor.Tranche storage ref"}}, "id": 297, "nodeType": "ExpressionStatement", "src": "7046:540:1"}, {"expression": {"arguments": [{"id": 299, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 192, "src": "7605:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 300, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 194, "src": "7618:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_address", "typeString": "address"}], "id": 298, "name": "withdraw", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 413, "src": "7596:8:1", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$__$", "typeString": "function (uint256,address)"}}, "id": 301, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7596:34:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 302, "nodeType": "ExpressionStatement", "src": "7596:34:1"}]}, "functionSelector": "f287ad04", "id": 304, "implemented": true, "kind": "function", "modifiers": [], "name": "initialize", "nameLocation": "5660:10:1", "nodeType": "FunctionDefinition", "parameters": {"id": 204, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 192, "mutability": "mutable", "name": "merkleIndex", "nameLocation": "5676:11:1", "nodeType": "VariableDeclaration", "scope": 304, "src": "5671:16:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 191, "name": "uint", "nodeType": "ElementaryTypeName", "src": "5671:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 194, "mutability": "mutable", "name": "destination", "nameLocation": "5697:11:1", "nodeType": "VariableDeclaration", "scope": 304, "src": "5689:19:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 193, "name": "address", "nodeType": "ElementaryTypeName", "src": "5689:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 196, "mutability": "mutable", "name": "vestingTime", "nameLocation": "5715:11:1", "nodeType": "VariableDeclaration", "scope": 304, "src": "5710:16:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 195, "name": "uint", "nodeType": "ElementaryTypeName", "src": "5710:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 198, "mutability": "mutable", "name": "minTotalPayments", "nameLocation": "5733:16:1", "nodeType": "VariableDeclaration", "scope": 304, "src": "5728:21:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 197, "name": "uint", "nodeType": "ElementaryTypeName", "src": "5728:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 200, "mutability": "mutable", "name": "maxTotalPayments", "nameLocation": "5756:16:1", "nodeType": "VariableDeclaration", "scope": 304, "src": "5751:21:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 199, "name": "uint", "nodeType": "ElementaryTypeName", "src": "5751:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 203, "mutability": "mutable", "name": "proof", "nameLocation": "5791:5:1", "nodeType": "VariableDeclaration", "scope": 304, "src": "5774:22:1", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr", "typeString": "bytes32[]"}, "typeName": {"baseType": {"id": 201, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "5774:7:1", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 202, "nodeType": "ArrayTypeName", "src": "5774:9:1", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr", "typeString": "bytes32[]"}}, "visibility": "internal"}], "src": "5670:127:1"}, "returnParameters": {"id": 205, "nodeType": "ParameterList", "parameters": [], "src": "5807:0:1"}, "scope": 551, "src": "5651:1986:1", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 412, "nodeType": "Block", "src": "7928:2522:1", "statements": [{"expression": {"arguments": [{"baseExpression": {"baseExpression": {"id": 312, "name": "initialized", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 43, "src": "8054:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$", "typeString": "mapping(address => mapping(uint256 => bool))"}}, "id": 314, "indexExpression": {"id": 313, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 308, "src": "8066:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "8054:24:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$", "typeString": "mapping(uint256 => bool)"}}, "id": 316, "indexExpression": {"id": 315, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 306, "src": "8079:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "8054:37:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "596f75206d75737420696e697469616c697a6520796f7572206163636f756e742066697273742e", "id": 317, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "8093:41:1", "typeDescriptions": {"typeIdentifier": "t_stringliteral_4abd8331dd14b306cce990886a8c58b8be69cac04657ffd8c84a7e7c5940d2d1", "typeString": "literal_string \"You must initialize your account first.\""}, "value": "You must initialize your account first."}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_4abd8331dd14b306cce990886a8c58b8be69cac04657ffd8c84a7e7c5940d2d1", "typeString": "literal_string \"You must initialize your account first.\""}], "id": 311, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "8046:7:1", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 318, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8046:89:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 319, "nodeType": "ExpressionStatement", "src": "8046:89:1"}, {"assignments": [322], "declarations": [{"constant": false, "id": 322, "mutability": "mutable", "name": "tranche", "nameLocation": "8202:7:1", "nodeType": "VariableDeclaration", "scope": 412, "src": "8186:23:1", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_storage_ptr", "typeString": "struct MerkleResistor.Tranche"}, "typeName": {"id": 321, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 320, "name": "Tranche", "nodeType": "IdentifierPath", "referencedDeclaration": 22, "src": "8186:7:1"}, "referencedDeclaration": 22, "src": "8186:7:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_storage_ptr", "typeString": "struct MerkleResistor.Tranche"}}, "visibility": "internal"}], "id": 328, "initialValue": {"baseExpression": {"baseExpression": {"id": 323, "name": "tranches", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 55, "src": "8212:8:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$22_storage_$_$", "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche storage ref))"}}, "id": 325, "indexExpression": {"id": 324, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 308, "src": "8221:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "8212:21:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$22_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"}}, "id": 327, "indexExpression": {"id": 326, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 306, "src": "8234:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "8212:34:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_storage", "typeString": "struct MerkleResistor.Tranche storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "8186:60:1"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 333, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 330, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 322, "src": "8303:7:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 331, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCoins", "nodeType": "MemberAccess", "referencedDeclaration": 13, "src": "8303:20:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 332, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "8327:1:1", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "8303:25:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4e6f20636f696e73206c65667420746f207769746864726177", "id": 334, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "8330:27:1", "typeDescriptions": {"typeIdentifier": "t_stringliteral_f5408369ba8a5a8ab8865a5c8cf9d54818bf598d281aa43e2647b1ce4add273e", "typeString": "literal_string \"No coins left to withdraw\""}, "value": "No coins left to withdraw"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_f5408369ba8a5a8ab8865a5c8cf9d54818bf598d281aa43e2647b1ce4add273e", "typeString": "literal_string \"No coins left to withdraw\""}], "id": 329, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "8295:7:1", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 335, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8295:63:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 336, "nodeType": "ExpressionStatement", "src": "8295:63:1"}, {"assignments": [338], "declarations": [{"constant": false, "id": 338, "mutability": "mutable", "name": "currentWithdrawal", "nameLocation": "8373:17:1", "nodeType": "VariableDeclaration", "scope": 412, "src": "8368:22:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 337, "name": "uint", "nodeType": "ElementaryTypeName", "src": "8368:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 340, "initialValue": {"hexValue": "30", "id": 339, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "8393:1:1", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "8368:26:1"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 345, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 341, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "8519:5:1", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 342, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "8519:15:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"expression": {"id": 343, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 322, "src": "8538:7:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 344, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "endTime", "nodeType": "MemberAccess", "referencedDeclaration": 17, "src": "8538:15:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8519:34:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 364, "nodeType": "Block", "src": "8626:263:1", "statements": [{"expression": {"id": 362, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 352, "name": "currentWithdrawal", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 338, "src": "8787:17:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 361, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 357, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 353, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "8808:5:1", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 354, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "8808:15:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"expression": {"id": 355, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 322, "src": "8826:7:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 356, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastWithdrawalTime", "nodeType": "MemberAccess", "referencedDeclaration": 21, "src": "8826:26:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8808:44:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 358, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "8807:46:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"expression": {"id": 359, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 322, "src": "8856:7:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 360, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "coinsPerSecond", "nodeType": "MemberAccess", "referencedDeclaration": 19, "src": "8856:22:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8807:71:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8787:91:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 363, "nodeType": "ExpressionStatement", "src": "8787:91:1"}]}, "id": 365, "nodeType": "IfStatement", "src": "8515:374:1", "trueBody": {"id": 351, "nodeType": "Block", "src": "8555:65:1", "statements": [{"expression": {"id": 349, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 346, "name": "currentWithdrawal", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 338, "src": "8569:17:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 347, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 322, "src": "8589:7:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 348, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCoins", "nodeType": "MemberAccess", "referencedDeclaration": 13, "src": "8589:20:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8569:40:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 350, "nodeType": "ExpressionStatement", "src": "8569:40:1"}]}}, {"assignments": [368], "declarations": [{"constant": false, "id": 368, "mutability": "mutable", "name": "tree", "nameLocation": "8940:4:1", "nodeType": "VariableDeclaration", "scope": 412, "src": "8921:23:1", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree"}, "typeName": {"id": 367, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 366, "name": "MerkleTree", "nodeType": "IdentifierPath", "referencedDeclaration": 37, "src": "8921:10:1"}, "referencedDeclaration": 37, "src": "8921:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree"}}, "visibility": "internal"}], "id": 372, "initialValue": {"baseExpression": {"id": 369, "name": "merkleTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 48, "src": "8947:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$37_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"}}, "id": 371, "indexExpression": {"id": 370, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 306, "src": "8959:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "8947:24:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage", "typeString": "struct MerkleResistor.MerkleTree storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "8921:50:1"}, {"expression": {"id": 377, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 373, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 322, "src": "9170:7:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 375, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "currentCoins", "nodeType": "MemberAccess", "referencedDeclaration": 13, "src": "9170:20:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "-=", "rightHandSide": {"id": 376, "name": "currentWithdrawal", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 338, "src": "9194:17:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "9170:41:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 378, "nodeType": "ExpressionStatement", "src": "9170:41:1"}, {"expression": {"id": 384, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 379, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 322, "src": "9403:7:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 381, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "lastWithdrawalTime", "nodeType": "MemberAccess", "referencedDeclaration": 21, "src": "9403:26:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 382, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "9432:5:1", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 383, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "9432:15:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "9403:44:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 385, "nodeType": "ExpressionStatement", "src": "9403:44:1"}, {"expression": {"id": 390, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 386, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 368, "src": "9582:4:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree storage pointer"}}, "id": 388, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "tokenBalance", "nodeType": "MemberAccess", "referencedDeclaration": 36, "src": "9582:17:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "-=", "rightHandSide": {"id": 389, "name": "currentWithdrawal", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 338, "src": "9603:17:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "9582:38:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 391, "nodeType": "ExpressionStatement", "src": "9582:38:1"}, {"expression": {"arguments": [{"arguments": [{"id": 398, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 308, "src": "10286:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 399, "name": "currentWithdrawal", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 338, "src": "10299:17:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"expression": {"id": 394, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 368, "src": "10258:4:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree storage pointer"}}, "id": 395, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 34, "src": "10258:17:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 393, "name": "IERC20", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 708, "src": "10251:6:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_IERC20_$708_$", "typeString": "type(contract IERC20)"}}, "id": 396, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10251:25:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$708", "typeString": "contract IERC20"}}, "id": 397, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "transfer", "nodeType": "MemberAccess", "referencedDeclaration": 657, "src": "10251:34:1", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$", "typeString": "function (address,uint256) external returns (bool)"}}, "id": 400, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10251:66:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "546f6b656e207472616e73666572206661696c6564", "id": 401, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "10319:23:1", "typeDescriptions": {"typeIdentifier": "t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4", "typeString": "literal_string \"Token transfer failed\""}, "value": "Token transfer failed"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4", "typeString": "literal_string \"Token transfer failed\""}], "id": 392, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "10243:7:1", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 402, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10243:100:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 403, "nodeType": "ExpressionStatement", "src": "10243:100:1"}, {"eventCall": {"arguments": [{"id": 405, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 308, "src": "10377:11:1", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 406, "name": "currentWithdrawal", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 338, "src": "10390:17:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 407, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 322, "src": "10409:7:1", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$22_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 408, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCoins", "nodeType": "MemberAccess", "referencedDeclaration": 13, "src": "10409:20:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 409, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 306, "src": "10431:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 404, "name": "WithdrawalOccurred", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 68, "src": "10358:18:1", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$", "typeString": "function (address,uint256,uint256,uint256)"}}, "id": 410, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10358:85:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 411, "nodeType": "EmitStatement", "src": "10353:90:1"}]}, "functionSelector": "00f714ce", "id": 413, "implemented": true, "kind": "function", "modifiers": [], "name": "withdraw", "nameLocation": "7873:8:1", "nodeType": "FunctionDefinition", "parameters": {"id": 309, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 306, "mutability": "mutable", "name": "merkleIndex", "nameLocation": "7887:11:1", "nodeType": "VariableDeclaration", "scope": 413, "src": "7882:16:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 305, "name": "uint", "nodeType": "ElementaryTypeName", "src": "7882:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 308, "mutability": "mutable", "name": "destination", "nameLocation": "7908:11:1", "nodeType": "VariableDeclaration", "scope": 413, "src": "7900:19:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 307, "name": "address", "nodeType": "ElementaryTypeName", "src": "7900:7:1", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}], "src": "7881:39:1"}, "returnParameters": {"id": 310, "nodeType": "ParameterList", "parameters": [], "src": "7928:0:1"}, "scope": 551, "src": "7864:2586:1", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 549, "nodeType": "Block", "src": "10677:2785:1", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 434, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 432, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 415, "src": "10809:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 433, "name": "numTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 9, "src": "10823:8:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "10809:22:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 442, "nodeType": "IfStatement", "src": "10805:76:1", "trueBody": {"id": 441, "nodeType": "Block", "src": "10833:48:1", "statements": [{"expression": {"components": [{"hexValue": "66616c7365", "id": 435, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "10855:5:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}, {"hexValue": "30", "id": 436, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10862:1:1", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, {"hexValue": "30", "id": 437, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10865:1:1", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, {"hexValue": "30", "id": 438, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10868:1:1", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "id": 439, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "TupleExpression", "src": "10854:16:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$", "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"}}, "functionReturnParameters": 431, "id": 440, "nodeType": "Return", "src": "10847:23:1"}]}}, {"assignments": [445], "declarations": [{"constant": false, "id": 445, "mutability": "mutable", "name": "tree", "nameLocation": "11004:4:1", "nodeType": "VariableDeclaration", "scope": 549, "src": "10986:22:1", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree"}, "typeName": {"id": 444, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 443, "name": "MerkleTree", "nodeType": "IdentifierPath", "referencedDeclaration": 37, "src": "10986:10:1"}, "referencedDeclaration": 37, "src": "10986:10:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree"}}, "visibility": "internal"}], "id": 449, "initialValue": {"baseExpression": {"id": 446, "name": "merkleTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 48, "src": "11011:11:1", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$37_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"}}, "id": 448, "indexExpression": {"id": 447, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 415, "src": "11023:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "11011:24:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_storage", "typeString": "struct MerkleResistor.MerkleTree storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "10986:49:1"}, {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 458, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 453, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 450, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 417, "src": "11138:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"expression": {"id": 451, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 445, "src": "11152:4:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 452, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxEndTime", "nodeType": "MemberAccess", "referencedDeclaration": 30, "src": "11152:15:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "11138:29:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 457, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 454, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 417, "src": "11171:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 455, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 445, "src": "11185:4:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 456, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "minEndTime", "nodeType": "MemberAccess", "referencedDeclaration": 28, "src": "11185:15:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "11171:29:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "11138:62:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 466, "nodeType": "IfStatement", "src": "11134:116:1", "trueBody": {"id": 465, "nodeType": "Block", "src": "11202:48:1", "statements": [{"expression": {"components": [{"hexValue": "66616c7365", "id": 459, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "11224:5:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}, {"hexValue": "30", "id": 460, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "11231:1:1", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, {"hexValue": "30", "id": 461, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "11234:1:1", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, {"hexValue": "30", "id": 462, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "11237:1:1", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "id": 463, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "TupleExpression", "src": "11223:16:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$", "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"}}, "functionReturnParameters": 431, "id": 464, "nodeType": "Return", "src": "11216:23:1"}]}}, {"assignments": [468], "declarations": [{"constant": false, "id": 468, "mutability": "mutable", "name": "totalCoins", "nameLocation": "11265:10:1", "nodeType": "VariableDeclaration", "scope": 549, "src": "11260:15:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 467, "name": "uint", "nodeType": "ElementaryTypeName", "src": "11260:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 469, "nodeType": "VariableDeclarationStatement", "src": "11260:15:1"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 473, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 470, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 417, "src": "11289:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 471, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 445, "src": "11304:4:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 472, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxEndTime", "nodeType": "MemberAccess", "referencedDeclaration": 30, "src": "11304:15:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "11289:30:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 510, "nodeType": "Block", "src": "11538:1051:1", "statements": [{"assignments": [480], "declarations": [{"constant": false, "id": 480, "mutability": "mutable", "name": "paymentSlope", "nameLocation": "12201:12:1", "nodeType": "VariableDeclaration", "scope": 510, "src": "12196:17:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 479, "name": "uint", "nodeType": "ElementaryTypeName", "src": "12196:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 494, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 493, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 486, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 483, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 481, "name": "maxTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 421, "src": "12217:16:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 482, "name": "minTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 419, "src": "12236:16:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12217:35:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 484, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "12216:37:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"id": 485, "name": "PRECISION", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 58, "src": "12256:9:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12216:49:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "/", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 491, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 487, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 445, "src": "12269:4:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 488, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxEndTime", "nodeType": "MemberAccess", "referencedDeclaration": 30, "src": "12269:15:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"expression": {"id": 489, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 445, "src": "12287:4:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 490, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "minEndTime", "nodeType": "MemberAccess", "referencedDeclaration": 28, "src": "12287:15:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12269:33:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 492, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "12268:35:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12216:87:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "12196:107:1"}, {"expression": {"id": 508, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 495, "name": "totalCoins", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 468, "src": "12486:10:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 507, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 504, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 502, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 496, "name": "paymentSlope", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 480, "src": "12500:12:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 500, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 497, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 417, "src": "12516:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"expression": {"id": 498, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 445, "src": "12530:4:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 499, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "minEndTime", "nodeType": "MemberAccess", "referencedDeclaration": 28, "src": "12530:15:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12516:29:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 501, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "12515:31:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12500:46:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "/", "rightExpression": {"id": 503, "name": "PRECISION", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 58, "src": "12549:9:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12500:58:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 505, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "12499:60:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"id": 506, "name": "minTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 419, "src": "12562:16:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12499:79:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12486:92:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 509, "nodeType": "ExpressionStatement", "src": "12486:92:1"}]}, "id": 511, "nodeType": "IfStatement", "src": "11285:1304:1", "trueBody": {"id": 478, "nodeType": "Block", "src": "11321:211:1", "statements": [{"expression": {"id": 476, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 474, "name": "totalCoins", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 468, "src": "11492:10:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 475, "name": "maxTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 421, "src": "11505:16:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "11492:29:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 477, "nodeType": "ExpressionStatement", "src": "11492:29:1"}]}}, {"assignments": [513], "declarations": [{"constant": false, "id": 513, "mutability": "mutable", "name": "coinsPerSecond", "nameLocation": "13055:14:1", "nodeType": "VariableDeclaration", "scope": 549, "src": "13050:19:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 512, "name": "uint", "nodeType": "ElementaryTypeName", "src": "13050:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 530, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 529, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 523, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 514, "name": "totalCoins", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 468, "src": "13073:10:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 521, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"hexValue": "313030", "id": 517, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13092:3:1", "typeDescriptions": {"typeIdentifier": "t_rational_100_by_1", "typeString": "int_const 100"}, "value": "100"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_100_by_1", "typeString": "int_const 100"}], "id": 516, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "13087:4:1", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 515, "name": "uint", "nodeType": "ElementaryTypeName", "src": "13087:4:1", "typeDescriptions": {}}}, "id": 518, "isConstant": false, "isLValue": false, "isPure": true, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "13087:9:1", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"expression": {"id": 519, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 445, "src": "13099:4:1", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$37_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 520, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "pctUpFront", "nodeType": "MemberAccess", "referencedDeclaration": 32, "src": "13099:15:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13087:27:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 522, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "13086:29:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13073:42:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 524, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "13072:44:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "/", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 527, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 525, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 417, "src": "13120:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"hexValue": "313030", "id": 526, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "13134:3:1", "typeDescriptions": {"typeIdentifier": "t_rational_100_by_1", "typeString": "int_const 100"}, "value": "100"}, "src": "13120:17:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 528, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "13119:19:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13072:66:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "13050:88:1"}, {"assignments": [532], "declarations": [{"constant": false, "id": 532, "mutability": "mutable", "name": "startTime", "nameLocation": "13319:9:1", "nodeType": "VariableDeclaration", "scope": 549, "src": "13314:14:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 531, "name": "uint", "nodeType": "ElementaryTypeName", "src": "13314:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 542, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 541, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 536, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 533, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "13331:5:1", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 534, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "13331:15:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"id": 535, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 417, "src": "13349:11:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13331:29:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 539, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 537, "name": "totalCoins", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 468, "src": "13364:10:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "/", "rightExpression": {"id": 538, "name": "coinsPerSecond", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 513, "src": "13377:14:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13364:27:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 540, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "13363:29:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13331:61:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "13314:78:1"}, {"expression": {"components": [{"hexValue": "74727565", "id": 543, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "13411:4:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "true"}, {"id": 544, "name": "totalCoins", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 468, "src": "13417:10:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 545, "name": "coinsPerSecond", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 513, "src": "13429:14:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 546, "name": "startTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 532, "src": "13445:9:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 547, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "13410:45:1", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$", "typeString": "tuple(bool,uint256,uint256,uint256)"}}, "functionReturnParameters": 431, "id": 548, "nodeType": "Return", "src": "13403:52:1"}]}, "functionSelector": "6fb6ec41", "id": 550, "implemented": true, "kind": "function", "modifiers": [], "name": "verifyVestingSchedule", "nameLocation": "10528:21:1", "nodeType": "FunctionDefinition", "parameters": {"id": 422, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 415, "mutability": "mutable", "name": "merkleIndex", "nameLocation": "10555:11:1", "nodeType": "VariableDeclaration", "scope": 550, "src": "10550:16:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 414, "name": "uint", "nodeType": "ElementaryTypeName", "src": "10550:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 417, "mutability": "mutable", "name": "vestingTime", "nameLocation": "10573:11:1", "nodeType": "VariableDeclaration", "scope": 550, "src": "10568:16:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 416, "name": "uint", "nodeType": "ElementaryTypeName", "src": "10568:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 419, "mutability": "mutable", "name": "minTotalPayments", "nameLocation": "10591:16:1", "nodeType": "VariableDeclaration", "scope": 550, "src": "10586:21:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 418, "name": "uint", "nodeType": "ElementaryTypeName", "src": "10586:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 421, "mutability": "mutable", "name": "maxTotalPayments", "nameLocation": "10614:16:1", "nodeType": "VariableDeclaration", "scope": 550, "src": "10609:21:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 420, "name": "uint", "nodeType": "ElementaryTypeName", "src": "10609:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "10549:82:1"}, "returnParameters": {"id": 431, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 424, "mutability": "mutable", "name": "", "nameLocation": "-1:-1:-1", "nodeType": "VariableDeclaration", "scope": 550, "src": "10653:4:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 423, "name": "bool", "nodeType": "ElementaryTypeName", "src": "10653:4:1", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}, {"constant": false, "id": 426, "mutability": "mutable", "name": "", "nameLocation": "-1:-1:-1", "nodeType": "VariableDeclaration", "scope": 550, "src": "10659:4:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 425, "name": "uint", "nodeType": "ElementaryTypeName", "src": "10659:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 428, "mutability": "mutable", "name": "", "nameLocation": "-1:-1:-1", "nodeType": "VariableDeclaration", "scope": 550, "src": "10665:4:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 427, "name": "uint", "nodeType": "ElementaryTypeName", "src": "10665:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 430, "mutability": "mutable", "name": "", "nameLocation": "-1:-1:-1", "nodeType": "VariableDeclaration", "scope": 550, "src": "10671:4:1", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 429, "name": "uint", "nodeType": "ElementaryTypeName", "src": "10671:4:1", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "10652:24:1"}, "scope": 551, "src": "10519:2943:1", "stateMutability": "view", "virtual": false, "visibility": "public"}], "scope": 552, "src": "230:13235:1", "usedErrors": []}], "src": "42:13424:1"}, "bytecode": "60806040526000805534801561001457600080fd5b50611120806100246000396000f3fe608060405234801561001057600080fd5b506004361061009d5760003560e01c8063aaf5eb6811610066578063aaf5eb68146101db578063c26cb54f146101e5578063d71383ed14610260578063f16ad51e14610273578063f287ad041461028657600080fd5b8062f714ce146100a2578063390b7c66146100b75780636fb6ec41146100d357806385d88cb11461010857806386bb82491461019d575b600080fd5b6100b56100b0366004610da0565b610299565b005b6100c060005481565b6040519081526020015b60405180910390f35b6100e66100e1366004610dcc565b61053c565b60408051941515855260208501939093529183015260608201526080016100ca565b61015f610116366004610dfe565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006909501549395949293919290916001600160a01b039091169087565b60408051978852602088019690965294860193909352606085019190915260808401526001600160a01b031660a083015260c082015260e0016100ca565b6101cb6101ab366004610e17565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ca565b6100c0620f424081565b6102336101f3366004610e17565b6003602081815260009384526040808520909152918352912080546001820154600283015493830154600484015460059094015492949193919290919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100ca565b6100b561026e366004610e41565b6106e3565b6100b5610281366004610e9d565b6108a7565b6100b5610294366004610ed5565b6109ea565b6001600160a01b038116600090815260016020908152604080832085845290915290205460ff166103215760405162461bcd60e51b815260206004820152602760248201527f596f75206d75737420696e697469616c697a6520796f7572206163636f756e74604482015266103334b939ba1760c91b60648201526084015b60405180910390fd5b6001600160a01b0381166000908152600360209081526040808320858452909152902060018101546103955760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f696e73206c65667420746f207769746864726177000000000000006044820152606401610318565b6000816003015442106103ad575060018101546103ce565b600482015460058301546103c19042610fe1565b6103cb9190610ff8565b90505b6000848152600260205260408120600184018054919284926103f1908490610fe1565b9091555050426005840155600681018054839190600090610413908490610fe1565b9091555050600581015460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561046857600080fd5b505af115801561047c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a09190611017565b6104e45760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b84846001600160a01b03167f5ffb4b63dec15ba26308386f1d5ca61843b29ba365511062a887d95aa27532d384866001015460405161052d929190918252602082015260400190565b60405180910390a35050505050565b60008060008060005488111561055d575060009250829150819050806106d8565b600088815260026020818152604092839020835160e0810185528154815260018201549281019290925291820154928101929092526003810154606083018190526004820154608084015260058201546001600160a01b031660a084015260069091015460c08301528811806105d65750806040015188105b156105ef576000806000809450945094509450506106d8565b60008160600151891415610604575085610675565b60008260400151836060015161061a9190610fe1565b620f42406106288b8b610fe1565b6106329190610ff8565b61063c9190611040565b905088620f424084604001518c6106539190610fe1565b61065d9084610ff8565b6106679190611040565b6106719190611062565b9150505b60006106828a6064610ff8565b6080840151610692906064610fe1565b61069c9084610ff8565b6106a69190611040565b905060006106b48284611040565b6106be8c42611062565b6106c89190610fe1565b6001985092965090945090925050505b945094509450949050565b606483106107275760405162461bcd60e51b81526020600482015260116024820152700706374557046726f6e74203e3d2031303607c1b6044820152606401610318565b8385106107865760405162461bcd60e51b815260206004820152602760248201527f6d696e456e6454696d65206d757374206265206c657373207468616e206d6178604482015266456e6454696d6560c81b6064820152608401610318565b6040518060e00160405280888152602001878152602001868152602001858152602001848152602001836001600160a01b0316815260200160008152506002600080600081546107d59061107a565b918290555081526020808201929092526040908101600090812084518155928401516001840155908301516002830155606083015160038301556080830151600483015560a08301516005830180546001600160a01b0319166001600160a01b0390921691909117905560c0909201516006909101555461085690826108a7565b60005460408051898152602081018990526001600160a01b03851692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a350505050505050565b6000828152600260205260408120600681018054919284926108ca908490611062565b909155505060058101546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561092357600080fd5b505af1158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b9190611017565b61099f5760405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b60058101546040518381526001600160a01b039091169084907fb162210da7d23d82c18cff5af46d3562661d26b42a6848fa28d64a6bdc70386a9060200160405180910390a3505050565b336001600160a01b03861614610a4e5760405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616044820152636e63686560e01b6064820152608401610318565b6001600160a01b038516600090815260016020908152604080832089845290915290205460ff1615610ab85760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610318565b604080516001600160a01b03871660208201529081018490526060810183905260009060800160408051601f19818403018152828252805160209182012060008b815260028084529084902060e0860185528054808752600182015494870194909452908101548585015260038101546060860152600480820154608087015260058201546001600160a01b031660a087015260069091015460c08601529251632769cd1f60e21b815290945073__MerkleLib_____________________________92639da7347c92610b919290918791899101611095565b60206040518083038186803b158015610ba957600080fd5b505af4158015610bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be19190611017565b610c2d5760405162461bcd60e51b815260206004820181905260248201527f5468652070726f6f6620636f756c64206e6f742062652076657269666965642e6044820152606401610318565b6001600160a01b03871660009081526001602081815260408084208c85529091528220805460ff19169091179055808080610c6a8c8b8b8b61053c565b935093509350935083610cbf5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67207363686564756c6500000000000000006044820152606401610318565b6040518060c001604052808481526020018481526020018281526020018b42610ce89190611062565b815260200183815260200182815250600360008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050610d768c8c610299565b505050505050505050505050565b80356001600160a01b0381168114610d9b57600080fd5b919050565b60008060408385031215610db357600080fd5b82359150610dc360208401610d84565b90509250929050565b60008060008060808587031215610de257600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215610e1057600080fd5b5035919050565b60008060408385031215610e2a57600080fd5b610e3383610d84565b946020939093013593505050565b600080600080600080600060e0888a031215610e5c57600080fd5b8735965060208801359550604088013594506060880135935060808801359250610e8860a08901610d84565b915060c0880135905092959891949750929550565b60008060408385031215610eb057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610eee57600080fd5b863595506020610eff818901610d84565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610f3157600080fd5b818a0191508a601f830112610f4557600080fd5b813581811115610f5757610f57610ebf565b8060051b604051601f19603f83011681018181108582111715610f7c57610f7c610ebf565b60405291825284820192508381018501918d831115610f9a57600080fd5b938501935b82851015610fb857843584529385019392850192610f9f565b8096505050505050509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015610ff357610ff3610fcb565b500390565b600081600019048311821515161561101257611012610fcb565b500290565b60006020828403121561102957600080fd5b8151801515811461103957600080fd5b9392505050565b60008261105d57634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561107557611075610fcb565b500190565b600060001982141561108e5761108e610fcb565b5060010190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b818110156110dc578451835293830193918301916001016110c0565b50909897505050505050505056fea2646970667358221220687cdc8caf4759b312e18c50f8c293a8cd99dd62cbf7a80817e3194be09a150764736f6c63430008090033", "bytecodeSha1": "f82fca6c17d71e1a5a1bbe52d626b32d14d6dad8", "compiler": {"evm_version": "istanbul", "optimizer": {"enabled": true, "runs": 200}, "version": "0.8.9+commit.e5eed63a"}, "contractName": "MerkleResistor", "coverageMap": {"branches": {"0": {}, "1": {"MerkleResistor.addMerkleTree": {"36": [3310, 3326, true], "37": [3366, 3389, true]}, "MerkleResistor.depositTokens": {"38": [5206, 5284, true]}, "MerkleResistor.initialize": {"39": [5882, 5907, true], "40": [6002, 6040, true], "41": [6418, 6458, true], "42": [6818, 6823, true]}, "MerkleResistor.verifyVestingSchedule": {"32": [10809, 10831, false], "33": [11138, 11167, true], "34": [11171, 11200, false], "35": [11289, 11319, false]}, "MerkleResistor.withdraw": {"29": [8054, 8091, true], "30": [8519, 8553, false], "31": [10251, 10317, true]}}, "2": {}}, "statements": {"0": {}, "1": {"MerkleResistor.addMerkleTree": {"14": [3302, 3348], "15": [3358, 3433], "16": [3500, 3773], "17": [4049, 4086], "18": [4096, 4159]}, "MerkleResistor.depositTokens": {"19": [4434, 4466], "20": [5198, 5310], "21": [5320, 5383]}, "MerkleResistor.initialize": {"22": [5874, 5948], "23": [5994, 6064], "24": [6410, 6495], "25": [6593, 6637], "26": [6810, 6852], "27": [7046, 7586], "28": [7596, 7630]}, "MerkleResistor.verifyVestingSchedule": {"9": [10847, 10870], "10": [11216, 11239], "11": [11492, 11521], "12": [12486, 12578], "13": [13403, 13455]}, "MerkleResistor.withdraw": {"0": [8046, 8135], "1": [8295, 8358], "2": [8569, 8609], "3": [8787, 8878], "4": [9170, 9211], "5": [9403, 9447], "6": [9582, 9620], "7": [10243, 10343], "8": [10353, 10443]}}, "2": {}}}, "dependencies": ["IERC20", "MerkleLib"], "deployedBytecode": "608060405234801561001057600080fd5b506004361061009d5760003560e01c8063aaf5eb6811610066578063aaf5eb68146101db578063c26cb54f146101e5578063d71383ed14610260578063f16ad51e14610273578063f287ad041461028657600080fd5b8062f714ce146100a2578063390b7c66146100b75780636fb6ec41146100d357806385d88cb11461010857806386bb82491461019d575b600080fd5b6100b56100b0366004610da0565b610299565b005b6100c060005481565b6040519081526020015b60405180910390f35b6100e66100e1366004610dcc565b61053c565b60408051941515855260208501939093529183015260608201526080016100ca565b61015f610116366004610dfe565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006909501549395949293919290916001600160a01b039091169087565b60408051978852602088019690965294860193909352606085019190915260808401526001600160a01b031660a083015260c082015260e0016100ca565b6101cb6101ab366004610e17565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ca565b6100c0620f424081565b6102336101f3366004610e17565b6003602081815260009384526040808520909152918352912080546001820154600283015493830154600484015460059094015492949193919290919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100ca565b6100b561026e366004610e41565b6106e3565b6100b5610281366004610e9d565b6108a7565b6100b5610294366004610ed5565b6109ea565b6001600160a01b038116600090815260016020908152604080832085845290915290205460ff166103215760405162461bcd60e51b815260206004820152602760248201527f596f75206d75737420696e697469616c697a6520796f7572206163636f756e74604482015266103334b939ba1760c91b60648201526084015b60405180910390fd5b6001600160a01b0381166000908152600360209081526040808320858452909152902060018101546103955760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f696e73206c65667420746f207769746864726177000000000000006044820152606401610318565b6000816003015442106103ad575060018101546103ce565b600482015460058301546103c19042610fe1565b6103cb9190610ff8565b90505b6000848152600260205260408120600184018054919284926103f1908490610fe1565b9091555050426005840155600681018054839190600090610413908490610fe1565b9091555050600581015460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561046857600080fd5b505af115801561047c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a09190611017565b6104e45760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b84846001600160a01b03167f5ffb4b63dec15ba26308386f1d5ca61843b29ba365511062a887d95aa27532d384866001015460405161052d929190918252602082015260400190565b60405180910390a35050505050565b60008060008060005488111561055d575060009250829150819050806106d8565b600088815260026020818152604092839020835160e0810185528154815260018201549281019290925291820154928101929092526003810154606083018190526004820154608084015260058201546001600160a01b031660a084015260069091015460c08301528811806105d65750806040015188105b156105ef576000806000809450945094509450506106d8565b60008160600151891415610604575085610675565b60008260400151836060015161061a9190610fe1565b620f42406106288b8b610fe1565b6106329190610ff8565b61063c9190611040565b905088620f424084604001518c6106539190610fe1565b61065d9084610ff8565b6106679190611040565b6106719190611062565b9150505b60006106828a6064610ff8565b6080840151610692906064610fe1565b61069c9084610ff8565b6106a69190611040565b905060006106b48284611040565b6106be8c42611062565b6106c89190610fe1565b6001985092965090945090925050505b945094509450949050565b606483106107275760405162461bcd60e51b81526020600482015260116024820152700706374557046726f6e74203e3d2031303607c1b6044820152606401610318565b8385106107865760405162461bcd60e51b815260206004820152602760248201527f6d696e456e6454696d65206d757374206265206c657373207468616e206d6178604482015266456e6454696d6560c81b6064820152608401610318565b6040518060e00160405280888152602001878152602001868152602001858152602001848152602001836001600160a01b0316815260200160008152506002600080600081546107d59061107a565b918290555081526020808201929092526040908101600090812084518155928401516001840155908301516002830155606083015160038301556080830151600483015560a08301516005830180546001600160a01b0319166001600160a01b0390921691909117905560c0909201516006909101555461085690826108a7565b60005460408051898152602081018990526001600160a01b03851692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a350505050505050565b6000828152600260205260408120600681018054919284926108ca908490611062565b909155505060058101546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561092357600080fd5b505af1158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b9190611017565b61099f5760405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b60058101546040518381526001600160a01b039091169084907fb162210da7d23d82c18cff5af46d3562661d26b42a6848fa28d64a6bdc70386a9060200160405180910390a3505050565b336001600160a01b03861614610a4e5760405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616044820152636e63686560e01b6064820152608401610318565b6001600160a01b038516600090815260016020908152604080832089845290915290205460ff1615610ab85760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610318565b604080516001600160a01b03871660208201529081018490526060810183905260009060800160408051601f19818403018152828252805160209182012060008b815260028084529084902060e0860185528054808752600182015494870194909452908101548585015260038101546060860152600480820154608087015260058201546001600160a01b031660a087015260069091015460c08601529251632769cd1f60e21b815290945073__$61dd25696c02d5bd2863c8d2c1a2324a87$__92639da7347c92610b919290918791899101611095565b60206040518083038186803b158015610ba957600080fd5b505af4158015610bbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be19190611017565b610c2d5760405162461bcd60e51b815260206004820181905260248201527f5468652070726f6f6620636f756c64206e6f742062652076657269666965642e6044820152606401610318565b6001600160a01b03871660009081526001602081815260408084208c85529091528220805460ff19169091179055808080610c6a8c8b8b8b61053c565b935093509350935083610cbf5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67207363686564756c6500000000000000006044820152606401610318565b6040518060c001604052808481526020018481526020018281526020018b42610ce89190611062565b815260200183815260200182815250600360008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050610d768c8c610299565b505050505050505050505050565b80356001600160a01b0381168114610d9b57600080fd5b919050565b60008060408385031215610db357600080fd5b82359150610dc360208401610d84565b90509250929050565b60008060008060808587031215610de257600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215610e1057600080fd5b5035919050565b60008060408385031215610e2a57600080fd5b610e3383610d84565b946020939093013593505050565b600080600080600080600060e0888a031215610e5c57600080fd5b8735965060208801359550604088013594506060880135935060808801359250610e8860a08901610d84565b915060c0880135905092959891949750929550565b60008060408385031215610eb057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610eee57600080fd5b863595506020610eff818901610d84565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610f3157600080fd5b818a0191508a601f830112610f4557600080fd5b813581811115610f5757610f57610ebf565b8060051b604051601f19603f83011681018181108582111715610f7c57610f7c610ebf565b60405291825284820192508381018501918d831115610f9a57600080fd5b938501935b82851015610fb857843584529385019392850192610f9f565b8096505050505050509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015610ff357610ff3610fcb565b500390565b600081600019048311821515161561101257611012610fcb565b500290565b60006020828403121561102957600080fd5b8151801515811461103957600080fd5b9392505050565b60008261105d57634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561107557611075610fcb565b500190565b600060001982141561108e5761108e610fcb565b5060010190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b818110156110dc578451835293830193918301916001016110c0565b50909897505050505050505056fea2646970667358221220687cdc8caf4759b312e18c50f8c293a8cd99dd62cbf7a80817e3194be09a150764736f6c63430008090033", "deployedSourceMap": "230:13235:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7864:2586;;;;;;:::i;:::-;;:::i;:::-;;333:24;;;;;;;;;597:25:3;;;585:2;570:18;333:24:1;;;;;;;;10519:2943;;;;;;:::i;:::-;;:::i;:::-;;;;1273:14:3;;1266:22;1248:41;;1320:2;1305:18;;1298:34;;;;1348:18;;;1341:34;1406:2;1391:18;;1384:34;1235:3;1220:19;10519:2943:1;1023:401:3;2333:47:1;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2333:47:1;;;;;;;;;;1929:25:3;;;1985:2;1970:18;;1963:34;;;;2013:18;;;2006:34;;;;2071:2;2056:18;;2049:34;;;;2114:3;2099:19;;2092:35;-1:-1:-1;;;;;2164:32:3;2184:3;2143:19;;2136:61;2228:3;2213:19;;2206:35;1916:3;1901:19;2333:47:1;1614:633:3;2173:62:1;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2676:14:3;;2669:22;2651:41;;2639:2;2624:18;2173:62:1;2511:187:3;2584:40:1;;2617:7;2584:40;;2449:62;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2990:25:3;;;3046:2;3031:18;;3024:34;;;;3074:18;;;3067:34;;;;3132:2;3117:18;;3110:34;3175:3;3160:19;;3153:35;3219:3;3204:19;;3197:35;2977:3;2962:19;2449:62:1;2703:535:3;3091:1075:1;;;;;;:::i;:::-;;:::i;4204:1186::-;;;;;;:::i;:::-;;:::i;5651:1986::-;;;;;;:::i;:::-;;:::i;7864:2586::-;-1:-1:-1;;;;;8054:24:1;;;;;;:11;:24;;;;;;;;:37;;;;;;;;;;;8046:89;;;;-1:-1:-1;;;8046:89:1;;5902:2:3;8046:89:1;;;5884:21:3;5941:2;5921:18;;;5914:30;5980:34;5960:18;;;5953:62;-1:-1:-1;;;6031:18:3;;;6024:37;6078:19;;8046:89:1;;;;;;;;;-1:-1:-1;;;;;8212:21:1;;8186:23;8212:21;;;:8;:21;;;;;;;;:34;;;;;;;;8303:20;;;;8295:63;;;;-1:-1:-1;;;8295:63:1;;6310:2:3;8295:63:1;;;6292:21:3;6349:2;6329:18;;;6322:30;6388:27;6368:18;;;6361:55;6433:18;;8295:63:1;6108:349:3;8295:63:1;8368:22;8538:7;:15;;;8519;:34;8515:374;;-1:-1:-1;8589:20:1;;;;8515:374;;;8856:22;;;;8826:26;;;;8808:44;;:15;:44;:::i;:::-;8807:71;;;;:::i;:::-;8787:91;;8515:374;8921:23;8947:24;;;:11;:24;;;;;9170:20;;;:41;;8947:24;;9194:17;;9170:41;;9194:17;;9170:41;:::i;:::-;;;;-1:-1:-1;;9432:15:1;9403:26;;;:44;9582:17;;;:38;;9603:17;;9582;;;:38;;9603:17;;9582:38;:::i;:::-;;;;-1:-1:-1;;10258:17:1;;;;10251:66;;-1:-1:-1;;;10251:66:1;;-1:-1:-1;;;;;7089:32:3;;;10251:66:1;;;7071:51:3;7138:18;;;7131:34;;;10258:17:1;;;;10251:34;;7044:18:3;;10251:66:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10243:100;;;;-1:-1:-1;;;10243:100:1;;7660:2:3;10243:100:1;;;7642:21:3;7699:2;7679:18;;;7672:30;-1:-1:-1;;;7718:18:3;;;7711:51;7779:18;;10243:100:1;7458:345:3;10243:100:1;10431:11;10377;-1:-1:-1;;;;;10358:85:1;;10390:17;10409:7;:20;;;10358:85;;;;;;7982:25:3;;;8038:2;8023:18;;8016:34;7970:2;7955:18;;7808:248;10358:85:1;;;;;;;;7928:2522;;;7864:2586;;:::o;10519:2943::-;10653:4;10659;10665;10671;10823:8;;10809:11;:22;10805:76;;;-1:-1:-1;10855:5:1;;-1:-1:-1;10855:5:1;;-1:-1:-1;10855:5:1;;-1:-1:-1;10855:5:1;10847:23;;10805:76;10986:22;11011:24;;;:11;:24;;;;;;;;;10986:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10986:49:1;;;;;;;;;;;;;;11138:29;;;:62;;;11185:4;:15;;;11171:11;:29;11138:62;11134:116;;;11224:5;11231:1;11234;11237;11216:23;;;;;;;;;;;11134:116;11260:15;11304:4;:15;;;11289:11;:30;11285:1304;;;-1:-1:-1;11505:16:1;11285:1304;;;12196:17;12287:4;:15;;;12269:4;:15;;;:33;;;;:::i;:::-;2617:7;12217:35;12236:16;12217;:35;:::i;:::-;12216:49;;;;:::i;:::-;:87;;;;:::i;:::-;12196:107;;12562:16;2617:7;12530:4;:15;;;12516:11;:29;;;;:::i;:::-;12500:46;;:12;:46;:::i;:::-;:58;;;;:::i;:::-;12499:79;;;;:::i;:::-;12486:92;;11538:1051;11285:1304;13050:19;13120:17;:11;13134:3;13120:17;:::i;:::-;13099:15;;;;13087:27;;13092:3;13087:27;:::i;:::-;13073:42;;:10;:42;:::i;:::-;13072:66;;;;:::i;:::-;13050:88;-1:-1:-1;13314:14:1;13364:27;13050:88;13364:10;:27;:::i;:::-;13331:29;13349:11;13331:15;:29;:::i;:::-;:61;;;;:::i;:::-;13411:4;;-1:-1:-1;13417:10:1;;-1:-1:-1;13429:14:1;;-1:-1:-1;13314:78:1;;-1:-1:-1;;;10519:2943:1;;;;;;;;;;:::o;3091:1075::-;3323:3;3310:10;:16;3302:46;;;;-1:-1:-1;;;3302:46:1;;8618:2:3;3302:46:1;;;8600:21:3;8657:2;8637:18;;;8630:30;-1:-1:-1;;;8676:18:3;;;8669:47;8733:18;;3302:46:1;8416:341:3;3302:46:1;3379:10;3366;:23;3358:75;;;;-1:-1:-1;;;3358:75:1;;8964:2:3;3358:75:1;;;8946:21:3;9003:2;8983:18;;;8976:30;9042:34;9022:18;;;9015:62;-1:-1:-1;;;9093:18:3;;;9086:37;9140:19;;3358:75:1;8762:403:3;3358:75:1;3526:247;;;;;;;;3550:7;3526:247;;;;3571:8;3526:247;;;;3593:10;3526:247;;;;3617:10;3526:247;;;;3641:10;3526:247;;;;3665:12;-1:-1:-1;;;;;3526:247:1;;;;;3691:1;3526:247;;;3500:11;:23;3514:8;;3512:10;;;;;:::i;:::-;;;;;-1:-1:-1;3500:23:1;;;;;;;;;;;;;;-1:-1:-1;3500:23:1;;;:273;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3500:273:1;-1:-1:-1;;;;;3500:273:1;;;;;;;;;;;;;;;;;;;4063:8;4049:37;;4073:12;4049:13;:37::i;:::-;4117:8;;4101:58;;;7982:25:3;;;8038:2;8023:18;;8016:34;;;-1:-1:-1;;;;;4101:58:1;;;4117:8;4101:58;;7955:18:3;4101:58:1;;;;;;;3091:1075;;;;;;;:::o;4204:1186::-;4307:29;4339:22;;;:11;:22;;;;;4434:23;;;:32;;4339:22;;4461:5;;4434:32;;4461:5;;4434:32;:::i;:::-;;;;-1:-1:-1;;5213:23:1;;;;5206:78;;-1:-1:-1;;;5206:78:1;;5251:10;5206:78;;;9803:34:3;5271:4:1;9853:18:3;;;9846:43;9905:18;;;9898:34;;;-1:-1:-1;;;;;5213:23:1;;;;5206:44;;9738:18:3;;5206:78:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5198:112;;;;-1:-1:-1;;;5198:112:1;;10145:2:3;5198:112:1;;;10127:21:3;10184:2;10164:18;;;10157:30;-1:-1:-1;;;10203:18:3;;;10196:51;10264:18;;5198:112:1;9943:345:3;5198:112:1;5352:23;;;;5325:58;;597:25:3;;;-1:-1:-1;;;;;5352:23:1;;;;5341:9;;5325:58;;585:2:3;570:18;5325:58:1;;;;;;;4262:1128;4204:1186;;:::o;5651:1986::-;5882:10;-1:-1:-1;;;;;5882:25:1;;;5874:74;;;;-1:-1:-1;;;5874:74:1;;10495:2:3;5874:74:1;;;10477:21:3;10534:2;10514:18;;;10507:30;10573:34;10553:18;;;10546:62;-1:-1:-1;;;10624:18:3;;;10617:34;10668:19;;5874:74:1;10293:400:3;5874:74:1;-1:-1:-1;;;;;6003:24:1;;;;;;:11;:24;;;;;;;;:37;;;;;;;;;;;6002:38;5994:70;;;;-1:-1:-1;;;5994:70:1;;10900:2:3;5994:70:1;;;10882:21:3;10939:2;10919:18;;;10912:30;-1:-1:-1;;;10958:18:3;;;10951:49;11017:18;;5994:70:1;10698:343:3;5994:70:1;6162:59;;;-1:-1:-1;;;;;11266:32:3;;6162:59:1;;;11248:51:3;11315:18;;;11308:34;;;11358:18;;;11351:34;;;6137:12:1;;11221:18:3;;6162:59:1;;;-1:-1:-1;;6162:59:1;;;;;;;;;6152:70;;6162:59;6152:70;;;;6273:22;6298:24;;;:11;:24;;;;;;;6273:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6273:49:1;;;;;;;;;;;;;;6418:40;;-1:-1:-1;;;6418:40:1;;6152:70;;-1:-1:-1;6418:27:1;;;;:40;;6273:49;;6152:70;;6452:5;;6418:40;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6410:85;;;;-1:-1:-1;;;6410:85:1;;12386:2:3;6410:85:1;;;12368:21:3;;;12405:18;;;12398:30;12464:34;12444:18;;;12437:62;12516:18;;6410:85:1;12184:356:3;6410:85:1;-1:-1:-1;;;;;6593:24:1;;;;;;6633:4;6593:24;;;;;;;;:37;;;;;;;;:44;;-1:-1:-1;;6593:44:1;;;;;;:24;;;6717:83;6618:11;6752;6765:16;6783;6717:21;:83::i;:::-;6648:152;;;;;;;;6818:5;6810:42;;;;-1:-1:-1;;;6810:42:1;;12747:2:3;6810:42:1;;;12729:21:3;12786:2;12766:18;;;12759:30;12825:26;12805:18;;;12798:54;12869:18;;6810:42:1;12545:348:3;6810:42:1;7083:503;;;;;;;;7104:10;7083:503;;;;7180:10;7083:503;;;;7226:9;7083:503;;;;7332:11;7314:15;:29;;;;:::i;:::-;7083:503;;;;7401:14;7083:503;;;;7469:9;7083:503;;;7046:8;:21;7055:11;-1:-1:-1;;;;;7046:21:1;-1:-1:-1;;;;;7046:21:1;;;;;;;;;;;;:34;7068:11;7046:34;;;;;;;;;;;:540;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7596:34;7605:11;7618;7596:8;:34::i;:::-;5807:1830;;;;;;5651:1986;;;;;;:::o;14:173:3:-;82:20;;-1:-1:-1;;;;;131:31:3;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;373:9;360:23;350:33;;402:38;436:2;425:9;421:18;402:38;:::i;:::-;392:48;;192:254;;;;;:::o;633:385::-;719:6;727;735;743;796:3;784:9;775:7;771:23;767:33;764:53;;;813:1;810;803:12;764:53;-1:-1:-1;;836:23:3;;;906:2;891:18;;878:32;;-1:-1:-1;957:2:3;942:18;;929:32;;1008:2;993:18;980:32;;-1:-1:-1;633:385:3;-1:-1:-1;633:385:3:o;1429:180::-;1488:6;1541:2;1529:9;1520:7;1516:23;1512:32;1509:52;;;1557:1;1554;1547:12;1509:52;-1:-1:-1;1580:23:3;;1429:180;-1:-1:-1;1429:180:3:o;2252:254::-;2320:6;2328;2381:2;2369:9;2360:7;2356:23;2352:32;2349:52;;;2397:1;2394;2387:12;2349:52;2420:29;2439:9;2420:29;:::i;:::-;2410:39;2496:2;2481:18;;;;2468:32;;-1:-1:-1;;;2252:254:3:o;3243:598::-;3356:6;3364;3372;3380;3388;3396;3404;3457:3;3445:9;3436:7;3432:23;3428:33;3425:53;;;3474:1;3471;3464:12;3425:53;3510:9;3497:23;3487:33;;3567:2;3556:9;3552:18;3539:32;3529:42;;3618:2;3607:9;3603:18;3590:32;3580:42;;3669:2;3658:9;3654:18;3641:32;3631:42;;3720:3;3709:9;3705:19;3692:33;3682:43;;3744:39;3778:3;3767:9;3763:19;3744:39;:::i;:::-;3734:49;;3830:3;3819:9;3815:19;3802:33;3792:43;;3243:598;;;;;;;;;;:::o;3846:248::-;3914:6;3922;3975:2;3963:9;3954:7;3950:23;3946:32;3943:52;;;3991:1;3988;3981:12;3943:52;-1:-1:-1;;4014:23:3;;;4084:2;4069:18;;;4056:32;;-1:-1:-1;3846:248:3:o;4099:127::-;4160:10;4155:3;4151:20;4148:1;4141:31;4191:4;4188:1;4181:15;4215:4;4212:1;4205:15;4231:1464;4360:6;4368;4376;4384;4392;4400;4453:3;4441:9;4432:7;4428:23;4424:33;4421:53;;;4470:1;4467;4460:12;4421:53;4506:9;4493:23;4483:33;;4535:2;4556:38;4590:2;4579:9;4575:18;4556:38;:::i;:::-;4546:48;;4641:2;4630:9;4626:18;4613:32;4603:42;;4692:2;4681:9;4677:18;4664:32;4654:42;;4743:3;4732:9;4728:19;4715:33;4705:43;;4799:3;4788:9;4784:19;4771:33;4823:18;4864:2;4856:6;4853:14;4850:34;;;4880:1;4877;4870:12;4850:34;4918:6;4907:9;4903:22;4893:32;;4963:7;4956:4;4952:2;4948:13;4944:27;4934:55;;4985:1;4982;4975:12;4934:55;5021:2;5008:16;5043:2;5039;5036:10;5033:36;;;5049:18;;:::i;:::-;5095:2;5092:1;5088:10;5127:2;5121:9;5190:2;5186:7;5181:2;5177;5173:11;5169:25;5161:6;5157:38;5245:6;5233:10;5230:22;5225:2;5213:10;5210:18;5207:46;5204:72;;;5256:18;;:::i;:::-;5292:2;5285:22;5342:18;;;5376:15;;;;-1:-1:-1;5418:11:3;;;5414:20;;;5446:19;;;5443:39;;;5478:1;5475;5468:12;5443:39;5502:11;;;;5522:142;5538:6;5533:3;5530:15;5522:142;;;5604:17;;5592:30;;5555:12;;;;5642;;;;5522:142;;;5683:6;5673:16;;;;;;;;4231:1464;;;;;;;;:::o;6462:127::-;6523:10;6518:3;6514:20;6511:1;6504:31;6554:4;6551:1;6544:15;6578:4;6575:1;6568:15;6594:125;6634:4;6662:1;6659;6656:8;6653:34;;;6667:18;;:::i;:::-;-1:-1:-1;6704:9:3;;6594:125::o;6724:168::-;6764:7;6830:1;6826;6822:6;6818:14;6815:1;6812:21;6807:1;6800:9;6793:17;6789:45;6786:71;;;6837:18;;:::i;:::-;-1:-1:-1;6877:9:3;;6724:168::o;7176:277::-;7243:6;7296:2;7284:9;7275:7;7271:23;7267:32;7264:52;;;7312:1;7309;7302:12;7264:52;7344:9;7338:16;7397:5;7390:13;7383:21;7376:5;7373:32;7363:60;;7419:1;7416;7409:12;7363:60;7442:5;7176:277;-1:-1:-1;;;7176:277:3:o;8061:217::-;8101:1;8127;8117:132;;8171:10;8166:3;8162:20;8159:1;8152:31;8206:4;8203:1;8196:15;8234:4;8231:1;8224:15;8117:132;-1:-1:-1;8263:9:3;;8061:217::o;8283:128::-;8323:3;8354:1;8350:6;8347:1;8344:13;8341:39;;;8360:18;;:::i;:::-;-1:-1:-1;8396:9:3;;8283:128::o;9170:135::-;9209:3;-1:-1:-1;;9230:17:3;;9227:43;;;9250:18;;:::i;:::-;-1:-1:-1;9297:1:3;9286:13;;9170:135::o;11396:783::-;11602:4;11650:2;11639:9;11635:18;11680:6;11669:9;11662:25;11706:2;11744:6;11739:2;11728:9;11724:18;11717:34;11787:2;11782;11771:9;11767:18;11760:30;11810:6;11845;11839:13;11876:6;11868;11861:22;11914:3;11903:9;11899:19;11892:26;;11953:2;11945:6;11941:15;11927:29;;11974:1;11984:169;11998:6;11995:1;11992:13;11984:169;;;12059:13;;12047:26;;12128:15;;;;12093:12;;;;12020:1;12013:9;11984:169;;;-1:-1:-1;12170:3:3;;11396:783;-1:-1:-1;;;;;;;;11396:783:3:o", "language": "Solidity", "natspec": {"kind": "dev", "methods": {}, "version": 1}, "offset": [230, 13465], "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAAF5EB68 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xAAF5EB68 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0xC26CB54F EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0xD71383ED EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0xF16AD51E EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0xF287AD04 EQ PUSH2 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xF714CE EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x390B7C66 EQ PUSH2 0xB7 JUMPI DUP1 PUSH4 0x6FB6EC41 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x85D88CB1 EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x86BB8249 EQ PUSH2 0x19D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5 PUSH2 0xB0 CALLDATASIZE PUSH1 0x4 PUSH2 0xDA0 JUMP JUMPDEST PUSH2 0x299 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC0 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH2 0xE1 CALLDATASIZE PUSH1 0x4 PUSH2 0xDCC JUMP JUMPDEST PUSH2 0x53C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 ISZERO ISZERO DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0x15F PUSH2 0x116 CALLDATASIZE PUSH1 0x4 PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 SWAP1 SWAP6 ADD SLOAD SWAP4 SWAP6 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP5 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0x1CB PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0xE17 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0xC0 PUSH3 0xF4240 DUP2 JUMP JUMPDEST PUSH2 0x233 PUSH2 0x1F3 CALLDATASIZE PUSH1 0x4 PUSH2 0xE17 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD SWAP4 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP5 SWAP2 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x26E CALLDATASIZE PUSH1 0x4 PUSH2 0xE41 JUMP JUMPDEST PUSH2 0x6E3 JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x281 CALLDATASIZE PUSH1 0x4 PUSH2 0xE9D JUMP JUMPDEST PUSH2 0x8A7 JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x294 CALLDATASIZE PUSH1 0x4 PUSH2 0xED5 JUMP JUMPDEST PUSH2 0x9EA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x321 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75206D75737420696E697469616C697A6520796F7572206163636F756E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x103334B939BA17 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x395 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F20636F696E73206C65667420746F20776974686472617700000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x3AD JUMPI POP PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x3CE JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x5 DUP4 ADD SLOAD PUSH2 0x3C1 SWAP1 TIMESTAMP PUSH2 0xFE1 JUMP JUMPDEST PUSH2 0x3CB SWAP2 SWAP1 PUSH2 0xFF8 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP5 ADD DUP1 SLOAD SWAP2 SWAP3 DUP5 SWAP3 PUSH2 0x3F1 SWAP1 DUP5 SWAP1 PUSH2 0xFE1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP TIMESTAMP PUSH1 0x5 DUP5 ADD SSTORE PUSH1 0x6 DUP2 ADD DUP1 SLOAD DUP4 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x413 SWAP1 DUP5 SWAP1 PUSH2 0xFE1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x47C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A0 SWAP2 SWAP1 PUSH2 0x1017 JUMP JUMPDEST PUSH2 0x4E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x151BDAD95B881D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST DUP5 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x5FFB4B63DEC15BA26308386F1D5CA61843B29BA365511062A887D95AA27532D3 DUP5 DUP7 PUSH1 0x1 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x52D SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 SLOAD DUP9 GT ISZERO PUSH2 0x55D JUMPI POP PUSH1 0x0 SWAP3 POP DUP3 SWAP2 POP DUP2 SWAP1 POP DUP1 PUSH2 0x6D8 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0xE0 DUP2 ADD DUP6 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 SWAP1 SWAP2 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE DUP9 GT DUP1 PUSH2 0x5D6 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD DUP9 LT JUMPDEST ISZERO PUSH2 0x5EF JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP POP PUSH2 0x6D8 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 ADD MLOAD DUP10 EQ ISZERO PUSH2 0x604 JUMPI POP DUP6 PUSH2 0x675 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0x61A SWAP2 SWAP1 PUSH2 0xFE1 JUMP JUMPDEST PUSH3 0xF4240 PUSH2 0x628 DUP12 DUP12 PUSH2 0xFE1 JUMP JUMPDEST PUSH2 0x632 SWAP2 SWAP1 PUSH2 0xFF8 JUMP JUMPDEST PUSH2 0x63C SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST SWAP1 POP DUP9 PUSH3 0xF4240 DUP5 PUSH1 0x40 ADD MLOAD DUP13 PUSH2 0x653 SWAP2 SWAP1 PUSH2 0xFE1 JUMP JUMPDEST PUSH2 0x65D SWAP1 DUP5 PUSH2 0xFF8 JUMP JUMPDEST PUSH2 0x667 SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST PUSH2 0x671 SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST SWAP2 POP POP JUMPDEST PUSH1 0x0 PUSH2 0x682 DUP11 PUSH1 0x64 PUSH2 0xFF8 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x692 SWAP1 PUSH1 0x64 PUSH2 0xFE1 JUMP JUMPDEST PUSH2 0x69C SWAP1 DUP5 PUSH2 0xFF8 JUMP JUMPDEST PUSH2 0x6A6 SWAP2 SWAP1 PUSH2 0x1040 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6B4 DUP3 DUP5 PUSH2 0x1040 JUMP JUMPDEST PUSH2 0x6BE DUP13 TIMESTAMP PUSH2 0x1062 JUMP JUMPDEST PUSH2 0x6C8 SWAP2 SWAP1 PUSH2 0xFE1 JUMP JUMPDEST PUSH1 0x1 SWAP9 POP SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP1 SWAP3 POP POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x727 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x706374557046726F6E74203E3D2031303 PUSH1 0x7C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST DUP4 DUP6 LT PUSH2 0x786 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D696E456E6454696D65206D757374206265206C657373207468616E206D6178 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x456E6454696D65 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x7D5 SWAP1 PUSH2 0x107A JUMP JUMPDEST SWAP2 DUP3 SWAP1 SSTORE POP DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP5 MLOAD DUP2 SSTORE SWAP3 DUP5 ADD MLOAD PUSH1 0x1 DUP5 ADD SSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD SSTORE SLOAD PUSH2 0x856 SWAP1 DUP3 PUSH2 0x8A7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP3 SWAP2 PUSH32 0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x6 DUP2 ADD DUP1 SLOAD SWAP2 SWAP3 DUP5 SWAP3 PUSH2 0x8CA SWAP1 DUP5 SWAP1 PUSH2 0x1062 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x923 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x937 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x95B SWAP2 SWAP1 PUSH2 0x1017 JUMP JUMPDEST PUSH2 0x99F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x115490CC8C081D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP5 SWAP1 PUSH32 0xB162210DA7D23D82C18CFF5AF46D3562661D26B42A6848FA28D64A6BDC70386A SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ PUSH2 0xA4E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x43616E206F6E6C7920696E697469616C697A6520796F7572206F776E20747261 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x6E636865 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xAB8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x105B1C9958591E481A5B9A5D1A585B1A5E9959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x2 DUP1 DUP5 MSTORE SWAP1 DUP5 SWAP1 KECCAK256 PUSH1 0xE0 DUP7 ADD DUP6 MSTORE DUP1 SLOAD DUP1 DUP8 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP5 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 DUP2 ADD SLOAD DUP6 DUP6 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x4 DUP1 DUP3 ADD SLOAD PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0x6 SWAP1 SWAP2 ADD SLOAD PUSH1 0xC0 DUP7 ADD MSTORE SWAP3 MLOAD PUSH4 0x2769CD1F PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP5 POP PUSH20 0x0 SWAP3 PUSH4 0x9DA7347C SWAP3 PUSH2 0xB91 SWAP3 SWAP1 SWAP2 DUP8 SWAP2 DUP10 SWAP2 ADD PUSH2 0x1095 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xBBD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBE1 SWAP2 SWAP1 PUSH2 0x1017 JUMP JUMPDEST PUSH2 0xC2D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652070726F6F6620636F756C64206E6F742062652076657269666965642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP13 DUP6 MSTORE SWAP1 SWAP2 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 DUP1 DUP1 PUSH2 0xC6A DUP13 DUP12 DUP12 DUP12 PUSH2 0x53C JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP4 PUSH2 0xCBF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642076657374696E67207363686564756C650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD DUP12 TIMESTAMP PUSH2 0xCE8 SWAP2 SWAP1 PUSH2 0x1062 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP PUSH1 0x3 PUSH1 0x0 DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP15 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE SWAP1 POP POP PUSH2 0xD76 DUP13 DUP13 PUSH2 0x299 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xDC3 PUSH1 0x20 DUP5 ADD PUSH2 0xD84 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xDE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE33 DUP4 PUSH2 0xD84 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xE5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH2 0xE88 PUSH1 0xA0 DUP10 ADD PUSH2 0xD84 JUMP JUMPDEST SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xEEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 PUSH2 0xEFF DUP2 DUP10 ADD PUSH2 0xD84 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP11 ADD SWAP2 POP DUP11 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xF45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xF57 JUMPI PUSH2 0xF57 PUSH2 0xEBF JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xF7C JUMPI PUSH2 0xF7C PUSH2 0xEBF JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP14 DUP4 GT ISZERO PUSH2 0xF9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xFB8 JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xF9F JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xFF3 JUMPI PUSH2 0xFF3 PUSH2 0xFCB JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1012 JUMPI PUSH2 0x1012 PUSH2 0xFCB JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1029 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1039 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x105D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1075 JUMPI PUSH2 0x1075 PUSH2 0xFCB JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x108E JUMPI PUSH2 0x108E PUSH2 0xFCB JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP6 DUP4 MSTORE PUSH1 0x20 DUP6 DUP2 DUP6 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 POP DUP3 DUP8 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10DC JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x10C0 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0x7CDC8CAF4759B312E1 DUP13 POP 0xF8 0xC2 SWAP4 0xA8 0xCD SWAP10 0xDD PUSH3 0xCBF7A8 ADDMOD OR 0xE3 NOT 0x4B 0xE0 SWAP11 ISZERO SMOD PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ", "pcMap": {"0": {"offset": [230, 13465], "op": "PUSH1", "path": "1", "value": "0x80"}, "2": {"fn": null, "offset": [230, 13465], "op": "PUSH1", "path": "1", "value": "0x40"}, "4": {"fn": null, "offset": [230, 13465], "op": "MSTORE", "path": "1"}, "5": {"fn": null, "offset": [230, 13465], "op": "CALLVALUE", "path": "1"}, "6": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "7": {"fn": null, "offset": [230, 13465], "op": "ISZERO", "path": "1"}, "8": {"fn": null, "offset": [230, 13465], "op": "PUSH2", "path": "1", "value": "0x10"}, "11": {"fn": null, "offset": [230, 13465], "op": "JUMPI", "path": "1"}, "12": {"fn": null, "offset": [230, 13465], "op": "PUSH1", "path": "1", "value": "0x0"}, "14": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "15": {"dev": "Cannot send ether to nonpayable function", "fn": null, "offset": [230, 13465], "op": "REVERT", "path": "1"}, "16": {"fn": null, "offset": [230, 13465], "op": "JUMPDEST", "path": "1"}, "17": {"fn": null, "offset": [230, 13465], "op": "POP", "path": "1"}, "18": {"fn": null, "offset": [230, 13465], "op": "PUSH1", "path": "1", "value": "0x4"}, "20": {"fn": null, "offset": [230, 13465], "op": "CALLDATASIZE", "path": "1"}, "21": {"fn": null, "offset": [230, 13465], "op": "LT", "path": "1"}, "22": {"fn": null, "offset": [230, 13465], "op": "PUSH2", "path": "1", "value": "0x9D"}, "25": {"fn": null, "offset": [230, 13465], "op": "JUMPI", "path": "1"}, "26": {"fn": null, "offset": [230, 13465], "op": "PUSH1", "path": "1", "value": "0x0"}, "28": {"fn": null, "offset": [230, 13465], "op": "CALLDATALOAD", "path": "1"}, "29": {"fn": null, "offset": [230, 13465], "op": "PUSH1", "path": "1", "value": "0xE0"}, "31": {"fn": null, "offset": [230, 13465], "op": "SHR", "path": "1"}, "32": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "33": {"fn": null, "offset": [230, 13465], "op": "PUSH4", "path": "1", "value": "0xAAF5EB68"}, "38": {"fn": null, "offset": [230, 13465], "op": "GT", "path": "1"}, "39": {"fn": null, "offset": [230, 13465], "op": "PUSH2", "path": "1", "value": "0x66"}, "42": {"fn": null, "offset": [230, 13465], "op": "JUMPI", "path": "1"}, "43": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "44": {"fn": null, "offset": [230, 13465], "op": "PUSH4", "path": "1", "value": "0xAAF5EB68"}, "49": {"fn": null, "offset": [230, 13465], "op": "EQ", "path": "1"}, "50": {"fn": null, "offset": [230, 13465], "op": "PUSH2", "path": "1", "value": "0x1DB"}, "53": {"fn": null, "offset": [230, 13465], "op": "JUMPI", "path": "1"}, "54": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "55": {"fn": null, "offset": [230, 13465], "op": "PUSH4", "path": "1", "value": "0xC26CB54F"}, "60": {"fn": null, "offset": [230, 13465], "op": "EQ", "path": "1"}, "61": {"fn": null, "offset": [230, 13465], "op": "PUSH2", "path": "1", "value": "0x1E5"}, "64": {"fn": null, "offset": [230, 13465], "op": "JUMPI", "path": "1"}, "65": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "66": {"fn": null, "offset": [230, 13465], "op": "PUSH4", "path": "1", "value": "0xD71383ED"}, "71": {"fn": null, "offset": [230, 13465], "op": "EQ", "path": "1"}, "72": {"fn": null, "offset": [230, 13465], "op": "PUSH2", "path": "1", "value": "0x260"}, "75": {"fn": null, "offset": [230, 13465], "op": "JUMPI", "path": "1"}, "76": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "77": {"fn": null, "offset": [230, 13465], "op": "PUSH4", "path": "1", "value": "0xF16AD51E"}, "82": {"fn": null, "offset": [230, 13465], "op": "EQ", "path": "1"}, "83": {"fn": null, "offset": [230, 13465], "op": "PUSH2", "path": "1", "value": "0x273"}, "86": {"fn": null, "offset": [230, 13465], "op": "JUMPI", "path": "1"}, "87": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "88": {"fn": null, "offset": [230, 13465], "op": "PUSH4", "path": "1", "value": "0xF287AD04"}, "93": {"fn": null, "offset": [230, 13465], "op": "EQ", "path": "1"}, "94": {"fn": null, "offset": [230, 13465], "op": "PUSH2", "path": "1", "value": "0x286"}, "97": {"fn": null, "offset": [230, 13465], "op": "JUMPI", "path": "1"}, "98": {"fn": null, "offset": [230, 13465], "op": "PUSH1", "path": "1", "value": "0x0"}, "100": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "101": {"fn": null, "offset": [230, 13465], "op": "REVERT", "path": "1"}, "102": {"fn": null, "offset": [230, 13465], "op": "JUMPDEST", "path": "1"}, "103": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "104": {"fn": null, "offset": [230, 13465], "op": "PUSH3", "path": "1", "value": "0xF714CE"}, "108": {"fn": null, "offset": [230, 13465], "op": "EQ", "path": "1"}, "109": {"fn": null, "offset": [230, 13465], "op": "PUSH2", "path": "1", "value": "0xA2"}, "112": {"fn": null, "offset": [230, 13465], "op": "JUMPI", "path": "1"}, "113": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "114": {"fn": null, "offset": [230, 13465], "op": "PUSH4", "path": "1", "value": "0x390B7C66"}, "119": {"fn": null, "offset": [230, 13465], "op": "EQ", "path": "1"}, "120": {"fn": null, "offset": [230, 13465], "op": "PUSH2", "path": "1", "value": "0xB7"}, "123": {"fn": null, "offset": [230, 13465], "op": "JUMPI", "path": "1"}, "124": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "125": {"fn": null, "offset": [230, 13465], "op": "PUSH4", "path": "1", "value": "0x6FB6EC41"}, "130": {"fn": null, "offset": [230, 13465], "op": "EQ", "path": "1"}, "131": {"fn": null, "offset": [230, 13465], "op": "PUSH2", "path": "1", "value": "0xD3"}, "134": {"fn": null, "offset": [230, 13465], "op": "JUMPI", "path": "1"}, "135": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "136": {"fn": null, "offset": [230, 13465], "op": "PUSH4", "path": "1", "value": "0x85D88CB1"}, "141": {"fn": null, "offset": [230, 13465], "op": "EQ", "path": "1"}, "142": {"fn": null, "offset": [230, 13465], "op": "PUSH2", "path": "1", "value": "0x108"}, "145": {"fn": null, "offset": [230, 13465], "op": "JUMPI", "path": "1"}, "146": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "147": {"fn": null, "offset": [230, 13465], "op": "PUSH4", "path": "1", "value": "0x86BB8249"}, "152": {"fn": null, "offset": [230, 13465], "op": "EQ", "path": "1"}, "153": {"fn": null, "offset": [230, 13465], "op": "PUSH2", "path": "1", "value": "0x19D"}, "156": {"fn": null, "offset": [230, 13465], "op": "JUMPI", "path": "1"}, "157": {"fn": null, "offset": [230, 13465], "op": "JUMPDEST", "path": "1"}, "158": {"fn": null, "offset": [230, 13465], "op": "PUSH1", "path": "1", "value": "0x0"}, "160": {"fn": null, "offset": [230, 13465], "op": "DUP1", "path": "1"}, "161": {"first_revert": true, "fn": null, "offset": [230, 13465], "op": "REVERT", "path": "1"}, "162": {"fn": "MerkleResistor.withdraw", "offset": [7864, 10450], "op": "JUMPDEST", "path": "1"}, "163": {"fn": "MerkleResistor.withdraw", "offset": [7864, 10450], "op": "PUSH2", "path": "1", "value": "0xB5"}, "166": {"fn": "MerkleResistor.withdraw", "offset": [7864, 10450], "op": "PUSH2", "path": "1", "value": "0xB0"}, "169": {"fn": "MerkleResistor.withdraw", "offset": [7864, 10450], "op": "CALLDATASIZE", "path": "1"}, "170": {"fn": "MerkleResistor.withdraw", "offset": [7864, 10450], "op": "PUSH1", "path": "1", "value": "0x4"}, "172": {"fn": "MerkleResistor.withdraw", "offset": [7864, 10450], "op": "PUSH2", "path": "1", "value": "0xDA0"}, "175": {"fn": "MerkleResistor.withdraw", "jump": "i", "offset": [7864, 10450], "op": "JUMP", "path": "1"}, "176": {"fn": "MerkleResistor.withdraw", "offset": [7864, 10450], "op": "JUMPDEST", "path": "1"}, "177": {"fn": "MerkleResistor.withdraw", "offset": [7864, 10450], "op": "PUSH2", "path": "1", "value": "0x299"}, "180": {"fn": "MerkleResistor.withdraw", "jump": "i", "offset": [7864, 10450], "op": "JUMP", "path": "1"}, "181": {"fn": "MerkleResistor.withdraw", "offset": [7864, 10450], "op": "JUMPDEST", "path": "1"}, "182": {"fn": "MerkleResistor.withdraw", "offset": [7864, 10450], "op": "STOP", "path": "1"}, "183": {"offset": [333, 357], "op": "JUMPDEST", "path": "1"}, "184": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "PUSH2", "path": "1", "value": "0xC0"}, "187": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "PUSH1", "path": "1", "value": "0x0"}, "189": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "SLOAD", "path": "1"}, "190": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "DUP2", "path": "1"}, "191": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "JUMP", "path": "1"}, "192": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "JUMPDEST", "path": "1"}, "193": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "PUSH1", "path": "1", "value": "0x40"}, "195": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "MLOAD", "path": "1"}, "196": {"op": "SWAP1"}, "197": {"op": "DUP2"}, "198": {"op": "MSTORE"}, "199": {"op": "PUSH1", "value": "0x20"}, "201": {"op": "ADD"}, "202": {"offset": [333, 357], "op": "JUMPDEST", "path": "1"}, "203": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "PUSH1", "path": "1", "value": "0x40"}, "205": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "MLOAD", "path": "1"}, "206": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "DUP1", "path": "1"}, "207": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "SWAP2", "path": "1"}, "208": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "SUB", "path": "1"}, "209": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "SWAP1", "path": "1"}, "210": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "RETURN", "path": "1"}, "211": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "JUMPDEST", "path": "1"}, "212": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "PUSH2", "path": "1", "value": "0xE6"}, "215": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "PUSH2", "path": "1", "value": "0xE1"}, "218": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "CALLDATASIZE", "path": "1"}, "219": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "PUSH1", "path": "1", "value": "0x4"}, "221": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "PUSH2", "path": "1", "value": "0xDCC"}, "224": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [10519, 13462], "op": "JUMP", "path": "1"}, "225": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "JUMPDEST", "path": "1"}, "226": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "PUSH2", "path": "1", "value": "0x53C"}, "229": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [10519, 13462], "op": "JUMP", "path": "1"}, "230": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "JUMPDEST", "path": "1"}, "231": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "PUSH1", "path": "1", "value": "0x40"}, "233": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "DUP1", "path": "1"}, "234": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "MLOAD", "path": "1"}, "235": {"op": "SWAP5"}, "236": {"op": "ISZERO"}, "237": {"op": "ISZERO"}, "238": {"op": "DUP6"}, "239": {"op": "MSTORE"}, "240": {"op": "PUSH1", "value": "0x20"}, "242": {"op": "DUP6"}, "243": {"op": "ADD"}, "244": {"op": "SWAP4"}, "245": {"op": "SWAP1"}, "246": {"op": "SWAP4"}, "247": {"op": "MSTORE"}, "248": {"op": "SWAP2"}, "249": {"op": "DUP4"}, "250": {"op": "ADD"}, "251": {"op": "MSTORE"}, "252": {"op": "PUSH1", "value": "0x60"}, "254": {"op": "DUP3"}, "255": {"op": "ADD"}, "256": {"op": "MSTORE"}, "257": {"op": "PUSH1", "value": "0x80"}, "259": {"op": "ADD"}, "260": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "PUSH2", "path": "1", "value": "0xCA"}, "263": {"op": "JUMP"}, "264": {"offset": [2333, 2380], "op": "JUMPDEST", "path": "1"}, "265": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH2", "path": "1", "value": "0x15F"}, "268": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH2", "path": "1", "value": "0x116"}, "271": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "CALLDATASIZE", "path": "1"}, "272": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "1", "value": "0x4"}, "274": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH2", "path": "1", "value": "0xDFE"}, "277": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [2333, 2380], "op": "JUMP", "path": "1"}, "278": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "JUMPDEST", "path": "1"}, "279": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "1", "value": "0x2"}, "281": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "1", "value": "0x20"}, "283": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP2", "path": "1"}, "284": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP1", "path": "1"}, "285": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "MSTORE", "path": "1"}, "286": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "1", "value": "0x0"}, "288": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP2", "path": "1"}, "289": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP3", "path": "1"}, "290": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "MSTORE", "path": "1"}, "291": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "1", "value": "0x40"}, "293": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP1", "path": "1"}, "294": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP2", "path": "1"}, "295": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "KECCAK256", "path": "1"}, "296": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP1", "path": "1"}, "297": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SLOAD", "path": "1"}, "298": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "1", "value": "0x1"}, "300": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP3", "path": "1"}, "301": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "ADD", "path": "1"}, "302": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SLOAD", "path": "1"}, "303": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP3", "path": "1"}, "304": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP3", "path": "1"}, "305": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "ADD", "path": "1"}, "306": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SLOAD", "path": "1"}, "307": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "1", "value": "0x3"}, "309": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP4", "path": "1"}, "310": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "ADD", "path": "1"}, "311": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SLOAD", "path": "1"}, "312": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "1", "value": "0x4"}, "314": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP5", "path": "1"}, "315": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "ADD", "path": "1"}, "316": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SLOAD", "path": "1"}, "317": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "1", "value": "0x5"}, "319": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP6", "path": "1"}, "320": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "ADD", "path": "1"}, "321": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SLOAD", "path": "1"}, "322": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "1", "value": "0x6"}, "324": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP1", "path": "1"}, "325": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP6", "path": "1"}, "326": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "ADD", "path": "1"}, "327": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SLOAD", "path": "1"}, "328": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP4", "path": "1"}, "329": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP6", "path": "1"}, "330": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP5", "path": "1"}, "331": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP3", "path": "1"}, "332": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP4", "path": "1"}, "333": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP2", "path": "1"}, "334": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP3", "path": "1"}, "335": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP1", "path": "1"}, "336": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP2", "path": "1"}, "337": {"op": "PUSH1", "value": "0x1"}, "339": {"op": "PUSH1", "value": "0x1"}, "341": {"op": "PUSH1", "value": "0xA0"}, "343": {"op": "SHL"}, "344": {"op": "SUB"}, "345": {"offset": [2333, 2380], "op": "SWAP1", "path": "1"}, "346": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP2", "path": "1"}, "347": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "AND", "path": "1"}, "348": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP1", "path": "1"}, "349": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP8", "path": "1"}, "350": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "JUMP", "path": "1"}, "351": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "JUMPDEST", "path": "1"}, "352": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "1", "value": "0x40"}, "354": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP1", "path": "1"}, "355": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "MLOAD", "path": "1"}, "356": {"op": "SWAP8"}, "357": {"op": "DUP9"}, "358": {"op": "MSTORE"}, "359": {"op": "PUSH1", "value": "0x20"}, "361": {"op": "DUP9"}, "362": {"op": "ADD"}, "363": {"op": "SWAP7"}, "364": {"op": "SWAP1"}, "365": {"op": "SWAP7"}, "366": {"op": "MSTORE"}, "367": {"op": "SWAP5"}, "368": {"op": "DUP7"}, "369": {"op": "ADD"}, "370": {"op": "SWAP4"}, "371": {"op": "SWAP1"}, "372": {"op": "SWAP4"}, "373": {"op": "MSTORE"}, "374": {"op": "PUSH1", "value": "0x60"}, "376": {"op": "DUP6"}, "377": {"op": "ADD"}, "378": {"op": "SWAP2"}, "379": {"op": "SWAP1"}, "380": {"op": "SWAP2"}, "381": {"op": "MSTORE"}, "382": {"op": "PUSH1", "value": "0x80"}, "384": {"op": "DUP5"}, "385": {"op": "ADD"}, "386": {"op": "MSTORE"}, "387": {"op": "PUSH1", "value": "0x1"}, "389": {"op": "PUSH1", "value": "0x1"}, "391": {"op": "PUSH1", "value": "0xA0"}, "393": {"op": "SHL"}, "394": {"op": "SUB"}, "395": {"op": "AND"}, "396": {"op": "PUSH1", "value": "0xA0"}, "398": {"op": "DUP4"}, "399": {"op": "ADD"}, "400": {"op": "MSTORE"}, "401": {"op": "PUSH1", "value": "0xC0"}, "403": {"op": "DUP3"}, "404": {"op": "ADD"}, "405": {"op": "MSTORE"}, "406": {"op": "PUSH1", "value": "0xE0"}, "408": {"op": "ADD"}, "409": {"offset": [2333, 2380], "op": "PUSH2", "path": "1", "value": "0xCA"}, "412": {"op": "JUMP"}, "413": {"offset": [2173, 2235], "op": "JUMPDEST", "path": "1"}, "414": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH2", "path": "1", "value": "0x1CB"}, "417": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH2", "path": "1", "value": "0x1AB"}, "420": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "CALLDATASIZE", "path": "1"}, "421": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH1", "path": "1", "value": "0x4"}, "423": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH2", "path": "1", "value": "0xE17"}, "426": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [2173, 2235], "op": "JUMP", "path": "1"}, "427": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "JUMPDEST", "path": "1"}, "428": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH1", "path": "1", "value": "0x1"}, "430": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH1", "path": "1", "value": "0x20"}, "432": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "SWAP1", "path": "1"}, "433": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "DUP2", "path": "1"}, "434": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "MSTORE", "path": "1"}, "435": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH1", "path": "1", "value": "0x0"}, "437": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "SWAP3", "path": "1"}, "438": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "DUP4", "path": "1"}, "439": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "MSTORE", "path": "1"}, "440": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH1", "path": "1", "value": "0x40"}, "442": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "DUP1", "path": "1"}, "443": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "DUP5", "path": "1"}, "444": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "KECCAK256", "path": "1"}, "445": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "SWAP1", "path": "1"}, "446": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "SWAP2", "path": "1"}, "447": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "MSTORE", "path": "1"}, "448": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "SWAP1", "path": "1"}, "449": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "DUP3", "path": "1"}, "450": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "MSTORE", "path": "1"}, "451": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "SWAP1", "path": "1"}, "452": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "KECCAK256", "path": "1"}, "453": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "SLOAD", "path": "1"}, "454": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH1", "path": "1", "value": "0xFF"}, "456": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "AND", "path": "1"}, "457": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "DUP2", "path": "1"}, "458": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "JUMP", "path": "1"}, "459": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "JUMPDEST", "path": "1"}, "460": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH1", "path": "1", "value": "0x40"}, "462": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "MLOAD", "path": "1"}, "463": {"op": "SWAP1"}, "464": {"op": "ISZERO"}, "465": {"op": "ISZERO"}, "466": {"op": "DUP2"}, "467": {"op": "MSTORE"}, "468": {"op": "PUSH1", "value": "0x20"}, "470": {"op": "ADD"}, "471": {"offset": [2173, 2235], "op": "PUSH2", "path": "1", "value": "0xCA"}, "474": {"op": "JUMP"}, "475": {"offset": [2584, 2624], "op": "JUMPDEST", "path": "1"}, "476": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2584, 2624], "op": "PUSH2", "path": "1", "value": "0xC0"}, "479": {"offset": [2617, 2624], "op": "PUSH3", "path": "1", "value": "0xF4240"}, "483": {"offset": [2584, 2624], "op": "DUP2", "path": "1"}, "484": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2584, 2624], "op": "JUMP", "path": "1"}, "485": {"offset": [2449, 2511], "op": "JUMPDEST", "path": "1"}, "486": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH2", "path": "1", "value": "0x233"}, "489": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH2", "path": "1", "value": "0x1F3"}, "492": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "CALLDATASIZE", "path": "1"}, "493": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "1", "value": "0x4"}, "495": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH2", "path": "1", "value": "0xE17"}, "498": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [2449, 2511], "op": "JUMP", "path": "1"}, "499": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "JUMPDEST", "path": "1"}, "500": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "1", "value": "0x3"}, "502": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "1", "value": "0x20"}, "504": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP2", "path": "1"}, "505": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP2", "path": "1"}, "506": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "MSTORE", "path": "1"}, "507": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "1", "value": "0x0"}, "509": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP4", "path": "1"}, "510": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP5", "path": "1"}, "511": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "MSTORE", "path": "1"}, "512": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "1", "value": "0x40"}, "514": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP1", "path": "1"}, "515": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP6", "path": "1"}, "516": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "KECCAK256", "path": "1"}, "517": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP1", "path": "1"}, "518": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP2", "path": "1"}, "519": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "MSTORE", "path": "1"}, "520": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP2", "path": "1"}, "521": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP4", "path": "1"}, "522": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "MSTORE", "path": "1"}, "523": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP2", "path": "1"}, "524": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "KECCAK256", "path": "1"}, "525": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP1", "path": "1"}, "526": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SLOAD", "path": "1"}, "527": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "1", "value": "0x1"}, "529": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP3", "path": "1"}, "530": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "ADD", "path": "1"}, "531": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SLOAD", "path": "1"}, "532": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "1", "value": "0x2"}, "534": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP4", "path": "1"}, "535": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "ADD", "path": "1"}, "536": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SLOAD", "path": "1"}, "537": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP4", "path": "1"}, "538": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP4", "path": "1"}, "539": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "ADD", "path": "1"}, "540": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SLOAD", "path": "1"}, "541": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "1", "value": "0x4"}, "543": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP5", "path": "1"}, "544": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "ADD", "path": "1"}, "545": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SLOAD", "path": "1"}, "546": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "1", "value": "0x5"}, "548": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP1", "path": "1"}, "549": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP5", "path": "1"}, "550": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "ADD", "path": "1"}, "551": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SLOAD", "path": "1"}, "552": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP3", "path": "1"}, "553": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP5", "path": "1"}, "554": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP2", "path": "1"}, "555": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP4", "path": "1"}, "556": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP2", "path": "1"}, "557": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP3", "path": "1"}, "558": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP1", "path": "1"}, "559": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP2", "path": "1"}, "560": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP1", "path": "1"}, "561": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP7", "path": "1"}, "562": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "JUMP", "path": "1"}, "563": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "JUMPDEST", "path": "1"}, "564": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "1", "value": "0x40"}, "566": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP1", "path": "1"}, "567": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "MLOAD", "path": "1"}, "568": {"op": "SWAP7"}, "569": {"op": "DUP8"}, "570": {"op": "MSTORE"}, "571": {"op": "PUSH1", "value": "0x20"}, "573": {"op": "DUP8"}, "574": {"op": "ADD"}, "575": {"op": "SWAP6"}, "576": {"op": "SWAP1"}, "577": {"op": "SWAP6"}, "578": {"op": "MSTORE"}, "579": {"op": "SWAP4"}, "580": {"op": "DUP6"}, "581": {"op": "ADD"}, "582": {"op": "SWAP3"}, "583": {"op": "SWAP1"}, "584": {"op": "SWAP3"}, "585": {"op": "MSTORE"}, "586": {"op": "PUSH1", "value": "0x60"}, "588": {"op": "DUP5"}, "589": {"op": "ADD"}, "590": {"op": "MSTORE"}, "591": {"op": "PUSH1", "value": "0x80"}, "593": {"op": "DUP4"}, "594": {"op": "ADD"}, "595": {"op": "MSTORE"}, "596": {"op": "PUSH1", "value": "0xA0"}, "598": {"op": "DUP3"}, "599": {"op": "ADD"}, "600": {"op": "MSTORE"}, "601": {"op": "PUSH1", "value": "0xC0"}, "603": {"op": "ADD"}, "604": {"offset": [2449, 2511], "op": "PUSH2", "path": "1", "value": "0xCA"}, "607": {"op": "JUMP"}, "608": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "JUMPDEST", "path": "1"}, "609": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "PUSH2", "path": "1", "value": "0xB5"}, "612": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "PUSH2", "path": "1", "value": "0x26E"}, "615": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "CALLDATASIZE", "path": "1"}, "616": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "PUSH1", "path": "1", "value": "0x4"}, "618": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "PUSH2", "path": "1", "value": "0xE41"}, "621": {"fn": "MerkleResistor.addMerkleTree", "jump": "i", "offset": [3091, 4166], "op": "JUMP", "path": "1"}, "622": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "JUMPDEST", "path": "1"}, "623": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "PUSH2", "path": "1", "value": "0x6E3"}, "626": {"fn": "MerkleResistor.addMerkleTree", "jump": "i", "offset": [3091, 4166], "op": "JUMP", "path": "1"}, "627": {"fn": "MerkleResistor.depositTokens", "offset": [4204, 5390], "op": "JUMPDEST", "path": "1"}, "628": {"fn": "MerkleResistor.depositTokens", "offset": [4204, 5390], "op": "PUSH2", "path": "1", "value": "0xB5"}, "631": {"fn": "MerkleResistor.depositTokens", "offset": [4204, 5390], "op": "PUSH2", "path": "1", "value": "0x281"}, "634": {"fn": "MerkleResistor.depositTokens", "offset": [4204, 5390], "op": "CALLDATASIZE", "path": "1"}, "635": {"fn": "MerkleResistor.depositTokens", "offset": [4204, 5390], "op": "PUSH1", "path": "1", "value": "0x4"}, "637": {"fn": "MerkleResistor.depositTokens", "offset": [4204, 5390], "op": "PUSH2", "path": "1", "value": "0xE9D"}, "640": {"fn": "MerkleResistor.depositTokens", "jump": "i", "offset": [4204, 5390], "op": "JUMP", "path": "1"}, "641": {"fn": "MerkleResistor.depositTokens", "offset": [4204, 5390], "op": "JUMPDEST", "path": "1"}, "642": {"fn": "MerkleResistor.depositTokens", "offset": [4204, 5390], "op": "PUSH2", "path": "1", "value": "0x8A7"}, "645": {"fn": "MerkleResistor.depositTokens", "jump": "i", "offset": [4204, 5390], "op": "JUMP", "path": "1"}, "646": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "JUMPDEST", "path": "1"}, "647": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "PUSH2", "path": "1", "value": "0xB5"}, "650": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "PUSH2", "path": "1", "value": "0x294"}, "653": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "CALLDATASIZE", "path": "1"}, "654": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "PUSH1", "path": "1", "value": "0x4"}, "656": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "PUSH2", "path": "1", "value": "0xED5"}, "659": {"fn": "MerkleResistor.initialize", "jump": "i", "offset": [5651, 7637], "op": "JUMP", "path": "1"}, "660": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "JUMPDEST", "path": "1"}, "661": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "PUSH2", "path": "1", "value": "0x9EA"}, "664": {"fn": "MerkleResistor.initialize", "jump": "i", "offset": [5651, 7637], "op": "JUMP", "path": "1"}, "665": {"fn": "MerkleResistor.withdraw", "offset": [7864, 10450], "op": "JUMPDEST", "path": "1"}, "666": {"op": "PUSH1", "value": "0x1"}, "668": {"op": "PUSH1", "value": "0x1"}, "670": {"op": "PUSH1", "value": "0xA0"}, "672": {"op": "SHL"}, "673": {"op": "SUB"}, "674": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8078], "op": "DUP2", "path": "1", "statement": 0}, "675": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8078], "op": "AND", "path": "1"}, "676": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8078], "op": "PUSH1", "path": "1", "value": "0x0"}, "678": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8078], "op": "SWAP1", "path": "1"}, "679": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8078], "op": "DUP2", "path": "1"}, "680": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8078], "op": "MSTORE", "path": "1"}, "681": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8065], "op": "PUSH1", "path": "1", "value": "0x1"}, "683": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8078], "op": "PUSH1", "path": "1", "value": "0x20"}, "685": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8078], "op": "SWAP1", "path": "1"}, "686": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8078], "op": "DUP2", "path": "1"}, "687": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8078], "op": "MSTORE", "path": "1"}, "688": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8078], "op": "PUSH1", "path": "1", "value": "0x40"}, "690": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8078], "op": "DUP1", "path": "1"}, "691": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8078], "op": "DUP4", "path": "1"}, "692": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8078], "op": "KECCAK256", "path": "1"}, "693": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8091], "op": "DUP6", "path": "1"}, "694": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8091], "op": "DUP5", "path": "1"}, "695": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8091], "op": "MSTORE", "path": "1"}, "696": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8091], "op": "SWAP1", "path": "1"}, "697": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8091], "op": "SWAP2", "path": "1"}, "698": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8091], "op": "MSTORE", "path": "1"}, "699": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8091], "op": "SWAP1", "path": "1"}, "700": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8091], "op": "KECCAK256", "path": "1"}, "701": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8091], "op": "SLOAD", "path": "1"}, "702": {"fn": "MerkleResistor.withdraw", "offset": [8054, 8091], "op": "PUSH1", "path": "1", "value": "0xFF"}, "704": {"branch": 29, "fn": "MerkleResistor.withdraw", "offset": [8054, 8091], "op": "AND", "path": "1"}, "705": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "PUSH2", "path": "1", "value": "0x321"}, "708": {"branch": 29, "fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "JUMPI", "path": "1"}, "709": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "PUSH1", "path": "1", "value": "0x40"}, "711": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "MLOAD", "path": "1"}, "712": {"op": "PUSH3", "value": "0x461BCD"}, "716": {"op": "PUSH1", "value": "0xE5"}, "718": {"op": "SHL"}, "719": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "DUP2", "path": "1"}, "720": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "MSTORE", "path": "1"}, "721": {"op": "PUSH1", "value": "0x20"}, "723": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "PUSH1", "path": "1", "value": "0x4"}, "725": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "DUP3", "path": "1"}, "726": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "ADD", "path": "1"}, "727": {"op": "MSTORE"}, "728": {"op": "PUSH1", "value": "0x27"}, "730": {"op": "PUSH1", "value": "0x24"}, "732": {"op": "DUP3"}, "733": {"op": "ADD"}, "734": {"op": "MSTORE"}, "735": {"op": "PUSH32", "value": "0x596F75206D75737420696E697469616C697A6520796F7572206163636F756E74"}, "768": {"op": "PUSH1", "value": "0x44"}, "770": {"op": "DUP3"}, "771": {"op": "ADD"}, "772": {"op": "MSTORE"}, "773": {"op": "PUSH7", "value": "0x103334B939BA17"}, "781": {"op": "PUSH1", "value": "0xC9"}, "783": {"op": "SHL"}, "784": {"op": "PUSH1", "value": "0x64"}, "786": {"op": "DUP3"}, "787": {"op": "ADD"}, "788": {"op": "MSTORE"}, "789": {"op": "PUSH1", "value": "0x84"}, "791": {"op": "ADD"}, "792": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "JUMPDEST", "path": "1"}, "793": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "PUSH1", "path": "1", "value": "0x40"}, "795": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "MLOAD", "path": "1"}, "796": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "DUP1", "path": "1"}, "797": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "SWAP2", "path": "1"}, "798": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "SUB", "path": "1"}, "799": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "SWAP1", "path": "1"}, "800": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "REVERT", "optimizer_revert": true, "path": "1"}, "801": {"fn": "MerkleResistor.withdraw", "offset": [8046, 8135], "op": "JUMPDEST", "path": "1"}, "802": {"op": "PUSH1", "value": "0x1"}, "804": {"op": "PUSH1", "value": "0x1"}, "806": {"op": "PUSH1", "value": "0xA0"}, "808": {"op": "SHL"}, "809": {"op": "SUB"}, "810": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8233], "op": "DUP2", "path": "1"}, "811": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8233], "op": "AND", "path": "1"}, "812": {"fn": "MerkleResistor.withdraw", "offset": [8186, 8209], "op": "PUSH1", "path": "1", "value": "0x0"}, "814": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8233], "op": "SWAP1", "path": "1"}, "815": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8233], "op": "DUP2", "path": "1"}, "816": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8233], "op": "MSTORE", "path": "1"}, "817": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8220], "op": "PUSH1", "path": "1", "value": "0x3"}, "819": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8233], "op": "PUSH1", "path": "1", "value": "0x20"}, "821": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8233], "op": "SWAP1", "path": "1"}, "822": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8233], "op": "DUP2", "path": "1"}, "823": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8233], "op": "MSTORE", "path": "1"}, "824": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8233], "op": "PUSH1", "path": "1", "value": "0x40"}, "826": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8233], "op": "DUP1", "path": "1"}, "827": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8233], "op": "DUP4", "path": "1"}, "828": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8233], "op": "KECCAK256", "path": "1"}, "829": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8246], "op": "DUP6", "path": "1"}, "830": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8246], "op": "DUP5", "path": "1"}, "831": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8246], "op": "MSTORE", "path": "1"}, "832": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8246], "op": "SWAP1", "path": "1"}, "833": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8246], "op": "SWAP2", "path": "1"}, "834": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8246], "op": "MSTORE", "path": "1"}, "835": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8246], "op": "SWAP1", "path": "1"}, "836": {"fn": "MerkleResistor.withdraw", "offset": [8212, 8246], "op": "KECCAK256", "path": "1"}, "837": {"fn": "MerkleResistor.withdraw", "offset": [8303, 8323], "op": "PUSH1", "path": "1", "statement": 1, "value": "0x1"}, "839": {"fn": "MerkleResistor.withdraw", "offset": [8303, 8323], "op": "DUP2", "path": "1"}, "840": {"fn": "MerkleResistor.withdraw", "offset": [8303, 8323], "op": "ADD", "path": "1"}, "841": {"fn": "MerkleResistor.withdraw", "offset": [8303, 8323], "op": "SLOAD", "path": "1"}, "842": {"fn": "MerkleResistor.withdraw", "offset": [8295, 8358], "op": "PUSH2", "path": "1", "value": "0x395"}, "845": {"fn": "MerkleResistor.withdraw", "offset": [8295, 8358], "op": "JUMPI", "path": "1"}, "846": {"fn": "MerkleResistor.withdraw", "offset": [8295, 8358], "op": "PUSH1", "path": "1", "value": "0x40"}, "848": {"fn": "MerkleResistor.withdraw", "offset": [8295, 8358], "op": "MLOAD", "path": "1"}, "849": {"op": "PUSH3", "value": "0x461BCD"}, "853": {"op": "PUSH1", "value": "0xE5"}, "855": {"op": "SHL"}, "856": {"fn": "MerkleResistor.withdraw", "offset": [8295, 8358], "op": "DUP2", "path": "1"}, "857": {"fn": "MerkleResistor.withdraw", "offset": [8295, 8358], "op": "MSTORE", "path": "1"}, "858": {"op": "PUSH1", "value": "0x20"}, "860": {"fn": "MerkleResistor.withdraw", "offset": [8295, 8358], "op": "PUSH1", "path": "1", "value": "0x4"}, "862": {"fn": "MerkleResistor.withdraw", "offset": [8295, 8358], "op": "DUP3", "path": "1"}, "863": {"fn": "MerkleResistor.withdraw", "offset": [8295, 8358], "op": "ADD", "path": "1"}, "864": {"op": "MSTORE"}, "865": {"op": "PUSH1", "value": "0x19"}, "867": {"op": "PUSH1", "value": "0x24"}, "869": {"op": "DUP3"}, "870": {"op": "ADD"}, "871": {"op": "MSTORE"}, "872": {"op": "PUSH32", "value": "0x4E6F20636F696E73206C65667420746F20776974686472617700000000000000"}, "905": {"op": "PUSH1", "value": "0x44"}, "907": {"op": "DUP3"}, "908": {"op": "ADD"}, "909": {"op": "MSTORE"}, "910": {"op": "PUSH1", "value": "0x64"}, "912": {"op": "ADD"}, "913": {"fn": "MerkleResistor.withdraw", "offset": [8295, 8358], "op": "PUSH2", "path": "1", "value": "0x318"}, "916": {"op": "JUMP"}, "917": {"fn": "MerkleResistor.withdraw", "offset": [8295, 8358], "op": "JUMPDEST", "path": "1"}, "918": {"fn": "MerkleResistor.withdraw", "offset": [8368, 8390], "op": "PUSH1", "path": "1", "value": "0x0"}, "920": {"fn": "MerkleResistor.withdraw", "offset": [8538, 8545], "op": "DUP2", "path": "1"}, "921": {"fn": "MerkleResistor.withdraw", "offset": [8538, 8553], "op": "PUSH1", "path": "1", "value": "0x3"}, "923": {"fn": "MerkleResistor.withdraw", "offset": [8538, 8553], "op": "ADD", "path": "1"}, "924": {"fn": "MerkleResistor.withdraw", "offset": [8538, 8553], "op": "SLOAD", "path": "1"}, "925": {"fn": "MerkleResistor.withdraw", "offset": [8519, 8534], "op": "TIMESTAMP", "path": "1"}, "926": {"branch": 30, "fn": "MerkleResistor.withdraw", "offset": [8519, 8553], "op": "LT", "path": "1"}, "927": {"fn": "MerkleResistor.withdraw", "offset": [8515, 8889], "op": "PUSH2", "path": "1", "value": "0x3AD"}, "930": {"branch": 30, "fn": "MerkleResistor.withdraw", "offset": [8515, 8889], "op": "JUMPI", "path": "1"}, "931": {"op": "POP"}, "932": {"fn": "MerkleResistor.withdraw", "offset": [8589, 8609], "op": "PUSH1", "path": "1", "statement": 2, "value": "0x1"}, "934": {"fn": "MerkleResistor.withdraw", "offset": [8589, 8609], "op": "DUP2", "path": "1"}, "935": {"fn": "MerkleResistor.withdraw", "offset": [8589, 8609], "op": "ADD", "path": "1"}, "936": {"fn": "MerkleResistor.withdraw", "offset": [8589, 8609], "op": "SLOAD", "path": "1"}, "937": {"fn": "MerkleResistor.withdraw", "offset": [8515, 8889], "op": "PUSH2", "path": "1", "value": "0x3CE"}, "940": {"fn": "MerkleResistor.withdraw", "offset": [8515, 8889], "op": "JUMP", "path": "1"}, "941": {"fn": "MerkleResistor.withdraw", "offset": [8515, 8889], "op": "JUMPDEST", "path": "1"}, "942": {"fn": "MerkleResistor.withdraw", "offset": [8856, 8878], "op": "PUSH1", "path": "1", "statement": 3, "value": "0x4"}, "944": {"fn": "MerkleResistor.withdraw", "offset": [8856, 8878], "op": "DUP3", "path": "1"}, "945": {"fn": "MerkleResistor.withdraw", "offset": [8856, 8878], "op": "ADD", "path": "1"}, "946": {"fn": "MerkleResistor.withdraw", "offset": [8856, 8878], "op": "SLOAD", "path": "1"}, "947": {"fn": "MerkleResistor.withdraw", "offset": [8826, 8852], "op": "PUSH1", "path": "1", "value": "0x5"}, "949": {"fn": "MerkleResistor.withdraw", "offset": [8826, 8852], "op": "DUP4", "path": "1"}, "950": {"fn": "MerkleResistor.withdraw", "offset": [8826, 8852], "op": "ADD", "path": "1"}, "951": {"fn": "MerkleResistor.withdraw", "offset": [8826, 8852], "op": "SLOAD", "path": "1"}, "952": {"fn": "MerkleResistor.withdraw", "offset": [8808, 8852], "op": "PUSH2", "path": "1", "value": "0x3C1"}, "955": {"fn": "MerkleResistor.withdraw", "offset": [8808, 8852], "op": "SWAP1", "path": "1"}, "956": {"fn": "MerkleResistor.withdraw", "offset": [8808, 8823], "op": "TIMESTAMP", "path": "1"}, "957": {"fn": "MerkleResistor.withdraw", "offset": [8808, 8852], "op": "PUSH2", "path": "1", "value": "0xFE1"}, "960": {"fn": "MerkleResistor.withdraw", "jump": "i", "offset": [8808, 8852], "op": "JUMP", "path": "1"}, "961": {"fn": "MerkleResistor.withdraw", "offset": [8808, 8852], "op": "JUMPDEST", "path": "1"}, "962": {"fn": "MerkleResistor.withdraw", "offset": [8807, 8878], "op": "PUSH2", "path": "1", "value": "0x3CB"}, "965": {"fn": "MerkleResistor.withdraw", "offset": [8807, 8878], "op": "SWAP2", "path": "1"}, "966": {"fn": "MerkleResistor.withdraw", "offset": [8807, 8878], "op": "SWAP1", "path": "1"}, "967": {"fn": "MerkleResistor.withdraw", "offset": [8807, 8878], "op": "PUSH2", "path": "1", "value": "0xFF8"}, "970": {"fn": "MerkleResistor.withdraw", "jump": "i", "offset": [8807, 8878], "op": "JUMP", "path": "1"}, "971": {"fn": "MerkleResistor.withdraw", "offset": [8807, 8878], "op": "JUMPDEST", "path": "1"}, "972": {"fn": "MerkleResistor.withdraw", "offset": [8787, 8878], "op": "SWAP1", "path": "1"}, "973": {"fn": "MerkleResistor.withdraw", "offset": [8787, 8878], "op": "POP", "path": "1"}, "974": {"fn": "MerkleResistor.withdraw", "offset": [8515, 8889], "op": "JUMPDEST", "path": "1"}, "975": {"fn": "MerkleResistor.withdraw", "offset": [8921, 8944], "op": "PUSH1", "path": "1", "value": "0x0"}, "977": {"fn": "MerkleResistor.withdraw", "offset": [8947, 8971], "op": "DUP5", "path": "1"}, "978": {"fn": "MerkleResistor.withdraw", "offset": [8947, 8971], "op": "DUP2", "path": "1"}, "979": {"fn": "MerkleResistor.withdraw", "offset": [8947, 8971], "op": "MSTORE", "path": "1"}, "980": {"fn": "MerkleResistor.withdraw", "offset": [8947, 8958], "op": "PUSH1", "path": "1", "value": "0x2"}, "982": {"fn": "MerkleResistor.withdraw", "offset": [8947, 8971], "op": "PUSH1", "path": "1", "value": "0x20"}, "984": {"fn": "MerkleResistor.withdraw", "offset": [8947, 8971], "op": "MSTORE", "path": "1"}, "985": {"fn": "MerkleResistor.withdraw", "offset": [8947, 8971], "op": "PUSH1", "path": "1", "value": "0x40"}, "987": {"fn": "MerkleResistor.withdraw", "offset": [8947, 8971], "op": "DUP2", "path": "1"}, "988": {"fn": "MerkleResistor.withdraw", "offset": [8947, 8971], "op": "KECCAK256", "path": "1"}, "989": {"fn": "MerkleResistor.withdraw", "offset": [9170, 9190], "op": "PUSH1", "path": "1", "statement": 4, "value": "0x1"}, "991": {"fn": "MerkleResistor.withdraw", "offset": [9170, 9190], "op": "DUP5", "path": "1"}, "992": {"fn": "MerkleResistor.withdraw", "offset": [9170, 9190], "op": "ADD", "path": "1"}, "993": {"fn": "MerkleResistor.withdraw", "offset": [9170, 9211], "op": "DUP1", "path": "1"}, "994": {"fn": "MerkleResistor.withdraw", "offset": [9170, 9211], "op": "SLOAD", "path": "1"}, "995": {"fn": "MerkleResistor.withdraw", "offset": [8947, 8971], "op": "SWAP2", "path": "1"}, "996": {"fn": "MerkleResistor.withdraw", "offset": [8947, 8971], "op": "SWAP3", "path": "1"}, "997": {"fn": "MerkleResistor.withdraw", "offset": [9194, 9211], "op": "DUP5", "path": "1"}, "998": {"fn": "MerkleResistor.withdraw", "offset": [9194, 9211], "op": "SWAP3", "path": "1"}, "999": {"fn": "MerkleResistor.withdraw", "offset": [9170, 9211], "op": "PUSH2", "path": "1", "value": "0x3F1"}, "1002": {"fn": "MerkleResistor.withdraw", "offset": [9170, 9211], "op": "SWAP1", "path": "1"}, "1003": {"fn": "MerkleResistor.withdraw", "offset": [9194, 9211], "op": "DUP5", "path": "1"}, "1004": {"fn": "MerkleResistor.withdraw", "offset": [9194, 9211], "op": "SWAP1", "path": "1"}, "1005": {"fn": "MerkleResistor.withdraw", "offset": [9170, 9211], "op": "PUSH2", "path": "1", "value": "0xFE1"}, "1008": {"fn": "MerkleResistor.withdraw", "jump": "i", "offset": [9170, 9211], "op": "JUMP", "path": "1"}, "1009": {"fn": "MerkleResistor.withdraw", "offset": [9170, 9211], "op": "JUMPDEST", "path": "1"}, "1010": {"fn": "MerkleResistor.withdraw", "offset": [9170, 9211], "op": "SWAP1", "path": "1"}, "1011": {"fn": "MerkleResistor.withdraw", "offset": [9170, 9211], "op": "SWAP2", "path": "1"}, "1012": {"fn": "MerkleResistor.withdraw", "offset": [9170, 9211], "op": "SSTORE", "path": "1"}, "1013": {"op": "POP"}, "1014": {"op": "POP"}, "1015": {"fn": "MerkleResistor.withdraw", "offset": [9432, 9447], "op": "TIMESTAMP", "path": "1", "statement": 5}, "1016": {"fn": "MerkleResistor.withdraw", "offset": [9403, 9429], "op": "PUSH1", "path": "1", "value": "0x5"}, "1018": {"fn": "MerkleResistor.withdraw", "offset": [9403, 9429], "op": "DUP5", "path": "1"}, "1019": {"fn": "MerkleResistor.withdraw", "offset": [9403, 9429], "op": "ADD", "path": "1"}, "1020": {"fn": "MerkleResistor.withdraw", "offset": [9403, 9447], "op": "SSTORE", "path": "1"}, "1021": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9599], "op": "PUSH1", "path": "1", "statement": 6, "value": "0x6"}, "1023": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9599], "op": "DUP2", "path": "1"}, "1024": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9599], "op": "ADD", "path": "1"}, "1025": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9620], "op": "DUP1", "path": "1"}, "1026": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9620], "op": "SLOAD", "path": "1"}, "1027": {"fn": "MerkleResistor.withdraw", "offset": [9603, 9620], "op": "DUP4", "path": "1"}, "1028": {"fn": "MerkleResistor.withdraw", "offset": [9603, 9620], "op": "SWAP2", "path": "1"}, "1029": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9599], "op": "SWAP1", "path": "1"}, "1030": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9599], "op": "PUSH1", "path": "1", "value": "0x0"}, "1032": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9599], "op": "SWAP1", "path": "1"}, "1033": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9620], "op": "PUSH2", "path": "1", "value": "0x413"}, "1036": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9620], "op": "SWAP1", "path": "1"}, "1037": {"fn": "MerkleResistor.withdraw", "offset": [9603, 9620], "op": "DUP5", "path": "1"}, "1038": {"fn": "MerkleResistor.withdraw", "offset": [9603, 9620], "op": "SWAP1", "path": "1"}, "1039": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9620], "op": "PUSH2", "path": "1", "value": "0xFE1"}, "1042": {"fn": "MerkleResistor.withdraw", "jump": "i", "offset": [9582, 9620], "op": "JUMP", "path": "1"}, "1043": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9620], "op": "JUMPDEST", "path": "1"}, "1044": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9620], "op": "SWAP1", "path": "1"}, "1045": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9620], "op": "SWAP2", "path": "1"}, "1046": {"fn": "MerkleResistor.withdraw", "offset": [9582, 9620], "op": "SSTORE", "path": "1"}, "1047": {"op": "POP"}, "1048": {"op": "POP"}, "1049": {"fn": "MerkleResistor.withdraw", "offset": [10258, 10275], "op": "PUSH1", "path": "1", "statement": 7, "value": "0x5"}, "1051": {"fn": "MerkleResistor.withdraw", "offset": [10258, 10275], "op": "DUP2", "path": "1"}, "1052": {"fn": "MerkleResistor.withdraw", "offset": [10258, 10275], "op": "ADD", "path": "1"}, "1053": {"fn": "MerkleResistor.withdraw", "offset": [10258, 10275], "op": "SLOAD", "path": "1"}, "1054": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH1", "path": "1", "value": "0x40"}, "1056": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "MLOAD", "path": "1"}, "1057": {"op": "PUSH4", "value": "0xA9059CBB"}, "1062": {"op": "PUSH1", "value": "0xE0"}, "1064": {"op": "SHL"}, "1065": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP2", "path": "1"}, "1066": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "MSTORE", "path": "1"}, "1067": {"op": "PUSH1", "value": "0x1"}, "1069": {"op": "PUSH1", "value": "0x1"}, "1071": {"op": "PUSH1", "value": "0xA0"}, "1073": {"op": "SHL"}, "1074": {"op": "SUB"}, "1075": {"op": "DUP7"}, "1076": {"op": "DUP2"}, "1077": {"op": "AND"}, "1078": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH1", "path": "1", "value": "0x4"}, "1080": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP4", "path": "1"}, "1081": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "ADD", "path": "1"}, "1082": {"op": "MSTORE"}, "1083": {"op": "PUSH1", "value": "0x24"}, "1085": {"op": "DUP3"}, "1086": {"op": "ADD"}, "1087": {"op": "DUP6"}, "1088": {"op": "SWAP1"}, "1089": {"op": "MSTORE"}, "1090": {"fn": "MerkleResistor.withdraw", "offset": [10258, 10275], "op": "SWAP1", "path": "1"}, "1091": {"fn": "MerkleResistor.withdraw", "offset": [10258, 10275], "op": "SWAP2", "path": "1"}, "1092": {"fn": "MerkleResistor.withdraw", "offset": [10258, 10275], "op": "AND", "path": "1"}, "1093": {"fn": "MerkleResistor.withdraw", "offset": [10258, 10275], "op": "SWAP1", "path": "1"}, "1094": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10285], "op": "PUSH4", "path": "1", "value": "0xA9059CBB"}, "1099": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10285], "op": "SWAP1", "path": "1"}, "1100": {"op": "PUSH1", "value": "0x44"}, "1102": {"op": "ADD"}, "1103": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH1", "path": "1", "value": "0x20"}, "1105": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH1", "path": "1", "value": "0x40"}, "1107": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "MLOAD", "path": "1"}, "1108": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP1", "path": "1"}, "1109": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP4", "path": "1"}, "1110": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "SUB", "path": "1"}, "1111": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP2", "path": "1"}, "1112": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH1", "path": "1", "value": "0x0"}, "1114": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP8", "path": "1"}, "1115": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP1", "path": "1"}, "1116": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "EXTCODESIZE", "path": "1"}, "1117": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "ISZERO", "path": "1"}, "1118": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP1", "path": "1"}, "1119": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "ISZERO", "path": "1"}, "1120": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH2", "path": "1", "value": "0x468"}, "1123": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "JUMPI", "path": "1"}, "1124": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH1", "path": "1", "value": "0x0"}, "1126": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP1", "path": "1"}, "1127": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "REVERT", "path": "1"}, "1128": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "JUMPDEST", "path": "1"}, "1129": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "POP", "path": "1"}, "1130": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "GAS", "path": "1"}, "1131": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "CALL", "path": "1"}, "1132": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "ISZERO", "path": "1"}, "1133": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP1", "path": "1"}, "1134": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "ISZERO", "path": "1"}, "1135": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH2", "path": "1", "value": "0x47C"}, "1138": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "JUMPI", "path": "1"}, "1139": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "RETURNDATASIZE", "path": "1"}, "1140": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH1", "path": "1", "value": "0x0"}, "1142": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP1", "path": "1"}, "1143": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "RETURNDATACOPY", "path": "1"}, "1144": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "RETURNDATASIZE", "path": "1"}, "1145": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH1", "path": "1", "value": "0x0"}, "1147": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "REVERT", "path": "1"}, "1148": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "JUMPDEST", "path": "1"}, "1149": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "POP", "path": "1"}, "1150": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "POP", "path": "1"}, "1151": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "POP", "path": "1"}, "1152": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "POP", "path": "1"}, "1153": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH1", "path": "1", "value": "0x40"}, "1155": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "MLOAD", "path": "1"}, "1156": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "RETURNDATASIZE", "path": "1"}, "1157": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH1", "path": "1", "value": "0x1F"}, "1159": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "NOT", "path": "1"}, "1160": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH1", "path": "1", "value": "0x1F"}, "1162": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP3", "path": "1"}, "1163": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "ADD", "path": "1"}, "1164": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "AND", "path": "1"}, "1165": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP3", "path": "1"}, "1166": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "ADD", "path": "1"}, "1167": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP1", "path": "1"}, "1168": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH1", "path": "1", "value": "0x40"}, "1170": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "MSTORE", "path": "1"}, "1171": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "POP", "path": "1"}, "1172": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "DUP2", "path": "1"}, "1173": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "ADD", "path": "1"}, "1174": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "SWAP1", "path": "1"}, "1175": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH2", "path": "1", "value": "0x4A0"}, "1178": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "SWAP2", "path": "1"}, "1179": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "SWAP1", "path": "1"}, "1180": {"fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "PUSH2", "path": "1", "value": "0x1017"}, "1183": {"fn": "MerkleResistor.withdraw", "jump": "i", "offset": [10251, 10317], "op": "JUMP", "path": "1"}, "1184": {"branch": 31, "fn": "MerkleResistor.withdraw", "offset": [10251, 10317], "op": "JUMPDEST", "path": "1"}, "1185": {"fn": "MerkleResistor.withdraw", "offset": [10243, 10343], "op": "PUSH2", "path": "1", "value": "0x4E4"}, "1188": {"branch": 31, "fn": "MerkleResistor.withdraw", "offset": [10243, 10343], "op": "JUMPI", "path": "1"}, "1189": {"fn": "MerkleResistor.withdraw", "offset": [10243, 10343], "op": "PUSH1", "path": "1", "value": "0x40"}, "1191": {"fn": "MerkleResistor.withdraw", "offset": [10243, 10343], "op": "MLOAD", "path": "1"}, "1192": {"op": "PUSH3", "value": "0x461BCD"}, "1196": {"op": "PUSH1", "value": "0xE5"}, "1198": {"op": "SHL"}, "1199": {"fn": "MerkleResistor.withdraw", "offset": [10243, 10343], "op": "DUP2", "path": "1"}, "1200": {"fn": "MerkleResistor.withdraw", "offset": [10243, 10343], "op": "MSTORE", "path": "1"}, "1201": {"op": "PUSH1", "value": "0x20"}, "1203": {"fn": "MerkleResistor.withdraw", "offset": [10243, 10343], "op": "PUSH1", "path": "1", "value": "0x4"}, "1205": {"fn": "MerkleResistor.withdraw", "offset": [10243, 10343], "op": "DUP3", "path": "1"}, "1206": {"fn": "MerkleResistor.withdraw", "offset": [10243, 10343], "op": "ADD", "path": "1"}, "1207": {"op": "MSTORE"}, "1208": {"op": "PUSH1", "value": "0x15"}, "1210": {"op": "PUSH1", "value": "0x24"}, "1212": {"op": "DUP3"}, "1213": {"op": "ADD"}, "1214": {"op": "MSTORE"}, "1215": {"op": "PUSH21", "value": "0x151BDAD95B881D1C985B9CD9995C8819985A5B1959"}, "1237": {"op": "PUSH1", "value": "0x5A"}, "1239": {"op": "SHL"}, "1240": {"op": "PUSH1", "value": "0x44"}, "1242": {"op": "DUP3"}, "1243": {"op": "ADD"}, "1244": {"op": "MSTORE"}, "1245": {"op": "PUSH1", "value": "0x64"}, "1247": {"op": "ADD"}, "1248": {"fn": "MerkleResistor.withdraw", "offset": [10243, 10343], "op": "PUSH2", "path": "1", "value": "0x318"}, "1251": {"op": "JUMP"}, "1252": {"fn": "MerkleResistor.withdraw", "offset": [10243, 10343], "op": "JUMPDEST", "path": "1"}, "1253": {"fn": "MerkleResistor.withdraw", "offset": [10431, 10442], "op": "DUP5", "path": "1", "statement": 8}, "1254": {"fn": "MerkleResistor.withdraw", "offset": [10377, 10388], "op": "DUP5", "path": "1"}, "1255": {"op": "PUSH1", "value": "0x1"}, "1257": {"op": "PUSH1", "value": "0x1"}, "1259": {"op": "PUSH1", "value": "0xA0"}, "1261": {"op": "SHL"}, "1262": {"op": "SUB"}, "1263": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "AND", "path": "1"}, "1264": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "PUSH32", "path": "1", "value": "0x5FFB4B63DEC15BA26308386F1D5CA61843B29BA365511062A887D95AA27532D3"}, "1297": {"fn": "MerkleResistor.withdraw", "offset": [10390, 10407], "op": "DUP5", "path": "1"}, "1298": {"fn": "MerkleResistor.withdraw", "offset": [10409, 10416], "op": "DUP7", "path": "1"}, "1299": {"fn": "MerkleResistor.withdraw", "offset": [10409, 10429], "op": "PUSH1", "path": "1", "value": "0x1"}, "1301": {"fn": "MerkleResistor.withdraw", "offset": [10409, 10429], "op": "ADD", "path": "1"}, "1302": {"fn": "MerkleResistor.withdraw", "offset": [10409, 10429], "op": "SLOAD", "path": "1"}, "1303": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "PUSH1", "path": "1", "value": "0x40"}, "1305": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "MLOAD", "path": "1"}, "1306": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "PUSH2", "path": "1", "value": "0x52D"}, "1309": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "SWAP3", "path": "1"}, "1310": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "SWAP2", "path": "1"}, "1311": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "SWAP1", "path": "1"}, "1312": {"op": "SWAP2"}, "1313": {"op": "DUP3"}, "1314": {"op": "MSTORE"}, "1315": {"op": "PUSH1", "value": "0x20"}, "1317": {"op": "DUP3"}, "1318": {"op": "ADD"}, "1319": {"op": "MSTORE"}, "1320": {"op": "PUSH1", "value": "0x40"}, "1322": {"op": "ADD"}, "1323": {"op": "SWAP1"}, "1324": {"op": "JUMP"}, "1325": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "JUMPDEST", "path": "1"}, "1326": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "PUSH1", "path": "1", "value": "0x40"}, "1328": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "MLOAD", "path": "1"}, "1329": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "DUP1", "path": "1"}, "1330": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "SWAP2", "path": "1"}, "1331": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "SUB", "path": "1"}, "1332": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "SWAP1", "path": "1"}, "1333": {"fn": "MerkleResistor.withdraw", "offset": [10358, 10443], "op": "LOG3", "path": "1"}, "1334": {"fn": "MerkleResistor.withdraw", "offset": [7928, 10450], "op": "POP", "path": "1"}, "1335": {"fn": "MerkleResistor.withdraw", "offset": [7928, 10450], "op": "POP", "path": "1"}, "1336": {"fn": "MerkleResistor.withdraw", "offset": [7928, 10450], "op": "POP", "path": "1"}, "1337": {"fn": "MerkleResistor.withdraw", "offset": [7864, 10450], "op": "POP", "path": "1"}, "1338": {"fn": "MerkleResistor.withdraw", "offset": [7864, 10450], "op": "POP", "path": "1"}, "1339": {"fn": "MerkleResistor.withdraw", "jump": "o", "offset": [7864, 10450], "op": "JUMP", "path": "1"}, "1340": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "JUMPDEST", "path": "1"}, "1341": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10653, 10657], "op": "PUSH1", "path": "1", "value": "0x0"}, "1343": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10659, 10663], "op": "DUP1", "path": "1"}, "1344": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10665, 10669], "op": "PUSH1", "path": "1", "value": "0x0"}, "1346": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10671, 10675], "op": "DUP1", "path": "1"}, "1347": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10823, 10831], "op": "PUSH1", "path": "1", "value": "0x0"}, "1349": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10823, 10831], "op": "SLOAD", "path": "1"}, "1350": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10809, 10820], "op": "DUP9", "path": "1"}, "1351": {"branch": 32, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [10809, 10831], "op": "GT", "path": "1"}, "1352": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10805, 10881], "op": "ISZERO", "path": "1"}, "1353": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10805, 10881], "op": "PUSH2", "path": "1", "value": "0x55D"}, "1356": {"branch": 32, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [10805, 10881], "op": "JUMPI", "path": "1"}, "1357": {"op": "POP"}, "1358": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10855, 10860], "op": "PUSH1", "path": "1", "statement": 9, "value": "0x0"}, "1360": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10855, 10860], "op": "SWAP3", "path": "1"}, "1361": {"op": "POP"}, "1362": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10855, 10860], "op": "DUP3", "path": "1"}, "1363": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10855, 10860], "op": "SWAP2", "path": "1"}, "1364": {"op": "POP"}, "1365": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10855, 10860], "op": "DUP2", "path": "1"}, "1366": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10855, 10860], "op": "SWAP1", "path": "1"}, "1367": {"op": "POP"}, "1368": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10855, 10860], "op": "DUP1", "path": "1"}, "1369": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10847, 10870], "op": "PUSH2", "path": "1", "value": "0x6D8"}, "1372": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10847, 10870], "op": "JUMP", "path": "1"}, "1373": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10805, 10881], "op": "JUMPDEST", "path": "1"}, "1374": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11008], "op": "PUSH1", "path": "1", "value": "0x0"}, "1376": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11011, 11035], "op": "DUP9", "path": "1"}, "1377": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11011, 11035], "op": "DUP2", "path": "1"}, "1378": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11011, 11035], "op": "MSTORE", "path": "1"}, "1379": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11011, 11022], "op": "PUSH1", "path": "1", "value": "0x2"}, "1381": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11011, 11035], "op": "PUSH1", "path": "1", "value": "0x20"}, "1383": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11011, 11035], "op": "DUP2", "path": "1"}, "1384": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11011, 11035], "op": "DUP2", "path": "1"}, "1385": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11011, 11035], "op": "MSTORE", "path": "1"}, "1386": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11011, 11035], "op": "PUSH1", "path": "1", "value": "0x40"}, "1388": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11011, 11035], "op": "SWAP3", "path": "1"}, "1389": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11011, 11035], "op": "DUP4", "path": "1"}, "1390": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11011, 11035], "op": "SWAP1", "path": "1"}, "1391": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11011, 11035], "op": "KECCAK256", "path": "1"}, "1392": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP4", "path": "1"}, "1393": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "MLOAD", "path": "1"}, "1394": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "PUSH1", "path": "1", "value": "0xE0"}, "1396": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP2", "path": "1"}, "1397": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "ADD", "path": "1"}, "1398": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP6", "path": "1"}, "1399": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "MSTORE", "path": "1"}, "1400": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP2", "path": "1"}, "1401": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SLOAD", "path": "1"}, "1402": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP2", "path": "1"}, "1403": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "MSTORE", "path": "1"}, "1404": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "PUSH1", "path": "1", "value": "0x1"}, "1406": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP3", "path": "1"}, "1407": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "ADD", "path": "1"}, "1408": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SLOAD", "path": "1"}, "1409": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SWAP3", "path": "1"}, "1410": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP2", "path": "1"}, "1411": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "ADD", "path": "1"}, "1412": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SWAP3", "path": "1"}, "1413": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SWAP1", "path": "1"}, "1414": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SWAP3", "path": "1"}, "1415": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "MSTORE", "path": "1"}, "1416": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SWAP2", "path": "1"}, "1417": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP3", "path": "1"}, "1418": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "ADD", "path": "1"}, "1419": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SLOAD", "path": "1"}, "1420": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SWAP3", "path": "1"}, "1421": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP2", "path": "1"}, "1422": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "ADD", "path": "1"}, "1423": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SWAP3", "path": "1"}, "1424": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SWAP1", "path": "1"}, "1425": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SWAP3", "path": "1"}, "1426": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "MSTORE", "path": "1"}, "1427": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "PUSH1", "path": "1", "value": "0x3"}, "1429": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP2", "path": "1"}, "1430": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "ADD", "path": "1"}, "1431": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SLOAD", "path": "1"}, "1432": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "PUSH1", "path": "1", "value": "0x60"}, "1434": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP4", "path": "1"}, "1435": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "ADD", "path": "1"}, "1436": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP2", "path": "1"}, "1437": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SWAP1", "path": "1"}, "1438": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "MSTORE", "path": "1"}, "1439": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "PUSH1", "path": "1", "value": "0x4"}, "1441": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP3", "path": "1"}, "1442": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "ADD", "path": "1"}, "1443": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SLOAD", "path": "1"}, "1444": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "PUSH1", "path": "1", "value": "0x80"}, "1446": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP5", "path": "1"}, "1447": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "ADD", "path": "1"}, "1448": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "MSTORE", "path": "1"}, "1449": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "PUSH1", "path": "1", "value": "0x5"}, "1451": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP3", "path": "1"}, "1452": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "ADD", "path": "1"}, "1453": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SLOAD", "path": "1"}, "1454": {"op": "PUSH1", "value": "0x1"}, "1456": {"op": "PUSH1", "value": "0x1"}, "1458": {"op": "PUSH1", "value": "0xA0"}, "1460": {"op": "SHL"}, "1461": {"op": "SUB"}, "1462": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "AND", "path": "1"}, "1463": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "PUSH1", "path": "1", "value": "0xA0"}, "1465": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP5", "path": "1"}, "1466": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "ADD", "path": "1"}, "1467": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "MSTORE", "path": "1"}, "1468": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "PUSH1", "path": "1", "value": "0x6"}, "1470": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SWAP1", "path": "1"}, "1471": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SWAP2", "path": "1"}, "1472": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "ADD", "path": "1"}, "1473": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "SLOAD", "path": "1"}, "1474": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "PUSH1", "path": "1", "value": "0xC0"}, "1476": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "DUP4", "path": "1"}, "1477": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "ADD", "path": "1"}, "1478": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10986, 11035], "op": "MSTORE", "path": "1"}, "1479": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11138, 11167], "op": "DUP9", "path": "1"}, "1480": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11138, 11167], "op": "GT", "path": "1"}, "1481": {"branch": 33, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [11138, 11167], "op": "DUP1", "path": "1"}, "1482": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11138, 11200], "op": "PUSH2", "path": "1", "value": "0x5D6"}, "1485": {"branch": 33, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [11138, 11200], "op": "JUMPI", "path": "1"}, "1486": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11138, 11200], "op": "POP", "path": "1"}, "1487": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11185, 11189], "op": "DUP1", "path": "1"}, "1488": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11185, 11200], "op": "PUSH1", "path": "1", "value": "0x40"}, "1490": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11185, 11200], "op": "ADD", "path": "1"}, "1491": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11185, 11200], "op": "MLOAD", "path": "1"}, "1492": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11171, 11182], "op": "DUP9", "path": "1"}, "1493": {"branch": 34, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [11171, 11200], "op": "LT", "path": "1"}, "1494": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11138, 11200], "op": "JUMPDEST", "path": "1"}, "1495": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11134, 11250], "op": "ISZERO", "path": "1"}, "1496": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11134, 11250], "op": "PUSH2", "path": "1", "value": "0x5EF"}, "1499": {"branch": 34, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [11134, 11250], "op": "JUMPI", "path": "1"}, "1500": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11224, 11229], "op": "PUSH1", "path": "1", "statement": 10, "value": "0x0"}, "1502": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11231, 11232], "op": "DUP1", "path": "1"}, "1503": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11234, 11235], "op": "PUSH1", "path": "1", "value": "0x0"}, "1505": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11237, 11238], "op": "DUP1", "path": "1"}, "1506": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11216, 11239], "op": "SWAP5", "path": "1"}, "1507": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11216, 11239], "op": "POP", "path": "1"}, "1508": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11216, 11239], "op": "SWAP5", "path": "1"}, "1509": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11216, 11239], "op": "POP", "path": "1"}, "1510": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11216, 11239], "op": "SWAP5", "path": "1"}, "1511": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11216, 11239], "op": "POP", "path": "1"}, "1512": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11216, 11239], "op": "SWAP5", "path": "1"}, "1513": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11216, 11239], "op": "POP", "path": "1"}, "1514": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11216, 11239], "op": "POP", "path": "1"}, "1515": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11216, 11239], "op": "PUSH2", "path": "1", "value": "0x6D8"}, "1518": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11216, 11239], "op": "JUMP", "path": "1"}, "1519": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11134, 11250], "op": "JUMPDEST", "path": "1"}, "1520": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11260, 11275], "op": "PUSH1", "path": "1", "value": "0x0"}, "1522": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11304, 11308], "op": "DUP2", "path": "1"}, "1523": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11304, 11319], "op": "PUSH1", "path": "1", "value": "0x60"}, "1525": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11304, 11319], "op": "ADD", "path": "1"}, "1526": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11304, 11319], "op": "MLOAD", "path": "1"}, "1527": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11289, 11300], "op": "DUP10", "path": "1"}, "1528": {"branch": 35, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [11289, 11319], "op": "EQ", "path": "1"}, "1529": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11285, 12589], "op": "ISZERO", "path": "1"}, "1530": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11285, 12589], "op": "PUSH2", "path": "1", "value": "0x604"}, "1533": {"branch": 35, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [11285, 12589], "op": "JUMPI", "path": "1"}, "1534": {"op": "POP"}, "1535": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11505, 11521], "op": "DUP6", "path": "1", "statement": 11}, "1536": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11285, 12589], "op": "PUSH2", "path": "1", "value": "0x675"}, "1539": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11285, 12589], "op": "JUMP", "path": "1"}, "1540": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11285, 12589], "op": "JUMPDEST", "path": "1"}, "1541": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12196, 12213], "op": "PUSH1", "path": "1", "value": "0x0"}, "1543": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12287, 12291], "op": "DUP3", "path": "1"}, "1544": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12287, 12302], "op": "PUSH1", "path": "1", "value": "0x40"}, "1546": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12287, 12302], "op": "ADD", "path": "1"}, "1547": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12287, 12302], "op": "MLOAD", "path": "1"}, "1548": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12269, 12273], "op": "DUP4", "path": "1"}, "1549": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12269, 12284], "op": "PUSH1", "path": "1", "value": "0x60"}, "1551": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12269, 12284], "op": "ADD", "path": "1"}, "1552": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12269, 12284], "op": "MLOAD", "path": "1"}, "1553": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12269, 12302], "op": "PUSH2", "path": "1", "value": "0x61A"}, "1556": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12269, 12302], "op": "SWAP2", "path": "1"}, "1557": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12269, 12302], "op": "SWAP1", "path": "1"}, "1558": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12269, 12302], "op": "PUSH2", "path": "1", "value": "0xFE1"}, "1561": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12269, 12302], "op": "JUMP", "path": "1"}, "1562": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12269, 12302], "op": "JUMPDEST", "path": "1"}, "1563": {"offset": [2617, 2624], "op": "PUSH3", "path": "1", "value": "0xF4240"}, "1567": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12217, 12252], "op": "PUSH2", "path": "1", "value": "0x628"}, "1570": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12236, 12252], "op": "DUP12", "path": "1"}, "1571": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12217, 12233], "op": "DUP12", "path": "1"}, "1572": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12217, 12252], "op": "PUSH2", "path": "1", "value": "0xFE1"}, "1575": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12217, 12252], "op": "JUMP", "path": "1"}, "1576": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12217, 12252], "op": "JUMPDEST", "path": "1"}, "1577": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12216, 12265], "op": "PUSH2", "path": "1", "value": "0x632"}, "1580": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12216, 12265], "op": "SWAP2", "path": "1"}, "1581": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12216, 12265], "op": "SWAP1", "path": "1"}, "1582": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12216, 12265], "op": "PUSH2", "path": "1", "value": "0xFF8"}, "1585": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12216, 12265], "op": "JUMP", "path": "1"}, "1586": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12216, 12265], "op": "JUMPDEST", "path": "1"}, "1587": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12216, 12303], "op": "PUSH2", "path": "1", "value": "0x63C"}, "1590": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12216, 12303], "op": "SWAP2", "path": "1"}, "1591": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12216, 12303], "op": "SWAP1", "path": "1"}, "1592": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12216, 12303], "op": "PUSH2", "path": "1", "value": "0x1040"}, "1595": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12216, 12303], "op": "JUMP", "path": "1"}, "1596": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12216, 12303], "op": "JUMPDEST", "path": "1"}, "1597": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12196, 12303], "op": "SWAP1", "path": "1"}, "1598": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12196, 12303], "op": "POP", "path": "1"}, "1599": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12562, 12578], "op": "DUP9", "path": "1", "statement": 12}, "1600": {"offset": [2617, 2624], "op": "PUSH3", "path": "1", "value": "0xF4240"}, "1604": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12530, 12534], "op": "DUP5", "path": "1"}, "1605": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12530, 12545], "op": "PUSH1", "path": "1", "value": "0x40"}, "1607": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12530, 12545], "op": "ADD", "path": "1"}, "1608": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12530, 12545], "op": "MLOAD", "path": "1"}, "1609": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12516, 12527], "op": "DUP13", "path": "1"}, "1610": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12516, 12545], "op": "PUSH2", "path": "1", "value": "0x653"}, "1613": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12516, 12545], "op": "SWAP2", "path": "1"}, "1614": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12516, 12545], "op": "SWAP1", "path": "1"}, "1615": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12516, 12545], "op": "PUSH2", "path": "1", "value": "0xFE1"}, "1618": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12516, 12545], "op": "JUMP", "path": "1"}, "1619": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12516, 12545], "op": "JUMPDEST", "path": "1"}, "1620": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12500, 12546], "op": "PUSH2", "path": "1", "value": "0x65D"}, "1623": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12500, 12546], "op": "SWAP1", "path": "1"}, "1624": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12500, 12512], "op": "DUP5", "path": "1"}, "1625": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12500, 12546], "op": "PUSH2", "path": "1", "value": "0xFF8"}, "1628": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12500, 12546], "op": "JUMP", "path": "1"}, "1629": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12500, 12546], "op": "JUMPDEST", "path": "1"}, "1630": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12500, 12558], "op": "PUSH2", "path": "1", "value": "0x667"}, "1633": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12500, 12558], "op": "SWAP2", "path": "1"}, "1634": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12500, 12558], "op": "SWAP1", "path": "1"}, "1635": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12500, 12558], "op": "PUSH2", "path": "1", "value": "0x1040"}, "1638": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12500, 12558], "op": "JUMP", "path": "1"}, "1639": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12500, 12558], "op": "JUMPDEST", "path": "1"}, "1640": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12499, 12578], "op": "PUSH2", "path": "1", "value": "0x671"}, "1643": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12499, 12578], "op": "SWAP2", "path": "1"}, "1644": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12499, 12578], "op": "SWAP1", "path": "1"}, "1645": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12499, 12578], "op": "PUSH2", "path": "1", "value": "0x1062"}, "1648": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12499, 12578], "op": "JUMP", "path": "1"}, "1649": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12499, 12578], "op": "JUMPDEST", "path": "1"}, "1650": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12486, 12578], "op": "SWAP2", "path": "1"}, "1651": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12486, 12578], "op": "POP", "path": "1"}, "1652": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11538, 12589], "op": "POP", "path": "1"}, "1653": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11285, 12589], "op": "JUMPDEST", "path": "1"}, "1654": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13050, 13069], "op": "PUSH1", "path": "1", "value": "0x0"}, "1656": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13120, 13137], "op": "PUSH2", "path": "1", "value": "0x682"}, "1659": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13120, 13131], "op": "DUP11", "path": "1"}, "1660": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13134, 13137], "op": "PUSH1", "path": "1", "value": "0x64"}, "1662": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13120, 13137], "op": "PUSH2", "path": "1", "value": "0xFF8"}, "1665": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [13120, 13137], "op": "JUMP", "path": "1"}, "1666": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13120, 13137], "op": "JUMPDEST", "path": "1"}, "1667": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13099, 13114], "op": "PUSH1", "path": "1", "value": "0x80"}, "1669": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13099, 13114], "op": "DUP5", "path": "1"}, "1670": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13099, 13114], "op": "ADD", "path": "1"}, "1671": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13099, 13114], "op": "MLOAD", "path": "1"}, "1672": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13087, 13114], "op": "PUSH2", "path": "1", "value": "0x692"}, "1675": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13087, 13114], "op": "SWAP1", "path": "1"}, "1676": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13092, 13095], "op": "PUSH1", "path": "1", "value": "0x64"}, "1678": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13087, 13114], "op": "PUSH2", "path": "1", "value": "0xFE1"}, "1681": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [13087, 13114], "op": "JUMP", "path": "1"}, "1682": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13087, 13114], "op": "JUMPDEST", "path": "1"}, "1683": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13073, 13115], "op": "PUSH2", "path": "1", "value": "0x69C"}, "1686": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13073, 13115], "op": "SWAP1", "path": "1"}, "1687": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13073, 13083], "op": "DUP5", "path": "1"}, "1688": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13073, 13115], "op": "PUSH2", "path": "1", "value": "0xFF8"}, "1691": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [13073, 13115], "op": "JUMP", "path": "1"}, "1692": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13073, 13115], "op": "JUMPDEST", "path": "1"}, "1693": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13072, 13138], "op": "PUSH2", "path": "1", "value": "0x6A6"}, "1696": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13072, 13138], "op": "SWAP2", "path": "1"}, "1697": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13072, 13138], "op": "SWAP1", "path": "1"}, "1698": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13072, 13138], "op": "PUSH2", "path": "1", "value": "0x1040"}, "1701": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [13072, 13138], "op": "JUMP", "path": "1"}, "1702": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13072, 13138], "op": "JUMPDEST", "path": "1"}, "1703": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13050, 13138], "op": "SWAP1", "path": "1"}, "1704": {"op": "POP"}, "1705": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13314, 13328], "op": "PUSH1", "path": "1", "value": "0x0"}, "1707": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13364, 13391], "op": "PUSH2", "path": "1", "value": "0x6B4"}, "1710": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13050, 13138], "op": "DUP3", "path": "1"}, "1711": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13364, 13374], "op": "DUP5", "path": "1"}, "1712": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13364, 13391], "op": "PUSH2", "path": "1", "value": "0x1040"}, "1715": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [13364, 13391], "op": "JUMP", "path": "1"}, "1716": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13364, 13391], "op": "JUMPDEST", "path": "1"}, "1717": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13331, 13360], "op": "PUSH2", "path": "1", "value": "0x6BE"}, "1720": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13349, 13360], "op": "DUP13", "path": "1"}, "1721": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13331, 13346], "op": "TIMESTAMP", "path": "1"}, "1722": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13331, 13360], "op": "PUSH2", "path": "1", "value": "0x1062"}, "1725": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [13331, 13360], "op": "JUMP", "path": "1"}, "1726": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13331, 13360], "op": "JUMPDEST", "path": "1"}, "1727": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13331, 13392], "op": "PUSH2", "path": "1", "value": "0x6C8"}, "1730": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13331, 13392], "op": "SWAP2", "path": "1"}, "1731": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13331, 13392], "op": "SWAP1", "path": "1"}, "1732": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13331, 13392], "op": "PUSH2", "path": "1", "value": "0xFE1"}, "1735": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [13331, 13392], "op": "JUMP", "path": "1"}, "1736": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13331, 13392], "op": "JUMPDEST", "path": "1"}, "1737": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13411, 13415], "op": "PUSH1", "path": "1", "statement": 13, "value": "0x1"}, "1739": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13411, 13415], "op": "SWAP9", "path": "1"}, "1740": {"op": "POP"}, "1741": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13417, 13427], "op": "SWAP3", "path": "1"}, "1742": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13417, 13427], "op": "SWAP7", "path": "1"}, "1743": {"op": "POP"}, "1744": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13429, 13443], "op": "SWAP1", "path": "1"}, "1745": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13429, 13443], "op": "SWAP5", "path": "1"}, "1746": {"op": "POP"}, "1747": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13314, 13392], "op": "SWAP1", "path": "1"}, "1748": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13314, 13392], "op": "SWAP3", "path": "1"}, "1749": {"op": "POP"}, "1750": {"op": "POP"}, "1751": {"op": "POP"}, "1752": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "JUMPDEST", "path": "1"}, "1753": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "SWAP5", "path": "1"}, "1754": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "POP", "path": "1"}, "1755": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "SWAP5", "path": "1"}, "1756": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "POP", "path": "1"}, "1757": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "SWAP5", "path": "1"}, "1758": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "POP", "path": "1"}, "1759": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "SWAP5", "path": "1"}, "1760": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "SWAP1", "path": "1"}, "1761": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10519, 13462], "op": "POP", "path": "1"}, "1762": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "o", "offset": [10519, 13462], "op": "JUMP", "path": "1"}, "1763": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "JUMPDEST", "path": "1"}, "1764": {"fn": "MerkleResistor.addMerkleTree", "offset": [3323, 3326], "op": "PUSH1", "path": "1", "statement": 14, "value": "0x64"}, "1766": {"fn": "MerkleResistor.addMerkleTree", "offset": [3310, 3320], "op": "DUP4", "path": "1"}, "1767": {"branch": 36, "fn": "MerkleResistor.addMerkleTree", "offset": [3310, 3326], "op": "LT", "path": "1"}, "1768": {"fn": "MerkleResistor.addMerkleTree", "offset": [3302, 3348], "op": "PUSH2", "path": "1", "value": "0x727"}, "1771": {"branch": 36, "fn": "MerkleResistor.addMerkleTree", "offset": [3302, 3348], "op": "JUMPI", "path": "1"}, "1772": {"fn": "MerkleResistor.addMerkleTree", "offset": [3302, 3348], "op": "PUSH1", "path": "1", "value": "0x40"}, "1774": {"fn": "MerkleResistor.addMerkleTree", "offset": [3302, 3348], "op": "MLOAD", "path": "1"}, "1775": {"op": "PUSH3", "value": "0x461BCD"}, "1779": {"op": "PUSH1", "value": "0xE5"}, "1781": {"op": "SHL"}, "1782": {"fn": "MerkleResistor.addMerkleTree", "offset": [3302, 3348], "op": "DUP2", "path": "1"}, "1783": {"fn": "MerkleResistor.addMerkleTree", "offset": [3302, 3348], "op": "MSTORE", "path": "1"}, "1784": {"op": "PUSH1", "value": "0x20"}, "1786": {"fn": "MerkleResistor.addMerkleTree", "offset": [3302, 3348], "op": "PUSH1", "path": "1", "value": "0x4"}, "1788": {"fn": "MerkleResistor.addMerkleTree", "offset": [3302, 3348], "op": "DUP3", "path": "1"}, "1789": {"fn": "MerkleResistor.addMerkleTree", "offset": [3302, 3348], "op": "ADD", "path": "1"}, "1790": {"op": "MSTORE"}, "1791": {"op": "PUSH1", "value": "0x11"}, "1793": {"op": "PUSH1", "value": "0x24"}, "1795": {"op": "DUP3"}, "1796": {"op": "ADD"}, "1797": {"op": "MSTORE"}, "1798": {"op": "PUSH17", "value": "0x706374557046726F6E74203E3D2031303"}, "1816": {"op": "PUSH1", "value": "0x7C"}, "1818": {"op": "SHL"}, "1819": {"op": "PUSH1", "value": "0x44"}, "1821": {"op": "DUP3"}, "1822": {"op": "ADD"}, "1823": {"op": "MSTORE"}, "1824": {"op": "PUSH1", "value": "0x64"}, "1826": {"op": "ADD"}, "1827": {"fn": "MerkleResistor.addMerkleTree", "offset": [3302, 3348], "op": "PUSH2", "path": "1", "value": "0x318"}, "1830": {"op": "JUMP"}, "1831": {"fn": "MerkleResistor.addMerkleTree", "offset": [3302, 3348], "op": "JUMPDEST", "path": "1"}, "1832": {"fn": "MerkleResistor.addMerkleTree", "offset": [3379, 3389], "op": "DUP4", "path": "1", "statement": 15}, "1833": {"fn": "MerkleResistor.addMerkleTree", "offset": [3366, 3376], "op": "DUP6", "path": "1"}, "1834": {"branch": 37, "fn": "MerkleResistor.addMerkleTree", "offset": [3366, 3389], "op": "LT", "path": "1"}, "1835": {"fn": "MerkleResistor.addMerkleTree", "offset": [3358, 3433], "op": "PUSH2", "path": "1", "value": "0x786"}, "1838": {"branch": 37, "fn": "MerkleResistor.addMerkleTree", "offset": [3358, 3433], "op": "JUMPI", "path": "1"}, "1839": {"fn": "MerkleResistor.addMerkleTree", "offset": [3358, 3433], "op": "PUSH1", "path": "1", "value": "0x40"}, "1841": {"fn": "MerkleResistor.addMerkleTree", "offset": [3358, 3433], "op": "MLOAD", "path": "1"}, "1842": {"op": "PUSH3", "value": "0x461BCD"}, "1846": {"op": "PUSH1", "value": "0xE5"}, "1848": {"op": "SHL"}, "1849": {"fn": "MerkleResistor.addMerkleTree", "offset": [3358, 3433], "op": "DUP2", "path": "1"}, "1850": {"fn": "MerkleResistor.addMerkleTree", "offset": [3358, 3433], "op": "MSTORE", "path": "1"}, "1851": {"op": "PUSH1", "value": "0x20"}, "1853": {"fn": "MerkleResistor.addMerkleTree", "offset": [3358, 3433], "op": "PUSH1", "path": "1", "value": "0x4"}, "1855": {"fn": "MerkleResistor.addMerkleTree", "offset": [3358, 3433], "op": "DUP3", "path": "1"}, "1856": {"fn": "MerkleResistor.addMerkleTree", "offset": [3358, 3433], "op": "ADD", "path": "1"}, "1857": {"op": "MSTORE"}, "1858": {"op": "PUSH1", "value": "0x27"}, "1860": {"op": "PUSH1", "value": "0x24"}, "1862": {"op": "DUP3"}, "1863": {"op": "ADD"}, "1864": {"op": "MSTORE"}, "1865": {"op": "PUSH32", "value": "0x6D696E456E6454696D65206D757374206265206C657373207468616E206D6178"}, "1898": {"op": "PUSH1", "value": "0x44"}, "1900": {"op": "DUP3"}, "1901": {"op": "ADD"}, "1902": {"op": "MSTORE"}, "1903": {"op": "PUSH7", "value": "0x456E6454696D65"}, "1911": {"op": "PUSH1", "value": "0xC8"}, "1913": {"op": "SHL"}, "1914": {"op": "PUSH1", "value": "0x64"}, "1916": {"op": "DUP3"}, "1917": {"op": "ADD"}, "1918": {"op": "MSTORE"}, "1919": {"op": "PUSH1", "value": "0x84"}, "1921": {"op": "ADD"}, "1922": {"fn": "MerkleResistor.addMerkleTree", "offset": [3358, 3433], "op": "PUSH2", "path": "1", "value": "0x318"}, "1925": {"op": "JUMP"}, "1926": {"fn": "MerkleResistor.addMerkleTree", "offset": [3358, 3433], "op": "JUMPDEST", "path": "1"}, "1927": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "PUSH1", "path": "1", "statement": 16, "value": "0x40"}, "1929": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "MLOAD", "path": "1"}, "1930": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "DUP1", "path": "1"}, "1931": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "PUSH1", "path": "1", "value": "0xE0"}, "1933": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "ADD", "path": "1"}, "1934": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "PUSH1", "path": "1", "value": "0x40"}, "1936": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "MSTORE", "path": "1"}, "1937": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "DUP1", "path": "1"}, "1938": {"fn": "MerkleResistor.addMerkleTree", "offset": [3550, 3557], "op": "DUP9", "path": "1"}, "1939": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "DUP2", "path": "1"}, "1940": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "MSTORE", "path": "1"}, "1941": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "PUSH1", "path": "1", "value": "0x20"}, "1943": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "ADD", "path": "1"}, "1944": {"fn": "MerkleResistor.addMerkleTree", "offset": [3571, 3579], "op": "DUP8", "path": "1"}, "1945": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "DUP2", "path": "1"}, "1946": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "MSTORE", "path": "1"}, "1947": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "PUSH1", "path": "1", "value": "0x20"}, "1949": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "ADD", "path": "1"}, "1950": {"fn": "MerkleResistor.addMerkleTree", "offset": [3593, 3603], "op": "DUP7", "path": "1"}, "1951": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "DUP2", "path": "1"}, "1952": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "MSTORE", "path": "1"}, "1953": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "PUSH1", "path": "1", "value": "0x20"}, "1955": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "ADD", "path": "1"}, "1956": {"fn": "MerkleResistor.addMerkleTree", "offset": [3617, 3627], "op": "DUP6", "path": "1"}, "1957": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "DUP2", "path": "1"}, "1958": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "MSTORE", "path": "1"}, "1959": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "PUSH1", "path": "1", "value": "0x20"}, "1961": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "ADD", "path": "1"}, "1962": {"fn": "MerkleResistor.addMerkleTree", "offset": [3641, 3651], "op": "DUP5", "path": "1"}, "1963": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "DUP2", "path": "1"}, "1964": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "MSTORE", "path": "1"}, "1965": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "PUSH1", "path": "1", "value": "0x20"}, "1967": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "ADD", "path": "1"}, "1968": {"fn": "MerkleResistor.addMerkleTree", "offset": [3665, 3677], "op": "DUP4", "path": "1"}, "1969": {"op": "PUSH1", "value": "0x1"}, "1971": {"op": "PUSH1", "value": "0x1"}, "1973": {"op": "PUSH1", "value": "0xA0"}, "1975": {"op": "SHL"}, "1976": {"op": "SUB"}, "1977": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "AND", "path": "1"}, "1978": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "DUP2", "path": "1"}, "1979": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "MSTORE", "path": "1"}, "1980": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "PUSH1", "path": "1", "value": "0x20"}, "1982": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "ADD", "path": "1"}, "1983": {"fn": "MerkleResistor.addMerkleTree", "offset": [3691, 3692], "op": "PUSH1", "path": "1", "value": "0x0"}, "1985": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "DUP2", "path": "1"}, "1986": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "MSTORE", "path": "1"}, "1987": {"fn": "MerkleResistor.addMerkleTree", "offset": [3526, 3773], "op": "POP", "path": "1"}, "1988": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3511], "op": "PUSH1", "path": "1", "value": "0x2"}, "1990": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "PUSH1", "path": "1", "value": "0x0"}, "1992": {"fn": "MerkleResistor.addMerkleTree", "offset": [3514, 3522], "op": "DUP1", "path": "1"}, "1993": {"fn": "MerkleResistor.addMerkleTree", "offset": [3514, 3522], "op": "PUSH1", "path": "1", "value": "0x0"}, "1995": {"fn": "MerkleResistor.addMerkleTree", "offset": [3512, 3522], "op": "DUP2", "path": "1"}, "1996": {"fn": "MerkleResistor.addMerkleTree", "offset": [3512, 3522], "op": "SLOAD", "path": "1"}, "1997": {"fn": "MerkleResistor.addMerkleTree", "offset": [3512, 3522], "op": "PUSH2", "path": "1", "value": "0x7D5"}, "2000": {"fn": "MerkleResistor.addMerkleTree", "offset": [3512, 3522], "op": "SWAP1", "path": "1"}, "2001": {"fn": "MerkleResistor.addMerkleTree", "offset": [3512, 3522], "op": "PUSH2", "path": "1", "value": "0x107A"}, "2004": {"fn": "MerkleResistor.addMerkleTree", "jump": "i", "offset": [3512, 3522], "op": "JUMP", "path": "1"}, "2005": {"fn": "MerkleResistor.addMerkleTree", "offset": [3512, 3522], "op": "JUMPDEST", "path": "1"}, "2006": {"fn": "MerkleResistor.addMerkleTree", "offset": [3512, 3522], "op": "SWAP2", "path": "1"}, "2007": {"fn": "MerkleResistor.addMerkleTree", "offset": [3512, 3522], "op": "DUP3", "path": "1"}, "2008": {"fn": "MerkleResistor.addMerkleTree", "offset": [3512, 3522], "op": "SWAP1", "path": "1"}, "2009": {"fn": "MerkleResistor.addMerkleTree", "offset": [3512, 3522], "op": "SSTORE", "path": "1"}, "2010": {"op": "POP"}, "2011": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "DUP2", "path": "1"}, "2012": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "MSTORE", "path": "1"}, "2013": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "PUSH1", "path": "1", "value": "0x20"}, "2015": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "DUP1", "path": "1"}, "2016": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "DUP3", "path": "1"}, "2017": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "ADD", "path": "1"}, "2018": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "SWAP3", "path": "1"}, "2019": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "SWAP1", "path": "1"}, "2020": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "SWAP3", "path": "1"}, "2021": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "MSTORE", "path": "1"}, "2022": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "PUSH1", "path": "1", "value": "0x40"}, "2024": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "SWAP1", "path": "1"}, "2025": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "DUP2", "path": "1"}, "2026": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "ADD", "path": "1"}, "2027": {"op": "PUSH1", "value": "0x0"}, "2029": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "SWAP1", "path": "1"}, "2030": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "DUP2", "path": "1"}, "2031": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3523], "op": "KECCAK256", "path": "1"}, "2032": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "DUP5", "path": "1"}, "2033": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "MLOAD", "path": "1"}, "2034": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "DUP2", "path": "1"}, "2035": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SSTORE", "path": "1"}, "2036": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SWAP3", "path": "1"}, "2037": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "DUP5", "path": "1"}, "2038": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "ADD", "path": "1"}, "2039": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "MLOAD", "path": "1"}, "2040": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "PUSH1", "path": "1", "value": "0x1"}, "2042": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "DUP5", "path": "1"}, "2043": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "ADD", "path": "1"}, "2044": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SSTORE", "path": "1"}, "2045": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SWAP1", "path": "1"}, "2046": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "DUP4", "path": "1"}, "2047": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "ADD", "path": "1"}, "2048": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "MLOAD", "path": "1"}, "2049": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "PUSH1", "path": "1", "value": "0x2"}, "2051": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "DUP4", "path": "1"}, "2052": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "ADD", "path": "1"}, "2053": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SSTORE", "path": "1"}, "2054": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "PUSH1", "path": "1", "value": "0x60"}, "2056": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "DUP4", "path": "1"}, "2057": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "ADD", "path": "1"}, "2058": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "MLOAD", "path": "1"}, "2059": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "PUSH1", "path": "1", "value": "0x3"}, "2061": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "DUP4", "path": "1"}, "2062": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "ADD", "path": "1"}, "2063": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SSTORE", "path": "1"}, "2064": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "PUSH1", "path": "1", "value": "0x80"}, "2066": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "DUP4", "path": "1"}, "2067": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "ADD", "path": "1"}, "2068": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "MLOAD", "path": "1"}, "2069": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "PUSH1", "path": "1", "value": "0x4"}, "2071": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "DUP4", "path": "1"}, "2072": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "ADD", "path": "1"}, "2073": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SSTORE", "path": "1"}, "2074": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "PUSH1", "path": "1", "value": "0xA0"}, "2076": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "DUP4", "path": "1"}, "2077": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "ADD", "path": "1"}, "2078": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "MLOAD", "path": "1"}, "2079": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "PUSH1", "path": "1", "value": "0x5"}, "2081": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "DUP4", "path": "1"}, "2082": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "ADD", "path": "1"}, "2083": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "DUP1", "path": "1"}, "2084": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SLOAD", "path": "1"}, "2085": {"op": "PUSH1", "value": "0x1"}, "2087": {"op": "PUSH1", "value": "0x1"}, "2089": {"op": "PUSH1", "value": "0xA0"}, "2091": {"op": "SHL"}, "2092": {"op": "SUB"}, "2093": {"op": "NOT"}, "2094": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "AND", "path": "1"}, "2095": {"op": "PUSH1", "value": "0x1"}, "2097": {"op": "PUSH1", "value": "0x1"}, "2099": {"op": "PUSH1", "value": "0xA0"}, "2101": {"op": "SHL"}, "2102": {"op": "SUB"}, "2103": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SWAP1", "path": "1"}, "2104": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SWAP3", "path": "1"}, "2105": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "AND", "path": "1"}, "2106": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SWAP2", "path": "1"}, "2107": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SWAP1", "path": "1"}, "2108": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SWAP2", "path": "1"}, "2109": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "OR", "path": "1"}, "2110": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SWAP1", "path": "1"}, "2111": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SSTORE", "path": "1"}, "2112": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "PUSH1", "path": "1", "value": "0xC0"}, "2114": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SWAP1", "path": "1"}, "2115": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SWAP3", "path": "1"}, "2116": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "ADD", "path": "1"}, "2117": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "MLOAD", "path": "1"}, "2118": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "PUSH1", "path": "1", "value": "0x6"}, "2120": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SWAP1", "path": "1"}, "2121": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SWAP2", "path": "1"}, "2122": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "ADD", "path": "1"}, "2123": {"fn": "MerkleResistor.addMerkleTree", "offset": [3500, 3773], "op": "SSTORE", "path": "1"}, "2124": {"fn": "MerkleResistor.addMerkleTree", "offset": [4063, 4071], "op": "SLOAD", "path": "1", "statement": 17}, "2125": {"fn": "MerkleResistor.addMerkleTree", "offset": [4049, 4086], "op": "PUSH2", "path": "1", "value": "0x856"}, "2128": {"fn": "MerkleResistor.addMerkleTree", "offset": [4049, 4086], "op": "SWAP1", "path": "1"}, "2129": {"fn": "MerkleResistor.addMerkleTree", "offset": [4073, 4085], "op": "DUP3", "path": "1"}, "2130": {"fn": "MerkleResistor.addMerkleTree", "offset": [4049, 4062], "op": "PUSH2", "path": "1", "value": "0x8A7"}, "2133": {"fn": "MerkleResistor.addMerkleTree", "jump": "i", "offset": [4049, 4086], "op": "JUMP", "path": "1"}, "2134": {"fn": "MerkleResistor.addMerkleTree", "offset": [4049, 4086], "op": "JUMPDEST", "path": "1"}, "2135": {"fn": "MerkleResistor.addMerkleTree", "offset": [4117, 4125], "op": "PUSH1", "path": "1", "statement": 18, "value": "0x0"}, "2137": {"fn": "MerkleResistor.addMerkleTree", "offset": [4117, 4125], "op": "SLOAD", "path": "1"}, "2138": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "PUSH1", "path": "1", "value": "0x40"}, "2140": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "DUP1", "path": "1"}, "2141": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "MLOAD", "path": "1"}, "2142": {"op": "DUP10"}, "2143": {"op": "DUP2"}, "2144": {"op": "MSTORE"}, "2145": {"op": "PUSH1", "value": "0x20"}, "2147": {"op": "DUP2"}, "2148": {"op": "ADD"}, "2149": {"op": "DUP10"}, "2150": {"op": "SWAP1"}, "2151": {"op": "MSTORE"}, "2152": {"op": "PUSH1", "value": "0x1"}, "2154": {"op": "PUSH1", "value": "0x1"}, "2156": {"op": "PUSH1", "value": "0xA0"}, "2158": {"op": "SHL"}, "2159": {"op": "SUB"}, "2160": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "DUP6", "path": "1"}, "2161": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "AND", "path": "1"}, "2162": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "SWAP3", "path": "1"}, "2163": {"fn": "MerkleResistor.addMerkleTree", "offset": [4117, 4125], "op": "SWAP2", "path": "1"}, "2164": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "PUSH32", "path": "1", "value": "0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45"}, "2197": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "SWAP2", "path": "1"}, "2198": {"op": "ADD"}, "2199": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "PUSH1", "path": "1", "value": "0x40"}, "2201": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "MLOAD", "path": "1"}, "2202": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "DUP1", "path": "1"}, "2203": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "SWAP2", "path": "1"}, "2204": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "SUB", "path": "1"}, "2205": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "SWAP1", "path": "1"}, "2206": {"fn": "MerkleResistor.addMerkleTree", "offset": [4101, 4159], "op": "LOG3", "path": "1"}, "2207": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "POP", "path": "1"}, "2208": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "POP", "path": "1"}, "2209": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "POP", "path": "1"}, "2210": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "POP", "path": "1"}, "2211": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "POP", "path": "1"}, "2212": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "POP", "path": "1"}, "2213": {"fn": "MerkleResistor.addMerkleTree", "offset": [3091, 4166], "op": "POP", "path": "1"}, "2214": {"fn": "MerkleResistor.addMerkleTree", "jump": "o", "offset": [3091, 4166], "op": "JUMP", "path": "1"}, "2215": {"fn": "MerkleResistor.depositTokens", "offset": [4204, 5390], "op": "JUMPDEST", "path": "1"}, "2216": {"fn": "MerkleResistor.depositTokens", "offset": [4307, 4336], "op": "PUSH1", "path": "1", "value": "0x0"}, "2218": {"fn": "MerkleResistor.depositTokens", "offset": [4339, 4361], "op": "DUP3", "path": "1"}, "2219": {"fn": "MerkleResistor.depositTokens", "offset": [4339, 4361], "op": "DUP2", "path": "1"}, "2220": {"fn": "MerkleResistor.depositTokens", "offset": [4339, 4361], "op": "MSTORE", "path": "1"}, "2221": {"fn": "MerkleResistor.depositTokens", "offset": [4339, 4350], "op": "PUSH1", "path": "1", "value": "0x2"}, "2223": {"fn": "MerkleResistor.depositTokens", "offset": [4339, 4361], "op": "PUSH1", "path": "1", "value": "0x20"}, "2225": {"fn": "MerkleResistor.depositTokens", "offset": [4339, 4361], "op": "MSTORE", "path": "1"}, "2226": {"fn": "MerkleResistor.depositTokens", "offset": [4339, 4361], "op": "PUSH1", "path": "1", "value": "0x40"}, "2228": {"fn": "MerkleResistor.depositTokens", "offset": [4339, 4361], "op": "DUP2", "path": "1"}, "2229": {"fn": "MerkleResistor.depositTokens", "offset": [4339, 4361], "op": "KECCAK256", "path": "1"}, "2230": {"fn": "MerkleResistor.depositTokens", "offset": [4434, 4457], "op": "PUSH1", "path": "1", "statement": 19, "value": "0x6"}, "2232": {"fn": "MerkleResistor.depositTokens", "offset": [4434, 4457], "op": "DUP2", "path": "1"}, "2233": {"fn": "MerkleResistor.depositTokens", "offset": [4434, 4457], "op": "ADD", "path": "1"}, "2234": {"fn": "MerkleResistor.depositTokens", "offset": [4434, 4466], "op": "DUP1", "path": "1"}, "2235": {"fn": "MerkleResistor.depositTokens", "offset": [4434, 4466], "op": "SLOAD", "path": "1"}, "2236": {"fn": "MerkleResistor.depositTokens", "offset": [4339, 4361], "op": "SWAP2", "path": "1"}, "2237": {"fn": "MerkleResistor.depositTokens", "offset": [4339, 4361], "op": "SWAP3", "path": "1"}, "2238": {"fn": "MerkleResistor.depositTokens", "offset": [4461, 4466], "op": "DUP5", "path": "1"}, "2239": {"fn": "MerkleResistor.depositTokens", "offset": [4461, 4466], "op": "SWAP3", "path": "1"}, "2240": {"fn": "MerkleResistor.depositTokens", "offset": [4434, 4466], "op": "PUSH2", "path": "1", "value": "0x8CA"}, "2243": {"fn": "MerkleResistor.depositTokens", "offset": [4434, 4466], "op": "SWAP1", "path": "1"}, "2244": {"fn": "MerkleResistor.depositTokens", "offset": [4461, 4466], "op": "DUP5", "path": "1"}, "2245": {"fn": "MerkleResistor.depositTokens", "offset": [4461, 4466], "op": "SWAP1", "path": "1"}, "2246": {"fn": "MerkleResistor.depositTokens", "offset": [4434, 4466], "op": "PUSH2", "path": "1", "value": "0x1062"}, "2249": {"fn": "MerkleResistor.depositTokens", "jump": "i", "offset": [4434, 4466], "op": "JUMP", "path": "1"}, "2250": {"fn": "MerkleResistor.depositTokens", "offset": [4434, 4466], "op": "JUMPDEST", "path": "1"}, "2251": {"fn": "MerkleResistor.depositTokens", "offset": [4434, 4466], "op": "SWAP1", "path": "1"}, "2252": {"fn": "MerkleResistor.depositTokens", "offset": [4434, 4466], "op": "SWAP2", "path": "1"}, "2253": {"fn": "MerkleResistor.depositTokens", "offset": [4434, 4466], "op": "SSTORE", "path": "1"}, "2254": {"op": "POP"}, "2255": {"op": "POP"}, "2256": {"fn": "MerkleResistor.depositTokens", "offset": [5213, 5236], "op": "PUSH1", "path": "1", "statement": 20, "value": "0x5"}, "2258": {"fn": "MerkleResistor.depositTokens", "offset": [5213, 5236], "op": "DUP2", "path": "1"}, "2259": {"fn": "MerkleResistor.depositTokens", "offset": [5213, 5236], "op": "ADD", "path": "1"}, "2260": {"fn": "MerkleResistor.depositTokens", "offset": [5213, 5236], "op": "SLOAD", "path": "1"}, "2261": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH1", "path": "1", "value": "0x40"}, "2263": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "MLOAD", "path": "1"}, "2264": {"op": "PUSH4", "value": "0x23B872DD"}, "2269": {"op": "PUSH1", "value": "0xE0"}, "2271": {"op": "SHL"}, "2272": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP2", "path": "1"}, "2273": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "MSTORE", "path": "1"}, "2274": {"fn": "MerkleResistor.depositTokens", "offset": [5251, 5261], "op": "CALLER", "path": "1"}, "2275": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH1", "path": "1", "value": "0x4"}, "2277": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP3", "path": "1"}, "2278": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "ADD", "path": "1"}, "2279": {"op": "MSTORE"}, "2280": {"fn": "MerkleResistor.depositTokens", "offset": [5271, 5275], "op": "ADDRESS", "path": "1"}, "2281": {"op": "PUSH1", "value": "0x24"}, "2283": {"op": "DUP3"}, "2284": {"op": "ADD"}, "2285": {"op": "MSTORE"}, "2286": {"op": "PUSH1", "value": "0x44"}, "2288": {"op": "DUP2"}, "2289": {"op": "ADD"}, "2290": {"op": "DUP5"}, "2291": {"op": "SWAP1"}, "2292": {"op": "MSTORE"}, "2293": {"op": "PUSH1", "value": "0x1"}, "2295": {"op": "PUSH1", "value": "0x1"}, "2297": {"op": "PUSH1", "value": "0xA0"}, "2299": {"op": "SHL"}, "2300": {"op": "SUB"}, "2301": {"fn": "MerkleResistor.depositTokens", "offset": [5213, 5236], "op": "SWAP1", "path": "1"}, "2302": {"fn": "MerkleResistor.depositTokens", "offset": [5213, 5236], "op": "SWAP2", "path": "1"}, "2303": {"fn": "MerkleResistor.depositTokens", "offset": [5213, 5236], "op": "AND", "path": "1"}, "2304": {"fn": "MerkleResistor.depositTokens", "offset": [5213, 5236], "op": "SWAP1", "path": "1"}, "2305": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5250], "op": "PUSH4", "path": "1", "value": "0x23B872DD"}, "2310": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5250], "op": "SWAP1", "path": "1"}, "2311": {"op": "PUSH1", "value": "0x64"}, "2313": {"op": "ADD"}, "2314": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH1", "path": "1", "value": "0x20"}, "2316": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH1", "path": "1", "value": "0x40"}, "2318": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "MLOAD", "path": "1"}, "2319": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP1", "path": "1"}, "2320": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP4", "path": "1"}, "2321": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "SUB", "path": "1"}, "2322": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP2", "path": "1"}, "2323": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH1", "path": "1", "value": "0x0"}, "2325": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP8", "path": "1"}, "2326": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP1", "path": "1"}, "2327": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "EXTCODESIZE", "path": "1"}, "2328": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "ISZERO", "path": "1"}, "2329": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP1", "path": "1"}, "2330": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "ISZERO", "path": "1"}, "2331": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH2", "path": "1", "value": "0x923"}, "2334": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "JUMPI", "path": "1"}, "2335": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH1", "path": "1", "value": "0x0"}, "2337": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP1", "path": "1"}, "2338": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "REVERT", "path": "1"}, "2339": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "JUMPDEST", "path": "1"}, "2340": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "POP", "path": "1"}, "2341": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "GAS", "path": "1"}, "2342": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "CALL", "path": "1"}, "2343": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "ISZERO", "path": "1"}, "2344": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP1", "path": "1"}, "2345": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "ISZERO", "path": "1"}, "2346": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH2", "path": "1", "value": "0x937"}, "2349": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "JUMPI", "path": "1"}, "2350": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "RETURNDATASIZE", "path": "1"}, "2351": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH1", "path": "1", "value": "0x0"}, "2353": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP1", "path": "1"}, "2354": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "RETURNDATACOPY", "path": "1"}, "2355": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "RETURNDATASIZE", "path": "1"}, "2356": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH1", "path": "1", "value": "0x0"}, "2358": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "REVERT", "path": "1"}, "2359": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "JUMPDEST", "path": "1"}, "2360": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "POP", "path": "1"}, "2361": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "POP", "path": "1"}, "2362": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "POP", "path": "1"}, "2363": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "POP", "path": "1"}, "2364": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH1", "path": "1", "value": "0x40"}, "2366": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "MLOAD", "path": "1"}, "2367": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "RETURNDATASIZE", "path": "1"}, "2368": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH1", "path": "1", "value": "0x1F"}, "2370": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "NOT", "path": "1"}, "2371": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH1", "path": "1", "value": "0x1F"}, "2373": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP3", "path": "1"}, "2374": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "ADD", "path": "1"}, "2375": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "AND", "path": "1"}, "2376": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP3", "path": "1"}, "2377": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "ADD", "path": "1"}, "2378": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP1", "path": "1"}, "2379": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH1", "path": "1", "value": "0x40"}, "2381": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "MSTORE", "path": "1"}, "2382": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "POP", "path": "1"}, "2383": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "DUP2", "path": "1"}, "2384": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "ADD", "path": "1"}, "2385": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "SWAP1", "path": "1"}, "2386": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH2", "path": "1", "value": "0x95B"}, "2389": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "SWAP2", "path": "1"}, "2390": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "SWAP1", "path": "1"}, "2391": {"fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "PUSH2", "path": "1", "value": "0x1017"}, "2394": {"fn": "MerkleResistor.depositTokens", "jump": "i", "offset": [5206, 5284], "op": "JUMP", "path": "1"}, "2395": {"branch": 38, "fn": "MerkleResistor.depositTokens", "offset": [5206, 5284], "op": "JUMPDEST", "path": "1"}, "2396": {"fn": "MerkleResistor.depositTokens", "offset": [5198, 5310], "op": "PUSH2", "path": "1", "value": "0x99F"}, "2399": {"branch": 38, "fn": "MerkleResistor.depositTokens", "offset": [5198, 5310], "op": "JUMPI", "path": "1"}, "2400": {"fn": "MerkleResistor.depositTokens", "offset": [5198, 5310], "op": "PUSH1", "path": "1", "value": "0x40"}, "2402": {"fn": "MerkleResistor.depositTokens", "offset": [5198, 5310], "op": "MLOAD", "path": "1"}, "2403": {"op": "PUSH3", "value": "0x461BCD"}, "2407": {"op": "PUSH1", "value": "0xE5"}, "2409": {"op": "SHL"}, "2410": {"fn": "MerkleResistor.depositTokens", "offset": [5198, 5310], "op": "DUP2", "path": "1"}, "2411": {"fn": "MerkleResistor.depositTokens", "offset": [5198, 5310], "op": "MSTORE", "path": "1"}, "2412": {"op": "PUSH1", "value": "0x20"}, "2414": {"fn": "MerkleResistor.depositTokens", "offset": [5198, 5310], "op": "PUSH1", "path": "1", "value": "0x4"}, "2416": {"fn": "MerkleResistor.depositTokens", "offset": [5198, 5310], "op": "DUP3", "path": "1"}, "2417": {"fn": "MerkleResistor.depositTokens", "offset": [5198, 5310], "op": "ADD", "path": "1"}, "2418": {"op": "MSTORE"}, "2419": {"op": "PUSH1", "value": "0x15"}, "2421": {"op": "PUSH1", "value": "0x24"}, "2423": {"op": "DUP3"}, "2424": {"op": "ADD"}, "2425": {"op": "MSTORE"}, "2426": {"op": "PUSH21", "value": "0x115490CC8C081D1C985B9CD9995C8819985A5B1959"}, "2448": {"op": "PUSH1", "value": "0x5A"}, "2450": {"op": "SHL"}, "2451": {"op": "PUSH1", "value": "0x44"}, "2453": {"op": "DUP3"}, "2454": {"op": "ADD"}, "2455": {"op": "MSTORE"}, "2456": {"op": "PUSH1", "value": "0x64"}, "2458": {"op": "ADD"}, "2459": {"fn": "MerkleResistor.depositTokens", "offset": [5198, 5310], "op": "PUSH2", "path": "1", "value": "0x318"}, "2462": {"op": "JUMP"}, "2463": {"fn": "MerkleResistor.depositTokens", "offset": [5198, 5310], "op": "JUMPDEST", "path": "1"}, "2464": {"fn": "MerkleResistor.depositTokens", "offset": [5352, 5375], "op": "PUSH1", "path": "1", "statement": 21, "value": "0x5"}, "2466": {"fn": "MerkleResistor.depositTokens", "offset": [5352, 5375], "op": "DUP2", "path": "1"}, "2467": {"fn": "MerkleResistor.depositTokens", "offset": [5352, 5375], "op": "ADD", "path": "1"}, "2468": {"fn": "MerkleResistor.depositTokens", "offset": [5352, 5375], "op": "SLOAD", "path": "1"}, "2469": {"fn": "MerkleResistor.depositTokens", "offset": [5325, 5383], "op": "PUSH1", "path": "1", "value": "0x40"}, "2471": {"fn": "MerkleResistor.depositTokens", "offset": [5325, 5383], "op": "MLOAD", "path": "1"}, "2472": {"op": "DUP4"}, "2473": {"op": "DUP2"}, "2474": {"op": "MSTORE"}, "2475": {"op": "PUSH1", "value": "0x1"}, "2477": {"op": "PUSH1", "value": "0x1"}, "2479": {"op": "PUSH1", "value": "0xA0"}, "2481": {"op": "SHL"}, "2482": {"op": "SUB"}, "2483": {"fn": "MerkleResistor.depositTokens", "offset": [5352, 5375], "op": "SWAP1", "path": "1"}, "2484": {"fn": "MerkleResistor.depositTokens", "offset": [5352, 5375], "op": "SWAP2", "path": "1"}, "2485": {"fn": "MerkleResistor.depositTokens", "offset": [5352, 5375], "op": "AND", "path": "1"}, "2486": {"fn": "MerkleResistor.depositTokens", "offset": [5352, 5375], "op": "SWAP1", "path": "1"}, "2487": {"fn": "MerkleResistor.depositTokens", "offset": [5341, 5350], "op": "DUP5", "path": "1"}, "2488": {"fn": "MerkleResistor.depositTokens", "offset": [5341, 5350], "op": "SWAP1", "path": "1"}, "2489": {"fn": "MerkleResistor.depositTokens", "offset": [5325, 5383], "op": "PUSH32", "path": "1", "value": "0xB162210DA7D23D82C18CFF5AF46D3562661D26B42A6848FA28D64A6BDC70386A"}, "2522": {"fn": "MerkleResistor.depositTokens", "offset": [5325, 5383], "op": "SWAP1", "path": "1"}, "2523": {"op": "PUSH1", "value": "0x20"}, "2525": {"op": "ADD"}, "2526": {"fn": "MerkleResistor.depositTokens", "offset": [5325, 5383], "op": "PUSH1", "path": "1", "value": "0x40"}, "2528": {"fn": "MerkleResistor.depositTokens", "offset": [5325, 5383], "op": "MLOAD", "path": "1"}, "2529": {"fn": "MerkleResistor.depositTokens", "offset": [5325, 5383], "op": "DUP1", "path": "1"}, "2530": {"fn": "MerkleResistor.depositTokens", "offset": [5325, 5383], "op": "SWAP2", "path": "1"}, "2531": {"fn": "MerkleResistor.depositTokens", "offset": [5325, 5383], "op": "SUB", "path": "1"}, "2532": {"fn": "MerkleResistor.depositTokens", "offset": [5325, 5383], "op": "SWAP1", "path": "1"}, "2533": {"fn": "MerkleResistor.depositTokens", "offset": [5325, 5383], "op": "LOG3", "path": "1"}, "2534": {"fn": "MerkleResistor.depositTokens", "offset": [4262, 5390], "op": "POP", "path": "1"}, "2535": {"fn": "MerkleResistor.depositTokens", "offset": [4204, 5390], "op": "POP", "path": "1"}, "2536": {"fn": "MerkleResistor.depositTokens", "offset": [4204, 5390], "op": "POP", "path": "1"}, "2537": {"fn": "MerkleResistor.depositTokens", "jump": "o", "offset": [4204, 5390], "op": "JUMP", "path": "1"}, "2538": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "JUMPDEST", "path": "1"}, "2539": {"fn": "MerkleResistor.initialize", "offset": [5882, 5892], "op": "CALLER", "path": "1", "statement": 22}, "2540": {"op": "PUSH1", "value": "0x1"}, "2542": {"op": "PUSH1", "value": "0x1"}, "2544": {"op": "PUSH1", "value": "0xA0"}, "2546": {"op": "SHL"}, "2547": {"op": "SUB"}, "2548": {"fn": "MerkleResistor.initialize", "offset": [5882, 5907], "op": "DUP7", "path": "1"}, "2549": {"fn": "MerkleResistor.initialize", "offset": [5882, 5907], "op": "AND", "path": "1"}, "2550": {"branch": 39, "fn": "MerkleResistor.initialize", "offset": [5882, 5907], "op": "EQ", "path": "1"}, "2551": {"fn": "MerkleResistor.initialize", "offset": [5874, 5948], "op": "PUSH2", "path": "1", "value": "0xA4E"}, "2554": {"branch": 39, "fn": "MerkleResistor.initialize", "offset": [5874, 5948], "op": "JUMPI", "path": "1"}, "2555": {"fn": "MerkleResistor.initialize", "offset": [5874, 5948], "op": "PUSH1", "path": "1", "value": "0x40"}, "2557": {"fn": "MerkleResistor.initialize", "offset": [5874, 5948], "op": "MLOAD", "path": "1"}, "2558": {"op": "PUSH3", "value": "0x461BCD"}, "2562": {"op": "PUSH1", "value": "0xE5"}, "2564": {"op": "SHL"}, "2565": {"fn": "MerkleResistor.initialize", "offset": [5874, 5948], "op": "DUP2", "path": "1"}, "2566": {"fn": "MerkleResistor.initialize", "offset": [5874, 5948], "op": "MSTORE", "path": "1"}, "2567": {"op": "PUSH1", "value": "0x20"}, "2569": {"fn": "MerkleResistor.initialize", "offset": [5874, 5948], "op": "PUSH1", "path": "1", "value": "0x4"}, "2571": {"fn": "MerkleResistor.initialize", "offset": [5874, 5948], "op": "DUP3", "path": "1"}, "2572": {"fn": "MerkleResistor.initialize", "offset": [5874, 5948], "op": "ADD", "path": "1"}, "2573": {"op": "MSTORE"}, "2574": {"op": "PUSH1", "value": "0x24"}, "2576": {"op": "DUP1"}, "2577": {"op": "DUP3"}, "2578": {"op": "ADD"}, "2579": {"op": "MSTORE"}, "2580": {"op": "PUSH32", "value": "0x43616E206F6E6C7920696E697469616C697A6520796F7572206F776E20747261"}, "2613": {"op": "PUSH1", "value": "0x44"}, "2615": {"op": "DUP3"}, "2616": {"op": "ADD"}, "2617": {"op": "MSTORE"}, "2618": {"op": "PUSH4", "value": "0x6E636865"}, "2623": {"op": "PUSH1", "value": "0xE0"}, "2625": {"op": "SHL"}, "2626": {"op": "PUSH1", "value": "0x64"}, "2628": {"op": "DUP3"}, "2629": {"op": "ADD"}, "2630": {"op": "MSTORE"}, "2631": {"op": "PUSH1", "value": "0x84"}, "2633": {"op": "ADD"}, "2634": {"fn": "MerkleResistor.initialize", "offset": [5874, 5948], "op": "PUSH2", "path": "1", "value": "0x318"}, "2637": {"op": "JUMP"}, "2638": {"fn": "MerkleResistor.initialize", "offset": [5874, 5948], "op": "JUMPDEST", "path": "1"}, "2639": {"op": "PUSH1", "value": "0x1"}, "2641": {"op": "PUSH1", "value": "0x1"}, "2643": {"op": "PUSH1", "value": "0xA0"}, "2645": {"op": "SHL"}, "2646": {"op": "SUB"}, "2647": {"fn": "MerkleResistor.initialize", "offset": [6003, 6027], "op": "DUP6", "path": "1", "statement": 23}, "2648": {"fn": "MerkleResistor.initialize", "offset": [6003, 6027], "op": "AND", "path": "1"}, "2649": {"fn": "MerkleResistor.initialize", "offset": [6003, 6027], "op": "PUSH1", "path": "1", "value": "0x0"}, "2651": {"fn": "MerkleResistor.initialize", "offset": [6003, 6027], "op": "SWAP1", "path": "1"}, "2652": {"fn": "MerkleResistor.initialize", "offset": [6003, 6027], "op": "DUP2", "path": "1"}, "2653": {"fn": "MerkleResistor.initialize", "offset": [6003, 6027], "op": "MSTORE", "path": "1"}, "2654": {"fn": "MerkleResistor.initialize", "offset": [6003, 6014], "op": "PUSH1", "path": "1", "value": "0x1"}, "2656": {"fn": "MerkleResistor.initialize", "offset": [6003, 6027], "op": "PUSH1", "path": "1", "value": "0x20"}, "2658": {"fn": "MerkleResistor.initialize", "offset": [6003, 6027], "op": "SWAP1", "path": "1"}, "2659": {"fn": "MerkleResistor.initialize", "offset": [6003, 6027], "op": "DUP2", "path": "1"}, "2660": {"fn": "MerkleResistor.initialize", "offset": [6003, 6027], "op": "MSTORE", "path": "1"}, "2661": {"fn": "MerkleResistor.initialize", "offset": [6003, 6027], "op": "PUSH1", "path": "1", "value": "0x40"}, "2663": {"fn": "MerkleResistor.initialize", "offset": [6003, 6027], "op": "DUP1", "path": "1"}, "2664": {"fn": "MerkleResistor.initialize", "offset": [6003, 6027], "op": "DUP4", "path": "1"}, "2665": {"fn": "MerkleResistor.initialize", "offset": [6003, 6027], "op": "KECCAK256", "path": "1"}, "2666": {"fn": "MerkleResistor.initialize", "offset": [6003, 6040], "op": "DUP10", "path": "1"}, "2667": {"fn": "MerkleResistor.initialize", "offset": [6003, 6040], "op": "DUP5", "path": "1"}, "2668": {"fn": "MerkleResistor.initialize", "offset": [6003, 6040], "op": "MSTORE", "path": "1"}, "2669": {"fn": "MerkleResistor.initialize", "offset": [6003, 6040], "op": "SWAP1", "path": "1"}, "2670": {"fn": "MerkleResistor.initialize", "offset": [6003, 6040], "op": "SWAP2", "path": "1"}, "2671": {"fn": "MerkleResistor.initialize", "offset": [6003, 6040], "op": "MSTORE", "path": "1"}, "2672": {"fn": "MerkleResistor.initialize", "offset": [6003, 6040], "op": "SWAP1", "path": "1"}, "2673": {"fn": "MerkleResistor.initialize", "offset": [6003, 6040], "op": "KECCAK256", "path": "1"}, "2674": {"fn": "MerkleResistor.initialize", "offset": [6003, 6040], "op": "SLOAD", "path": "1"}, "2675": {"fn": "MerkleResistor.initialize", "offset": [6003, 6040], "op": "PUSH1", "path": "1", "value": "0xFF"}, "2677": {"fn": "MerkleResistor.initialize", "offset": [6003, 6040], "op": "AND", "path": "1"}, "2678": {"branch": 40, "fn": "MerkleResistor.initialize", "offset": [6002, 6040], "op": "ISZERO", "path": "1"}, "2679": {"fn": "MerkleResistor.initialize", "offset": [5994, 6064], "op": "PUSH2", "path": "1", "value": "0xAB8"}, "2682": {"branch": 40, "fn": "MerkleResistor.initialize", "offset": [5994, 6064], "op": "JUMPI", "path": "1"}, "2683": {"fn": "MerkleResistor.initialize", "offset": [5994, 6064], "op": "PUSH1", "path": "1", "value": "0x40"}, "2685": {"fn": "MerkleResistor.initialize", "offset": [5994, 6064], "op": "MLOAD", "path": "1"}, "2686": {"op": "PUSH3", "value": "0x461BCD"}, "2690": {"op": "PUSH1", "value": "0xE5"}, "2692": {"op": "SHL"}, "2693": {"fn": "MerkleResistor.initialize", "offset": [5994, 6064], "op": "DUP2", "path": "1"}, "2694": {"fn": "MerkleResistor.initialize", "offset": [5994, 6064], "op": "MSTORE", "path": "1"}, "2695": {"op": "PUSH1", "value": "0x20"}, "2697": {"fn": "MerkleResistor.initialize", "offset": [5994, 6064], "op": "PUSH1", "path": "1", "value": "0x4"}, "2699": {"fn": "MerkleResistor.initialize", "offset": [5994, 6064], "op": "DUP3", "path": "1"}, "2700": {"fn": "MerkleResistor.initialize", "offset": [5994, 6064], "op": "ADD", "path": "1"}, "2701": {"op": "MSTORE"}, "2702": {"op": "PUSH1", "value": "0x13"}, "2704": {"op": "PUSH1", "value": "0x24"}, "2706": {"op": "DUP3"}, "2707": {"op": "ADD"}, "2708": {"op": "MSTORE"}, "2709": {"op": "PUSH19", "value": "0x105B1C9958591E481A5B9A5D1A585B1A5E9959"}, "2729": {"op": "PUSH1", "value": "0x6A"}, "2731": {"op": "SHL"}, "2732": {"op": "PUSH1", "value": "0x44"}, "2734": {"op": "DUP3"}, "2735": {"op": "ADD"}, "2736": {"op": "MSTORE"}, "2737": {"op": "PUSH1", "value": "0x64"}, "2739": {"op": "ADD"}, "2740": {"fn": "MerkleResistor.initialize", "offset": [5994, 6064], "op": "PUSH2", "path": "1", "value": "0x318"}, "2743": {"op": "JUMP"}, "2744": {"fn": "MerkleResistor.initialize", "offset": [5994, 6064], "op": "JUMPDEST", "path": "1"}, "2745": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "PUSH1", "path": "1", "value": "0x40"}, "2747": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "DUP1", "path": "1"}, "2748": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "MLOAD", "path": "1"}, "2749": {"op": "PUSH1", "value": "0x1"}, "2751": {"op": "PUSH1", "value": "0x1"}, "2753": {"op": "PUSH1", "value": "0xA0"}, "2755": {"op": "SHL"}, "2756": {"op": "SUB"}, "2757": {"op": "DUP8"}, "2758": {"op": "AND"}, "2759": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "PUSH1", "path": "1", "value": "0x20"}, "2761": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "DUP3", "path": "1"}, "2762": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "ADD", "path": "1"}, "2763": {"op": "MSTORE"}, "2764": {"op": "SWAP1"}, "2765": {"op": "DUP2"}, "2766": {"op": "ADD"}, "2767": {"op": "DUP5"}, "2768": {"op": "SWAP1"}, "2769": {"op": "MSTORE"}, "2770": {"op": "PUSH1", "value": "0x60"}, "2772": {"op": "DUP2"}, "2773": {"op": "ADD"}, "2774": {"op": "DUP4"}, "2775": {"op": "SWAP1"}, "2776": {"op": "MSTORE"}, "2777": {"fn": "MerkleResistor.initialize", "offset": [6137, 6149], "op": "PUSH1", "path": "1", "value": "0x0"}, "2779": {"fn": "MerkleResistor.initialize", "offset": [6137, 6149], "op": "SWAP1", "path": "1"}, "2780": {"op": "PUSH1", "value": "0x80"}, "2782": {"op": "ADD"}, "2783": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "PUSH1", "path": "1", "value": "0x40"}, "2785": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "DUP1", "path": "1"}, "2786": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "MLOAD", "path": "1"}, "2787": {"op": "PUSH1", "value": "0x1F"}, "2789": {"op": "NOT"}, "2790": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "DUP2", "path": "1"}, "2791": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "DUP5", "path": "1"}, "2792": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "SUB", "path": "1"}, "2793": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "ADD", "path": "1"}, "2794": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "DUP2", "path": "1"}, "2795": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "MSTORE", "path": "1"}, "2796": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "DUP3", "path": "1"}, "2797": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "DUP3", "path": "1"}, "2798": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "MSTORE", "path": "1"}, "2799": {"fn": "MerkleResistor.initialize", "offset": [6152, 6222], "op": "DUP1", "path": "1"}, "2800": {"fn": "MerkleResistor.initialize", "offset": [6152, 6222], "op": "MLOAD", "path": "1"}, "2801": {"fn": "MerkleResistor.initialize", "offset": [6162, 6221], "op": "PUSH1", "path": "1", "value": "0x20"}, "2803": {"fn": "MerkleResistor.initialize", "offset": [6152, 6222], "op": "SWAP2", "path": "1"}, "2804": {"fn": "MerkleResistor.initialize", "offset": [6152, 6222], "op": "DUP3", "path": "1"}, "2805": {"fn": "MerkleResistor.initialize", "offset": [6152, 6222], "op": "ADD", "path": "1"}, "2806": {"fn": "MerkleResistor.initialize", "offset": [6152, 6222], "op": "KECCAK256", "path": "1"}, "2807": {"fn": "MerkleResistor.initialize", "offset": [6273, 6295], "op": "PUSH1", "path": "1", "value": "0x0"}, "2809": {"fn": "MerkleResistor.initialize", "offset": [6298, 6322], "op": "DUP12", "path": "1"}, "2810": {"fn": "MerkleResistor.initialize", "offset": [6298, 6322], "op": "DUP2", "path": "1"}, "2811": {"fn": "MerkleResistor.initialize", "offset": [6298, 6322], "op": "MSTORE", "path": "1"}, "2812": {"fn": "MerkleResistor.initialize", "offset": [6298, 6309], "op": "PUSH1", "path": "1", "value": "0x2"}, "2814": {"fn": "MerkleResistor.initialize", "offset": [6298, 6322], "op": "DUP1", "path": "1"}, "2815": {"fn": "MerkleResistor.initialize", "offset": [6298, 6322], "op": "DUP5", "path": "1"}, "2816": {"fn": "MerkleResistor.initialize", "offset": [6298, 6322], "op": "MSTORE", "path": "1"}, "2817": {"fn": "MerkleResistor.initialize", "offset": [6298, 6322], "op": "SWAP1", "path": "1"}, "2818": {"fn": "MerkleResistor.initialize", "offset": [6298, 6322], "op": "DUP5", "path": "1"}, "2819": {"fn": "MerkleResistor.initialize", "offset": [6298, 6322], "op": "SWAP1", "path": "1"}, "2820": {"fn": "MerkleResistor.initialize", "offset": [6298, 6322], "op": "KECCAK256", "path": "1"}, "2821": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "PUSH1", "path": "1", "value": "0xE0"}, "2823": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP7", "path": "1"}, "2824": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "ADD", "path": "1"}, "2825": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP6", "path": "1"}, "2826": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "MSTORE", "path": "1"}, "2827": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP1", "path": "1"}, "2828": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SLOAD", "path": "1"}, "2829": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP1", "path": "1"}, "2830": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP8", "path": "1"}, "2831": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "MSTORE", "path": "1"}, "2832": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "PUSH1", "path": "1", "value": "0x1"}, "2834": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP3", "path": "1"}, "2835": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "ADD", "path": "1"}, "2836": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SLOAD", "path": "1"}, "2837": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SWAP5", "path": "1"}, "2838": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP8", "path": "1"}, "2839": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "ADD", "path": "1"}, "2840": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SWAP5", "path": "1"}, "2841": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SWAP1", "path": "1"}, "2842": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SWAP5", "path": "1"}, "2843": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "MSTORE", "path": "1"}, "2844": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SWAP1", "path": "1"}, "2845": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP2", "path": "1"}, "2846": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "ADD", "path": "1"}, "2847": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SLOAD", "path": "1"}, "2848": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP6", "path": "1"}, "2849": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP6", "path": "1"}, "2850": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "ADD", "path": "1"}, "2851": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "MSTORE", "path": "1"}, "2852": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "PUSH1", "path": "1", "value": "0x3"}, "2854": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP2", "path": "1"}, "2855": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "ADD", "path": "1"}, "2856": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SLOAD", "path": "1"}, "2857": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "PUSH1", "path": "1", "value": "0x60"}, "2859": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP7", "path": "1"}, "2860": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "ADD", "path": "1"}, "2861": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "MSTORE", "path": "1"}, "2862": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "PUSH1", "path": "1", "value": "0x4"}, "2864": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP1", "path": "1"}, "2865": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP3", "path": "1"}, "2866": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "ADD", "path": "1"}, "2867": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SLOAD", "path": "1"}, "2868": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "PUSH1", "path": "1", "value": "0x80"}, "2870": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP8", "path": "1"}, "2871": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "ADD", "path": "1"}, "2872": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "MSTORE", "path": "1"}, "2873": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "PUSH1", "path": "1", "value": "0x5"}, "2875": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP3", "path": "1"}, "2876": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "ADD", "path": "1"}, "2877": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SLOAD", "path": "1"}, "2878": {"op": "PUSH1", "value": "0x1"}, "2880": {"op": "PUSH1", "value": "0x1"}, "2882": {"op": "PUSH1", "value": "0xA0"}, "2884": {"op": "SHL"}, "2885": {"op": "SUB"}, "2886": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "AND", "path": "1"}, "2887": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "PUSH1", "path": "1", "value": "0xA0"}, "2889": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP8", "path": "1"}, "2890": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "ADD", "path": "1"}, "2891": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "MSTORE", "path": "1"}, "2892": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "PUSH1", "path": "1", "value": "0x6"}, "2894": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SWAP1", "path": "1"}, "2895": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SWAP2", "path": "1"}, "2896": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "ADD", "path": "1"}, "2897": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SLOAD", "path": "1"}, "2898": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "PUSH1", "path": "1", "value": "0xC0"}, "2900": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "DUP7", "path": "1"}, "2901": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "ADD", "path": "1"}, "2902": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "MSTORE", "path": "1"}, "2903": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "SWAP3", "path": "1", "statement": 24}, "2904": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "MLOAD", "path": "1"}, "2905": {"op": "PUSH4", "value": "0x2769CD1F"}, "2910": {"op": "PUSH1", "value": "0xE2"}, "2912": {"op": "SHL"}, "2913": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DUP2", "path": "1"}, "2914": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "MSTORE", "path": "1"}, "2915": {"fn": "MerkleResistor.initialize", "offset": [6152, 6222], "op": "SWAP1", "path": "1"}, "2916": {"fn": "MerkleResistor.initialize", "offset": [6152, 6222], "op": "SWAP5", "path": "1"}, "2917": {"op": "POP"}, "2918": {"fn": "MerkleResistor.initialize", "offset": [6418, 6445], "op": "PUSH20", "path": "1", "value": "0x0"}, "2939": {"fn": "MerkleResistor.initialize", "offset": [6418, 6445], "op": "SWAP3", "path": "1"}, "2940": {"fn": "MerkleResistor.initialize", "offset": [6418, 6445], "op": "PUSH4", "path": "1", "value": "0x9DA7347C"}, "2945": {"fn": "MerkleResistor.initialize", "offset": [6418, 6445], "op": "SWAP3", "path": "1"}, "2946": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH2", "path": "1", "value": "0xB91"}, "2949": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "SWAP3", "path": "1"}, "2950": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SWAP1", "path": "1"}, "2951": {"fn": "MerkleResistor.initialize", "offset": [6273, 6322], "op": "SWAP2", "path": "1"}, "2952": {"fn": "MerkleResistor.initialize", "offset": [6152, 6222], "op": "DUP8", "path": "1"}, "2953": {"fn": "MerkleResistor.initialize", "offset": [6152, 6222], "op": "SWAP2", "path": "1"}, "2954": {"fn": "MerkleResistor.initialize", "offset": [6452, 6457], "op": "DUP10", "path": "1"}, "2955": {"fn": "MerkleResistor.initialize", "offset": [6452, 6457], "op": "SWAP2", "path": "1"}, "2956": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "ADD", "path": "1"}, "2957": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH2", "path": "1", "value": "0x1095"}, "2960": {"fn": "MerkleResistor.initialize", "jump": "i", "offset": [6418, 6458], "op": "JUMP", "path": "1"}, "2961": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "JUMPDEST", "path": "1"}, "2962": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH1", "path": "1", "value": "0x20"}, "2964": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH1", "path": "1", "value": "0x40"}, "2966": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "MLOAD", "path": "1"}, "2967": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DUP1", "path": "1"}, "2968": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DUP4", "path": "1"}, "2969": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "SUB", "path": "1"}, "2970": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DUP2", "path": "1"}, "2971": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DUP7", "path": "1"}, "2972": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DUP1", "path": "1"}, "2973": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "EXTCODESIZE", "path": "1"}, "2974": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "ISZERO", "path": "1"}, "2975": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DUP1", "path": "1"}, "2976": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "ISZERO", "path": "1"}, "2977": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH2", "path": "1", "value": "0xBA9"}, "2980": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "JUMPI", "path": "1"}, "2981": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH1", "path": "1", "value": "0x0"}, "2983": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DUP1", "path": "1"}, "2984": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "REVERT", "path": "1"}, "2985": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "JUMPDEST", "path": "1"}, "2986": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "POP", "path": "1"}, "2987": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "GAS", "path": "1"}, "2988": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DELEGATECALL", "path": "1"}, "2989": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "ISZERO", "path": "1"}, "2990": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DUP1", "path": "1"}, "2991": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "ISZERO", "path": "1"}, "2992": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH2", "path": "1", "value": "0xBBD"}, "2995": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "JUMPI", "path": "1"}, "2996": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "RETURNDATASIZE", "path": "1"}, "2997": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH1", "path": "1", "value": "0x0"}, "2999": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DUP1", "path": "1"}, "3000": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "RETURNDATACOPY", "path": "1"}, "3001": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "RETURNDATASIZE", "path": "1"}, "3002": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH1", "path": "1", "value": "0x0"}, "3004": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "REVERT", "path": "1"}, "3005": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "JUMPDEST", "path": "1"}, "3006": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "POP", "path": "1"}, "3007": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "POP", "path": "1"}, "3008": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "POP", "path": "1"}, "3009": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "POP", "path": "1"}, "3010": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH1", "path": "1", "value": "0x40"}, "3012": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "MLOAD", "path": "1"}, "3013": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "RETURNDATASIZE", "path": "1"}, "3014": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH1", "path": "1", "value": "0x1F"}, "3016": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "NOT", "path": "1"}, "3017": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH1", "path": "1", "value": "0x1F"}, "3019": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DUP3", "path": "1"}, "3020": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "ADD", "path": "1"}, "3021": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "AND", "path": "1"}, "3022": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DUP3", "path": "1"}, "3023": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "ADD", "path": "1"}, "3024": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DUP1", "path": "1"}, "3025": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH1", "path": "1", "value": "0x40"}, "3027": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "MSTORE", "path": "1"}, "3028": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "POP", "path": "1"}, "3029": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "DUP2", "path": "1"}, "3030": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "ADD", "path": "1"}, "3031": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "SWAP1", "path": "1"}, "3032": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH2", "path": "1", "value": "0xBE1"}, "3035": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "SWAP2", "path": "1"}, "3036": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "SWAP1", "path": "1"}, "3037": {"fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "PUSH2", "path": "1", "value": "0x1017"}, "3040": {"fn": "MerkleResistor.initialize", "jump": "i", "offset": [6418, 6458], "op": "JUMP", "path": "1"}, "3041": {"branch": 41, "fn": "MerkleResistor.initialize", "offset": [6418, 6458], "op": "JUMPDEST", "path": "1"}, "3042": {"fn": "MerkleResistor.initialize", "offset": [6410, 6495], "op": "PUSH2", "path": "1", "value": "0xC2D"}, "3045": {"branch": 41, "fn": "MerkleResistor.initialize", "offset": [6410, 6495], "op": "JUMPI", "path": "1"}, "3046": {"fn": "MerkleResistor.initialize", "offset": [6410, 6495], "op": "PUSH1", "path": "1", "value": "0x40"}, "3048": {"fn": "MerkleResistor.initialize", "offset": [6410, 6495], "op": "MLOAD", "path": "1"}, "3049": {"op": "PUSH3", "value": "0x461BCD"}, "3053": {"op": "PUSH1", "value": "0xE5"}, "3055": {"op": "SHL"}, "3056": {"fn": "MerkleResistor.initialize", "offset": [6410, 6495], "op": "DUP2", "path": "1"}, "3057": {"fn": "MerkleResistor.initialize", "offset": [6410, 6495], "op": "MSTORE", "path": "1"}, "3058": {"op": "PUSH1", "value": "0x20"}, "3060": {"fn": "MerkleResistor.initialize", "offset": [6410, 6495], "op": "PUSH1", "path": "1", "value": "0x4"}, "3062": {"fn": "MerkleResistor.initialize", "offset": [6410, 6495], "op": "DUP3", "path": "1"}, "3063": {"fn": "MerkleResistor.initialize", "offset": [6410, 6495], "op": "ADD", "path": "1"}, "3064": {"op": "DUP2"}, "3065": {"op": "SWAP1"}, "3066": {"op": "MSTORE"}, "3067": {"op": "PUSH1", "value": "0x24"}, "3069": {"op": "DUP3"}, "3070": {"op": "ADD"}, "3071": {"op": "MSTORE"}, "3072": {"op": "PUSH32", "value": "0x5468652070726F6F6620636F756C64206E6F742062652076657269666965642E"}, "3105": {"op": "PUSH1", "value": "0x44"}, "3107": {"op": "DUP3"}, "3108": {"op": "ADD"}, "3109": {"op": "MSTORE"}, "3110": {"op": "PUSH1", "value": "0x64"}, "3112": {"op": "ADD"}, "3113": {"fn": "MerkleResistor.initialize", "offset": [6410, 6495], "op": "PUSH2", "path": "1", "value": "0x318"}, "3116": {"op": "JUMP"}, "3117": {"fn": "MerkleResistor.initialize", "offset": [6410, 6495], "op": "JUMPDEST", "path": "1"}, "3118": {"op": "PUSH1", "value": "0x1"}, "3120": {"op": "PUSH1", "value": "0x1"}, "3122": {"op": "PUSH1", "value": "0xA0"}, "3124": {"op": "SHL"}, "3125": {"op": "SUB"}, "3126": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "DUP8", "path": "1", "statement": 25}, "3127": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "AND", "path": "1"}, "3128": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "PUSH1", "path": "1", "value": "0x0"}, "3130": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "SWAP1", "path": "1"}, "3131": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "DUP2", "path": "1"}, "3132": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "MSTORE", "path": "1"}, "3133": {"fn": "MerkleResistor.initialize", "offset": [6633, 6637], "op": "PUSH1", "path": "1", "value": "0x1"}, "3135": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "PUSH1", "path": "1", "value": "0x20"}, "3137": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "DUP2", "path": "1"}, "3138": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "DUP2", "path": "1"}, "3139": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "MSTORE", "path": "1"}, "3140": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "PUSH1", "path": "1", "value": "0x40"}, "3142": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "DUP1", "path": "1"}, "3143": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "DUP5", "path": "1"}, "3144": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "KECCAK256", "path": "1"}, "3145": {"fn": "MerkleResistor.initialize", "offset": [6593, 6630], "op": "DUP13", "path": "1"}, "3146": {"fn": "MerkleResistor.initialize", "offset": [6593, 6630], "op": "DUP6", "path": "1"}, "3147": {"fn": "MerkleResistor.initialize", "offset": [6593, 6630], "op": "MSTORE", "path": "1"}, "3148": {"fn": "MerkleResistor.initialize", "offset": [6593, 6630], "op": "SWAP1", "path": "1"}, "3149": {"fn": "MerkleResistor.initialize", "offset": [6593, 6630], "op": "SWAP2", "path": "1"}, "3150": {"fn": "MerkleResistor.initialize", "offset": [6593, 6630], "op": "MSTORE", "path": "1"}, "3151": {"fn": "MerkleResistor.initialize", "offset": [6593, 6630], "op": "DUP3", "path": "1"}, "3152": {"fn": "MerkleResistor.initialize", "offset": [6593, 6630], "op": "KECCAK256", "path": "1"}, "3153": {"fn": "MerkleResistor.initialize", "offset": [6593, 6637], "op": "DUP1", "path": "1"}, "3154": {"fn": "MerkleResistor.initialize", "offset": [6593, 6637], "op": "SLOAD", "path": "1"}, "3155": {"op": "PUSH1", "value": "0xFF"}, "3157": {"op": "NOT"}, "3158": {"fn": "MerkleResistor.initialize", "offset": [6593, 6637], "op": "AND", "path": "1"}, "3159": {"fn": "MerkleResistor.initialize", "offset": [6593, 6637], "op": "SWAP1", "path": "1"}, "3160": {"fn": "MerkleResistor.initialize", "offset": [6593, 6637], "op": "SWAP2", "path": "1"}, "3161": {"fn": "MerkleResistor.initialize", "offset": [6593, 6637], "op": "OR", "path": "1"}, "3162": {"fn": "MerkleResistor.initialize", "offset": [6593, 6637], "op": "SWAP1", "path": "1"}, "3163": {"fn": "MerkleResistor.initialize", "offset": [6593, 6637], "op": "SSTORE", "path": "1"}, "3164": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "DUP1", "path": "1"}, "3165": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "DUP1", "path": "1"}, "3166": {"fn": "MerkleResistor.initialize", "offset": [6593, 6617], "op": "DUP1", "path": "1"}, "3167": {"fn": "MerkleResistor.initialize", "offset": [6717, 6800], "op": "PUSH2", "path": "1", "value": "0xC6A"}, "3170": {"fn": "MerkleResistor.initialize", "offset": [6618, 6629], "op": "DUP13", "path": "1"}, "3171": {"fn": "MerkleResistor.initialize", "offset": [6752, 6763], "op": "DUP12", "path": "1"}, "3172": {"fn": "MerkleResistor.initialize", "offset": [6765, 6781], "op": "DUP12", "path": "1"}, "3173": {"fn": "MerkleResistor.initialize", "offset": [6783, 6799], "op": "DUP12", "path": "1"}, "3174": {"fn": "MerkleResistor.initialize", "offset": [6717, 6738], "op": "PUSH2", "path": "1", "value": "0x53C"}, "3177": {"fn": "MerkleResistor.initialize", "jump": "i", "offset": [6717, 6800], "op": "JUMP", "path": "1"}, "3178": {"fn": "MerkleResistor.initialize", "offset": [6717, 6800], "op": "JUMPDEST", "path": "1"}, "3179": {"fn": "MerkleResistor.initialize", "offset": [6648, 6800], "op": "SWAP4", "path": "1"}, "3180": {"fn": "MerkleResistor.initialize", "offset": [6648, 6800], "op": "POP", "path": "1"}, "3181": {"fn": "MerkleResistor.initialize", "offset": [6648, 6800], "op": "SWAP4", "path": "1"}, "3182": {"fn": "MerkleResistor.initialize", "offset": [6648, 6800], "op": "POP", "path": "1"}, "3183": {"fn": "MerkleResistor.initialize", "offset": [6648, 6800], "op": "SWAP4", "path": "1"}, "3184": {"fn": "MerkleResistor.initialize", "offset": [6648, 6800], "op": "POP", "path": "1"}, "3185": {"fn": "MerkleResistor.initialize", "offset": [6648, 6800], "op": "SWAP4", "path": "1"}, "3186": {"fn": "MerkleResistor.initialize", "offset": [6648, 6800], "op": "POP", "path": "1"}, "3187": {"branch": 42, "fn": "MerkleResistor.initialize", "offset": [6818, 6823], "op": "DUP4", "path": "1", "statement": 26}, "3188": {"fn": "MerkleResistor.initialize", "offset": [6810, 6852], "op": "PUSH2", "path": "1", "value": "0xCBF"}, "3191": {"branch": 42, "fn": "MerkleResistor.initialize", "offset": [6810, 6852], "op": "JUMPI", "path": "1"}, "3192": {"fn": "MerkleResistor.initialize", "offset": [6810, 6852], "op": "PUSH1", "path": "1", "value": "0x40"}, "3194": {"fn": "MerkleResistor.initialize", "offset": [6810, 6852], "op": "MLOAD", "path": "1"}, "3195": {"op": "PUSH3", "value": "0x461BCD"}, "3199": {"op": "PUSH1", "value": "0xE5"}, "3201": {"op": "SHL"}, "3202": {"fn": "MerkleResistor.initialize", "offset": [6810, 6852], "op": "DUP2", "path": "1"}, "3203": {"fn": "MerkleResistor.initialize", "offset": [6810, 6852], "op": "MSTORE", "path": "1"}, "3204": {"op": "PUSH1", "value": "0x20"}, "3206": {"fn": "MerkleResistor.initialize", "offset": [6810, 6852], "op": "PUSH1", "path": "1", "value": "0x4"}, "3208": {"fn": "MerkleResistor.initialize", "offset": [6810, 6852], "op": "DUP3", "path": "1"}, "3209": {"fn": "MerkleResistor.initialize", "offset": [6810, 6852], "op": "ADD", "path": "1"}, "3210": {"op": "MSTORE"}, "3211": {"op": "PUSH1", "value": "0x18"}, "3213": {"op": "PUSH1", "value": "0x24"}, "3215": {"op": "DUP3"}, "3216": {"op": "ADD"}, "3217": {"op": "MSTORE"}, "3218": {"op": "PUSH32", "value": "0x496E76616C69642076657374696E67207363686564756C650000000000000000"}, "3251": {"op": "PUSH1", "value": "0x44"}, "3253": {"op": "DUP3"}, "3254": {"op": "ADD"}, "3255": {"op": "MSTORE"}, "3256": {"op": "PUSH1", "value": "0x64"}, "3258": {"op": "ADD"}, "3259": {"fn": "MerkleResistor.initialize", "offset": [6810, 6852], "op": "PUSH2", "path": "1", "value": "0x318"}, "3262": {"op": "JUMP"}, "3263": {"fn": "MerkleResistor.initialize", "offset": [6810, 6852], "op": "JUMPDEST", "path": "1"}, "3264": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "PUSH1", "path": "1", "statement": 27, "value": "0x40"}, "3266": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "MLOAD", "path": "1"}, "3267": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "DUP1", "path": "1"}, "3268": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "PUSH1", "path": "1", "value": "0xC0"}, "3270": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "ADD", "path": "1"}, "3271": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "PUSH1", "path": "1", "value": "0x40"}, "3273": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "MSTORE", "path": "1"}, "3274": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "DUP1", "path": "1"}, "3275": {"fn": "MerkleResistor.initialize", "offset": [7104, 7114], "op": "DUP5", "path": "1"}, "3276": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "DUP2", "path": "1"}, "3277": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "MSTORE", "path": "1"}, "3278": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "PUSH1", "path": "1", "value": "0x20"}, "3280": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "ADD", "path": "1"}, "3281": {"fn": "MerkleResistor.initialize", "offset": [7180, 7190], "op": "DUP5", "path": "1"}, "3282": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "DUP2", "path": "1"}, "3283": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "MSTORE", "path": "1"}, "3284": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "PUSH1", "path": "1", "value": "0x20"}, "3286": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "ADD", "path": "1"}, "3287": {"fn": "MerkleResistor.initialize", "offset": [7226, 7235], "op": "DUP3", "path": "1"}, "3288": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "DUP2", "path": "1"}, "3289": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "MSTORE", "path": "1"}, "3290": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "PUSH1", "path": "1", "value": "0x20"}, "3292": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "ADD", "path": "1"}, "3293": {"fn": "MerkleResistor.initialize", "offset": [7332, 7343], "op": "DUP12", "path": "1"}, "3294": {"fn": "MerkleResistor.initialize", "offset": [7314, 7329], "op": "TIMESTAMP", "path": "1"}, "3295": {"fn": "MerkleResistor.initialize", "offset": [7314, 7343], "op": "PUSH2", "path": "1", "value": "0xCE8"}, "3298": {"fn": "MerkleResistor.initialize", "offset": [7314, 7343], "op": "SWAP2", "path": "1"}, "3299": {"fn": "MerkleResistor.initialize", "offset": [7314, 7343], "op": "SWAP1", "path": "1"}, "3300": {"fn": "MerkleResistor.initialize", "offset": [7314, 7343], "op": "PUSH2", "path": "1", "value": "0x1062"}, "3303": {"fn": "MerkleResistor.initialize", "jump": "i", "offset": [7314, 7343], "op": "JUMP", "path": "1"}, "3304": {"fn": "MerkleResistor.initialize", "offset": [7314, 7343], "op": "JUMPDEST", "path": "1"}, "3305": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "DUP2", "path": "1"}, "3306": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "MSTORE", "path": "1"}, "3307": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "PUSH1", "path": "1", "value": "0x20"}, "3309": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "ADD", "path": "1"}, "3310": {"fn": "MerkleResistor.initialize", "offset": [7401, 7415], "op": "DUP4", "path": "1"}, "3311": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "DUP2", "path": "1"}, "3312": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "MSTORE", "path": "1"}, "3313": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "PUSH1", "path": "1", "value": "0x20"}, "3315": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "ADD", "path": "1"}, "3316": {"fn": "MerkleResistor.initialize", "offset": [7469, 7478], "op": "DUP3", "path": "1"}, "3317": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "DUP2", "path": "1"}, "3318": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "MSTORE", "path": "1"}, "3319": {"fn": "MerkleResistor.initialize", "offset": [7083, 7586], "op": "POP", "path": "1"}, "3320": {"fn": "MerkleResistor.initialize", "offset": [7046, 7054], "op": "PUSH1", "path": "1", "value": "0x3"}, "3322": {"fn": "MerkleResistor.initialize", "offset": [7046, 7067], "op": "PUSH1", "path": "1", "value": "0x0"}, "3324": {"fn": "MerkleResistor.initialize", "offset": [7055, 7066], "op": "DUP14", "path": "1"}, "3325": {"op": "PUSH1", "value": "0x1"}, "3327": {"op": "PUSH1", "value": "0x1"}, "3329": {"op": "PUSH1", "value": "0xA0"}, "3331": {"op": "SHL"}, "3332": {"op": "SUB"}, "3333": {"fn": "MerkleResistor.initialize", "offset": [7046, 7067], "op": "AND", "path": "1"}, "3334": {"op": "PUSH1", "value": "0x1"}, "3336": {"op": "PUSH1", "value": "0x1"}, "3338": {"op": "PUSH1", "value": "0xA0"}, "3340": {"op": "SHL"}, "3341": {"op": "SUB"}, "3342": {"fn": "MerkleResistor.initialize", "offset": [7046, 7067], "op": "AND", "path": "1"}, "3343": {"fn": "MerkleResistor.initialize", "offset": [7046, 7067], "op": "DUP2", "path": "1"}, "3344": {"fn": "MerkleResistor.initialize", "offset": [7046, 7067], "op": "MSTORE", "path": "1"}, "3345": {"fn": "MerkleResistor.initialize", "offset": [7046, 7067], "op": "PUSH1", "path": "1", "value": "0x20"}, "3347": {"fn": "MerkleResistor.initialize", "offset": [7046, 7067], "op": "ADD", "path": "1"}, "3348": {"fn": "MerkleResistor.initialize", "offset": [7046, 7067], "op": "SWAP1", "path": "1"}, "3349": {"fn": "MerkleResistor.initialize", "offset": [7046, 7067], "op": "DUP2", "path": "1"}, "3350": {"fn": "MerkleResistor.initialize", "offset": [7046, 7067], "op": "MSTORE", "path": "1"}, "3351": {"fn": "MerkleResistor.initialize", "offset": [7046, 7067], "op": "PUSH1", "path": "1", "value": "0x20"}, "3353": {"fn": "MerkleResistor.initialize", "offset": [7046, 7067], "op": "ADD", "path": "1"}, "3354": {"fn": "MerkleResistor.initialize", "offset": [7046, 7067], "op": "PUSH1", "path": "1", "value": "0x0"}, "3356": {"fn": "MerkleResistor.initialize", "offset": [7046, 7067], "op": "KECCAK256", "path": "1"}, "3357": {"fn": "MerkleResistor.initialize", "offset": [7046, 7080], "op": "PUSH1", "path": "1", "value": "0x0"}, "3359": {"fn": "MerkleResistor.initialize", "offset": [7068, 7079], "op": "DUP15", "path": "1"}, "3360": {"fn": "MerkleResistor.initialize", "offset": [7046, 7080], "op": "DUP2", "path": "1"}, "3361": {"fn": "MerkleResistor.initialize", "offset": [7046, 7080], "op": "MSTORE", "path": "1"}, "3362": {"fn": "MerkleResistor.initialize", "offset": [7046, 7080], "op": "PUSH1", "path": "1", "value": "0x20"}, "3364": {"fn": "MerkleResistor.initialize", "offset": [7046, 7080], "op": "ADD", "path": "1"}, "3365": {"fn": "MerkleResistor.initialize", "offset": [7046, 7080], "op": "SWAP1", "path": "1"}, "3366": {"fn": "MerkleResistor.initialize", "offset": [7046, 7080], "op": "DUP2", "path": "1"}, "3367": {"fn": "MerkleResistor.initialize", "offset": [7046, 7080], "op": "MSTORE", "path": "1"}, "3368": {"fn": "MerkleResistor.initialize", "offset": [7046, 7080], "op": "PUSH1", "path": "1", "value": "0x20"}, "3370": {"fn": "MerkleResistor.initialize", "offset": [7046, 7080], "op": "ADD", "path": "1"}, "3371": {"fn": "MerkleResistor.initialize", "offset": [7046, 7080], "op": "PUSH1", "path": "1", "value": "0x0"}, "3373": {"fn": "MerkleResistor.initialize", "offset": [7046, 7080], "op": "KECCAK256", "path": "1"}, "3374": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "PUSH1", "path": "1", "value": "0x0"}, "3376": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "DUP3", "path": "1"}, "3377": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "ADD", "path": "1"}, "3378": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "MLOAD", "path": "1"}, "3379": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "DUP2", "path": "1"}, "3380": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "PUSH1", "path": "1", "value": "0x0"}, "3382": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "ADD", "path": "1"}, "3383": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "SSTORE", "path": "1"}, "3384": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "PUSH1", "path": "1", "value": "0x20"}, "3386": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "DUP3", "path": "1"}, "3387": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "ADD", "path": "1"}, "3388": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "MLOAD", "path": "1"}, "3389": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "DUP2", "path": "1"}, "3390": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "PUSH1", "path": "1", "value": "0x1"}, "3392": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "ADD", "path": "1"}, "3393": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "SSTORE", "path": "1"}, "3394": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "PUSH1", "path": "1", "value": "0x40"}, "3396": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "DUP3", "path": "1"}, "3397": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "ADD", "path": "1"}, "3398": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "MLOAD", "path": "1"}, "3399": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "DUP2", "path": "1"}, "3400": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "PUSH1", "path": "1", "value": "0x2"}, "3402": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "ADD", "path": "1"}, "3403": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "SSTORE", "path": "1"}, "3404": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "PUSH1", "path": "1", "value": "0x60"}, "3406": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "DUP3", "path": "1"}, "3407": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "ADD", "path": "1"}, "3408": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "MLOAD", "path": "1"}, "3409": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "DUP2", "path": "1"}, "3410": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "PUSH1", "path": "1", "value": "0x3"}, "3412": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "ADD", "path": "1"}, "3413": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "SSTORE", "path": "1"}, "3414": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "PUSH1", "path": "1", "value": "0x80"}, "3416": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "DUP3", "path": "1"}, "3417": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "ADD", "path": "1"}, "3418": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "MLOAD", "path": "1"}, "3419": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "DUP2", "path": "1"}, "3420": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "PUSH1", "path": "1", "value": "0x4"}, "3422": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "ADD", "path": "1"}, "3423": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "SSTORE", "path": "1"}, "3424": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "PUSH1", "path": "1", "value": "0xA0"}, "3426": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "DUP3", "path": "1"}, "3427": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "ADD", "path": "1"}, "3428": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "MLOAD", "path": "1"}, "3429": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "DUP2", "path": "1"}, "3430": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "PUSH1", "path": "1", "value": "0x5"}, "3432": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "ADD", "path": "1"}, "3433": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "SSTORE", "path": "1"}, "3434": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "SWAP1", "path": "1"}, "3435": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "POP", "path": "1"}, "3436": {"fn": "MerkleResistor.initialize", "offset": [7046, 7586], "op": "POP", "path": "1"}, "3437": {"fn": "MerkleResistor.initialize", "offset": [7596, 7630], "op": "PUSH2", "path": "1", "statement": 28, "value": "0xD76"}, "3440": {"fn": "MerkleResistor.initialize", "offset": [7605, 7616], "op": "DUP13", "path": "1"}, "3441": {"fn": "MerkleResistor.initialize", "offset": [7618, 7629], "op": "DUP13", "path": "1"}, "3442": {"fn": "MerkleResistor.initialize", "offset": [7596, 7604], "op": "PUSH2", "path": "1", "value": "0x299"}, "3445": {"fn": "MerkleResistor.initialize", "jump": "i", "offset": [7596, 7630], "op": "JUMP", "path": "1"}, "3446": {"fn": "MerkleResistor.initialize", "offset": [7596, 7630], "op": "JUMPDEST", "path": "1"}, "3447": {"fn": "MerkleResistor.initialize", "offset": [5807, 7637], "op": "POP", "path": "1"}, "3448": {"fn": "MerkleResistor.initialize", "offset": [5807, 7637], "op": "POP", "path": "1"}, "3449": {"fn": "MerkleResistor.initialize", "offset": [5807, 7637], "op": "POP", "path": "1"}, "3450": {"fn": "MerkleResistor.initialize", "offset": [5807, 7637], "op": "POP", "path": "1"}, "3451": {"fn": "MerkleResistor.initialize", "offset": [5807, 7637], "op": "POP", "path": "1"}, "3452": {"fn": "MerkleResistor.initialize", "offset": [5807, 7637], "op": "POP", "path": "1"}, "3453": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "POP", "path": "1"}, "3454": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "POP", "path": "1"}, "3455": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "POP", "path": "1"}, "3456": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "POP", "path": "1"}, "3457": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "POP", "path": "1"}, "3458": {"fn": "MerkleResistor.initialize", "offset": [5651, 7637], "op": "POP", "path": "1"}, "3459": {"fn": "MerkleResistor.initialize", "jump": "o", "offset": [5651, 7637], "op": "JUMP", "path": "1"}, "3460": {"op": "JUMPDEST"}, "3461": {"op": "DUP1"}, "3462": {"op": "CALLDATALOAD"}, "3463": {"op": "PUSH1", "value": "0x1"}, "3465": {"op": "PUSH1", "value": "0x1"}, "3467": {"op": "PUSH1", "value": "0xA0"}, "3469": {"op": "SHL"}, "3470": {"op": "SUB"}, "3471": {"op": "DUP2"}, "3472": {"op": "AND"}, "3473": {"op": "DUP2"}, "3474": {"op": "EQ"}, "3475": {"op": "PUSH2", "value": "0xD9B"}, "3478": {"op": "JUMPI"}, "3479": {"op": "PUSH1", "value": "0x0"}, "3481": {"op": "DUP1"}, "3482": {"op": "REVERT"}, "3483": {"op": "JUMPDEST"}, "3484": {"op": "SWAP2"}, "3485": {"op": "SWAP1"}, "3486": {"op": "POP"}, "3487": {"jump": "o", "op": "JUMP"}, "3488": {"op": "JUMPDEST"}, "3489": {"op": "PUSH1", "value": "0x0"}, "3491": {"op": "DUP1"}, "3492": {"op": "PUSH1", "value": "0x40"}, "3494": {"op": "DUP4"}, "3495": {"op": "DUP6"}, "3496": {"op": "SUB"}, "3497": {"op": "SLT"}, "3498": {"op": "ISZERO"}, "3499": {"op": "PUSH2", "value": "0xDB3"}, "3502": {"op": "JUMPI"}, "3503": {"op": "PUSH1", "value": "0x0"}, "3505": {"op": "DUP1"}, "3506": {"op": "REVERT"}, "3507": {"op": "JUMPDEST"}, "3508": {"op": "DUP3"}, "3509": {"op": "CALLDATALOAD"}, "3510": {"op": "SWAP2"}, "3511": {"op": "POP"}, "3512": {"op": "PUSH2", "value": "0xDC3"}, "3515": {"op": "PUSH1", "value": "0x20"}, "3517": {"op": "DUP5"}, "3518": {"op": "ADD"}, "3519": {"op": "PUSH2", "value": "0xD84"}, "3522": {"jump": "i", "op": "JUMP"}, "3523": {"op": "JUMPDEST"}, "3524": {"op": "SWAP1"}, "3525": {"op": "POP"}, "3526": {"op": "SWAP3"}, "3527": {"op": "POP"}, "3528": {"op": "SWAP3"}, "3529": {"op": "SWAP1"}, "3530": {"op": "POP"}, "3531": {"jump": "o", "op": "JUMP"}, "3532": {"op": "JUMPDEST"}, "3533": {"op": "PUSH1", "value": "0x0"}, "3535": {"op": "DUP1"}, "3536": {"op": "PUSH1", "value": "0x0"}, "3538": {"op": "DUP1"}, "3539": {"op": "PUSH1", "value": "0x80"}, "3541": {"op": "DUP6"}, "3542": {"op": "DUP8"}, "3543": {"op": "SUB"}, "3544": {"op": "SLT"}, "3545": {"op": "ISZERO"}, "3546": {"op": "PUSH2", "value": "0xDE2"}, "3549": {"op": "JUMPI"}, "3550": {"op": "PUSH1", "value": "0x0"}, "3552": {"op": "DUP1"}, "3553": {"op": "REVERT"}, "3554": {"op": "JUMPDEST"}, "3555": {"op": "POP"}, "3556": {"op": "POP"}, "3557": {"op": "DUP3"}, "3558": {"op": "CALLDATALOAD"}, "3559": {"op": "SWAP5"}, "3560": {"op": "PUSH1", "value": "0x20"}, "3562": {"op": "DUP5"}, "3563": {"op": "ADD"}, "3564": {"op": "CALLDATALOAD"}, "3565": {"op": "SWAP5"}, "3566": {"op": "POP"}, "3567": {"op": "PUSH1", "value": "0x40"}, "3569": {"op": "DUP5"}, "3570": {"op": "ADD"}, "3571": {"op": "CALLDATALOAD"}, "3572": {"op": "SWAP4"}, "3573": {"op": "PUSH1", "value": "0x60"}, "3575": {"op": "ADD"}, "3576": {"op": "CALLDATALOAD"}, "3577": {"op": "SWAP3"}, "3578": {"op": "POP"}, "3579": {"op": "SWAP1"}, "3580": {"op": "POP"}, "3581": {"jump": "o", "op": "JUMP"}, "3582": {"op": "JUMPDEST"}, "3583": {"op": "PUSH1", "value": "0x0"}, "3585": {"op": "PUSH1", "value": "0x20"}, "3587": {"op": "DUP3"}, "3588": {"op": "DUP5"}, "3589": {"op": "SUB"}, "3590": {"op": "SLT"}, "3591": {"op": "ISZERO"}, "3592": {"op": "PUSH2", "value": "0xE10"}, "3595": {"op": "JUMPI"}, "3596": {"op": "PUSH1", "value": "0x0"}, "3598": {"op": "DUP1"}, "3599": {"op": "REVERT"}, "3600": {"op": "JUMPDEST"}, "3601": {"op": "POP"}, "3602": {"op": "CALLDATALOAD"}, "3603": {"op": "SWAP2"}, "3604": {"op": "SWAP1"}, "3605": {"op": "POP"}, "3606": {"jump": "o", "op": "JUMP"}, "3607": {"op": "JUMPDEST"}, "3608": {"op": "PUSH1", "value": "0x0"}, "3610": {"op": "DUP1"}, "3611": {"op": "PUSH1", "value": "0x40"}, "3613": {"op": "DUP4"}, "3614": {"op": "DUP6"}, "3615": {"op": "SUB"}, "3616": {"op": "SLT"}, "3617": {"op": "ISZERO"}, "3618": {"op": "PUSH2", "value": "0xE2A"}, "3621": {"op": "JUMPI"}, "3622": {"op": "PUSH1", "value": "0x0"}, "3624": {"op": "DUP1"}, "3625": {"op": "REVERT"}, "3626": {"op": "JUMPDEST"}, "3627": {"op": "PUSH2", "value": "0xE33"}, "3630": {"op": "DUP4"}, "3631": {"op": "PUSH2", "value": "0xD84"}, "3634": {"jump": "i", "op": "JUMP"}, "3635": {"op": "JUMPDEST"}, "3636": {"op": "SWAP5"}, "3637": {"op": "PUSH1", "value": "0x20"}, "3639": {"op": "SWAP4"}, "3640": {"op": "SWAP1"}, "3641": {"op": "SWAP4"}, "3642": {"op": "ADD"}, "3643": {"op": "CALLDATALOAD"}, "3644": {"op": "SWAP4"}, "3645": {"op": "POP"}, "3646": {"op": "POP"}, "3647": {"op": "POP"}, "3648": {"jump": "o", "op": "JUMP"}, "3649": {"op": "JUMPDEST"}, "3650": {"op": "PUSH1", "value": "0x0"}, "3652": {"op": "DUP1"}, "3653": {"op": "PUSH1", "value": "0x0"}, "3655": {"op": "DUP1"}, "3656": {"op": "PUSH1", "value": "0x0"}, "3658": {"op": "DUP1"}, "3659": {"op": "PUSH1", "value": "0x0"}, "3661": {"op": "PUSH1", "value": "0xE0"}, "3663": {"op": "DUP9"}, "3664": {"op": "DUP11"}, "3665": {"op": "SUB"}, "3666": {"op": "SLT"}, "3667": {"op": "ISZERO"}, "3668": {"op": "PUSH2", "value": "0xE5C"}, "3671": {"op": "JUMPI"}, "3672": {"op": "PUSH1", "value": "0x0"}, "3674": {"op": "DUP1"}, "3675": {"op": "REVERT"}, "3676": {"op": "JUMPDEST"}, "3677": {"op": "DUP8"}, "3678": {"op": "CALLDATALOAD"}, "3679": {"op": "SWAP7"}, "3680": {"op": "POP"}, "3681": {"op": "PUSH1", "value": "0x20"}, "3683": {"op": "DUP9"}, "3684": {"op": "ADD"}, "3685": {"op": "CALLDATALOAD"}, "3686": {"op": "SWAP6"}, "3687": {"op": "POP"}, "3688": {"op": "PUSH1", "value": "0x40"}, "3690": {"op": "DUP9"}, "3691": {"op": "ADD"}, "3692": {"op": "CALLDATALOAD"}, "3693": {"op": "SWAP5"}, "3694": {"op": "POP"}, "3695": {"op": "PUSH1", "value": "0x60"}, "3697": {"op": "DUP9"}, "3698": {"op": "ADD"}, "3699": {"op": "CALLDATALOAD"}, "3700": {"op": "SWAP4"}, "3701": {"op": "POP"}, "3702": {"op": "PUSH1", "value": "0x80"}, "3704": {"op": "DUP9"}, "3705": {"op": "ADD"}, "3706": {"op": "CALLDATALOAD"}, "3707": {"op": "SWAP3"}, "3708": {"op": "POP"}, "3709": {"op": "PUSH2", "value": "0xE88"}, "3712": {"op": "PUSH1", "value": "0xA0"}, "3714": {"op": "DUP10"}, "3715": {"op": "ADD"}, "3716": {"op": "PUSH2", "value": "0xD84"}, "3719": {"jump": "i", "op": "JUMP"}, "3720": {"op": "JUMPDEST"}, "3721": {"op": "SWAP2"}, "3722": {"op": "POP"}, "3723": {"op": "PUSH1", "value": "0xC0"}, "3725": {"op": "DUP9"}, "3726": {"op": "ADD"}, "3727": {"op": "CALLDATALOAD"}, "3728": {"op": "SWAP1"}, "3729": {"op": "POP"}, "3730": {"op": "SWAP3"}, "3731": {"op": "SWAP6"}, "3732": {"op": "SWAP9"}, "3733": {"op": "SWAP2"}, "3734": {"op": "SWAP5"}, "3735": {"op": "SWAP8"}, "3736": {"op": "POP"}, "3737": {"op": "SWAP3"}, "3738": {"op": "SWAP6"}, "3739": {"op": "POP"}, "3740": {"jump": "o", "op": "JUMP"}, "3741": {"op": "JUMPDEST"}, "3742": {"op": "PUSH1", "value": "0x0"}, "3744": {"op": "DUP1"}, "3745": {"op": "PUSH1", "value": "0x40"}, "3747": {"op": "DUP4"}, "3748": {"op": "DUP6"}, "3749": {"op": "SUB"}, "3750": {"op": "SLT"}, "3751": {"op": "ISZERO"}, "3752": {"op": "PUSH2", "value": "0xEB0"}, "3755": {"op": "JUMPI"}, "3756": {"op": "PUSH1", "value": "0x0"}, "3758": {"op": "DUP1"}, "3759": {"op": "REVERT"}, "3760": {"op": "JUMPDEST"}, "3761": {"op": "POP"}, "3762": {"op": "POP"}, "3763": {"op": "DUP1"}, "3764": {"op": "CALLDATALOAD"}, "3765": {"op": "SWAP3"}, "3766": {"op": "PUSH1", "value": "0x20"}, "3768": {"op": "SWAP1"}, "3769": {"op": "SWAP2"}, "3770": {"op": "ADD"}, "3771": {"op": "CALLDATALOAD"}, "3772": {"op": "SWAP2"}, "3773": {"op": "POP"}, "3774": {"jump": "o", "op": "JUMP"}, "3775": {"op": "JUMPDEST"}, "3776": {"op": "PUSH4", "value": "0x4E487B71"}, "3781": {"op": "PUSH1", "value": "0xE0"}, "3783": {"op": "SHL"}, "3784": {"op": "PUSH1", "value": "0x0"}, "3786": {"op": "MSTORE"}, "3787": {"op": "PUSH1", "value": "0x41"}, "3789": {"op": "PUSH1", "value": "0x4"}, "3791": {"op": "MSTORE"}, "3792": {"op": "PUSH1", "value": "0x24"}, "3794": {"op": "PUSH1", "value": "0x0"}, "3796": {"op": "REVERT"}, "3797": {"op": "JUMPDEST"}, "3798": {"op": "PUSH1", "value": "0x0"}, "3800": {"op": "DUP1"}, "3801": {"op": "PUSH1", "value": "0x0"}, "3803": {"op": "DUP1"}, "3804": {"op": "PUSH1", "value": "0x0"}, "3806": {"op": "DUP1"}, "3807": {"op": "PUSH1", "value": "0xC0"}, "3809": {"op": "DUP8"}, "3810": {"op": "DUP10"}, "3811": {"op": "SUB"}, "3812": {"op": "SLT"}, "3813": {"op": "ISZERO"}, "3814": {"op": "PUSH2", "value": "0xEEE"}, "3817": {"op": "JUMPI"}, "3818": {"op": "PUSH1", "value": "0x0"}, "3820": {"op": "DUP1"}, "3821": {"op": "REVERT"}, "3822": {"op": "JUMPDEST"}, "3823": {"op": "DUP7"}, "3824": {"op": "CALLDATALOAD"}, "3825": {"op": "SWAP6"}, "3826": {"op": "POP"}, "3827": {"op": "PUSH1", "value": "0x20"}, "3829": {"op": "PUSH2", "value": "0xEFF"}, "3832": {"op": "DUP2"}, "3833": {"op": "DUP10"}, "3834": {"op": "ADD"}, "3835": {"op": "PUSH2", "value": "0xD84"}, "3838": {"jump": "i", "op": "JUMP"}, "3839": {"op": "JUMPDEST"}, "3840": {"op": "SWAP6"}, "3841": {"op": "POP"}, "3842": {"op": "PUSH1", "value": "0x40"}, "3844": {"op": "DUP9"}, "3845": {"op": "ADD"}, "3846": {"op": "CALLDATALOAD"}, "3847": {"op": "SWAP5"}, "3848": {"op": "POP"}, "3849": {"op": "PUSH1", "value": "0x60"}, "3851": {"op": "DUP9"}, "3852": {"op": "ADD"}, "3853": {"op": "CALLDATALOAD"}, "3854": {"op": "SWAP4"}, "3855": {"op": "POP"}, "3856": {"op": "PUSH1", "value": "0x80"}, "3858": {"op": "DUP9"}, "3859": {"op": "ADD"}, "3860": {"op": "CALLDATALOAD"}, "3861": {"op": "SWAP3"}, "3862": {"op": "POP"}, "3863": {"op": "PUSH1", "value": "0xA0"}, "3865": {"op": "DUP9"}, "3866": {"op": "ADD"}, "3867": {"op": "CALLDATALOAD"}, "3868": {"op": "PUSH8", "value": "0xFFFFFFFFFFFFFFFF"}, "3877": {"op": "DUP1"}, "3878": {"op": "DUP3"}, "3879": {"op": "GT"}, "3880": {"op": "ISZERO"}, "3881": {"op": "PUSH2", "value": "0xF31"}, "3884": {"op": "JUMPI"}, "3885": {"op": "PUSH1", "value": "0x0"}, "3887": {"op": "DUP1"}, "3888": {"op": "REVERT"}, "3889": {"op": "JUMPDEST"}, "3890": {"op": "DUP2"}, "3891": {"op": "DUP11"}, "3892": {"op": "ADD"}, "3893": {"op": "SWAP2"}, "3894": {"op": "POP"}, "3895": {"op": "DUP11"}, "3896": {"op": "PUSH1", "value": "0x1F"}, "3898": {"op": "DUP4"}, "3899": {"op": "ADD"}, "3900": {"op": "SLT"}, "3901": {"op": "PUSH2", "value": "0xF45"}, "3904": {"op": "JUMPI"}, "3905": {"op": "PUSH1", "value": "0x0"}, "3907": {"op": "DUP1"}, "3908": {"op": "REVERT"}, "3909": {"op": "JUMPDEST"}, "3910": {"op": "DUP2"}, "3911": {"op": "CALLDATALOAD"}, "3912": {"op": "DUP2"}, "3913": {"op": "DUP2"}, "3914": {"op": "GT"}, "3915": {"op": "ISZERO"}, "3916": {"op": "PUSH2", "value": "0xF57"}, "3919": {"op": "JUMPI"}, "3920": {"op": "PUSH2", "value": "0xF57"}, "3923": {"op": "PUSH2", "value": "0xEBF"}, "3926": {"jump": "i", "op": "JUMP"}, "3927": {"op": "JUMPDEST"}, "3928": {"op": "DUP1"}, "3929": {"op": "PUSH1", "value": "0x5"}, "3931": {"op": "SHL"}, "3932": {"op": "PUSH1", "value": "0x40"}, "3934": {"op": "MLOAD"}, "3935": {"op": "PUSH1", "value": "0x1F"}, "3937": {"op": "NOT"}, "3938": {"op": "PUSH1", "value": "0x3F"}, "3940": {"op": "DUP4"}, "3941": {"op": "ADD"}, "3942": {"op": "AND"}, "3943": {"op": "DUP2"}, "3944": {"op": "ADD"}, "3945": {"op": "DUP2"}, "3946": {"op": "DUP2"}, "3947": {"op": "LT"}, "3948": {"op": "DUP6"}, "3949": {"op": "DUP3"}, "3950": {"op": "GT"}, "3951": {"op": "OR"}, "3952": {"op": "ISZERO"}, "3953": {"op": "PUSH2", "value": "0xF7C"}, "3956": {"op": "JUMPI"}, "3957": {"op": "PUSH2", "value": "0xF7C"}, "3960": {"op": "PUSH2", "value": "0xEBF"}, "3963": {"jump": "i", "op": "JUMP"}, "3964": {"op": "JUMPDEST"}, "3965": {"op": "PUSH1", "value": "0x40"}, "3967": {"op": "MSTORE"}, "3968": {"op": "SWAP2"}, "3969": {"op": "DUP3"}, "3970": {"op": "MSTORE"}, "3971": {"op": "DUP5"}, "3972": {"op": "DUP3"}, "3973": {"op": "ADD"}, "3974": {"op": "SWAP3"}, "3975": {"op": "POP"}, "3976": {"op": "DUP4"}, "3977": {"op": "DUP2"}, "3978": {"op": "ADD"}, "3979": {"op": "DUP6"}, "3980": {"op": "ADD"}, "3981": {"op": "SWAP2"}, "3982": {"op": "DUP14"}, "3983": {"op": "DUP4"}, "3984": {"op": "GT"}, "3985": {"op": "ISZERO"}, "3986": {"op": "PUSH2", "value": "0xF9A"}, "3989": {"op": "JUMPI"}, "3990": {"op": "PUSH1", "value": "0x0"}, "3992": {"op": "DUP1"}, "3993": {"op": "REVERT"}, "3994": {"op": "JUMPDEST"}, "3995": {"op": "SWAP4"}, "3996": {"op": "DUP6"}, "3997": {"op": "ADD"}, "3998": {"op": "SWAP4"}, "3999": {"op": "JUMPDEST"}, "4000": {"op": "DUP3"}, "4001": {"op": "DUP6"}, "4002": {"op": "LT"}, "4003": {"op": "ISZERO"}, "4004": {"op": "PUSH2", "value": "0xFB8"}, "4007": {"op": "JUMPI"}, "4008": {"op": "DUP5"}, "4009": {"op": "CALLDATALOAD"}, "4010": {"op": "DUP5"}, "4011": {"op": "MSTORE"}, "4012": {"op": "SWAP4"}, "4013": {"op": "DUP6"}, "4014": {"op": "ADD"}, "4015": {"op": "SWAP4"}, "4016": {"op": "SWAP3"}, "4017": {"op": "DUP6"}, "4018": {"op": "ADD"}, "4019": {"op": "SWAP3"}, "4020": {"op": "PUSH2", "value": "0xF9F"}, "4023": {"op": "JUMP"}, "4024": {"op": "JUMPDEST"}, "4025": {"op": "DUP1"}, "4026": {"op": "SWAP7"}, "4027": {"op": "POP"}, "4028": {"op": "POP"}, "4029": {"op": "POP"}, "4030": {"op": "POP"}, "4031": {"op": "POP"}, "4032": {"op": "POP"}, "4033": {"op": "POP"}, "4034": {"op": "SWAP3"}, "4035": {"op": "SWAP6"}, "4036": {"op": "POP"}, "4037": {"op": "SWAP3"}, "4038": {"op": "SWAP6"}, "4039": {"op": "POP"}, "4040": {"op": "SWAP3"}, "4041": {"op": "SWAP6"}, "4042": {"jump": "o", "op": "JUMP"}, "4043": {"op": "JUMPDEST"}, "4044": {"op": "PUSH4", "value": "0x4E487B71"}, "4049": {"op": "PUSH1", "value": "0xE0"}, "4051": {"op": "SHL"}, "4052": {"op": "PUSH1", "value": "0x0"}, "4054": {"op": "MSTORE"}, "4055": {"op": "PUSH1", "value": "0x11"}, "4057": {"op": "PUSH1", "value": "0x4"}, "4059": {"op": "MSTORE"}, "4060": {"op": "PUSH1", "value": "0x24"}, "4062": {"op": "PUSH1", "value": "0x0"}, "4064": {"op": "REVERT"}, "4065": {"op": "JUMPDEST"}, "4066": {"op": "PUSH1", "value": "0x0"}, "4068": {"op": "DUP3"}, "4069": {"op": "DUP3"}, "4070": {"op": "LT"}, "4071": {"op": "ISZERO"}, "4072": {"op": "PUSH2", "value": "0xFF3"}, "4075": {"op": "JUMPI"}, "4076": {"op": "PUSH2", "value": "0xFF3"}, "4079": {"op": "PUSH2", "value": "0xFCB"}, "4082": {"jump": "i", "op": "JUMP"}, "4083": {"op": "JUMPDEST"}, "4084": {"op": "POP"}, "4085": {"op": "SUB"}, "4086": {"op": "SWAP1"}, "4087": {"jump": "o", "op": "JUMP"}, "4088": {"op": "JUMPDEST"}, "4089": {"op": "PUSH1", "value": "0x0"}, "4091": {"op": "DUP2"}, "4092": {"op": "PUSH1", "value": "0x0"}, "4094": {"op": "NOT"}, "4095": {"op": "DIV"}, "4096": {"op": "DUP4"}, "4097": {"op": "GT"}, "4098": {"op": "DUP3"}, "4099": {"op": "ISZERO"}, "4100": {"op": "ISZERO"}, "4101": {"op": "AND"}, "4102": {"op": "ISZERO"}, "4103": {"op": "PUSH2", "value": "0x1012"}, "4106": {"op": "JUMPI"}, "4107": {"op": "PUSH2", "value": "0x1012"}, "4110": {"op": "PUSH2", "value": "0xFCB"}, "4113": {"jump": "i", "op": "JUMP"}, "4114": {"op": "JUMPDEST"}, "4115": {"op": "POP"}, "4116": {"op": "MUL"}, "4117": {"op": "SWAP1"}, "4118": {"jump": "o", "op": "JUMP"}, "4119": {"op": "JUMPDEST"}, "4120": {"op": "PUSH1", "value": "0x0"}, "4122": {"op": "PUSH1", "value": "0x20"}, "4124": {"op": "DUP3"}, "4125": {"op": "DUP5"}, "4126": {"op": "SUB"}, "4127": {"op": "SLT"}, "4128": {"op": "ISZERO"}, "4129": {"op": "PUSH2", "value": "0x1029"}, "4132": {"op": "JUMPI"}, "4133": {"op": "PUSH1", "value": "0x0"}, "4135": {"op": "DUP1"}, "4136": {"op": "REVERT"}, "4137": {"op": "JUMPDEST"}, "4138": {"op": "DUP2"}, "4139": {"op": "MLOAD"}, "4140": {"op": "DUP1"}, "4141": {"op": "ISZERO"}, "4142": {"op": "ISZERO"}, "4143": {"op": "DUP2"}, "4144": {"op": "EQ"}, "4145": {"op": "PUSH2", "value": "0x1039"}, "4148": {"op": "JUMPI"}, "4149": {"op": "PUSH1", "value": "0x0"}, "4151": {"op": "DUP1"}, "4152": {"op": "REVERT"}, "4153": {"op": "JUMPDEST"}, "4154": {"op": "SWAP4"}, "4155": {"op": "SWAP3"}, "4156": {"op": "POP"}, "4157": {"op": "POP"}, "4158": {"op": "POP"}, "4159": {"jump": "o", "op": "JUMP"}, "4160": {"op": "JUMPDEST"}, "4161": {"op": "PUSH1", "value": "0x0"}, "4163": {"op": "DUP3"}, "4164": {"op": "PUSH2", "value": "0x105D"}, "4167": {"op": "JUMPI"}, "4168": {"op": "PUSH4", "value": "0x4E487B71"}, "4173": {"op": "PUSH1", "value": "0xE0"}, "4175": {"op": "SHL"}, "4176": {"op": "PUSH1", "value": "0x0"}, "4178": {"op": "MSTORE"}, "4179": {"op": "PUSH1", "value": "0x12"}, "4181": {"op": "PUSH1", "value": "0x4"}, "4183": {"op": "MSTORE"}, "4184": {"op": "PUSH1", "value": "0x24"}, "4186": {"op": "PUSH1", "value": "0x0"}, "4188": {"op": "REVERT"}, "4189": {"op": "JUMPDEST"}, "4190": {"op": "POP"}, "4191": {"op": "DIV"}, "4192": {"op": "SWAP1"}, "4193": {"jump": "o", "op": "JUMP"}, "4194": {"op": "JUMPDEST"}, "4195": {"op": "PUSH1", "value": "0x0"}, "4197": {"op": "DUP3"}, "4198": {"op": "NOT"}, "4199": {"op": "DUP3"}, "4200": {"op": "GT"}, "4201": {"op": "ISZERO"}, "4202": {"op": "PUSH2", "value": "0x1075"}, "4205": {"op": "JUMPI"}, "4206": {"op": "PUSH2", "value": "0x1075"}, "4209": {"op": "PUSH2", "value": "0xFCB"}, "4212": {"jump": "i", "op": "JUMP"}, "4213": {"op": "JUMPDEST"}, "4214": {"op": "POP"}, "4215": {"op": "ADD"}, "4216": {"op": "SWAP1"}, "4217": {"jump": "o", "op": "JUMP"}, "4218": {"op": "JUMPDEST"}, "4219": {"op": "PUSH1", "value": "0x0"}, "4221": {"op": "PUSH1", "value": "0x0"}, "4223": {"op": "NOT"}, "4224": {"op": "DUP3"}, "4225": {"op": "EQ"}, "4226": {"op": "ISZERO"}, "4227": {"op": "PUSH2", "value": "0x108E"}, "4230": {"op": "JUMPI"}, "4231": {"op": "PUSH2", "value": "0x108E"}, "4234": {"op": "PUSH2", "value": "0xFCB"}, "4237": {"jump": "i", "op": "JUMP"}, "4238": {"op": "JUMPDEST"}, "4239": {"op": "POP"}, "4240": {"op": "PUSH1", "value": "0x1"}, "4242": {"op": "ADD"}, "4243": {"op": "SWAP1"}, "4244": {"jump": "o", "op": "JUMP"}, "4245": {"op": "JUMPDEST"}, "4246": {"op": "PUSH1", "value": "0x0"}, "4248": {"op": "PUSH1", "value": "0x60"}, "4250": {"op": "DUP3"}, "4251": {"op": "ADD"}, "4252": {"op": "DUP6"}, "4253": {"op": "DUP4"}, "4254": {"op": "MSTORE"}, "4255": {"op": "PUSH1", "value": "0x20"}, "4257": {"op": "DUP6"}, "4258": {"op": "DUP2"}, "4259": {"op": "DUP6"}, "4260": {"op": "ADD"}, "4261": {"op": "MSTORE"}, "4262": {"op": "PUSH1", "value": "0x60"}, "4264": {"op": "PUSH1", "value": "0x40"}, "4266": {"op": "DUP6"}, "4267": {"op": "ADD"}, "4268": {"op": "MSTORE"}, "4269": {"op": "DUP2"}, "4270": {"op": "DUP6"}, "4271": {"op": "MLOAD"}, "4272": {"op": "DUP1"}, "4273": {"op": "DUP5"}, "4274": {"op": "MSTORE"}, "4275": {"op": "PUSH1", "value": "0x80"}, "4277": {"op": "DUP7"}, "4278": {"op": "ADD"}, "4279": {"op": "SWAP2"}, "4280": {"op": "POP"}, "4281": {"op": "DUP3"}, "4282": {"op": "DUP8"}, "4283": {"op": "ADD"}, "4284": {"op": "SWAP4"}, "4285": {"op": "POP"}, "4286": {"op": "PUSH1", "value": "0x0"}, "4288": {"op": "JUMPDEST"}, "4289": {"op": "DUP2"}, "4290": {"op": "DUP2"}, "4291": {"op": "LT"}, "4292": {"op": "ISZERO"}, "4293": {"op": "PUSH2", "value": "0x10DC"}, "4296": {"op": "JUMPI"}, "4297": {"op": "DUP5"}, "4298": {"op": "MLOAD"}, "4299": {"op": "DUP4"}, "4300": {"op": "MSTORE"}, "4301": {"op": "SWAP4"}, "4302": {"op": "DUP4"}, "4303": {"op": "ADD"}, "4304": {"op": "SWAP4"}, "4305": {"op": "SWAP2"}, "4306": {"op": "DUP4"}, "4307": {"op": "ADD"}, "4308": {"op": "SWAP2"}, "4309": {"op": "PUSH1", "value": "0x1"}, "4311": {"op": "ADD"}, "4312": {"op": "PUSH2", "value": "0x10C0"}, "4315": {"op": "JUMP"}, "4316": {"op": "JUMPDEST"}, "4317": {"op": "POP"}, "4318": {"op": "SWAP1"}, "4319": {"op": "SWAP9"}, "4320": {"op": "SWAP8"}, "4321": {"op": "POP"}, "4322": {"op": "POP"}, "4323": {"op": "POP"}, "4324": {"op": "POP"}, "4325": {"op": "POP"}, "4326": {"op": "POP"}, "4327": {"op": "POP"}, "4328": {"op": "POP"}, "4329": {"jump": "o", "op": "JUMP"}}, "sha1": "4964b7f5e517990f1ef9a5b79258ed0c5bcf643c", "source": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./MerkleLib.sol\";\n\n// This contract is for user-chosen vesting schedules, within parameters selected by the tree creator\ncontract MerkleResistor {\n    using MerkleLib for bytes32;\n\n    // tree (vesting schedule) counter\n    uint public numTrees = 0;\n\n    // this represents a user chosen vesting schedule, post initiation\n    struct Tranche {\n        uint totalCoins; // total coins released after vesting complete\n        uint currentCoins; // unclaimed coins remaining in the contract, waiting to be vested\n        uint startTime; // start time of the vesting schedule\n        uint endTime;   // end time of the vesting schedule\n        uint coinsPerSecond;  // how many coins are emitted per second, this value is cached to avoid recomputing it\n        uint lastWithdrawalTime; // keep track of last time user claimed coins to compute coins owed for this withdrawal\n    }\n\n    // this represents an arbitrarily large set of token recipients with partially-initialized vesting schedules\n    struct MerkleTree {\n        bytes32 merkleRoot; // merkle root of tree whose leaves are ranges of vesting schedules for each recipient\n        bytes32 ipfsHash; // ipfs hash of the entire data set represented by the merkle root, in case our servers go down\n        uint minEndTime; // minimum length (offset, not absolute) of vesting schedule in seconds\n        uint maxEndTime; // maximum length (offset, not absolute) of vesting schedule in seconds\n        uint pctUpFront; // percent of vested coins that will be available and withdrawn upon initialization\n        address tokenAddress; // address of token to be distributed\n        uint tokenBalance; // amount of tokens allocated to this tree (this prevents trees from sharing tokens)\n    }\n\n    // initialized[recipient][treeIndex] = hasUserChosenVestingSchedule\n    // could have reused tranches (see below) for this but loading a bool is cheaper than loading an entire struct\n    // NOTE: if a user appears in the same tree multiple times, the first leaf initialized will prevent the others from initializing\n    mapping (address => mapping (uint => bool)) public initialized;\n\n    // basically an array of vesting schedules, but without annoying solidity array syntax\n    mapping (uint => MerkleTree) public merkleTrees;\n\n    // tranches[recipient][treeIndex] = chosenVestingSchedule\n    mapping (address => mapping (uint => Tranche)) public tranches;\n\n    // precision factory used to handle floating point arithmetic\n    uint constant public PRECISION = 1000000;\n\n    // every time a withdrawal occurs\n    event WithdrawalOccurred(address indexed destination, uint numTokens, uint tokensLeft, uint indexed merkleIndex);\n    // every time a tree is added\n    event MerkleTreeAdded(uint indexed index, address indexed tokenAddress, bytes32 newRoot, bytes32 ipfsHash);\n    // every time a tree is topped up\n    event TokensDeposited(uint indexed index, address indexed tokenAddress, uint amount);\n\n    // anyone can add a tree\n    function addMerkleTree(bytes32 newRoot, bytes32 ipfsHash, uint minEndTime, uint maxEndTime, uint pctUpFront, address depositToken, uint tokenBalance) public {\n        // check basic coherence of request\n        require(pctUpFront < 100, 'pctUpFront >= 100');\n        require(minEndTime < maxEndTime, 'minEndTime must be less than maxEndTime');\n\n        // prefix operator ++ increments then evaluates\n        merkleTrees[++numTrees] = MerkleTree(\n            newRoot,\n            ipfsHash,\n            minEndTime,\n            maxEndTime,\n            pctUpFront,\n            depositToken,\n            0    // tokenBalance is 0 at first because no tokens have been deposited\n        );\n\n        // pull tokens from user to fund the tree\n        // if tree is insufficiently funded, then some users may not be able to be paid out, this is the responsibility\n        // of the tree creator, if trees are not funded, then the UI will not display the tree\n        depositTokens(numTrees, tokenBalance);\n        emit MerkleTreeAdded(numTrees, depositToken, newRoot, ipfsHash);\n    }\n\n    // anyone can fund any tree\n    function depositTokens(uint treeIndex, uint value) public {\n        // storage because we edit\n        MerkleTree storage merkleTree = merkleTrees[treeIndex];\n\n        // bookkeeping to make sure trees do not share tokens\n        merkleTree.tokenBalance += value;\n\n        // do the transfer from the caller\n        // NOTE: it is possible for user to overfund the tree and there is no mechanism to reclaim excess tokens\n        // this is because there is no way for the contract to know when a tree has had all leaves claimed\n        // there is also no way for the contract to know the minimum or maximum liabilities represented by the leaves\n        // in short, there is no on-chain inspection of the leaves except at initialization time\n        // NOTE: a malicious token contract could cause merkleTree.tokenBalance to be out of sync with the token contract\n        // this is an unavoidable possibility, and it could render the tree unusable, while leaving other trees unharmed\n        require(IERC20(merkleTree.tokenAddress).transferFrom(msg.sender, address(this), value), \"ERC20 transfer failed\");\n        emit TokensDeposited(treeIndex, merkleTree.tokenAddress, value);\n    }\n\n    // user calls this to choose and start their vesting schedule\n    // merkle proof confirms they are passing data previously committed to by tree creator\n    // vestingTime is chosen by the user, min/max TotalPayments is committed to by the merkleRoot\n    function initialize(uint merkleIndex, address destination, uint vestingTime, uint minTotalPayments, uint maxTotalPayments, bytes32[] memory proof) external {\n        // user selects own vesting schedule, not others\n        require(msg.sender == destination, 'Can only initialize your own tranche');\n        // can only initialize once\n        require(!initialized[destination][merkleIndex], \"Already initialized\");\n        // compute merkle leaf, this is first element of proof\n        bytes32 leaf = keccak256(abi.encode(destination, minTotalPayments, maxTotalPayments));\n        // memory because we do not edit\n        MerkleTree memory tree = merkleTrees[merkleIndex];\n        // this calls into MerkleLib, super cheap ~1000 gas per proof element\n        require(tree.merkleRoot.verifyProof(leaf, proof), \"The proof could not be verified.\");\n        // mark tree as initialized, preventing re-entrance or multiple initializations\n        initialized[destination][merkleIndex] = true;\n\n        (bool valid, uint totalCoins, uint coinsPerSecond, uint startTime) = verifyVestingSchedule(merkleIndex, vestingTime, minTotalPayments, maxTotalPayments);\n        require(valid, 'Invalid vesting schedule');\n\n        // fill out the struct for the address' vesting schedule\n        // don't have to mark as storage here, it's implied (why isn't it always implied when written to? solc-devs?)\n        tranches[destination][merkleIndex] = Tranche(\n            totalCoins,    // this is just a cached number for UI, not used\n            totalCoins,    // starts out full\n            startTime,     // start time will usually be in the past, if pctUpFront > 0\n            block.timestamp + vestingTime,  // vesting starts from initialization time\n            coinsPerSecond,  // cached value to avoid recomputation\n            startTime      // this is lastWithdrawalTime, set to startTime to indicate no withdrawals have occurred yet\n        );\n        withdraw(merkleIndex, destination);\n    }\n\n    // user calls this to claim available (unclaimed, unlocked) tokens\n    // NOTE: anyone can withdraw tokens for anyone else, but they always go to intended destination\n    // msg.sender is not used in this function ;)\n    function withdraw(uint merkleIndex, address destination) public {\n        // initialize first, no operations on empty structs, I don't care if the values are \"probably zero\"\n        require(initialized[destination][merkleIndex], \"You must initialize your account first.\");\n        // storage, since we are editing\n        Tranche storage tranche = tranches[destination][merkleIndex];\n        // if it's empty, don't bother\n        require(tranche.currentCoins >  0, 'No coins left to withdraw');\n        uint currentWithdrawal = 0;\n\n        // if after vesting period ends, give them the remaining coins, also avoids dust from rounding errors\n        if (block.timestamp >= tranche.endTime) {\n            currentWithdrawal = tranche.currentCoins;\n        } else {\n            // compute allowed withdrawal\n            // secondsElapsedSinceLastWithdrawal * coinsPerSecond == coinsAccumulatedSinceLastWithdrawal\n            currentWithdrawal = (block.timestamp - tranche.lastWithdrawalTime) * tranche.coinsPerSecond;\n        }\n        // muto? servo\n        MerkleTree storage tree = merkleTrees[merkleIndex];\n\n        // update struct, modern solidity will catch underflow and prevent currentWithdrawal from exceeding currentCoins\n        // but it's computed internally anyway, not user generated\n        tranche.currentCoins -= currentWithdrawal;\n        // move the time counter up so users can't double-withdraw allocated coins\n        // this also works as a re-entrance gate, so currentWithdrawal would be 0 upon re-entrance\n        tranche.lastWithdrawalTime = block.timestamp;\n        // handle the bookkeeping so trees don't share tokens, do it before transferring to create one more re-entrance gate\n        tree.tokenBalance -= currentWithdrawal;\n\n        // transfer the tokens, brah\n        // NOTE: if this is a malicious token, what could happen?\n        // 1/ token doesn't transfer given amount to recipient, this is bad for user, but does not effect other trees\n        // 2/ token fails for some reason, again bad for user, but this does not effect other trees\n        // 3/ token re-enters this function (or other, but this is the only one that transfers tokens out)\n        // in which case, lastWithdrawalTime == block.timestamp, so currentWithdrawal == 0\n        // besides msg.sender is not used in this function, so who calls it is irrelevant...\n        require(IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal), 'Token transfer failed');\n        emit WithdrawalOccurred(destination, currentWithdrawal, tranche.currentCoins, merkleIndex);\n    }\n\n    // used to determine whether the vesting schedule is legit\n    function verifyVestingSchedule(uint merkleIndex, uint vestingTime, uint minTotalPayments, uint maxTotalPayments) public view returns (bool, uint, uint, uint) {\n        // vesting schedules for non-existing trees are invalid, I don't care how much you like uninitialized structs\n        if (merkleIndex > numTrees) {\n            return (false, 0, 0, 0);\n        }\n\n        // memory not storage, since we do not edit the tree, and it's a view function anyways\n        MerkleTree memory tree = merkleTrees[merkleIndex];\n\n        // vesting time must sit within the closed interval of [minEndTime, maxEndTime]\n        if (vestingTime > tree.maxEndTime || vestingTime < tree.minEndTime) {\n            return (false, 0, 0, 0);\n        }\n\n        uint totalCoins;\n        if (vestingTime == tree.maxEndTime) {\n            // this is to prevent dust accumulation from rounding errors\n            // maxEndTime results in max payments, no further computation necessary\n            totalCoins = maxTotalPayments;\n        } else {\n            // remember grade school algebra? slope = \u0394y / \u0394x\n            // this is the slope of eligible vesting schedules. In general, 0 < m < 1,\n            // (longer vesting schedules should result in less coins per second, hence \"resistor\")\n            // so we multiply by a precision factor to reduce rounding errors\n            // y axis = total coins released after vesting completed\n            // x axis = length of vesting schedule\n            // this is the line of valid end-points for the chosen vesting schedule line, see below\n            // NOTE: this reverts if minTotalPayments > maxTotalPayments, which is a good thing\n            uint paymentSlope = (maxTotalPayments - minTotalPayments) * PRECISION / (tree.maxEndTime - tree.minEndTime);\n\n            // y = mx + b = paymentSlope * (x - x0) + y0\n            // divide by precision factor here since we have completed the rounding error sensitive operations\n            totalCoins = (paymentSlope * (vestingTime - tree.minEndTime) / PRECISION) + minTotalPayments;\n        }\n\n        // this is a different slope, the slope of their chosen vesting schedule\n        // y axis = cumulative coins emitted\n        // x axis = time elapsed\n        // NOTE: vestingTime starts from block.timestamp, so doesn't include coins already available from pctUpFront\n        // totalCoins / vestingTime is wrong, we have to multiple by the proportion of the coins that are indexed\n        // by vestingTime, which is (100 - pctUpFront) / 100\n        uint coinsPerSecond = (totalCoins * (uint(100) - tree.pctUpFront)) / (vestingTime * 100);\n\n        // vestingTime is relative to initialization point\n        // endTime = block.timestamp + vestingTime\n        // vestingLength = totalCoins / coinsPerSecond\n        uint startTime = block.timestamp + vestingTime - (totalCoins / coinsPerSecond);\n\n        return (true, totalCoins, coinsPerSecond, startTime);\n    }\n\n}\n", "sourceMap": "230:13235:1:-:0;;;356:1;333:24;;230:13235;;;;;;;;;;;;;;;;", "sourcePath": "contracts/MerkleResistor.sol", "type": "contract", "deployment": {"address": "0xb72d4A1702190D795b5c25525b0E90EE0E6E3556", "chainid": "4", "blockHeight": 10577100}}