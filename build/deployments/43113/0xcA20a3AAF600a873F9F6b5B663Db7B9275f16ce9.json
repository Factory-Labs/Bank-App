{"allSourcePaths": {"4": "contracts/MerkleLib.sol"}, "bytecode": "6102b661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80639580f1f2146100455780639da7347c1461006b575b600080fd5b610058610053366004610139565b61008e565b6040519081526020015b60405180910390f35b61007e610079366004610171565b6100e9565b6040519015158152602001610062565b6000818310156100ca5760408051602081018590529081018390526060015b6040516020818303038152906040528051906020012090506100e3565b60408051602081018490529081018490526060016100ad565b92915050565b600082815b835181101561012e5761011a8285838151811061010d5761010d610244565b602002602001015161008e565b915061012760018261025a565b90506100ee565b509093149392505050565b6000806040838503121561014c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561018657600080fd5b833592506020808501359250604085013567ffffffffffffffff808211156101ad57600080fd5b818701915087601f8301126101c157600080fd5b8135818111156101d3576101d361015b565b8060051b604051601f19603f830116810181811085821117156101f8576101f861015b565b60405291825284820192508381018501918a83111561021657600080fd5b938501935b828510156102345784358452938501939285019261021b565b8096505050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b6000821982111561027b57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212206b4853e1aa44b049313c727e05f1e7d5e7b4d9fe084df81a7b27d791bd6eefd564736f6c63430008090033", "bytecodeSha1": "b0fcc8318be382416cfe44051098f86acef935ac", "coverageMap": {"statements": {"4": {"MerkleLib.parentHash": {"0": [1397, 1431], "1": [1462, 1496]}, "MerkleLib.verifyProof": {"2": [915, 962], "3": [893, 899], "4": [1150, 1176]}}}, "branches": {"4": {"MerkleLib.parentHash": {"5": [1376, 1381, false]}}}}, "dependencies": [], "offset": [176, 1516], "pcMap": {"0": {"op": "PUSH20", "value": "0x0", "path": "4", "offset": [176, 1516]}, "21": {"op": "ADDRESS", "path": "4", "offset": [176, 1516], "fn": null}, "22": {"op": "EQ", "path": "4", "offset": [176, 1516], "fn": null}, "23": {"op": "PUSH1", "value": "0x80", "path": "4", "offset": [176, 1516], "fn": null}, "25": {"op": "PUSH1", "value": "0x40", "path": "4", "offset": [176, 1516], "fn": null}, "27": {"op": "MSTORE", "path": "4", "offset": [176, 1516], "fn": null}, "28": {"op": "PUSH1", "value": "0x4", "path": "4", "offset": [176, 1516], "fn": null}, "30": {"op": "CALLDATASIZE", "path": "4", "offset": [176, 1516], "fn": null}, "31": {"op": "LT", "path": "4", "offset": [176, 1516], "fn": null}, "32": {"op": "PUSH2", "value": "0x40", "path": "4", "offset": [176, 1516], "fn": null}, "35": {"op": "JUMPI", "path": "4", "offset": [176, 1516], "fn": null}, "36": {"op": "PUSH1", "value": "0x0", "path": "4", "offset": [176, 1516], "fn": null}, "38": {"op": "CALLDATALOAD", "path": "4", "offset": [176, 1516], "fn": null}, "39": {"op": "PUSH1", "value": "0xE0", "path": "4", "offset": [176, 1516], "fn": null}, "41": {"op": "SHR", "path": "4", "offset": [176, 1516], "fn": null}, "42": {"op": "DUP1", "path": "4", "offset": [176, 1516], "fn": null}, "43": {"op": "PUSH4", "value": "0x9580F1F2", "path": "4", "offset": [176, 1516], "fn": null}, "48": {"op": "EQ", "path": "4", "offset": [176, 1516], "fn": null}, "49": {"op": "PUSH2", "value": "0x45", "path": "4", "offset": [176, 1516], "fn": null}, "52": {"op": "JUMPI", "path": "4", "offset": [176, 1516], "fn": null}, "53": {"op": "DUP1", "path": "4", "offset": [176, 1516], "fn": null}, "54": {"op": "PUSH4", "value": "0x9DA7347C", "path": "4", "offset": [176, 1516], "fn": null}, "59": {"op": "EQ", "path": "4", "offset": [176, 1516], "fn": null}, "60": {"op": "PUSH2", "value": "0x6B", "path": "4", "offset": [176, 1516], "fn": null}, "63": {"op": "JUMPI", "path": "4", "offset": [176, 1516], "fn": null}, "64": {"op": "JUMPDEST", "path": "4", "offset": [176, 1516], "fn": null}, "65": {"op": "PUSH1", "value": "0x0", "path": "4", "offset": [176, 1516], "fn": null}, "67": {"op": "DUP1", "path": "4", "offset": [176, 1516], "fn": null}, "68": {"op": "REVERT", "first_revert": true, "path": "4", "offset": [176, 1516], "fn": null}, "69": {"op": "JUMPDEST", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "70": {"op": "PUSH2", "value": "0x58", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "73": {"op": "PUSH2", "value": "0x53", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "76": {"op": "CALLDATASIZE", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "77": {"op": "PUSH1", "value": "0x4", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "79": {"op": "PUSH2", "value": "0x139", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "82": {"op": "JUMP", "jump": "i", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "83": {"op": "JUMPDEST", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "84": {"op": "PUSH2", "value": "0x8E", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "87": {"op": "JUMP", "jump": "i", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "88": {"op": "JUMPDEST", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "89": {"op": "PUSH1", "value": "0x40", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "91": {"op": "MLOAD", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "92": {"op": "SWAP1"}, "93": {"op": "DUP2"}, "94": {"op": "MSTORE"}, "95": {"op": "PUSH1", "value": "0x20"}, "97": {"op": "ADD"}, "98": {"op": "JUMPDEST", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "99": {"op": "PUSH1", "value": "0x40", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "101": {"op": "MLOAD", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "102": {"op": "DUP1", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "103": {"op": "SWAP2", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "104": {"op": "SUB", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "105": {"op": "SWAP1", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "106": {"op": "RETURN", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "107": {"op": "JUMPDEST", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "108": {"op": "PUSH2", "value": "0x7E", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "111": {"op": "PUSH2", "value": "0x79", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "114": {"op": "CALLDATASIZE", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "115": {"op": "PUSH1", "value": "0x4", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "117": {"op": "PUSH2", "value": "0x171", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "120": {"op": "JUMP", "jump": "i", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "121": {"op": "JUMPDEST", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "122": {"op": "PUSH2", "value": "0xE9", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "125": {"op": "JUMP", "jump": "i", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "126": {"op": "JUMPDEST", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "127": {"op": "PUSH1", "value": "0x40", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "129": {"op": "MLOAD", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "130": {"op": "SWAP1"}, "131": {"op": "ISZERO"}, "132": {"op": "ISZERO"}, "133": {"op": "DUP2"}, "134": {"op": "MSTORE"}, "135": {"op": "PUSH1", "value": "0x20"}, "137": {"op": "ADD"}, "138": {"op": "PUSH2", "value": "0x62", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "141": {"op": "JUMP"}, "142": {"op": "JUMPDEST", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "143": {"op": "PUSH1", "value": "0x0", "path": "4", "offset": [1252, 1259], "fn": "MerkleLib.parentHash"}, "145": {"op": "DUP2", "path": "4", "offset": [1380, 1381], "fn": "MerkleLib.parentHash"}, "146": {"op": "DUP4", "path": "4", "offset": [1376, 1377], "fn": "MerkleLib.parentHash"}, "147": {"op": "LT", "path": "4", "offset": [1376, 1381], "fn": "MerkleLib.parentHash", "branch": 5}, "148": {"op": "ISZERO", "path": "4", "offset": [1372, 1507], "fn": "MerkleLib.parentHash"}, "149": {"op": "PUSH2", "value": "0xCA", "path": "4", "offset": [1372, 1507], "fn": "MerkleLib.parentHash"}, "152": {"op": "JUMPI", "path": "4", "offset": [1372, 1507], "fn": "MerkleLib.parentHash", "branch": 5}, "153": {"op": "PUSH1", "value": "0x40", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash", "statement": 0}, "155": {"op": "DUP1", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "156": {"op": "MLOAD", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "157": {"op": "PUSH1", "value": "0x20", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "159": {"op": "DUP2", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "160": {"op": "ADD", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "161": {"op": "DUP6"}, "162": {"op": "SWAP1"}, "163": {"op": "MSTORE"}, "164": {"op": "SWAP1"}, "165": {"op": "DUP2"}, "166": {"op": "ADD"}, "167": {"op": "DUP4"}, "168": {"op": "SWAP1"}, "169": {"op": "MSTORE"}, "170": {"op": "PUSH1", "value": "0x60"}, "172": {"op": "ADD"}, "173": {"op": "JUMPDEST", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "174": {"op": "PUSH1", "value": "0x40", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "176": {"op": "MLOAD", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "177": {"op": "PUSH1", "value": "0x20", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "179": {"op": "DUP2", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "180": {"op": "DUP4", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "181": {"op": "SUB", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "182": {"op": "SUB", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "183": {"op": "DUP2", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "184": {"op": "MSTORE", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "185": {"op": "SWAP1", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "186": {"op": "PUSH1", "value": "0x40", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "188": {"op": "MSTORE", "path": "4", "offset": [1414, 1430], "fn": "MerkleLib.parentHash"}, "189": {"op": "DUP1", "path": "4", "offset": [1404, 1431], "fn": "MerkleLib.parentHash"}, "190": {"op": "MLOAD", "path": "4", "offset": [1404, 1431], "fn": "MerkleLib.parentHash"}, "191": {"op": "SWAP1", "path": "4", "offset": [1404, 1431], "fn": "MerkleLib.parentHash"}, "192": {"op": "PUSH1", "value": "0x20", "path": "4", "offset": [1404, 1431], "fn": "MerkleLib.parentHash"}, "194": {"op": "ADD", "path": "4", "offset": [1404, 1431], "fn": "MerkleLib.parentHash"}, "195": {"op": "KECCAK256", "path": "4", "offset": [1404, 1431], "fn": "MerkleLib.parentHash"}, "196": {"op": "SWAP1", "path": "4", "offset": [1397, 1431], "fn": "MerkleLib.parentHash"}, "197": {"op": "POP", "path": "4", "offset": [1397, 1431], "fn": "MerkleLib.parentHash"}, "198": {"op": "PUSH2", "value": "0xE3", "path": "4", "offset": [1397, 1431], "fn": "MerkleLib.parentHash"}, "201": {"op": "JUMP", "path": "4", "offset": [1397, 1431], "fn": "MerkleLib.parentHash"}, "202": {"op": "JUMPDEST", "path": "4", "offset": [1372, 1507], "fn": "MerkleLib.parentHash"}, "203": {"op": "PUSH1", "value": "0x40", "path": "4", "offset": [1479, 1495], "fn": "MerkleLib.parentHash", "statement": 1}, "205": {"op": "DUP1", "path": "4", "offset": [1479, 1495], "fn": "MerkleLib.parentHash"}, "206": {"op": "MLOAD", "path": "4", "offset": [1479, 1495], "fn": "MerkleLib.parentHash"}, "207": {"op": "PUSH1", "value": "0x20", "path": "4", "offset": [1479, 1495], "fn": "MerkleLib.parentHash"}, "209": {"op": "DUP2", "path": "4", "offset": [1479, 1495], "fn": "MerkleLib.parentHash"}, "210": {"op": "ADD", "path": "4", "offset": [1479, 1495], "fn": "MerkleLib.parentHash"}, "211": {"op": "DUP5"}, "212": {"op": "SWAP1"}, "213": {"op": "MSTORE"}, "214": {"op": "SWAP1"}, "215": {"op": "DUP2"}, "216": {"op": "ADD"}, "217": {"op": "DUP5"}, "218": {"op": "SWAP1"}, "219": {"op": "MSTORE"}, "220": {"op": "PUSH1", "value": "0x60"}, "222": {"op": "ADD"}, "223": {"op": "PUSH2", "value": "0xAD", "path": "4", "offset": [1479, 1495], "fn": "MerkleLib.parentHash"}, "226": {"op": "JUMP"}, "227": {"op": "JUMPDEST", "path": "4", "offset": [1372, 1507], "fn": "MerkleLib.parentHash"}, "228": {"op": "SWAP3", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "229": {"op": "SWAP2", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "230": {"op": "POP", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "231": {"op": "POP", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "232": {"op": "JUMP", "jump": "o", "path": "4", "offset": [1189, 1513], "fn": "MerkleLib.parentHash"}, "233": {"op": "JUMPDEST", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "234": {"op": "PUSH1", "value": "0x0", "path": "4", "offset": [615, 619], "fn": "MerkleLib.verifyProof"}, "236": {"op": "DUP3", "path": "4", "offset": [653, 657], "fn": "MerkleLib.verifyProof"}, "237": {"op": "DUP2", "path": "4", "offset": [615, 619], "fn": "MerkleLib.verifyProof"}, "238": {"op": "JUMPDEST", "path": "4", "offset": [858, 973], "fn": "MerkleLib.verifyProof"}, "239": {"op": "DUP4", "path": "4", "offset": [879, 884], "fn": "MerkleLib.verifyProof"}, "240": {"op": "MLOAD", "path": "4", "offset": [879, 891], "fn": "MerkleLib.verifyProof"}, "241": {"op": "DUP2", "path": "4", "offset": [875, 876], "fn": "MerkleLib.verifyProof"}, "242": {"op": "LT", "path": "4", "offset": [875, 891], "fn": "MerkleLib.verifyProof"}, "243": {"op": "ISZERO", "path": "4", "offset": [858, 973], "fn": "MerkleLib.verifyProof"}, "244": {"op": "PUSH2", "value": "0x12E", "path": "4", "offset": [858, 973], "fn": "MerkleLib.verifyProof"}, "247": {"op": "JUMPI", "path": "4", "offset": [858, 973], "fn": "MerkleLib.verifyProof"}, "248": {"op": "PUSH2", "value": "0x11A", "path": "4", "offset": [929, 962], "fn": "MerkleLib.verifyProof", "statement": 2}, "251": {"op": "DUP3", "path": "4", "offset": [940, 951], "fn": "MerkleLib.verifyProof"}, "252": {"op": "DUP6", "path": "4", "offset": [953, 958], "fn": "MerkleLib.verifyProof"}, "253": {"op": "DUP4", "path": "4", "offset": [959, 960], "fn": "MerkleLib.verifyProof"}, "254": {"op": "DUP2", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "255": {"op": "MLOAD", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "256": {"op": "DUP2", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "257": {"op": "LT", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "258": {"op": "PUSH2", "value": "0x10D", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "261": {"op": "JUMPI", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "262": {"op": "PUSH2", "value": "0x10D", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "265": {"op": "PUSH2", "value": "0x244", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "268": {"op": "JUMP", "jump": "i", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "269": {"op": "JUMPDEST", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "270": {"op": "PUSH1", "value": "0x20", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "272": {"op": "MUL", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "273": {"op": "PUSH1", "value": "0x20", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "275": {"op": "ADD", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "276": {"op": "ADD", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "277": {"op": "MLOAD", "path": "4", "offset": [953, 961], "fn": "MerkleLib.verifyProof"}, "278": {"op": "PUSH2", "value": "0x8E", "path": "4", "offset": [929, 939], "fn": "MerkleLib.verifyProof"}, "281": {"op": "JUMP", "jump": "i", "path": "4", "offset": [929, 962], "fn": "MerkleLib.verifyProof"}, "282": {"op": "JUMPDEST", "path": "4", "offset": [929, 962], "fn": "MerkleLib.verifyProof"}, "283": {"op": "SWAP2", "path": "4", "offset": [915, 962], "fn": "MerkleLib.verifyProof"}, "284": {"op": "POP"}, "285": {"op": "PUSH2", "value": "0x127", "path": "4", "offset": [893, 899], "fn": "MerkleLib.verifyProof", "statement": 3}, "288": {"op": "PUSH1", "value": "0x1", "path": "4", "offset": [898, 899], "fn": "MerkleLib.verifyProof"}, "290": {"op": "DUP3", "path": "4", "offset": [893, 899], "fn": "MerkleLib.verifyProof"}, "291": {"op": "PUSH2", "value": "0x25A", "path": "4", "offset": [893, 899], "fn": "MerkleLib.verifyProof"}, "294": {"op": "JUMP", "jump": "i", "path": "4", "offset": [893, 899], "fn": "MerkleLib.verifyProof"}, "295": {"op": "JUMPDEST", "path": "4", "offset": [893, 899], "fn": "MerkleLib.verifyProof"}, "296": {"op": "SWAP1", "path": "4", "offset": [893, 899], "fn": "MerkleLib.verifyProof"}, "297": {"op": "POP", "path": "4", "offset": [893, 899], "fn": "MerkleLib.verifyProof"}, "298": {"op": "PUSH2", "value": "0xEE", "path": "4", "offset": [858, 973], "fn": "MerkleLib.verifyProof"}, "301": {"op": "JUMP", "path": "4", "offset": [858, 973], "fn": "MerkleLib.verifyProof"}, "302": {"op": "JUMPDEST", "path": "4", "offset": [858, 973], "fn": "MerkleLib.verifyProof"}, "303": {"op": "POP"}, "304": {"op": "SWAP1", "path": "4", "offset": [1157, 1176], "fn": "MerkleLib.verifyProof", "statement": 4}, "305": {"op": "SWAP4", "path": "4", "offset": [1157, 1176], "fn": "MerkleLib.verifyProof"}, "306": {"op": "EQ", "path": "4", "offset": [1157, 1176], "fn": "MerkleLib.verifyProof"}, "307": {"op": "SWAP4", "path": "4", "offset": [1157, 1176], "fn": "MerkleLib.verifyProof"}, "308": {"op": "SWAP3", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "309": {"op": "POP"}, "310": {"op": "POP"}, "311": {"op": "POP"}, "312": {"op": "JUMP", "jump": "o", "path": "4", "offset": [521, 1183], "fn": "MerkleLib.verifyProof"}, "313": {"op": "JUMPDEST"}, "314": {"op": "PUSH1", "value": "0x0"}, "316": {"op": "DUP1"}, "317": {"op": "PUSH1", "value": "0x40"}, "319": {"op": "DUP4"}, "320": {"op": "DUP6"}, "321": {"op": "SUB"}, "322": {"op": "SLT"}, "323": {"op": "ISZERO"}, "324": {"op": "PUSH2", "value": "0x14C"}, "327": {"op": "JUMPI"}, "328": {"op": "PUSH1", "value": "0x0"}, "330": {"op": "DUP1"}, "331": {"op": "REVERT"}, "332": {"op": "JUMPDEST"}, "333": {"op": "POP"}, "334": {"op": "POP"}, "335": {"op": "DUP1"}, "336": {"op": "CALLDATALOAD"}, "337": {"op": "SWAP3"}, "338": {"op": "PUSH1", "value": "0x20"}, "340": {"op": "SWAP1"}, "341": {"op": "SWAP2"}, "342": {"op": "ADD"}, "343": {"op": "CALLDATALOAD"}, "344": {"op": "SWAP2"}, "345": {"op": "POP"}, "346": {"op": "JUMP", "jump": "o"}, "347": {"op": "JUMPDEST"}, "348": {"op": "PUSH4", "value": "0x4E487B71"}, "353": {"op": "PUSH1", "value": "0xE0"}, "355": {"op": "SHL"}, "356": {"op": "PUSH1", "value": "0x0"}, "358": {"op": "MSTORE"}, "359": {"op": "PUSH1", "value": "0x41"}, "361": {"op": "PUSH1", "value": "0x4"}, "363": {"op": "MSTORE"}, "364": {"op": "PUSH1", "value": "0x24"}, "366": {"op": "PUSH1", "value": "0x0"}, "368": {"op": "REVERT"}, "369": {"op": "JUMPDEST"}, "370": {"op": "PUSH1", "value": "0x0"}, "372": {"op": "DUP1"}, "373": {"op": "PUSH1", "value": "0x0"}, "375": {"op": "PUSH1", "value": "0x60"}, "377": {"op": "DUP5"}, "378": {"op": "DUP7"}, "379": {"op": "SUB"}, "380": {"op": "SLT"}, "381": {"op": "ISZERO"}, "382": {"op": "PUSH2", "value": "0x186"}, "385": {"op": "JUMPI"}, "386": {"op": "PUSH1", "value": "0x0"}, "388": {"op": "DUP1"}, "389": {"op": "REVERT"}, "390": {"op": "JUMPDEST"}, "391": {"op": "DUP4"}, "392": {"op": "CALLDATALOAD"}, "393": {"op": "SWAP3"}, "394": {"op": "POP"}, "395": {"op": "PUSH1", "value": "0x20"}, "397": {"op": "DUP1"}, "398": {"op": "DUP6"}, "399": {"op": "ADD"}, "400": {"op": "CALLDATALOAD"}, "401": {"op": "SWAP3"}, "402": {"op": "POP"}, "403": {"op": "PUSH1", "value": "0x40"}, "405": {"op": "DUP6"}, "406": {"op": "ADD"}, "407": {"op": "CALLDATALOAD"}, "408": {"op": "PUSH8", "value": "0xFFFFFFFFFFFFFFFF"}, "417": {"op": "DUP1"}, "418": {"op": "DUP3"}, "419": {"op": "GT"}, "420": {"op": "ISZERO"}, "421": {"op": "PUSH2", "value": "0x1AD"}, "424": {"op": "JUMPI"}, "425": {"op": "PUSH1", "value": "0x0"}, "427": {"op": "DUP1"}, "428": {"op": "REVERT"}, "429": {"op": "JUMPDEST"}, "430": {"op": "DUP2"}, "431": {"op": "DUP8"}, "432": {"op": "ADD"}, "433": {"op": "SWAP2"}, "434": {"op": "POP"}, "435": {"op": "DUP8"}, "436": {"op": "PUSH1", "value": "0x1F"}, "438": {"op": "DUP4"}, "439": {"op": "ADD"}, "440": {"op": "SLT"}, "441": {"op": "PUSH2", "value": "0x1C1"}, "444": {"op": "JUMPI"}, "445": {"op": "PUSH1", "value": "0x0"}, "447": {"op": "DUP1"}, "448": {"op": "REVERT"}, "449": {"op": "JUMPDEST"}, "450": {"op": "DUP2"}, "451": {"op": "CALLDATALOAD"}, "452": {"op": "DUP2"}, "453": {"op": "DUP2"}, "454": {"op": "GT"}, "455": {"op": "ISZERO"}, "456": {"op": "PUSH2", "value": "0x1D3"}, "459": {"op": "JUMPI"}, "460": {"op": "PUSH2", "value": "0x1D3"}, "463": {"op": "PUSH2", "value": "0x15B"}, "466": {"op": "JUMP", "jump": "i"}, "467": {"op": "JUMPDEST"}, "468": {"op": "DUP1"}, "469": {"op": "PUSH1", "value": "0x5"}, "471": {"op": "SHL"}, "472": {"op": "PUSH1", "value": "0x40"}, "474": {"op": "MLOAD"}, "475": {"op": "PUSH1", "value": "0x1F"}, "477": {"op": "NOT"}, "478": {"op": "PUSH1", "value": "0x3F"}, "480": {"op": "DUP4"}, "481": {"op": "ADD"}, "482": {"op": "AND"}, "483": {"op": "DUP2"}, "484": {"op": "ADD"}, "485": {"op": "DUP2"}, "486": {"op": "DUP2"}, "487": {"op": "LT"}, "488": {"op": "DUP6"}, "489": {"op": "DUP3"}, "490": {"op": "GT"}, "491": {"op": "OR"}, "492": {"op": "ISZERO"}, "493": {"op": "PUSH2", "value": "0x1F8"}, "496": {"op": "JUMPI"}, "497": {"op": "PUSH2", "value": "0x1F8"}, "500": {"op": "PUSH2", "value": "0x15B"}, "503": {"op": "JUMP", "jump": "i"}, "504": {"op": "JUMPDEST"}, "505": {"op": "PUSH1", "value": "0x40"}, "507": {"op": "MSTORE"}, "508": {"op": "SWAP2"}, "509": {"op": "DUP3"}, "510": {"op": "MSTORE"}, "511": {"op": "DUP5"}, "512": {"op": "DUP3"}, "513": {"op": "ADD"}, "514": {"op": "SWAP3"}, "515": {"op": "POP"}, "516": {"op": "DUP4"}, "517": {"op": "DUP2"}, "518": {"op": "ADD"}, "519": {"op": "DUP6"}, "520": {"op": "ADD"}, "521": {"op": "SWAP2"}, "522": {"op": "DUP11"}, "523": {"op": "DUP4"}, "524": {"op": "GT"}, "525": {"op": "ISZERO"}, "526": {"op": "PUSH2", "value": "0x216"}, "529": {"op": "JUMPI"}, "530": {"op": "PUSH1", "value": "0x0"}, "532": {"op": "DUP1"}, "533": {"op": "REVERT"}, "534": {"op": "JUMPDEST"}, "535": {"op": "SWAP4"}, "536": {"op": "DUP6"}, "537": {"op": "ADD"}, "538": {"op": "SWAP4"}, "539": {"op": "JUMPDEST"}, "540": {"op": "DUP3"}, "541": {"op": "DUP6"}, "542": {"op": "LT"}, "543": {"op": "ISZERO"}, "544": {"op": "PUSH2", "value": "0x234"}, "547": {"op": "JUMPI"}, "548": {"op": "DUP5"}, "549": {"op": "CALLDATALOAD"}, "550": {"op": "DUP5"}, "551": {"op": "MSTORE"}, "552": {"op": "SWAP4"}, "553": {"op": "DUP6"}, "554": {"op": "ADD"}, "555": {"op": "SWAP4"}, "556": {"op": "SWAP3"}, "557": {"op": "DUP6"}, "558": {"op": "ADD"}, "559": {"op": "SWAP3"}, "560": {"op": "PUSH2", "value": "0x21B"}, "563": {"op": "JUMP"}, "564": {"op": "JUMPDEST"}, "565": {"op": "DUP1"}, "566": {"op": "SWAP7"}, "567": {"op": "POP"}, "568": {"op": "POP"}, "569": {"op": "POP"}, "570": {"op": "POP"}, "571": {"op": "POP"}, "572": {"op": "POP"}, "573": {"op": "POP"}, "574": {"op": "SWAP3"}, "575": {"op": "POP"}, "576": {"op": "SWAP3"}, "577": {"op": "POP"}, "578": {"op": "SWAP3"}, "579": {"op": "JUMP", "jump": "o"}, "580": {"op": "JUMPDEST"}, "581": {"op": "PUSH4", "value": "0x4E487B71"}, "586": {"op": "PUSH1", "value": "0xE0"}, "588": {"op": "SHL"}, "589": {"op": "PUSH1", "value": "0x0"}, "591": {"op": "MSTORE"}, "592": {"op": "PUSH1", "value": "0x32"}, "594": {"op": "PUSH1", "value": "0x4"}, "596": {"op": "MSTORE"}, "597": {"op": "PUSH1", "value": "0x24"}, "599": {"op": "PUSH1", "value": "0x0"}, "601": {"op": "REVERT"}, "602": {"op": "JUMPDEST"}, "603": {"op": "PUSH1", "value": "0x0"}, "605": {"op": "DUP3"}, "606": {"op": "NOT"}, "607": {"op": "DUP3"}, "608": {"op": "GT"}, "609": {"op": "ISZERO"}, "610": {"op": "PUSH2", "value": "0x27B"}, "613": {"op": "JUMPI"}, "614": {"op": "PUSH4", "value": "0x4E487B71"}, "619": {"op": "PUSH1", "value": "0xE0"}, "621": {"op": "SHL"}, "622": {"op": "PUSH1", "value": "0x0"}, "624": {"op": "MSTORE"}, "625": {"op": "PUSH1", "value": "0x11"}, "627": {"op": "PUSH1", "value": "0x4"}, "629": {"op": "MSTORE"}, "630": {"op": "PUSH1", "value": "0x24"}, "632": {"op": "PUSH1", "value": "0x0"}, "634": {"op": "REVERT"}, "635": {"op": "JUMPDEST"}, "636": {"op": "POP"}, "637": {"op": "ADD"}, "638": {"op": "SWAP1"}, "639": {"op": "JUMP", "jump": "o"}}, "type": "library", "abi": [{"inputs": [{"internalType": "bytes32", "name": "a", "type": "bytes32"}, {"internalType": "bytes32", "name": "b", "type": "bytes32"}], "name": "parentHash", "outputs": [{"internalType": "bytes32", "name": "", "type": "bytes32"}], "stateMutability": "pure", "type": "function"}, {"inputs": [{"internalType": "bytes32", "name": "root", "type": "bytes32"}, {"internalType": "bytes32", "name": "leaf", "type": "bytes32"}, {"internalType": "bytes32[]", "name": "proof", "type": "bytes32[]"}], "name": "verifyProof", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "stateMutability": "pure", "type": "function"}], "ast": {"absolutePath": "contracts/MerkleLib.sol", "exportedSymbols": {"MerkleLib": [1224]}, "id": 1225, "license": "GPL-3.0-only", "nodeType": "SourceUnit", "nodes": [{"id": 1147, "literals": ["solidity", "0.8", ".9"], "nodeType": "PragmaDirective", "src": "42:22:4"}, {"abstract": false, "baseContracts": [], "canonicalName": "MerkleLib", "contractDependencies": [], "contractKind": "library", "fullyImplemented": true, "id": 1224, "linearizedBaseContracts": [1224], "name": "MerkleLib", "nameLocation": "184:9:4", "nodeType": "ContractDefinition", "nodes": [{"body": {"id": 1190, "nodeType": "Block", "src": "621:562:4", "statements": [{"assignments": [1160], "declarations": [{"constant": false, "id": 1160, "mutability": "mutable", "name": "currentHash", "nameLocation": "639:11:4", "nodeType": "VariableDeclaration", "scope": 1190, "src": "631:19:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 1159, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "631:7:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "id": 1162, "initialValue": {"id": 1161, "name": "leaf", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1151, "src": "653:4:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "VariableDeclarationStatement", "src": "631:26:4"}, {"body": {"id": 1184, "nodeType": "Block", "src": "901:72:4", "statements": [{"expression": {"id": 1182, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 1175, "name": "currentHash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1160, "src": "915:11:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 1177, "name": "currentHash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1160, "src": "940:11:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"baseExpression": {"id": 1178, "name": "proof", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1154, "src": "953:5:4", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr", "typeString": "bytes32[] memory"}}, "id": 1180, "indexExpression": {"id": 1179, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1164, "src": "959:1:4", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "953:8:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 1176, "name": "parentHash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1223, "src": "929:10:4", "typeDescriptions": {"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$", "typeString": "function (bytes32,bytes32) pure returns (bytes32)"}}, "id": 1181, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "929:33:4", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "src": "915:47:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 1183, "nodeType": "ExpressionStatement", "src": "915:47:4"}]}, "condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1170, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1167, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1164, "src": "875:1:4", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 1168, "name": "proof", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1154, "src": "879:5:4", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr", "typeString": "bytes32[] memory"}}, "id": 1169, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "length", "nodeType": "MemberAccess", "src": "879:12:4", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "875:16:4", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 1185, "initializationExpression": {"assignments": [1164], "declarations": [{"constant": false, "id": 1164, "mutability": "mutable", "name": "i", "nameLocation": "868:1:4", "nodeType": "VariableDeclaration", "scope": 1185, "src": "863:6:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1163, "name": "uint", "nodeType": "ElementaryTypeName", "src": "863:4:4", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 1166, "initialValue": {"hexValue": "30", "id": 1165, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "872:1:4", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "863:10:4"}, "loopExpression": {"expression": {"id": 1173, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 1171, "name": "i", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1164, "src": "893:1:4", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "+=", "rightHandSide": {"hexValue": "31", "id": 1172, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "898:1:4", "typeDescriptions": {"typeIdentifier": "t_rational_1_by_1", "typeString": "int_const 1"}, "value": "1"}, "src": "893:6:4", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1174, "nodeType": "ExpressionStatement", "src": "893:6:4"}, "nodeType": "ForStatement", "src": "858:115:4"}, {"expression": {"commonType": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "id": 1188, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1186, "name": "currentHash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1160, "src": "1157:11:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"id": 1187, "name": "root", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1149, "src": "1172:4:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "src": "1157:19:4", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "functionReturnParameters": 1158, "id": 1189, "nodeType": "Return", "src": "1150:26:4"}]}, "functionSelector": "9da7347c", "id": 1191, "implemented": true, "kind": "function", "modifiers": [], "name": "verifyProof", "nameLocation": "530:11:4", "nodeType": "FunctionDefinition", "parameters": {"id": 1155, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1149, "mutability": "mutable", "name": "root", "nameLocation": "550:4:4", "nodeType": "VariableDeclaration", "scope": 1191, "src": "542:12:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 1148, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "542:7:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 1151, "mutability": "mutable", "name": "leaf", "nameLocation": "564:4:4", "nodeType": "VariableDeclaration", "scope": 1191, "src": "556:12:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 1150, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "556:7:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 1154, "mutability": "mutable", "name": "proof", "nameLocation": "587:5:4", "nodeType": "VariableDeclaration", "scope": 1191, "src": "570:22:4", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr", "typeString": "bytes32[]"}, "typeName": {"baseType": {"id": 1152, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "570:7:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 1153, "nodeType": "ArrayTypeName", "src": "570:9:4", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr", "typeString": "bytes32[]"}}, "visibility": "internal"}], "src": "541:52:4"}, "returnParameters": {"id": 1158, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1157, "mutability": "mutable", "name": "", "nameLocation": "-1:-1:-1", "nodeType": "VariableDeclaration", "scope": 1191, "src": "615:4:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 1156, "name": "bool", "nodeType": "ElementaryTypeName", "src": "615:4:4", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}], "src": "614:6:4"}, "scope": 1224, "src": "521:662:4", "stateMutability": "pure", "virtual": false, "visibility": "public"}, {"body": {"id": 1222, "nodeType": "Block", "src": "1261:252:4", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "id": 1202, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1200, "name": "a", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1193, "src": "1376:1:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"id": 1201, "name": "b", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1195, "src": "1380:1:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "src": "1376:5:4", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 1220, "nodeType": "Block", "src": "1448:59:4", "statements": [{"expression": {"arguments": [{"arguments": [{"id": 1215, "name": "b", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1195, "src": "1490:1:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"id": 1216, "name": "a", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1193, "src": "1493:1:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "expression": {"id": 1213, "name": "abi", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -1, "src": "1479:3:4", "typeDescriptions": {"typeIdentifier": "t_magic_abi", "typeString": "abi"}}, "id": 1214, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "encode", "nodeType": "MemberAccess", "src": "1479:10:4", "typeDescriptions": {"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$", "typeString": "function () pure returns (bytes memory)"}}, "id": 1217, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1479:16:4", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}], "id": 1212, "name": "keccak256", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -8, "src": "1469:9:4", "typeDescriptions": {"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$", "typeString": "function (bytes memory) pure returns (bytes32)"}}, "id": 1218, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1469:27:4", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "functionReturnParameters": 1199, "id": 1219, "nodeType": "Return", "src": "1462:34:4"}]}, "id": 1221, "nodeType": "IfStatement", "src": "1372:135:4", "trueBody": {"id": 1211, "nodeType": "Block", "src": "1383:59:4", "statements": [{"expression": {"arguments": [{"arguments": [{"id": 1206, "name": "a", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1193, "src": "1425:1:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"id": 1207, "name": "b", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1195, "src": "1428:1:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "expression": {"id": 1204, "name": "abi", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -1, "src": "1414:3:4", "typeDescriptions": {"typeIdentifier": "t_magic_abi", "typeString": "abi"}}, "id": 1205, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "encode", "nodeType": "MemberAccess", "src": "1414:10:4", "typeDescriptions": {"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$", "typeString": "function () pure returns (bytes memory)"}}, "id": 1208, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1414:16:4", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}], "id": 1203, "name": "keccak256", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -8, "src": "1404:9:4", "typeDescriptions": {"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$", "typeString": "function (bytes memory) pure returns (bytes32)"}}, "id": 1209, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "1404:27:4", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "functionReturnParameters": 1199, "id": 1210, "nodeType": "Return", "src": "1397:34:4"}]}}]}, "functionSelector": "9580f1f2", "id": 1223, "implemented": true, "kind": "function", "modifiers": [], "name": "parentHash", "nameLocation": "1198:10:4", "nodeType": "FunctionDefinition", "parameters": {"id": 1196, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1193, "mutability": "mutable", "name": "a", "nameLocation": "1217:1:4", "nodeType": "VariableDeclaration", "scope": 1223, "src": "1209:9:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 1192, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "1209:7:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 1195, "mutability": "mutable", "name": "b", "nameLocation": "1228:1:4", "nodeType": "VariableDeclaration", "scope": 1223, "src": "1220:9:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 1194, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "1220:7:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "1208:22:4"}, "returnParameters": {"id": 1199, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1198, "mutability": "mutable", "name": "", "nameLocation": "-1:-1:-1", "nodeType": "VariableDeclaration", "scope": 1223, "src": "1252:7:4", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 1197, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "1252:7:4", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "1251:9:4"}, "scope": 1224, "src": "1189:324:4", "stateMutability": "pure", "virtual": false, "visibility": "public"}], "scope": 1225, "src": "176:1340:4", "usedErrors": []}], "src": "42:1475:4"}, "compiler": {"version": "0.8.9+commit.e5eed63a", "evm_version": "istanbul", "optimizer": {"enabled": true, "runs": 200}}, "contractName": "MerkleLib", "deployedBytecode": "73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80639580f1f2146100455780639da7347c1461006b575b600080fd5b610058610053366004610139565b61008e565b6040519081526020015b60405180910390f35b61007e610079366004610171565b6100e9565b6040519015158152602001610062565b6000818310156100ca5760408051602081018590529081018390526060015b6040516020818303038152906040528051906020012090506100e3565b60408051602081018490529081018490526060016100ad565b92915050565b600082815b835181101561012e5761011a8285838151811061010d5761010d610244565b602002602001015161008e565b915061012760018261025a565b90506100ee565b509093149392505050565b6000806040838503121561014c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561018657600080fd5b833592506020808501359250604085013567ffffffffffffffff808211156101ad57600080fd5b818701915087601f8301126101c157600080fd5b8135818111156101d3576101d361015b565b8060051b604051601f19603f830116810181811085821117156101f8576101f861015b565b60405291825284820192508381018501918a83111561021657600080fd5b938501935b828510156102345784358452938501939285019261021b565b8096505050505050509250925092565b634e487b7160e01b600052603260045260246000fd5b6000821982111561027b57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212206b4853e1aa44b049313c727e05f1e7d5e7b4d9fe084df81a7b27d791bd6eefd564736f6c63430008090033", "deployedSourceMap": "176:1340:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1189:324;;;;;;:::i;:::-;;:::i;:::-;;;421:25:8;;;409:2;394:18;1189:324:4;;;;;;;;521:662;;;;;;:::i;:::-;;:::i;:::-;;;2018:14:8;;2011:22;1993:41;;1981:2;1966:18;521:662:4;1845:195:8;1189:324:4;1252:7;1380:1;1376;:5;1372:135;;;1414:16;;;;;;2219:25:8;;;2260:18;;;2253:34;;;2192:18;;1414:16:4;;;;;;;;;;;;;1404:27;;;;;;1397:34;;;;1372:135;1479:16;;;;;;2219:25:8;;;2260:18;;;2253:34;;;2192:18;;1479:16:4;2045:248:8;1372:135:4;1189:324;;;;:::o;521:662::-;615:4;653;615;858:115;879:5;:12;875:1;:16;858:115;;;929:33;940:11;953:5;959:1;953:8;;;;;;;;:::i;:::-;;;;;;;929:10;:33::i;:::-;915:47;-1:-1:-1;893:6:4;898:1;893:6;;:::i;:::-;;;858:115;;;-1:-1:-1;1157:19:4;;;;521:662;-1:-1:-1;;;521:662:4:o;14:248:8:-;82:6;90;143:2;131:9;122:7;118:23;114:32;111:52;;;159:1;156;149:12;111:52;-1:-1:-1;;182:23:8;;;252:2;237:18;;;224:32;;-1:-1:-1;14:248:8:o;457:127::-;518:10;513:3;509:20;506:1;499:31;549:4;546:1;539:15;573:4;570:1;563:15;589:1251;691:6;699;707;760:2;748:9;739:7;735:23;731:32;728:52;;;776:1;773;766:12;728:52;812:9;799:23;789:33;;841:2;890;879:9;875:18;862:32;852:42;;945:2;934:9;930:18;917:32;968:18;1009:2;1001:6;998:14;995:34;;;1025:1;1022;1015:12;995:34;1063:6;1052:9;1048:22;1038:32;;1108:7;1101:4;1097:2;1093:13;1089:27;1079:55;;1130:1;1127;1120:12;1079:55;1166:2;1153:16;1188:2;1184;1181:10;1178:36;;;1194:18;;:::i;:::-;1240:2;1237:1;1233:10;1272:2;1266:9;1335:2;1331:7;1326:2;1322;1318:11;1314:25;1306:6;1302:38;1390:6;1378:10;1375:22;1370:2;1358:10;1355:18;1352:46;1349:72;;;1401:18;;:::i;:::-;1437:2;1430:22;1487:18;;;1521:15;;;;-1:-1:-1;1563:11:8;;;1559:20;;;1591:19;;;1588:39;;;1623:1;1620;1613:12;1588:39;1647:11;;;;1667:142;1683:6;1678:3;1675:15;1667:142;;;1749:17;;1737:30;;1700:12;;;;1787;;;;1667:142;;;1828:6;1818:16;;;;;;;;589:1251;;;;;:::o;2298:127::-;2359:10;2354:3;2350:20;2347:1;2340:31;2390:4;2387:1;2380:15;2414:4;2411:1;2404:15;2430:225;2470:3;2501:1;2497:6;2494:1;2491:13;2488:136;;;2546:10;2541:3;2537:20;2534:1;2527:31;2581:4;2578:1;2571:15;2609:4;2606:1;2599:15;2488:136;-1:-1:-1;2640:9:8;;2430:225::o", "language": "Solidity", "natspec": {"methods": {}, "kind": "dev", "version": 1}, "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x40 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9580F1F2 EQ PUSH2 0x45 JUMPI DUP1 PUSH4 0x9DA7347C EQ PUSH2 0x6B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x58 PUSH2 0x53 CALLDATASIZE PUSH1 0x4 PUSH2 0x139 JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7E PUSH2 0x79 CALLDATASIZE PUSH1 0x4 PUSH2 0x171 JUMP JUMPDEST PUSH2 0xE9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x62 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT ISZERO PUSH2 0xCA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0xE3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 ADD PUSH2 0xAD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x12E JUMPI PUSH2 0x11A DUP3 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x10D JUMPI PUSH2 0x10D PUSH2 0x244 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x8E JUMP JUMPDEST SWAP2 POP PUSH2 0x127 PUSH1 0x1 DUP3 PUSH2 0x25A JUMP JUMPDEST SWAP1 POP PUSH2 0xEE JUMP JUMPDEST POP SWAP1 SWAP4 EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x14C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP1 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1D3 JUMPI PUSH2 0x1D3 PUSH2 0x15B JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x1F8 JUMPI PUSH2 0x1F8 PUSH2 0x15B JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP11 DUP4 GT ISZERO PUSH2 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x234 JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x21B JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x27B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0x4853E1AA44B049313C727E05 CALL 0xE7 0xD5 0xE7 0xB4 0xD9 INVALID ADDMOD 0x4D 0xF8 BYTE PUSH28 0x27D791BD6EEFD564736F6C6343000809003300000000000000000000 ", "sha1": "c47fcc992df8cd9c61ad16a1bca6a26cc7675115", "source": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\n// This library is used to check merkle proofs very efficiently. Each additional proof element adds ~1000 gas\nlibrary MerkleLib {\n\n    // This is the main function that will be called by contracts. It assumes the leaf is already hashed, as in,\n    // it is not raw data but the hash of that. This is because the leaf data could be any combination of hashable\n    // datatypes, so we let contracts hash the data themselves to keep this function simple\n    function verifyProof(bytes32 root, bytes32 leaf, bytes32[] memory proof) public pure returns (bool) {\n        bytes32 currentHash = leaf;\n\n        // the proof is all siblings of the ancestors of the leaf (including the sibling of the leaf itself)\n        // each iteration of this loop steps one layer higher in the merkle tree\n        for (uint i = 0; i < proof.length; i += 1) {\n            currentHash = parentHash(currentHash, proof[i]);\n        }\n\n        // does the result match the expected root? if so this leaf was committed to when the root was posted\n        // else we must assume the data was not included\n        return currentHash == root;\n    }\n\n    function parentHash(bytes32 a, bytes32 b) public pure returns (bytes32) {\n        // the convention is that the inputs are sorted, this removes ambiguity about tree structure\n        if (a < b) {\n            return keccak256(abi.encode(a, b));\n        } else {\n            return keccak256(abi.encode(b, a));\n        }\n    }\n\n}\n", "sourceMap": "176:1340:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;176:1340:4;;;;;;;;;;;;;;;;;", "sourcePath": "contracts/MerkleLib.sol", "deployment": {"address": "0xcA20a3AAF600a873F9F6b5B663Db7B9275f16ce9", "chainid": "43113", "blockHeight": 8938053}}