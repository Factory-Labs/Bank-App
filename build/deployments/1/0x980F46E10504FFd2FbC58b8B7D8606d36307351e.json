{"abi": [{"anonymous": false, "inputs": [{"indexed": true, "internalType": "uint256", "name": "index", "type": "uint256"}, {"indexed": true, "internalType": "address", "name": "tokenAddress", "type": "address"}, {"indexed": false, "internalType": "bytes32", "name": "newRoot", "type": "bytes32"}, {"indexed": false, "internalType": "bytes32", "name": "ipfsHash", "type": "bytes32"}], "name": "MerkleTreeAdded", "type": "event"}, {"anonymous": false, "inputs": [{"indexed": true, "internalType": "address", "name": "destination", "type": "address"}, {"indexed": false, "internalType": "uint256", "name": "numTokens", "type": "uint256"}, {"indexed": false, "internalType": "uint256", "name": "tokensLeft", "type": "uint256"}, {"indexed": true, "internalType": "uint256", "name": "merkleIndex", "type": "uint256"}], "name": "WithdrawalOccurred", "type": "event"}, {"inputs": [], "name": "PRECISION", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "bytes32", "name": "newRoot", "type": "bytes32"}, {"internalType": "bytes32", "name": "ipfsHash", "type": "bytes32"}, {"internalType": "uint256", "name": "minEndTime", "type": "uint256"}, {"internalType": "uint256", "name": "maxEndTime", "type": "uint256"}, {"internalType": "uint256", "name": "pctUpFront", "type": "uint256"}, {"internalType": "address", "name": "depositToken", "type": "address"}, {"internalType": "uint256", "name": "tokenBalance", "type": "uint256"}], "name": "addMerkleTree", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "treeIndex", "type": "uint256"}, {"internalType": "uint256", "name": "value", "type": "uint256"}], "name": "depositTokens", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "merkleIndex", "type": "uint256"}, {"internalType": "address", "name": "destination", "type": "address"}, {"internalType": "uint256", "name": "vestingTime", "type": "uint256"}, {"internalType": "uint256", "name": "minTotalPayments", "type": "uint256"}, {"internalType": "uint256", "name": "maxTotalPayments", "type": "uint256"}, {"internalType": "bytes32[]", "name": "proof", "type": "bytes32[]"}], "name": "initialize", "outputs": [], "stateMutability": "nonpayable", "type": "function"}, {"inputs": [{"internalType": "address", "name": "", "type": "address"}, {"internalType": "uint256", "name": "", "type": "uint256"}], "name": "initialized", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "name": "merkleTrees", "outputs": [{"internalType": "bytes32", "name": "merkleRoot", "type": "bytes32"}, {"internalType": "bytes32", "name": "ipfsHash", "type": "bytes32"}, {"internalType": "uint256", "name": "minEndTime", "type": "uint256"}, {"internalType": "uint256", "name": "maxEndTime", "type": "uint256"}, {"internalType": "uint256", "name": "pctUpFront", "type": "uint256"}, {"internalType": "address", "name": "tokenAddress", "type": "address"}, {"internalType": "uint256", "name": "tokenBalance", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [], "name": "numTrees", "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "address", "name": "", "type": "address"}, {"internalType": "uint256", "name": "", "type": "uint256"}], "name": "tranches", "outputs": [{"internalType": "uint256", "name": "totalCoins", "type": "uint256"}, {"internalType": "uint256", "name": "currentCoins", "type": "uint256"}, {"internalType": "uint256", "name": "startTime", "type": "uint256"}, {"internalType": "uint256", "name": "endTime", "type": "uint256"}, {"internalType": "uint256", "name": "coinsPerSecond", "type": "uint256"}, {"internalType": "uint256", "name": "lastWithdrawalTime", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "merkleIndex", "type": "uint256"}, {"internalType": "uint256", "name": "vestingTime", "type": "uint256"}, {"internalType": "uint256", "name": "minTotalPayments", "type": "uint256"}, {"internalType": "uint256", "name": "maxTotalPayments", "type": "uint256"}], "name": "verifyVestingSchedule", "outputs": [{"internalType": "bool", "name": "", "type": "bool"}, {"internalType": "uint256", "name": "", "type": "uint256"}, {"internalType": "uint256", "name": "", "type": "uint256"}, {"internalType": "uint256", "name": "", "type": "uint256"}], "stateMutability": "view", "type": "function"}, {"inputs": [{"internalType": "uint256", "name": "merkleIndex", "type": "uint256"}, {"internalType": "address", "name": "destination", "type": "address"}], "name": "withdraw", "outputs": [], "stateMutability": "nonpayable", "type": "function"}], "allSourcePaths": {"4": "contracts/MerkleLib.sol", "5": "contracts/MerkleResistor.sol", "7": "interfaces/IERC20.sol"}, "ast": {"absolutePath": "contracts/MerkleResistor.sol", "exportedSymbols": {"IERC20": [2201], "MerkleLib": [1224], "MerkleResistor": [1761]}, "id": 1762, "license": "GPL-3.0-only", "nodeType": "SourceUnit", "nodes": [{"id": 1226, "literals": ["solidity", "0.8", ".9"], "nodeType": "PragmaDirective", "src": "42:22:5"}, {"absolutePath": "interfaces/IERC20.sol", "file": "../interfaces/IERC20.sol", "id": 1227, "nameLocation": "-1:-1:-1", "nodeType": "ImportDirective", "scope": 1762, "sourceUnit": 2202, "src": "66:34:5", "symbolAliases": [], "unitAlias": ""}, {"absolutePath": "contracts/MerkleLib.sol", "file": "./MerkleLib.sol", "id": 1228, "nameLocation": "-1:-1:-1", "nodeType": "ImportDirective", "scope": 1762, "sourceUnit": 1225, "src": "101:25:5", "symbolAliases": [], "unitAlias": ""}, {"abstract": false, "baseContracts": [], "canonicalName": "MerkleResistor", "contractDependencies": [], "contractKind": "contract", "fullyImplemented": true, "id": 1761, "linearizedBaseContracts": [1761], "name": "MerkleResistor", "nameLocation": "239:14:5", "nodeType": "ContractDefinition", "nodes": [{"id": 1231, "libraryName": {"id": 1229, "name": "MerkleLib", "nodeType": "IdentifierPath", "referencedDeclaration": 1224, "src": "266:9:5"}, "nodeType": "UsingForDirective", "src": "260:28:5", "typeName": {"id": 1230, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "280:7:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}}, {"constant": false, "functionSelector": "390b7c66", "id": 1234, "mutability": "mutable", "name": "numTrees", "nameLocation": "345:8:5", "nodeType": "VariableDeclaration", "scope": 1761, "src": "333:24:5", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1232, "name": "uint", "nodeType": "ElementaryTypeName", "src": "333:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": {"hexValue": "30", "id": 1233, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "356:1:5", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "visibility": "public"}, {"canonicalName": "MerkleResistor.Tranche", "id": 1247, "members": [{"constant": false, "id": 1236, "mutability": "mutable", "name": "totalCoins", "nameLocation": "465:10:5", "nodeType": "VariableDeclaration", "scope": 1247, "src": "460:15:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1235, "name": "uint", "nodeType": "ElementaryTypeName", "src": "460:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1238, "mutability": "mutable", "name": "currentCoins", "nameLocation": "537:12:5", "nodeType": "VariableDeclaration", "scope": 1247, "src": "532:17:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1237, "name": "uint", "nodeType": "ElementaryTypeName", "src": "532:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1240, "mutability": "mutable", "name": "startTime", "nameLocation": "631:9:5", "nodeType": "VariableDeclaration", "scope": 1247, "src": "626:14:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1239, "name": "uint", "nodeType": "ElementaryTypeName", "src": "626:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1242, "mutability": "mutable", "name": "endTime", "nameLocation": "693:7:5", "nodeType": "VariableDeclaration", "scope": 1247, "src": "688:12:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1241, "name": "uint", "nodeType": "ElementaryTypeName", "src": "688:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1244, "mutability": "mutable", "name": "coinsPerSecond", "nameLocation": "753:14:5", "nodeType": "VariableDeclaration", "scope": 1247, "src": "748:19:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1243, "name": "uint", "nodeType": "ElementaryTypeName", "src": "748:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1246, "mutability": "mutable", "name": "lastWithdrawalTime", "nameLocation": "870:18:5", "nodeType": "VariableDeclaration", "scope": 1247, "src": "865:23:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1245, "name": "uint", "nodeType": "ElementaryTypeName", "src": "865:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "name": "Tranche", "nameLocation": "442:7:5", "nodeType": "StructDefinition", "scope": 1761, "src": "435:548:5", "visibility": "public"}, {"canonicalName": "MerkleResistor.MerkleTree", "id": 1262, "members": [{"constant": false, "id": 1249, "mutability": "mutable", "name": "merkleRoot", "nameLocation": "1138:10:5", "nodeType": "VariableDeclaration", "scope": 1262, "src": "1130:18:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 1248, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "1130:7:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 1251, "mutability": "mutable", "name": "ipfsHash", "nameLocation": "1253:8:5", "nodeType": "VariableDeclaration", "scope": 1262, "src": "1245:16:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 1250, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "1245:7:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 1253, "mutability": "mutable", "name": "minEndTime", "nameLocation": "1372:10:5", "nodeType": "VariableDeclaration", "scope": 1262, "src": "1367:15:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1252, "name": "uint", "nodeType": "ElementaryTypeName", "src": "1367:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1255, "mutability": "mutable", "name": "maxEndTime", "nameLocation": "1469:10:5", "nodeType": "VariableDeclaration", "scope": 1262, "src": "1464:15:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1254, "name": "uint", "nodeType": "ElementaryTypeName", "src": "1464:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1257, "mutability": "mutable", "name": "pctUpFront", "nameLocation": "1566:10:5", "nodeType": "VariableDeclaration", "scope": 1262, "src": "1561:15:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1256, "name": "uint", "nodeType": "ElementaryTypeName", "src": "1561:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1259, "mutability": "mutable", "name": "tokenAddress", "nameLocation": "1678:12:5", "nodeType": "VariableDeclaration", "scope": 1262, "src": "1670:20:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1258, "name": "address", "nodeType": "ElementaryTypeName", "src": "1670:7:5", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 1261, "mutability": "mutable", "name": "tokenBalance", "nameLocation": "1743:12:5", "nodeType": "VariableDeclaration", "scope": 1262, "src": "1738:17:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1260, "name": "uint", "nodeType": "ElementaryTypeName", "src": "1738:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "name": "MerkleTree", "nameLocation": "1109:10:5", "nodeType": "StructDefinition", "scope": 1761, "src": "1102:745:5", "visibility": "public"}, {"constant": false, "functionSelector": "86bb8249", "id": 1268, "mutability": "mutable", "name": "initialized", "nameLocation": "2224:11:5", "nodeType": "VariableDeclaration", "scope": 1761, "src": "2173:62:5", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$", "typeString": "mapping(address => mapping(uint256 => bool))"}, "typeName": {"id": 1267, "keyType": {"id": 1263, "name": "address", "nodeType": "ElementaryTypeName", "src": "2182:7:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Mapping", "src": "2173:43:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$", "typeString": "mapping(address => mapping(uint256 => bool))"}, "valueType": {"id": 1266, "keyType": {"id": 1264, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2202:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Mapping", "src": "2193:22:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$", "typeString": "mapping(uint256 => bool)"}, "valueType": {"id": 1265, "name": "bool", "nodeType": "ElementaryTypeName", "src": "2210:4:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}}}, "visibility": "public"}, {"constant": false, "functionSelector": "85d88cb1", "id": 1273, "mutability": "mutable", "name": "merkleTrees", "nameLocation": "2369:11:5", "nodeType": "VariableDeclaration", "scope": 1761, "src": "2333:47:5", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$1262_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree)"}, "typeName": {"id": 1272, "keyType": {"id": 1269, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2342:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Mapping", "src": "2333:28:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$1262_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree)"}, "valueType": {"id": 1271, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 1270, "name": "MerkleTree", "nodeType": "IdentifierPath", "referencedDeclaration": 1262, "src": "2350:10:5"}, "referencedDeclaration": 1262, "src": "2350:10:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree"}}}, "visibility": "public"}, {"constant": false, "functionSelector": "c26cb54f", "id": 1280, "mutability": "mutable", "name": "tranches", "nameLocation": "2503:8:5", "nodeType": "VariableDeclaration", "scope": 1761, "src": "2449:62:5", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$1247_storage_$_$", "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche))"}, "typeName": {"id": 1279, "keyType": {"id": 1274, "name": "address", "nodeType": "ElementaryTypeName", "src": "2458:7:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "Mapping", "src": "2449:46:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$1247_storage_$_$", "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche))"}, "valueType": {"id": 1278, "keyType": {"id": 1275, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2478:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Mapping", "src": "2469:25:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$1247_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.Tranche)"}, "valueType": {"id": 1277, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 1276, "name": "Tranche", "nodeType": "IdentifierPath", "referencedDeclaration": 1247, "src": "2486:7:5"}, "referencedDeclaration": 1247, "src": "2486:7:5", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_storage_ptr", "typeString": "struct MerkleResistor.Tranche"}}}}, "visibility": "public"}, {"constant": true, "functionSelector": "aaf5eb68", "id": 1283, "mutability": "constant", "name": "PRECISION", "nameLocation": "2605:9:5", "nodeType": "VariableDeclaration", "scope": 1761, "src": "2584:40:5", "stateVariable": true, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1281, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2584:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "value": {"hexValue": "31303030303030", "id": 1282, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "2617:7:5", "typeDescriptions": {"typeIdentifier": "t_rational_1000000_by_1", "typeString": "int_const 1000000"}, "value": "1000000"}, "visibility": "public"}, {"anonymous": false, "id": 1293, "name": "WithdrawalOccurred", "nameLocation": "2675:18:5", "nodeType": "EventDefinition", "parameters": {"id": 1292, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1285, "indexed": true, "mutability": "mutable", "name": "destination", "nameLocation": "2710:11:5", "nodeType": "VariableDeclaration", "scope": 1293, "src": "2694:27:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1284, "name": "address", "nodeType": "ElementaryTypeName", "src": "2694:7:5", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 1287, "indexed": false, "mutability": "mutable", "name": "numTokens", "nameLocation": "2728:9:5", "nodeType": "VariableDeclaration", "scope": 1293, "src": "2723:14:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1286, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2723:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1289, "indexed": false, "mutability": "mutable", "name": "tokensLeft", "nameLocation": "2744:10:5", "nodeType": "VariableDeclaration", "scope": 1293, "src": "2739:15:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1288, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2739:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1291, "indexed": true, "mutability": "mutable", "name": "merkleIndex", "nameLocation": "2769:11:5", "nodeType": "VariableDeclaration", "scope": 1293, "src": "2756:24:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1290, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2756:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "2693:88:5"}, "src": "2669:113:5"}, {"anonymous": false, "id": 1303, "name": "MerkleTreeAdded", "nameLocation": "2827:15:5", "nodeType": "EventDefinition", "parameters": {"id": 1302, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1295, "indexed": true, "mutability": "mutable", "name": "index", "nameLocation": "2856:5:5", "nodeType": "VariableDeclaration", "scope": 1303, "src": "2843:18:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1294, "name": "uint", "nodeType": "ElementaryTypeName", "src": "2843:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1297, "indexed": true, "mutability": "mutable", "name": "tokenAddress", "nameLocation": "2879:12:5", "nodeType": "VariableDeclaration", "scope": 1303, "src": "2863:28:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1296, "name": "address", "nodeType": "ElementaryTypeName", "src": "2863:7:5", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 1299, "indexed": false, "mutability": "mutable", "name": "newRoot", "nameLocation": "2901:7:5", "nodeType": "VariableDeclaration", "scope": 1303, "src": "2893:15:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 1298, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "2893:7:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 1301, "indexed": false, "mutability": "mutable", "name": "ipfsHash", "nameLocation": "2918:8:5", "nodeType": "VariableDeclaration", "scope": 1303, "src": "2910:16:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 1300, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "2910:7:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "src": "2842:85:5"}, "src": "2821:107:5"}, {"body": {"id": 1361, "nodeType": "Block", "src": "3120:918:5", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1323, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1321, "name": "pctUpFront", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1313, "src": "3182:10:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"hexValue": "313030", "id": 1322, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3195:3:5", "typeDescriptions": {"typeIdentifier": "t_rational_100_by_1", "typeString": "int_const 100"}, "value": "100"}, "src": "3182:16:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "706374557046726f6e74203e3d20313030", "id": 1324, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "3200:19:5", "typeDescriptions": {"typeIdentifier": "t_stringliteral_5d62361d64e7f8cf4fff457bf47173a531e51b64da30badb8e72846a2642165f", "typeString": "literal_string \"pctUpFront >= 100\""}, "value": "pctUpFront >= 100"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_5d62361d64e7f8cf4fff457bf47173a531e51b64da30badb8e72846a2642165f", "typeString": "literal_string \"pctUpFront >= 100\""}], "id": 1320, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "3174:7:5", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 1325, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3174:46:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1326, "nodeType": "ExpressionStatement", "src": "3174:46:5"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1330, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1328, "name": "minEndTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1309, "src": "3238:10:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"id": 1329, "name": "maxEndTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1311, "src": "3251:10:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "3238:23:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "6d696e456e6454696d65206d757374206265206c657373207468616e206d6178456e6454696d65", "id": 1331, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "3263:41:5", "typeDescriptions": {"typeIdentifier": "t_stringliteral_b9f494a656d13b13a08d4cf899120fa0e5253d75c531a056af397669b40d9b3e", "typeString": "literal_string \"minEndTime must be less than maxEndTime\""}, "value": "minEndTime must be less than maxEndTime"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_b9f494a656d13b13a08d4cf899120fa0e5253d75c531a056af397669b40d9b3e", "typeString": "literal_string \"minEndTime must be less than maxEndTime\""}], "id": 1327, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "3230:7:5", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 1332, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3230:75:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1333, "nodeType": "ExpressionStatement", "src": "3230:75:5"}, {"expression": {"id": 1347, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"id": 1334, "name": "merkleTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1273, "src": "3372:11:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$1262_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"}}, "id": 1337, "indexExpression": {"id": 1336, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "++", "prefix": true, "src": "3384:10:5", "subExpression": {"id": 1335, "name": "numTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1234, "src": "3386:8:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "3372:23:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage", "typeString": "struct MerkleResistor.MerkleTree storage ref"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 1339, "name": "newRoot", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1305, "src": "3422:7:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"id": 1340, "name": "ipfsHash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1307, "src": "3443:8:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"id": 1341, "name": "minEndTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1309, "src": "3465:10:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1342, "name": "maxEndTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1311, "src": "3489:10:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1343, "name": "pctUpFront", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1313, "src": "3513:10:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1344, "name": "depositToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1315, "src": "3537:12:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"hexValue": "30", "id": 1345, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "3563:1:5", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}], "id": 1338, "name": "MerkleTree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1262, "src": "3398:10:5", "typeDescriptions": {"typeIdentifier": "t_type$_t_struct$_MerkleTree_$1262_storage_ptr_$", "typeString": "type(struct MerkleResistor.MerkleTree storage pointer)"}}, "id": 1346, "isConstant": false, "isLValue": false, "isPure": false, "kind": "structConstructorCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3398:247:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "src": "3372:273:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage", "typeString": "struct MerkleResistor.MerkleTree storage ref"}}, "id": 1348, "nodeType": "ExpressionStatement", "src": "3372:273:5"}, {"expression": {"arguments": [{"id": 1350, "name": "numTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1234, "src": "3935:8:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1351, "name": "tokenBalance", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1317, "src": "3945:12:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 1349, "name": "depositTokens", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1400, "src": "3921:13:5", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$returns$__$", "typeString": "function (uint256,uint256)"}}, "id": 1352, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3921:37:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1353, "nodeType": "ExpressionStatement", "src": "3921:37:5"}, {"eventCall": {"arguments": [{"id": 1355, "name": "numTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1234, "src": "3989:8:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1356, "name": "depositToken", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1315, "src": "3999:12:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 1357, "name": "newRoot", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1305, "src": "4013:7:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"id": 1358, "name": "ipfsHash", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1307, "src": "4022:8:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}], "id": 1354, "name": "MerkleTreeAdded", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1303, "src": "3973:15:5", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_bytes32_$_t_bytes32_$returns$__$", "typeString": "function (uint256,address,bytes32,bytes32)"}}, "id": 1359, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "3973:58:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1360, "nodeType": "EmitStatement", "src": "3968:63:5"}]}, "functionSelector": "d71383ed", "id": 1362, "implemented": true, "kind": "function", "modifiers": [], "name": "addMerkleTree", "nameLocation": "2972:13:5", "nodeType": "FunctionDefinition", "parameters": {"id": 1318, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1305, "mutability": "mutable", "name": "newRoot", "nameLocation": "2994:7:5", "nodeType": "VariableDeclaration", "scope": 1362, "src": "2986:15:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 1304, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "2986:7:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 1307, "mutability": "mutable", "name": "ipfsHash", "nameLocation": "3011:8:5", "nodeType": "VariableDeclaration", "scope": 1362, "src": "3003:16:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 1306, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "3003:7:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}, {"constant": false, "id": 1309, "mutability": "mutable", "name": "minEndTime", "nameLocation": "3026:10:5", "nodeType": "VariableDeclaration", "scope": 1362, "src": "3021:15:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1308, "name": "uint", "nodeType": "ElementaryTypeName", "src": "3021:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1311, "mutability": "mutable", "name": "maxEndTime", "nameLocation": "3043:10:5", "nodeType": "VariableDeclaration", "scope": 1362, "src": "3038:15:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1310, "name": "uint", "nodeType": "ElementaryTypeName", "src": "3038:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1313, "mutability": "mutable", "name": "pctUpFront", "nameLocation": "3060:10:5", "nodeType": "VariableDeclaration", "scope": 1362, "src": "3055:15:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1312, "name": "uint", "nodeType": "ElementaryTypeName", "src": "3055:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1315, "mutability": "mutable", "name": "depositToken", "nameLocation": "3080:12:5", "nodeType": "VariableDeclaration", "scope": 1362, "src": "3072:20:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1314, "name": "address", "nodeType": "ElementaryTypeName", "src": "3072:7:5", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 1317, "mutability": "mutable", "name": "tokenBalance", "nameLocation": "3099:12:5", "nodeType": "VariableDeclaration", "scope": 1362, "src": "3094:17:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1316, "name": "uint", "nodeType": "ElementaryTypeName", "src": "3094:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "2985:127:5"}, "returnParameters": {"id": 1319, "nodeType": "ParameterList", "parameters": [], "src": "3120:0:5"}, "scope": 1761, "src": "2963:1075:5", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 1399, "nodeType": "Block", "src": "4134:1055:5", "statements": [{"assignments": [1371], "declarations": [{"constant": false, "id": 1371, "mutability": "mutable", "name": "merkleTree", "nameLocation": "4198:10:5", "nodeType": "VariableDeclaration", "scope": 1399, "src": "4179:29:5", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree"}, "typeName": {"id": 1370, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 1369, "name": "MerkleTree", "nodeType": "IdentifierPath", "referencedDeclaration": 1262, "src": "4179:10:5"}, "referencedDeclaration": 1262, "src": "4179:10:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree"}}, "visibility": "internal"}], "id": 1375, "initialValue": {"baseExpression": {"id": 1372, "name": "merkleTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1273, "src": "4211:11:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$1262_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"}}, "id": 1374, "indexExpression": {"id": 1373, "name": "treeIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1364, "src": "4223:9:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "4211:22:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage", "typeString": "struct MerkleResistor.MerkleTree storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "4179:54:5"}, {"expression": {"id": 1380, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 1376, "name": "merkleTree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1371, "src": "4306:10:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree storage pointer"}}, "id": 1378, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "tokenBalance", "nodeType": "MemberAccess", "referencedDeclaration": 1261, "src": "4306:23:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "+=", "rightHandSide": {"id": 1379, "name": "value", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1366, "src": "4333:5:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "4306:32:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1381, "nodeType": "ExpressionStatement", "src": "4306:32:5"}, {"expression": {"arguments": [{"arguments": [{"expression": {"id": 1388, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -15, "src": "5123:3:5", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1389, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "src": "5123:10:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"arguments": [{"id": 1392, "name": "this", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -28, "src": "5143:4:5", "typeDescriptions": {"typeIdentifier": "t_contract$_MerkleResistor_$1761", "typeString": "contract MerkleResistor"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_contract$_MerkleResistor_$1761", "typeString": "contract MerkleResistor"}], "id": 1391, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "5135:7:5", "typeDescriptions": {"typeIdentifier": "t_type$_t_address_$", "typeString": "type(address)"}, "typeName": {"id": 1390, "name": "address", "nodeType": "ElementaryTypeName", "src": "5135:7:5", "typeDescriptions": {}}}, "id": 1393, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5135:13:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 1394, "name": "value", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1366, "src": "5150:5:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"expression": {"id": 1384, "name": "merkleTree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1371, "src": "5085:10:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree storage pointer"}}, "id": 1385, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 1259, "src": "5085:23:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 1383, "name": "IERC20", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2201, "src": "5078:6:5", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_IERC20_$2201_$", "typeString": "type(contract IERC20)"}}, "id": 1386, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5078:31:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$2201", "typeString": "contract IERC20"}}, "id": 1387, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "transferFrom", "nodeType": "MemberAccess", "referencedDeclaration": 2182, "src": "5078:44:5", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$", "typeString": "function (address,address,uint256) external returns (bool)"}}, "id": 1395, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5078:78:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4552433230207472616e73666572206661696c6564", "id": 1396, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "5158:23:5", "typeDescriptions": {"typeIdentifier": "t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff", "typeString": "literal_string \"ERC20 transfer failed\""}, "value": "ERC20 transfer failed"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff", "typeString": "literal_string \"ERC20 transfer failed\""}], "id": 1382, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "5070:7:5", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 1397, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5070:112:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1398, "nodeType": "ExpressionStatement", "src": "5070:112:5"}]}, "functionSelector": "f16ad51e", "id": 1400, "implemented": true, "kind": "function", "modifiers": [], "name": "depositTokens", "nameLocation": "4085:13:5", "nodeType": "FunctionDefinition", "parameters": {"id": 1367, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1364, "mutability": "mutable", "name": "treeIndex", "nameLocation": "4104:9:5", "nodeType": "VariableDeclaration", "scope": 1400, "src": "4099:14:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1363, "name": "uint", "nodeType": "ElementaryTypeName", "src": "4099:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1366, "mutability": "mutable", "name": "value", "nameLocation": "4120:5:5", "nodeType": "VariableDeclaration", "scope": 1400, "src": "4115:10:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1365, "name": "uint", "nodeType": "ElementaryTypeName", "src": "4115:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "4098:28:5"}, "returnParameters": {"id": 1368, "nodeType": "ParameterList", "parameters": [], "src": "4134:0:5"}, "scope": 1761, "src": "4076:1113:5", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 1513, "nodeType": "Block", "src": "5606:1830:5", "statements": [{"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_address", "typeString": "address"}, "id": 1420, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 1417, "name": "msg", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -15, "src": "5681:3:5", "typeDescriptions": {"typeIdentifier": "t_magic_message", "typeString": "msg"}}, "id": 1418, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "sender", "nodeType": "MemberAccess", "src": "5681:10:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"id": 1419, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1404, "src": "5695:11:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "src": "5681:25:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616e636865", "id": 1421, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "5708:38:5", "typeDescriptions": {"typeIdentifier": "t_stringliteral_0d840bbe3638dabb5a6e726d796a00fcf265be6e5ba2e71e838f9bed65dfcb15", "typeString": "literal_string \"Can only initialize your own tranche\""}, "value": "Can only initialize your own tranche"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_0d840bbe3638dabb5a6e726d796a00fcf265be6e5ba2e71e838f9bed65dfcb15", "typeString": "literal_string \"Can only initialize your own tranche\""}], "id": 1416, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "5673:7:5", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 1422, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5673:74:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1423, "nodeType": "ExpressionStatement", "src": "5673:74:5"}, {"expression": {"arguments": [{"id": 1430, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "UnaryOperation", "operator": "!", "prefix": true, "src": "5801:38:5", "subExpression": {"baseExpression": {"baseExpression": {"id": 1425, "name": "initialized", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1268, "src": "5802:11:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$", "typeString": "mapping(address => mapping(uint256 => bool))"}}, "id": 1427, "indexExpression": {"id": 1426, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1404, "src": "5814:11:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "5802:24:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$", "typeString": "mapping(uint256 => bool)"}}, "id": 1429, "indexExpression": {"id": 1428, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1402, "src": "5827:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "5802:37:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "416c726561647920696e697469616c697a6564", "id": 1431, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "5841:21:5", "typeDescriptions": {"typeIdentifier": "t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0", "typeString": "literal_string \"Already initialized\""}, "value": "Already initialized"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0", "typeString": "literal_string \"Already initialized\""}], "id": 1424, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "5793:7:5", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 1432, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5793:70:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1433, "nodeType": "ExpressionStatement", "src": "5793:70:5"}, {"assignments": [1435], "declarations": [{"constant": false, "id": 1435, "mutability": "mutable", "name": "leaf", "nameLocation": "5944:4:5", "nodeType": "VariableDeclaration", "scope": 1513, "src": "5936:12:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, "typeName": {"id": 1434, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "5936:7:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "visibility": "internal"}], "id": 1444, "initialValue": {"arguments": [{"arguments": [{"id": 1439, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1404, "src": "5972:11:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 1440, "name": "minTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1408, "src": "5985:16:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1441, "name": "maxTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1410, "src": "6003:16:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"id": 1437, "name": "abi", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -1, "src": "5961:3:5", "typeDescriptions": {"typeIdentifier": "t_magic_abi", "typeString": "abi"}}, "id": 1438, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "memberName": "encode", "nodeType": "MemberAccess", "src": "5961:10:5", "typeDescriptions": {"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$", "typeString": "function () pure returns (bytes memory)"}}, "id": 1442, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5961:59:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes_memory_ptr", "typeString": "bytes memory"}], "id": 1436, "name": "keccak256", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -8, "src": "5951:9:5", "typeDescriptions": {"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$", "typeString": "function (bytes memory) pure returns (bytes32)"}}, "id": 1443, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "5951:70:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "nodeType": "VariableDeclarationStatement", "src": "5936:85:5"}, {"assignments": [1447], "declarations": [{"constant": false, "id": 1447, "mutability": "mutable", "name": "tree", "nameLocation": "6090:4:5", "nodeType": "VariableDeclaration", "scope": 1513, "src": "6072:22:5", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree"}, "typeName": {"id": 1446, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 1445, "name": "MerkleTree", "nodeType": "IdentifierPath", "referencedDeclaration": 1262, "src": "6072:10:5"}, "referencedDeclaration": 1262, "src": "6072:10:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree"}}, "visibility": "internal"}], "id": 1451, "initialValue": {"baseExpression": {"id": 1448, "name": "merkleTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1273, "src": "6097:11:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$1262_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"}}, "id": 1450, "indexExpression": {"id": 1449, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1402, "src": "6109:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6097:24:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage", "typeString": "struct MerkleResistor.MerkleTree storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "6072:49:5"}, {"expression": {"arguments": [{"arguments": [{"id": 1456, "name": "leaf", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1435, "src": "6245:4:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, {"id": 1457, "name": "proof", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1413, "src": "6251:5:5", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr", "typeString": "bytes32[] memory"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bytes32", "typeString": "bytes32"}, {"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr", "typeString": "bytes32[] memory"}], "expression": {"expression": {"id": 1453, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1447, "src": "6217:4:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 1454, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "merkleRoot", "nodeType": "MemberAccess", "referencedDeclaration": 1249, "src": "6217:15:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 1455, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "verifyProof", "nodeType": "MemberAccess", "referencedDeclaration": 1191, "src": "6217:27:5", "typeDescriptions": {"typeIdentifier": "t_function_delegatecall_pure$_t_bytes32_$_t_bytes32_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bool_$bound_to$_t_bytes32_$", "typeString": "function (bytes32,bytes32,bytes32[] memory) pure returns (bool)"}}, "id": 1458, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6217:40:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "5468652070726f6f6620636f756c64206e6f742062652076657269666965642e", "id": 1459, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "6259:34:5", "typeDescriptions": {"typeIdentifier": "t_stringliteral_6befa95a15378f3fa320a9fc597710e04d31854374b1378d40ad4268234fd91c", "typeString": "literal_string \"The proof could not be verified.\""}, "value": "The proof could not be verified."}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_6befa95a15378f3fa320a9fc597710e04d31854374b1378d40ad4268234fd91c", "typeString": "literal_string \"The proof could not be verified.\""}], "id": 1452, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "6209:7:5", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 1460, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6209:85:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1461, "nodeType": "ExpressionStatement", "src": "6209:85:5"}, {"expression": {"id": 1468, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"baseExpression": {"id": 1462, "name": "initialized", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1268, "src": "6392:11:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$", "typeString": "mapping(address => mapping(uint256 => bool))"}}, "id": 1465, "indexExpression": {"id": 1463, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1404, "src": "6404:11:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6392:24:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$", "typeString": "mapping(uint256 => bool)"}}, "id": 1466, "indexExpression": {"id": 1464, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1402, "src": "6417:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "6392:37:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"hexValue": "74727565", "id": 1467, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "6432:4:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "true"}, "src": "6392:44:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 1469, "nodeType": "ExpressionStatement", "src": "6392:44:5"}, {"assignments": [1471, 1473, 1475, 1477], "declarations": [{"constant": false, "id": 1471, "mutability": "mutable", "name": "valid", "nameLocation": "6453:5:5", "nodeType": "VariableDeclaration", "scope": 1513, "src": "6448:10:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 1470, "name": "bool", "nodeType": "ElementaryTypeName", "src": "6448:4:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}, {"constant": false, "id": 1473, "mutability": "mutable", "name": "totalCoins", "nameLocation": "6465:10:5", "nodeType": "VariableDeclaration", "scope": 1513, "src": "6460:15:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1472, "name": "uint", "nodeType": "ElementaryTypeName", "src": "6460:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1475, "mutability": "mutable", "name": "coinsPerSecond", "nameLocation": "6482:14:5", "nodeType": "VariableDeclaration", "scope": 1513, "src": "6477:19:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1474, "name": "uint", "nodeType": "ElementaryTypeName", "src": "6477:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1477, "mutability": "mutable", "name": "startTime", "nameLocation": "6503:9:5", "nodeType": "VariableDeclaration", "scope": 1513, "src": "6498:14:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1476, "name": "uint", "nodeType": "ElementaryTypeName", "src": "6498:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 1484, "initialValue": {"arguments": [{"id": 1479, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1402, "src": "6538:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1480, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1406, "src": "6551:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1481, "name": "minTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1408, "src": "6564:16:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1482, "name": "maxTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1410, "src": "6582:16:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 1478, "name": "verifyVestingSchedule", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1760, "src": "6516:21:5", "typeDescriptions": {"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$", "typeString": "function (uint256,uint256,uint256,uint256) view returns (bool,uint256,uint256,uint256)"}}, "id": 1483, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6516:83:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$", "typeString": "tuple(bool,uint256,uint256,uint256)"}}, "nodeType": "VariableDeclarationStatement", "src": "6447:152:5"}, {"expression": {"arguments": [{"id": 1486, "name": "valid", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1471, "src": "6617:5:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "496e76616c69642076657374696e67207363686564756c65", "id": 1487, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "6624:26:5", "typeDescriptions": {"typeIdentifier": "t_stringliteral_e7aa6925863169bd8cb1c379b7045e79f109b7df282905e5a05c3523fee8c286", "typeString": "literal_string \"Invalid vesting schedule\""}, "value": "Invalid vesting schedule"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_e7aa6925863169bd8cb1c379b7045e79f109b7df282905e5a05c3523fee8c286", "typeString": "literal_string \"Invalid vesting schedule\""}], "id": 1485, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "6609:7:5", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 1488, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6609:42:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1489, "nodeType": "ExpressionStatement", "src": "6609:42:5"}, {"expression": {"id": 1506, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"baseExpression": {"baseExpression": {"id": 1490, "name": "tranches", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1280, "src": "6845:8:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$1247_storage_$_$", "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche storage ref))"}}, "id": 1493, "indexExpression": {"id": 1491, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1404, "src": "6854:11:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "6845:21:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$1247_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"}}, "id": 1494, "indexExpression": {"id": 1492, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1402, "src": "6867:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "nodeType": "IndexAccess", "src": "6845:34:5", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_storage", "typeString": "struct MerkleResistor.Tranche storage ref"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"arguments": [{"id": 1496, "name": "totalCoins", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1473, "src": "6903:10:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1497, "name": "totalCoins", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1473, "src": "6979:10:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1498, "name": "startTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1477, "src": "7025:9:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1502, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 1499, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "7113:5:5", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 1500, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "7113:15:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"id": 1501, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1406, "src": "7131:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "7113:29:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1503, "name": "coinsPerSecond", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1475, "src": "7200:14:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1504, "name": "startTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1477, "src": "7268:9:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 1495, "name": "Tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1247, "src": "6882:7:5", "typeDescriptions": {"typeIdentifier": "t_type$_t_struct$_Tranche_$1247_storage_ptr_$", "typeString": "type(struct MerkleResistor.Tranche storage pointer)"}}, "id": 1505, "isConstant": false, "isLValue": false, "isPure": false, "kind": "structConstructorCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "6882:503:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_memory_ptr", "typeString": "struct MerkleResistor.Tranche memory"}}, "src": "6845:540:5", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_storage", "typeString": "struct MerkleResistor.Tranche storage ref"}}, "id": 1507, "nodeType": "ExpressionStatement", "src": "6845:540:5"}, {"expression": {"arguments": [{"id": 1509, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1402, "src": "7404:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1510, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1404, "src": "7417:11:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_address", "typeString": "address"}], "id": 1508, "name": "withdraw", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1623, "src": "7395:8:5", "typeDescriptions": {"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$__$", "typeString": "function (uint256,address)"}}, "id": 1511, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7395:34:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1512, "nodeType": "ExpressionStatement", "src": "7395:34:5"}]}, "functionSelector": "f287ad04", "id": 1514, "implemented": true, "kind": "function", "modifiers": [], "name": "initialize", "nameLocation": "5459:10:5", "nodeType": "FunctionDefinition", "parameters": {"id": 1414, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1402, "mutability": "mutable", "name": "merkleIndex", "nameLocation": "5475:11:5", "nodeType": "VariableDeclaration", "scope": 1514, "src": "5470:16:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1401, "name": "uint", "nodeType": "ElementaryTypeName", "src": "5470:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1404, "mutability": "mutable", "name": "destination", "nameLocation": "5496:11:5", "nodeType": "VariableDeclaration", "scope": 1514, "src": "5488:19:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1403, "name": "address", "nodeType": "ElementaryTypeName", "src": "5488:7:5", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}, {"constant": false, "id": 1406, "mutability": "mutable", "name": "vestingTime", "nameLocation": "5514:11:5", "nodeType": "VariableDeclaration", "scope": 1514, "src": "5509:16:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1405, "name": "uint", "nodeType": "ElementaryTypeName", "src": "5509:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1408, "mutability": "mutable", "name": "minTotalPayments", "nameLocation": "5532:16:5", "nodeType": "VariableDeclaration", "scope": 1514, "src": "5527:21:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1407, "name": "uint", "nodeType": "ElementaryTypeName", "src": "5527:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1410, "mutability": "mutable", "name": "maxTotalPayments", "nameLocation": "5555:16:5", "nodeType": "VariableDeclaration", "scope": 1514, "src": "5550:21:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1409, "name": "uint", "nodeType": "ElementaryTypeName", "src": "5550:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1413, "mutability": "mutable", "name": "proof", "nameLocation": "5590:5:5", "nodeType": "VariableDeclaration", "scope": 1514, "src": "5573:22:5", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr", "typeString": "bytes32[]"}, "typeName": {"baseType": {"id": 1411, "name": "bytes32", "nodeType": "ElementaryTypeName", "src": "5573:7:5", "typeDescriptions": {"typeIdentifier": "t_bytes32", "typeString": "bytes32"}}, "id": 1412, "nodeType": "ArrayTypeName", "src": "5573:9:5", "typeDescriptions": {"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr", "typeString": "bytes32[]"}}, "visibility": "internal"}], "src": "5469:127:5"}, "returnParameters": {"id": 1415, "nodeType": "ParameterList", "parameters": [], "src": "5606:0:5"}, "scope": 1761, "src": "5450:1986:5", "stateMutability": "nonpayable", "virtual": false, "visibility": "external"}, {"body": {"id": 1622, "nodeType": "Block", "src": "7727:2522:5", "statements": [{"expression": {"arguments": [{"baseExpression": {"baseExpression": {"id": 1522, "name": "initialized", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1268, "src": "7853:11:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_bool_$_$", "typeString": "mapping(address => mapping(uint256 => bool))"}}, "id": 1524, "indexExpression": {"id": 1523, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1518, "src": "7865:11:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "7853:24:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_bool_$", "typeString": "mapping(uint256 => bool)"}}, "id": 1526, "indexExpression": {"id": 1525, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1516, "src": "7878:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "7853:37:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "596f75206d75737420696e697469616c697a6520796f7572206163636f756e742066697273742e", "id": 1527, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "7892:41:5", "typeDescriptions": {"typeIdentifier": "t_stringliteral_4abd8331dd14b306cce990886a8c58b8be69cac04657ffd8c84a7e7c5940d2d1", "typeString": "literal_string \"You must initialize your account first.\""}, "value": "You must initialize your account first."}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_4abd8331dd14b306cce990886a8c58b8be69cac04657ffd8c84a7e7c5940d2d1", "typeString": "literal_string \"You must initialize your account first.\""}], "id": 1521, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "7845:7:5", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 1528, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "7845:89:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1529, "nodeType": "ExpressionStatement", "src": "7845:89:5"}, {"assignments": [1532], "declarations": [{"constant": false, "id": 1532, "mutability": "mutable", "name": "tranche", "nameLocation": "8001:7:5", "nodeType": "VariableDeclaration", "scope": 1622, "src": "7985:23:5", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_storage_ptr", "typeString": "struct MerkleResistor.Tranche"}, "typeName": {"id": 1531, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 1530, "name": "Tranche", "nodeType": "IdentifierPath", "referencedDeclaration": 1247, "src": "7985:7:5"}, "referencedDeclaration": 1247, "src": "7985:7:5", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_storage_ptr", "typeString": "struct MerkleResistor.Tranche"}}, "visibility": "internal"}], "id": 1538, "initialValue": {"baseExpression": {"baseExpression": {"id": 1533, "name": "tranches", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1280, "src": "8011:8:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_struct$_Tranche_$1247_storage_$_$", "typeString": "mapping(address => mapping(uint256 => struct MerkleResistor.Tranche storage ref))"}}, "id": 1535, "indexExpression": {"id": 1534, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1518, "src": "8020:11:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "8011:21:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Tranche_$1247_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.Tranche storage ref)"}}, "id": 1537, "indexExpression": {"id": 1536, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1516, "src": "8033:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "8011:34:5", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_storage", "typeString": "struct MerkleResistor.Tranche storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "7985:60:5"}, {"expression": {"arguments": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1543, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 1540, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1532, "src": "8102:7:5", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 1541, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCoins", "nodeType": "MemberAccess", "referencedDeclaration": 1238, "src": "8102:20:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"hexValue": "30", "id": 1542, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "8126:1:5", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "src": "8102:25:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "4e6f20636f696e73206c65667420746f207769746864726177", "id": 1544, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "8129:27:5", "typeDescriptions": {"typeIdentifier": "t_stringliteral_f5408369ba8a5a8ab8865a5c8cf9d54818bf598d281aa43e2647b1ce4add273e", "typeString": "literal_string \"No coins left to withdraw\""}, "value": "No coins left to withdraw"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_f5408369ba8a5a8ab8865a5c8cf9d54818bf598d281aa43e2647b1ce4add273e", "typeString": "literal_string \"No coins left to withdraw\""}], "id": 1539, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "8094:7:5", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 1545, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "8094:63:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1546, "nodeType": "ExpressionStatement", "src": "8094:63:5"}, {"assignments": [1548], "declarations": [{"constant": false, "id": 1548, "mutability": "mutable", "name": "currentWithdrawal", "nameLocation": "8172:17:5", "nodeType": "VariableDeclaration", "scope": 1622, "src": "8167:22:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1547, "name": "uint", "nodeType": "ElementaryTypeName", "src": "8167:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 1550, "initialValue": {"hexValue": "30", "id": 1549, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "8192:1:5", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, "nodeType": "VariableDeclarationStatement", "src": "8167:26:5"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1555, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 1551, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "8318:5:5", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 1552, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "8318:15:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">=", "rightExpression": {"expression": {"id": 1553, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1532, "src": "8337:7:5", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 1554, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "endTime", "nodeType": "MemberAccess", "referencedDeclaration": 1242, "src": "8337:15:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8318:34:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 1574, "nodeType": "Block", "src": "8425:263:5", "statements": [{"expression": {"id": 1572, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 1562, "name": "currentWithdrawal", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1548, "src": "8586:17:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1571, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1567, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 1563, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "8607:5:5", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 1564, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "8607:15:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"expression": {"id": 1565, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1532, "src": "8625:7:5", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 1566, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "lastWithdrawalTime", "nodeType": "MemberAccess", "referencedDeclaration": 1246, "src": "8625:26:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8607:44:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 1568, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "8606:46:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"expression": {"id": 1569, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1532, "src": "8655:7:5", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 1570, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "coinsPerSecond", "nodeType": "MemberAccess", "referencedDeclaration": 1244, "src": "8655:22:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8606:71:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8586:91:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1573, "nodeType": "ExpressionStatement", "src": "8586:91:5"}]}, "id": 1575, "nodeType": "IfStatement", "src": "8314:374:5", "trueBody": {"id": 1561, "nodeType": "Block", "src": "8354:65:5", "statements": [{"expression": {"id": 1559, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 1556, "name": "currentWithdrawal", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1548, "src": "8368:17:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 1557, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1532, "src": "8388:7:5", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 1558, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCoins", "nodeType": "MemberAccess", "referencedDeclaration": 1238, "src": "8388:20:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8368:40:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1560, "nodeType": "ExpressionStatement", "src": "8368:40:5"}]}}, {"assignments": [1578], "declarations": [{"constant": false, "id": 1578, "mutability": "mutable", "name": "tree", "nameLocation": "8739:4:5", "nodeType": "VariableDeclaration", "scope": 1622, "src": "8720:23:5", "stateVariable": false, "storageLocation": "storage", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree"}, "typeName": {"id": 1577, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 1576, "name": "MerkleTree", "nodeType": "IdentifierPath", "referencedDeclaration": 1262, "src": "8720:10:5"}, "referencedDeclaration": 1262, "src": "8720:10:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree"}}, "visibility": "internal"}], "id": 1582, "initialValue": {"baseExpression": {"id": 1579, "name": "merkleTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1273, "src": "8746:11:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$1262_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"}}, "id": 1581, "indexExpression": {"id": 1580, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1516, "src": "8758:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "8746:24:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage", "typeString": "struct MerkleResistor.MerkleTree storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "8720:50:5"}, {"expression": {"id": 1587, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 1583, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1532, "src": "8969:7:5", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 1585, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "currentCoins", "nodeType": "MemberAccess", "referencedDeclaration": 1238, "src": "8969:20:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "-=", "rightHandSide": {"id": 1586, "name": "currentWithdrawal", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1548, "src": "8993:17:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "8969:41:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1588, "nodeType": "ExpressionStatement", "src": "8969:41:5"}, {"expression": {"id": 1594, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 1589, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1532, "src": "9202:7:5", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 1591, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "lastWithdrawalTime", "nodeType": "MemberAccess", "referencedDeclaration": 1246, "src": "9202:26:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"expression": {"id": 1592, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "9231:5:5", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 1593, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "9231:15:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "9202:44:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1595, "nodeType": "ExpressionStatement", "src": "9202:44:5"}, {"expression": {"id": 1600, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"expression": {"id": 1596, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1578, "src": "9381:4:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree storage pointer"}}, "id": 1598, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": true, "memberName": "tokenBalance", "nodeType": "MemberAccess", "referencedDeclaration": 1261, "src": "9381:17:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "-=", "rightHandSide": {"id": 1599, "name": "currentWithdrawal", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1548, "src": "9402:17:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "9381:38:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1601, "nodeType": "ExpressionStatement", "src": "9381:38:5"}, {"expression": {"arguments": [{"arguments": [{"id": 1608, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1518, "src": "10085:11:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 1609, "name": "currentWithdrawal", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1548, "src": "10098:17:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "expression": {"arguments": [{"expression": {"id": 1604, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1578, "src": "10057:4:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree storage pointer"}}, "id": 1605, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "tokenAddress", "nodeType": "MemberAccess", "referencedDeclaration": 1259, "src": "10057:17:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}], "id": 1603, "name": "IERC20", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 2201, "src": "10050:6:5", "typeDescriptions": {"typeIdentifier": "t_type$_t_contract$_IERC20_$2201_$", "typeString": "type(contract IERC20)"}}, "id": 1606, "isConstant": false, "isLValue": false, "isPure": false, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10050:25:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_contract$_IERC20_$2201", "typeString": "contract IERC20"}}, "id": 1607, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "transfer", "nodeType": "MemberAccess", "referencedDeclaration": 2150, "src": "10050:34:5", "typeDescriptions": {"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$", "typeString": "function (address,uint256) external returns (bool)"}}, "id": 1610, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10050:66:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, {"hexValue": "546f6b656e207472616e73666572206661696c6564", "id": 1611, "isConstant": false, "isLValue": false, "isPure": true, "kind": "string", "lValueRequested": false, "nodeType": "Literal", "src": "10118:23:5", "typeDescriptions": {"typeIdentifier": "t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4", "typeString": "literal_string \"Token transfer failed\""}, "value": "Token transfer failed"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_bool", "typeString": "bool"}, {"typeIdentifier": "t_stringliteral_74c7d57a908ebeca4ca501d4682067d5006fafb2a418959e98aa45be0419cba4", "typeString": "literal_string \"Token transfer failed\""}], "id": 1602, "name": "require", "nodeType": "Identifier", "overloadedDeclarations": [-18, -18], "referencedDeclaration": -18, "src": "10042:7:5", "typeDescriptions": {"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$", "typeString": "function (bool,string memory) pure"}}, "id": 1612, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10042:100:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1613, "nodeType": "ExpressionStatement", "src": "10042:100:5"}, {"eventCall": {"arguments": [{"id": 1615, "name": "destination", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1518, "src": "10176:11:5", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, {"id": 1616, "name": "currentWithdrawal", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1548, "src": "10189:17:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"expression": {"id": 1617, "name": "tranche", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1532, "src": "10208:7:5", "typeDescriptions": {"typeIdentifier": "t_struct$_Tranche_$1247_storage_ptr", "typeString": "struct MerkleResistor.Tranche storage pointer"}}, "id": 1618, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "currentCoins", "nodeType": "MemberAccess", "referencedDeclaration": 1238, "src": "10208:20:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1619, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1516, "src": "10230:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "expression": {"argumentTypes": [{"typeIdentifier": "t_address", "typeString": "address"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}, {"typeIdentifier": "t_uint256", "typeString": "uint256"}], "id": 1614, "name": "WithdrawalOccurred", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1293, "src": "10157:18:5", "typeDescriptions": {"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$", "typeString": "function (address,uint256,uint256,uint256)"}}, "id": 1620, "isConstant": false, "isLValue": false, "isPure": false, "kind": "functionCall", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "10157:85:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_tuple$__$", "typeString": "tuple()"}}, "id": 1621, "nodeType": "EmitStatement", "src": "10152:90:5"}]}, "functionSelector": "00f714ce", "id": 1623, "implemented": true, "kind": "function", "modifiers": [], "name": "withdraw", "nameLocation": "7672:8:5", "nodeType": "FunctionDefinition", "parameters": {"id": 1519, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1516, "mutability": "mutable", "name": "merkleIndex", "nameLocation": "7686:11:5", "nodeType": "VariableDeclaration", "scope": 1623, "src": "7681:16:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1515, "name": "uint", "nodeType": "ElementaryTypeName", "src": "7681:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1518, "mutability": "mutable", "name": "destination", "nameLocation": "7707:11:5", "nodeType": "VariableDeclaration", "scope": 1623, "src": "7699:19:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}, "typeName": {"id": 1517, "name": "address", "nodeType": "ElementaryTypeName", "src": "7699:7:5", "stateMutability": "nonpayable", "typeDescriptions": {"typeIdentifier": "t_address", "typeString": "address"}}, "visibility": "internal"}], "src": "7680:39:5"}, "returnParameters": {"id": 1520, "nodeType": "ParameterList", "parameters": [], "src": "7727:0:5"}, "scope": 1761, "src": "7663:2586:5", "stateMutability": "nonpayable", "virtual": false, "visibility": "public"}, {"body": {"id": 1759, "nodeType": "Block", "src": "10476:2785:5", "statements": [{"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1644, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1642, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1625, "src": "10608:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"id": 1643, "name": "numTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1234, "src": "10622:8:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "10608:22:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 1652, "nodeType": "IfStatement", "src": "10604:76:5", "trueBody": {"id": 1651, "nodeType": "Block", "src": "10632:48:5", "statements": [{"expression": {"components": [{"hexValue": "66616c7365", "id": 1645, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "10654:5:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}, {"hexValue": "30", "id": 1646, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10661:1:5", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, {"hexValue": "30", "id": 1647, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10664:1:5", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, {"hexValue": "30", "id": 1648, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "10667:1:5", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "id": 1649, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "TupleExpression", "src": "10653:16:5", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$", "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"}}, "functionReturnParameters": 1641, "id": 1650, "nodeType": "Return", "src": "10646:23:5"}]}}, {"assignments": [1655], "declarations": [{"constant": false, "id": 1655, "mutability": "mutable", "name": "tree", "nameLocation": "10803:4:5", "nodeType": "VariableDeclaration", "scope": 1759, "src": "10785:22:5", "stateVariable": false, "storageLocation": "memory", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree"}, "typeName": {"id": 1654, "nodeType": "UserDefinedTypeName", "pathNode": {"id": 1653, "name": "MerkleTree", "nodeType": "IdentifierPath", "referencedDeclaration": 1262, "src": "10785:10:5"}, "referencedDeclaration": 1262, "src": "10785:10:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage_ptr", "typeString": "struct MerkleResistor.MerkleTree"}}, "visibility": "internal"}], "id": 1659, "initialValue": {"baseExpression": {"id": 1656, "name": "merkleTrees", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1273, "src": "10810:11:5", "typeDescriptions": {"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_MerkleTree_$1262_storage_$", "typeString": "mapping(uint256 => struct MerkleResistor.MerkleTree storage ref)"}}, "id": 1658, "indexExpression": {"id": 1657, "name": "merkleIndex", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1625, "src": "10822:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "nodeType": "IndexAccess", "src": "10810:24:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_storage", "typeString": "struct MerkleResistor.MerkleTree storage ref"}}, "nodeType": "VariableDeclarationStatement", "src": "10785:49:5"}, {"condition": {"commonType": {"typeIdentifier": "t_bool", "typeString": "bool"}, "id": 1668, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1663, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1660, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1627, "src": "10937:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": ">", "rightExpression": {"expression": {"id": 1661, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1655, "src": "10951:4:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 1662, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxEndTime", "nodeType": "MemberAccess", "referencedDeclaration": 1255, "src": "10951:15:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "10937:29:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "nodeType": "BinaryOperation", "operator": "||", "rightExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1667, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1664, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1627, "src": "10970:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "<", "rightExpression": {"expression": {"id": 1665, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1655, "src": "10984:4:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 1666, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "minEndTime", "nodeType": "MemberAccess", "referencedDeclaration": 1253, "src": "10984:15:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "10970:29:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "src": "10937:62:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "id": 1676, "nodeType": "IfStatement", "src": "10933:116:5", "trueBody": {"id": 1675, "nodeType": "Block", "src": "11001:48:5", "statements": [{"expression": {"components": [{"hexValue": "66616c7365", "id": 1669, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "11023:5:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "false"}, {"hexValue": "30", "id": 1670, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "11030:1:5", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, {"hexValue": "30", "id": 1671, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "11033:1:5", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}, {"hexValue": "30", "id": 1672, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "11036:1:5", "typeDescriptions": {"typeIdentifier": "t_rational_0_by_1", "typeString": "int_const 0"}, "value": "0"}], "id": 1673, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "TupleExpression", "src": "11022:16:5", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$", "typeString": "tuple(bool,int_const 0,int_const 0,int_const 0)"}}, "functionReturnParameters": 1641, "id": 1674, "nodeType": "Return", "src": "11015:23:5"}]}}, {"assignments": [1678], "declarations": [{"constant": false, "id": 1678, "mutability": "mutable", "name": "totalCoins", "nameLocation": "11064:10:5", "nodeType": "VariableDeclaration", "scope": 1759, "src": "11059:15:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1677, "name": "uint", "nodeType": "ElementaryTypeName", "src": "11059:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 1679, "nodeType": "VariableDeclarationStatement", "src": "11059:15:5"}, {"condition": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1683, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1680, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1627, "src": "11088:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "==", "rightExpression": {"expression": {"id": 1681, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1655, "src": "11103:4:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 1682, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxEndTime", "nodeType": "MemberAccess", "referencedDeclaration": 1255, "src": "11103:15:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "11088:30:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "falseBody": {"id": 1720, "nodeType": "Block", "src": "11337:1051:5", "statements": [{"assignments": [1690], "declarations": [{"constant": false, "id": 1690, "mutability": "mutable", "name": "paymentSlope", "nameLocation": "12000:12:5", "nodeType": "VariableDeclaration", "scope": 1720, "src": "11995:17:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1689, "name": "uint", "nodeType": "ElementaryTypeName", "src": "11995:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 1704, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1703, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1696, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1693, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1691, "name": "maxTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1631, "src": "12016:16:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"id": 1692, "name": "minTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1629, "src": "12035:16:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12016:35:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 1694, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "12015:37:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"id": 1695, "name": "PRECISION", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1283, "src": "12055:9:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12015:49:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "/", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1701, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 1697, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1655, "src": "12068:4:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 1698, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "maxEndTime", "nodeType": "MemberAccess", "referencedDeclaration": 1255, "src": "12068:15:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"expression": {"id": 1699, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1655, "src": "12086:4:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 1700, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "minEndTime", "nodeType": "MemberAccess", "referencedDeclaration": 1253, "src": "12086:15:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12068:33:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 1702, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "12067:35:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12015:87:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "11995:107:5"}, {"expression": {"id": 1718, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 1705, "name": "totalCoins", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1678, "src": "12285:10:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1717, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1714, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1712, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1706, "name": "paymentSlope", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1690, "src": "12299:12:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1710, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1707, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1627, "src": "12315:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"expression": {"id": 1708, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1655, "src": "12329:4:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 1709, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "minEndTime", "nodeType": "MemberAccess", "referencedDeclaration": 1253, "src": "12329:15:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12315:29:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 1711, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "12314:31:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12299:46:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "/", "rightExpression": {"id": 1713, "name": "PRECISION", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1283, "src": "12348:9:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12299:58:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 1715, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "12298:60:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"id": 1716, "name": "minTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1629, "src": "12361:16:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12298:79:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12285:92:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1719, "nodeType": "ExpressionStatement", "src": "12285:92:5"}]}, "id": 1721, "nodeType": "IfStatement", "src": "11084:1304:5", "trueBody": {"id": 1688, "nodeType": "Block", "src": "11120:211:5", "statements": [{"expression": {"id": 1686, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftHandSide": {"id": 1684, "name": "totalCoins", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1678, "src": "11291:10:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "Assignment", "operator": "=", "rightHandSide": {"id": 1685, "name": "maxTotalPayments", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1631, "src": "11304:16:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "11291:29:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "id": 1687, "nodeType": "ExpressionStatement", "src": "11291:29:5"}]}}, {"assignments": [1723], "declarations": [{"constant": false, "id": 1723, "mutability": "mutable", "name": "coinsPerSecond", "nameLocation": "12854:14:5", "nodeType": "VariableDeclaration", "scope": 1759, "src": "12849:19:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1722, "name": "uint", "nodeType": "ElementaryTypeName", "src": "12849:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 1740, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1739, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1733, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1724, "name": "totalCoins", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1678, "src": "12872:10:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1731, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"arguments": [{"hexValue": "313030", "id": 1727, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "12891:3:5", "typeDescriptions": {"typeIdentifier": "t_rational_100_by_1", "typeString": "int_const 100"}, "value": "100"}], "expression": {"argumentTypes": [{"typeIdentifier": "t_rational_100_by_1", "typeString": "int_const 100"}], "id": 1726, "isConstant": false, "isLValue": false, "isPure": true, "lValueRequested": false, "nodeType": "ElementaryTypeNameExpression", "src": "12886:4:5", "typeDescriptions": {"typeIdentifier": "t_type$_t_uint256_$", "typeString": "type(uint256)"}, "typeName": {"id": 1725, "name": "uint", "nodeType": "ElementaryTypeName", "src": "12886:4:5", "typeDescriptions": {}}}, "id": 1728, "isConstant": false, "isLValue": false, "isPure": true, "kind": "typeConversion", "lValueRequested": false, "names": [], "nodeType": "FunctionCall", "src": "12886:9:5", "tryCall": false, "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"expression": {"id": 1729, "name": "tree", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1655, "src": "12898:4:5", "typeDescriptions": {"typeIdentifier": "t_struct$_MerkleTree_$1262_memory_ptr", "typeString": "struct MerkleResistor.MerkleTree memory"}}, "id": 1730, "isConstant": false, "isLValue": true, "isPure": false, "lValueRequested": false, "memberName": "pctUpFront", "nodeType": "MemberAccess", "referencedDeclaration": 1257, "src": "12898:15:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12886:27:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 1732, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "12885:29:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12872:42:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 1734, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "12871:44:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "/", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1737, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1735, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1627, "src": "12919:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "*", "rightExpression": {"hexValue": "313030", "id": 1736, "isConstant": false, "isLValue": false, "isPure": true, "kind": "number", "lValueRequested": false, "nodeType": "Literal", "src": "12933:3:5", "typeDescriptions": {"typeIdentifier": "t_rational_100_by_1", "typeString": "int_const 100"}, "value": "100"}, "src": "12919:17:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 1738, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "12918:19:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "12871:66:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "12849:88:5"}, {"assignments": [1742], "declarations": [{"constant": false, "id": 1742, "mutability": "mutable", "name": "startTime", "nameLocation": "13118:9:5", "nodeType": "VariableDeclaration", "scope": 1759, "src": "13113:14:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1741, "name": "uint", "nodeType": "ElementaryTypeName", "src": "13113:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "id": 1752, "initialValue": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1751, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1746, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"expression": {"id": 1743, "name": "block", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": -4, "src": "13130:5:5", "typeDescriptions": {"typeIdentifier": "t_magic_block", "typeString": "block"}}, "id": 1744, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "memberName": "timestamp", "nodeType": "MemberAccess", "src": "13130:15:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "+", "rightExpression": {"id": 1745, "name": "vestingTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1627, "src": "13148:11:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13130:29:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "-", "rightExpression": {"components": [{"commonType": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "id": 1749, "isConstant": false, "isLValue": false, "isPure": false, "lValueRequested": false, "leftExpression": {"id": 1747, "name": "totalCoins", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1678, "src": "13163:10:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "BinaryOperation", "operator": "/", "rightExpression": {"id": 1748, "name": "coinsPerSecond", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1723, "src": "13176:14:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13163:27:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 1750, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "13162:29:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "src": "13130:61:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "nodeType": "VariableDeclarationStatement", "src": "13113:78:5"}, {"expression": {"components": [{"hexValue": "74727565", "id": 1753, "isConstant": false, "isLValue": false, "isPure": true, "kind": "bool", "lValueRequested": false, "nodeType": "Literal", "src": "13210:4:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "value": "true"}, {"id": 1754, "name": "totalCoins", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1678, "src": "13216:10:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1755, "name": "coinsPerSecond", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1723, "src": "13228:14:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, {"id": 1756, "name": "startTime", "nodeType": "Identifier", "overloadedDeclarations": [], "referencedDeclaration": 1742, "src": "13244:9:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}], "id": 1757, "isConstant": false, "isInlineArray": false, "isLValue": false, "isPure": false, "lValueRequested": false, "nodeType": "TupleExpression", "src": "13209:45:5", "typeDescriptions": {"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$_t_uint256_$_t_uint256_$", "typeString": "tuple(bool,uint256,uint256,uint256)"}}, "functionReturnParameters": 1641, "id": 1758, "nodeType": "Return", "src": "13202:52:5"}]}, "functionSelector": "6fb6ec41", "id": 1760, "implemented": true, "kind": "function", "modifiers": [], "name": "verifyVestingSchedule", "nameLocation": "10327:21:5", "nodeType": "FunctionDefinition", "parameters": {"id": 1632, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1625, "mutability": "mutable", "name": "merkleIndex", "nameLocation": "10354:11:5", "nodeType": "VariableDeclaration", "scope": 1760, "src": "10349:16:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1624, "name": "uint", "nodeType": "ElementaryTypeName", "src": "10349:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1627, "mutability": "mutable", "name": "vestingTime", "nameLocation": "10372:11:5", "nodeType": "VariableDeclaration", "scope": 1760, "src": "10367:16:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1626, "name": "uint", "nodeType": "ElementaryTypeName", "src": "10367:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1629, "mutability": "mutable", "name": "minTotalPayments", "nameLocation": "10390:16:5", "nodeType": "VariableDeclaration", "scope": 1760, "src": "10385:21:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1628, "name": "uint", "nodeType": "ElementaryTypeName", "src": "10385:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1631, "mutability": "mutable", "name": "maxTotalPayments", "nameLocation": "10413:16:5", "nodeType": "VariableDeclaration", "scope": 1760, "src": "10408:21:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1630, "name": "uint", "nodeType": "ElementaryTypeName", "src": "10408:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "10348:82:5"}, "returnParameters": {"id": 1641, "nodeType": "ParameterList", "parameters": [{"constant": false, "id": 1634, "mutability": "mutable", "name": "", "nameLocation": "-1:-1:-1", "nodeType": "VariableDeclaration", "scope": 1760, "src": "10452:4:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}, "typeName": {"id": 1633, "name": "bool", "nodeType": "ElementaryTypeName", "src": "10452:4:5", "typeDescriptions": {"typeIdentifier": "t_bool", "typeString": "bool"}}, "visibility": "internal"}, {"constant": false, "id": 1636, "mutability": "mutable", "name": "", "nameLocation": "-1:-1:-1", "nodeType": "VariableDeclaration", "scope": 1760, "src": "10458:4:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1635, "name": "uint", "nodeType": "ElementaryTypeName", "src": "10458:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1638, "mutability": "mutable", "name": "", "nameLocation": "-1:-1:-1", "nodeType": "VariableDeclaration", "scope": 1760, "src": "10464:4:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1637, "name": "uint", "nodeType": "ElementaryTypeName", "src": "10464:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}, {"constant": false, "id": 1640, "mutability": "mutable", "name": "", "nameLocation": "-1:-1:-1", "nodeType": "VariableDeclaration", "scope": 1760, "src": "10470:4:5", "stateVariable": false, "storageLocation": "default", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}, "typeName": {"id": 1639, "name": "uint", "nodeType": "ElementaryTypeName", "src": "10470:4:5", "typeDescriptions": {"typeIdentifier": "t_uint256", "typeString": "uint256"}}, "visibility": "internal"}], "src": "10451:24:5"}, "scope": 1761, "src": "10318:2943:5", "stateMutability": "view", "virtual": false, "visibility": "public"}], "scope": 1762, "src": "230:13034:5", "usedErrors": []}], "src": "42:13223:5"}, "bytecode": "60806040526000805534801561001457600080fd5b506110da806100246000396000f3fe608060405234801561001057600080fd5b506004361061009d5760003560e01c8063aaf5eb6811610066578063aaf5eb68146101db578063c26cb54f146101e5578063d71383ed14610260578063f16ad51e14610273578063f287ad041461028657600080fd5b8062f714ce146100a2578063390b7c66146100b75780636fb6ec41146100d357806385d88cb11461010857806386bb82491461019d575b600080fd5b6100b56100b0366004610d5a565b610299565b005b6100c060005481565b6040519081526020015b60405180910390f35b6100e66100e1366004610d86565b61053c565b60408051941515855260208501939093529183015260608201526080016100ca565b61015f610116366004610db8565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006909501549395949293919290916001600160a01b039091169087565b60408051978852602088019690965294860193909352606085019190915260808401526001600160a01b031660a083015260c082015260e0016100ca565b6101cb6101ab366004610dd1565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ca565b6100c0620f424081565b6102336101f3366004610dd1565b6003602081815260009384526040808520909152918352912080546001820154600283015493830154600484015460059094015492949193919290919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100ca565b6100b561026e366004610dfb565b6106e3565b6100b5610281366004610e57565b6108a7565b6100b5610294366004610e8f565b6109a4565b6001600160a01b038116600090815260016020908152604080832085845290915290205460ff166103215760405162461bcd60e51b815260206004820152602760248201527f596f75206d75737420696e697469616c697a6520796f7572206163636f756e74604482015266103334b939ba1760c91b60648201526084015b60405180910390fd5b6001600160a01b0381166000908152600360209081526040808320858452909152902060018101546103955760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f696e73206c65667420746f207769746864726177000000000000006044820152606401610318565b6000816003015442106103ad575060018101546103ce565b600482015460058301546103c19042610f9b565b6103cb9190610fb2565b90505b6000848152600260205260408120600184018054919284926103f1908490610f9b565b9091555050426005840155600681018054839190600090610413908490610f9b565b9091555050600581015460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561046857600080fd5b505af115801561047c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a09190610fd1565b6104e45760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b84846001600160a01b03167f5ffb4b63dec15ba26308386f1d5ca61843b29ba365511062a887d95aa27532d384866001015460405161052d929190918252602082015260400190565b60405180910390a35050505050565b60008060008060005488111561055d575060009250829150819050806106d8565b600088815260026020818152604092839020835160e0810185528154815260018201549281019290925291820154928101929092526003810154606083018190526004820154608084015260058201546001600160a01b031660a084015260069091015460c08301528811806105d65750806040015188105b156105ef576000806000809450945094509450506106d8565b60008160600151891415610604575085610675565b60008260400151836060015161061a9190610f9b565b620f42406106288b8b610f9b565b6106329190610fb2565b61063c9190610ffa565b905088620f424084604001518c6106539190610f9b565b61065d9084610fb2565b6106679190610ffa565b610671919061101c565b9150505b60006106828a6064610fb2565b6080840151610692906064610f9b565b61069c9084610fb2565b6106a69190610ffa565b905060006106b48284610ffa565b6106be8c4261101c565b6106c89190610f9b565b6001985092965090945090925050505b945094509450949050565b606483106107275760405162461bcd60e51b81526020600482015260116024820152700706374557046726f6e74203e3d2031303607c1b6044820152606401610318565b8385106107865760405162461bcd60e51b815260206004820152602760248201527f6d696e456e6454696d65206d757374206265206c657373207468616e206d6178604482015266456e6454696d6560c81b6064820152608401610318565b6040518060e00160405280888152602001878152602001868152602001858152602001848152602001836001600160a01b0316815260200160008152506002600080600081546107d590611034565b918290555081526020808201929092526040908101600090812084518155928401516001840155908301516002830155606083015160038301556080830151600483015560a08301516005830180546001600160a01b0319166001600160a01b0390921691909117905560c0909201516006909101555461085690826108a7565b60005460408051898152602081018990526001600160a01b03851692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a350505050505050565b6000828152600260205260408120600681018054919284926108ca90849061101c565b909155505060058101546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561092357600080fd5b505af1158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b9190610fd1565b61099f5760405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b505050565b336001600160a01b03861614610a085760405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616044820152636e63686560e01b6064820152608401610318565b6001600160a01b038516600090815260016020908152604080832089845290915290205460ff1615610a725760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610318565b604080516001600160a01b03871660208201529081018490526060810183905260009060800160408051601f19818403018152828252805160209182012060008b815260028084529084902060e0860185528054808752600182015494870194909452908101548585015260038101546060860152600480820154608087015260058201546001600160a01b031660a087015260069091015460c08601529251632769cd1f60e21b815290945073__MerkleLib_____________________________92639da7347c92610b4b929091879189910161104f565b60206040518083038186803b158015610b6357600080fd5b505af4158015610b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9b9190610fd1565b610be75760405162461bcd60e51b815260206004820181905260248201527f5468652070726f6f6620636f756c64206e6f742062652076657269666965642e6044820152606401610318565b6001600160a01b03871660009081526001602081815260408084208c85529091528220805460ff19169091179055808080610c248c8b8b8b61053c565b935093509350935083610c795760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67207363686564756c6500000000000000006044820152606401610318565b6040518060c001604052808481526020018481526020018281526020018b42610ca2919061101c565b815260200183815260200182815250600360008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050610d308c8c610299565b505050505050505050505050565b80356001600160a01b0381168114610d5557600080fd5b919050565b60008060408385031215610d6d57600080fd5b82359150610d7d60208401610d3e565b90509250929050565b60008060008060808587031215610d9c57600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215610dca57600080fd5b5035919050565b60008060408385031215610de457600080fd5b610ded83610d3e565b946020939093013593505050565b600080600080600080600060e0888a031215610e1657600080fd5b8735965060208801359550604088013594506060880135935060808801359250610e4260a08901610d3e565b915060c0880135905092959891949750929550565b60008060408385031215610e6a57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610ea857600080fd5b863595506020610eb9818901610d3e565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610eeb57600080fd5b818a0191508a601f830112610eff57600080fd5b813581811115610f1157610f11610e79565b8060051b604051601f19603f83011681018181108582111715610f3657610f36610e79565b60405291825284820192508381018501918d831115610f5457600080fd5b938501935b82851015610f7257843584529385019392850192610f59565b8096505050505050509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015610fad57610fad610f85565b500390565b6000816000190483118215151615610fcc57610fcc610f85565b500290565b600060208284031215610fe357600080fd5b81518015158114610ff357600080fd5b9392505050565b60008261101757634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561102f5761102f610f85565b500190565b600060001982141561104857611048610f85565b5060010190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b818110156110965784518352938301939183019160010161107a565b50909897505050505050505056fea264697066735822122091144810fc3be6d93ff3dfcef3fa782a7e5dbf7ff996ade966260f44f6651fe564736f6c63430008090033", "bytecodeSha1": "a2bdcaee8ecdf6edc4c50bc2184a57b7d6137ce8", "compiler": {"evm_version": "istanbul", "optimizer": {"enabled": true, "runs": 200}, "version": "0.8.9+commit.e5eed63a"}, "contractName": "MerkleResistor", "coverageMap": {"branches": {"4": {}, "5": {"MerkleResistor.addMerkleTree": {"35": [3182, 3198, true], "36": [3238, 3261, true]}, "MerkleResistor.depositTokens": {"37": [5078, 5156, true]}, "MerkleResistor.initialize": {"38": [5681, 5706, true], "39": [5801, 5839, true], "40": [6217, 6257, true], "41": [6617, 6622, true]}, "MerkleResistor.verifyVestingSchedule": {"31": [10608, 10630, false], "32": [10937, 10966, true], "33": [10970, 10999, false], "34": [11088, 11118, false]}, "MerkleResistor.withdraw": {"28": [7853, 7890, true], "29": [8318, 8352, false], "30": [10050, 10116, true]}}, "7": {}}, "statements": {"4": {}, "5": {"MerkleResistor.addMerkleTree": {"14": [3174, 3220], "15": [3230, 3305], "16": [3372, 3645], "17": [3921, 3958], "18": [3968, 4031]}, "MerkleResistor.depositTokens": {"19": [4306, 4338], "20": [5070, 5182]}, "MerkleResistor.initialize": {"21": [5673, 5747], "22": [5793, 5863], "23": [6209, 6294], "24": [6392, 6436], "25": [6609, 6651], "26": [6845, 7385], "27": [7395, 7429]}, "MerkleResistor.verifyVestingSchedule": {"9": [10646, 10669], "10": [11015, 11038], "11": [11291, 11320], "12": [12285, 12377], "13": [13202, 13254]}, "MerkleResistor.withdraw": {"0": [7845, 7934], "1": [8094, 8157], "2": [8368, 8408], "3": [8586, 8677], "4": [8969, 9010], "5": [9202, 9246], "6": [9381, 9419], "7": [10042, 10142], "8": [10152, 10242]}}, "7": {}}}, "dependencies": ["IERC20", "MerkleLib"], "deployedBytecode": "608060405234801561001057600080fd5b506004361061009d5760003560e01c8063aaf5eb6811610066578063aaf5eb68146101db578063c26cb54f146101e5578063d71383ed14610260578063f16ad51e14610273578063f287ad041461028657600080fd5b8062f714ce146100a2578063390b7c66146100b75780636fb6ec41146100d357806385d88cb11461010857806386bb82491461019d575b600080fd5b6100b56100b0366004610d5a565b610299565b005b6100c060005481565b6040519081526020015b60405180910390f35b6100e66100e1366004610d86565b61053c565b60408051941515855260208501939093529183015260608201526080016100ca565b61015f610116366004610db8565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006909501549395949293919290916001600160a01b039091169087565b60408051978852602088019690965294860193909352606085019190915260808401526001600160a01b031660a083015260c082015260e0016100ca565b6101cb6101ab366004610dd1565b600160209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ca565b6100c0620f424081565b6102336101f3366004610dd1565b6003602081815260009384526040808520909152918352912080546001820154600283015493830154600484015460059094015492949193919290919086565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100ca565b6100b561026e366004610dfb565b6106e3565b6100b5610281366004610e57565b6108a7565b6100b5610294366004610e8f565b6109a4565b6001600160a01b038116600090815260016020908152604080832085845290915290205460ff166103215760405162461bcd60e51b815260206004820152602760248201527f596f75206d75737420696e697469616c697a6520796f7572206163636f756e74604482015266103334b939ba1760c91b60648201526084015b60405180910390fd5b6001600160a01b0381166000908152600360209081526040808320858452909152902060018101546103955760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f696e73206c65667420746f207769746864726177000000000000006044820152606401610318565b6000816003015442106103ad575060018101546103ce565b600482015460058301546103c19042610f9b565b6103cb9190610fb2565b90505b6000848152600260205260408120600184018054919284926103f1908490610f9b565b9091555050426005840155600681018054839190600090610413908490610f9b565b9091555050600581015460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561046857600080fd5b505af115801561047c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a09190610fd1565b6104e45760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b84846001600160a01b03167f5ffb4b63dec15ba26308386f1d5ca61843b29ba365511062a887d95aa27532d384866001015460405161052d929190918252602082015260400190565b60405180910390a35050505050565b60008060008060005488111561055d575060009250829150819050806106d8565b600088815260026020818152604092839020835160e0810185528154815260018201549281019290925291820154928101929092526003810154606083018190526004820154608084015260058201546001600160a01b031660a084015260069091015460c08301528811806105d65750806040015188105b156105ef576000806000809450945094509450506106d8565b60008160600151891415610604575085610675565b60008260400151836060015161061a9190610f9b565b620f42406106288b8b610f9b565b6106329190610fb2565b61063c9190610ffa565b905088620f424084604001518c6106539190610f9b565b61065d9084610fb2565b6106679190610ffa565b610671919061101c565b9150505b60006106828a6064610fb2565b6080840151610692906064610f9b565b61069c9084610fb2565b6106a69190610ffa565b905060006106b48284610ffa565b6106be8c4261101c565b6106c89190610f9b565b6001985092965090945090925050505b945094509450949050565b606483106107275760405162461bcd60e51b81526020600482015260116024820152700706374557046726f6e74203e3d2031303607c1b6044820152606401610318565b8385106107865760405162461bcd60e51b815260206004820152602760248201527f6d696e456e6454696d65206d757374206265206c657373207468616e206d6178604482015266456e6454696d6560c81b6064820152608401610318565b6040518060e00160405280888152602001878152602001868152602001858152602001848152602001836001600160a01b0316815260200160008152506002600080600081546107d590611034565b918290555081526020808201929092526040908101600090812084518155928401516001840155908301516002830155606083015160038301556080830151600483015560a08301516005830180546001600160a01b0319166001600160a01b0390921691909117905560c0909201516006909101555461085690826108a7565b60005460408051898152602081018990526001600160a01b03851692917f7247d7268297fd9fe23a535b70f414660bbcbbcd73ac0d9ce3c103a356a61f45910160405180910390a350505050505050565b6000828152600260205260408120600681018054919284926108ca90849061101c565b909155505060058101546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561092357600080fd5b505af1158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b9190610fd1565b61099f5760405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610318565b505050565b336001600160a01b03861614610a085760405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c7920696e697469616c697a6520796f7572206f776e207472616044820152636e63686560e01b6064820152608401610318565b6001600160a01b038516600090815260016020908152604080832089845290915290205460ff1615610a725760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b6044820152606401610318565b604080516001600160a01b03871660208201529081018490526060810183905260009060800160408051601f19818403018152828252805160209182012060008b815260028084529084902060e0860185528054808752600182015494870194909452908101548585015260038101546060860152600480820154608087015260058201546001600160a01b031660a087015260069091015460c08601529251632769cd1f60e21b815290945073__$61dd25696c02d5bd2863c8d2c1a2324a87$__92639da7347c92610b4b929091879189910161104f565b60206040518083038186803b158015610b6357600080fd5b505af4158015610b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9b9190610fd1565b610be75760405162461bcd60e51b815260206004820181905260248201527f5468652070726f6f6620636f756c64206e6f742062652076657269666965642e6044820152606401610318565b6001600160a01b03871660009081526001602081815260408084208c85529091528220805460ff19169091179055808080610c248c8b8b8b61053c565b935093509350935083610c795760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076657374696e67207363686564756c6500000000000000006044820152606401610318565b6040518060c001604052808481526020018481526020018281526020018b42610ca2919061101c565b815260200183815260200182815250600360008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050155905050610d308c8c610299565b505050505050505050505050565b80356001600160a01b0381168114610d5557600080fd5b919050565b60008060408385031215610d6d57600080fd5b82359150610d7d60208401610d3e565b90509250929050565b60008060008060808587031215610d9c57600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215610dca57600080fd5b5035919050565b60008060408385031215610de457600080fd5b610ded83610d3e565b946020939093013593505050565b600080600080600080600060e0888a031215610e1657600080fd5b8735965060208801359550604088013594506060880135935060808801359250610e4260a08901610d3e565b915060c0880135905092959891949750929550565b60008060408385031215610e6a57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610ea857600080fd5b863595506020610eb9818901610d3e565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610eeb57600080fd5b818a0191508a601f830112610eff57600080fd5b813581811115610f1157610f11610e79565b8060051b604051601f19603f83011681018181108582111715610f3657610f36610e79565b60405291825284820192508381018501918d831115610f5457600080fd5b938501935b82851015610f7257843584529385019392850192610f59565b8096505050505050509295509295509295565b634e487b7160e01b600052601160045260246000fd5b600082821015610fad57610fad610f85565b500390565b6000816000190483118215151615610fcc57610fcc610f85565b500290565b600060208284031215610fe357600080fd5b81518015158114610ff357600080fd5b9392505050565b60008261101757634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561102f5761102f610f85565b500190565b600060001982141561104857611048610f85565b5060010190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b818110156110965784518352938301939183019160010161107a565b50909897505050505050505056fea264697066735822122091144810fc3be6d93ff3dfcef3fa782a7e5dbf7ff996ade966260f44f6651fe564736f6c63430008090033", "deployedSourceMap": "230:13034:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7663:2586;;;;;;:::i;:::-;;:::i;:::-;;333:24;;;;;;;;;597:25:8;;;585:2;570:18;333:24:5;;;;;;;;10318:2943;;;;;;:::i;:::-;;:::i;:::-;;;;1273:14:8;;1266:22;1248:41;;1320:2;1305:18;;1298:34;;;;1348:18;;;1341:34;1406:2;1391:18;;1384:34;1235:3;1220:19;10318:2943:5;1023:401:8;2333:47:5;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2333:47:5;;;;;;;;;;1929:25:8;;;1985:2;1970:18;;1963:34;;;;2013:18;;;2006:34;;;;2071:2;2056:18;;2049:34;;;;2114:3;2099:19;;2092:35;-1:-1:-1;;;;;2164:32:8;2184:3;2143:19;;2136:61;2228:3;2213:19;;2206:35;1916:3;1901:19;2333:47:5;1614:633:8;2173:62:5;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2676:14:8;;2669:22;2651:41;;2639:2;2624:18;2173:62:5;2511:187:8;2584:40:5;;2617:7;2584:40;;2449:62;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2990:25:8;;;3046:2;3031:18;;3024:34;;;;3074:18;;;3067:34;;;;3132:2;3117:18;;3110:34;3175:3;3160:19;;3153:35;3219:3;3204:19;;3197:35;2977:3;2962:19;2449:62:5;2703:535:8;2963:1075:5;;;;;;:::i;:::-;;:::i;4076:1113::-;;;;;;:::i;:::-;;:::i;5450:1986::-;;;;;;:::i;:::-;;:::i;7663:2586::-;-1:-1:-1;;;;;7853:24:5;;;;;;:11;:24;;;;;;;;:37;;;;;;;;;;;7845:89;;;;-1:-1:-1;;;7845:89:5;;5902:2:8;7845:89:5;;;5884:21:8;5941:2;5921:18;;;5914:30;5980:34;5960:18;;;5953:62;-1:-1:-1;;;6031:18:8;;;6024:37;6078:19;;7845:89:5;;;;;;;;;-1:-1:-1;;;;;8011:21:5;;7985:23;8011:21;;;:8;:21;;;;;;;;:34;;;;;;;;8102:20;;;;8094:63;;;;-1:-1:-1;;;8094:63:5;;6310:2:8;8094:63:5;;;6292:21:8;6349:2;6329:18;;;6322:30;6388:27;6368:18;;;6361:55;6433:18;;8094:63:5;6108:349:8;8094:63:5;8167:22;8337:7;:15;;;8318;:34;8314:374;;-1:-1:-1;8388:20:5;;;;8314:374;;;8655:22;;;;8625:26;;;;8607:44;;:15;:44;:::i;:::-;8606:71;;;;:::i;:::-;8586:91;;8314:374;8720:23;8746:24;;;:11;:24;;;;;8969:20;;;:41;;8746:24;;8993:17;;8969:41;;8993:17;;8969:41;:::i;:::-;;;;-1:-1:-1;;9231:15:5;9202:26;;;:44;9381:17;;;:38;;9402:17;;9381;;;:38;;9402:17;;9381:38;:::i;:::-;;;;-1:-1:-1;;10057:17:5;;;;10050:66;;-1:-1:-1;;;10050:66:5;;-1:-1:-1;;;;;7089:32:8;;;10050:66:5;;;7071:51:8;7138:18;;;7131:34;;;10057:17:5;;;;10050:34;;7044:18:8;;10050:66:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10042:100;;;;-1:-1:-1;;;10042:100:5;;7660:2:8;10042:100:5;;;7642:21:8;7699:2;7679:18;;;7672:30;-1:-1:-1;;;7718:18:8;;;7711:51;7779:18;;10042:100:5;7458:345:8;10042:100:5;10230:11;10176;-1:-1:-1;;;;;10157:85:5;;10189:17;10208:7;:20;;;10157:85;;;;;;7982:25:8;;;8038:2;8023:18;;8016:34;7970:2;7955:18;;7808:248;10157:85:5;;;;;;;;7727:2522;;;7663:2586;;:::o;10318:2943::-;10452:4;10458;10464;10470;10622:8;;10608:11;:22;10604:76;;;-1:-1:-1;10654:5:5;;-1:-1:-1;10654:5:5;;-1:-1:-1;10654:5:5;;-1:-1:-1;10654:5:5;10646:23;;10604:76;10785:22;10810:24;;;:11;:24;;;;;;;;;10785:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10785:49:5;;;;;;;;;;;;;;10937:29;;;:62;;;10984:4;:15;;;10970:11;:29;10937:62;10933:116;;;11023:5;11030:1;11033;11036;11015:23;;;;;;;;;;;10933:116;11059:15;11103:4;:15;;;11088:11;:30;11084:1304;;;-1:-1:-1;11304:16:5;11084:1304;;;11995:17;12086:4;:15;;;12068:4;:15;;;:33;;;;:::i;:::-;2617:7;12016:35;12035:16;12016;:35;:::i;:::-;12015:49;;;;:::i;:::-;:87;;;;:::i;:::-;11995:107;;12361:16;2617:7;12329:4;:15;;;12315:11;:29;;;;:::i;:::-;12299:46;;:12;:46;:::i;:::-;:58;;;;:::i;:::-;12298:79;;;;:::i;:::-;12285:92;;11337:1051;11084:1304;12849:19;12919:17;:11;12933:3;12919:17;:::i;:::-;12898:15;;;;12886:27;;12891:3;12886:27;:::i;:::-;12872:42;;:10;:42;:::i;:::-;12871:66;;;;:::i;:::-;12849:88;-1:-1:-1;13113:14:5;13163:27;12849:88;13163:10;:27;:::i;:::-;13130:29;13148:11;13130:15;:29;:::i;:::-;:61;;;;:::i;:::-;13210:4;;-1:-1:-1;13216:10:5;;-1:-1:-1;13228:14:5;;-1:-1:-1;13113:78:5;;-1:-1:-1;;;10318:2943:5;;;;;;;;;;:::o;2963:1075::-;3195:3;3182:10;:16;3174:46;;;;-1:-1:-1;;;3174:46:5;;8618:2:8;3174:46:5;;;8600:21:8;8657:2;8637:18;;;8630:30;-1:-1:-1;;;8676:18:8;;;8669:47;8733:18;;3174:46:5;8416:341:8;3174:46:5;3251:10;3238;:23;3230:75;;;;-1:-1:-1;;;3230:75:5;;8964:2:8;3230:75:5;;;8946:21:8;9003:2;8983:18;;;8976:30;9042:34;9022:18;;;9015:62;-1:-1:-1;;;9093:18:8;;;9086:37;9140:19;;3230:75:5;8762:403:8;3230:75:5;3398:247;;;;;;;;3422:7;3398:247;;;;3443:8;3398:247;;;;3465:10;3398:247;;;;3489:10;3398:247;;;;3513:10;3398:247;;;;3537:12;-1:-1:-1;;;;;3398:247:5;;;;;3563:1;3398:247;;;3372:11;:23;3386:8;;3384:10;;;;;:::i;:::-;;;;;-1:-1:-1;3372:23:5;;;;;;;;;;;;;;-1:-1:-1;3372:23:5;;;:273;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3372:273:5;-1:-1:-1;;;;;3372:273:5;;;;;;;;;;;;;;;;;;;3935:8;3921:37;;3945:12;3921:13;:37::i;:::-;3989:8;;3973:58;;;7982:25:8;;;8038:2;8023:18;;8016:34;;;-1:-1:-1;;;;;3973:58:5;;;3989:8;3973:58;;7955:18:8;3973:58:5;;;;;;;2963:1075;;;;;;;:::o;4076:1113::-;4179:29;4211:22;;;:11;:22;;;;;4306:23;;;:32;;4211:22;;4333:5;;4306:32;;4333:5;;4306:32;:::i;:::-;;;;-1:-1:-1;;5085:23:5;;;;5078:78;;-1:-1:-1;;;5078:78:5;;5123:10;5078:78;;;9803:34:8;5143:4:5;9853:18:8;;;9846:43;9905:18;;;9898:34;;;-1:-1:-1;;;;;5085:23:5;;;;5078:44;;9738:18:8;;5078:78:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5070:112;;;;-1:-1:-1;;;5070:112:5;;10145:2:8;5070:112:5;;;10127:21:8;10184:2;10164:18;;;10157:30;-1:-1:-1;;;10203:18:8;;;10196:51;10264:18;;5070:112:5;9943:345:8;5070:112:5;4134:1055;4076:1113;;:::o;5450:1986::-;5681:10;-1:-1:-1;;;;;5681:25:5;;;5673:74;;;;-1:-1:-1;;;5673:74:5;;10495:2:8;5673:74:5;;;10477:21:8;10534:2;10514:18;;;10507:30;10573:34;10553:18;;;10546:62;-1:-1:-1;;;10624:18:8;;;10617:34;10668:19;;5673:74:5;10293:400:8;5673:74:5;-1:-1:-1;;;;;5802:24:5;;;;;;:11;:24;;;;;;;;:37;;;;;;;;;;;5801:38;5793:70;;;;-1:-1:-1;;;5793:70:5;;10900:2:8;5793:70:5;;;10882:21:8;10939:2;10919:18;;;10912:30;-1:-1:-1;;;10958:18:8;;;10951:49;11017:18;;5793:70:5;10698:343:8;5793:70:5;5961:59;;;-1:-1:-1;;;;;11266:32:8;;5961:59:5;;;11248:51:8;11315:18;;;11308:34;;;11358:18;;;11351:34;;;5936:12:5;;11221:18:8;;5961:59:5;;;-1:-1:-1;;5961:59:5;;;;;;;;;5951:70;;5961:59;5951:70;;;;6072:22;6097:24;;;:11;:24;;;;;;;6072:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6072:49:5;;;;;;;;;;;;;;6217:40;;-1:-1:-1;;;6217:40:5;;5951:70;;-1:-1:-1;6217:27:5;;;;:40;;6072:49;;5951:70;;6251:5;;6217:40;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6209:85;;;;-1:-1:-1;;;6209:85:5;;12386:2:8;6209:85:5;;;12368:21:8;;;12405:18;;;12398:30;12464:34;12444:18;;;12437:62;12516:18;;6209:85:5;12184:356:8;6209:85:5;-1:-1:-1;;;;;6392:24:5;;;;;;6432:4;6392:24;;;;;;;;:37;;;;;;;;:44;;-1:-1:-1;;6392:44:5;;;;;;:24;;;6516:83;6417:11;6551;6564:16;6582;6516:21;:83::i;:::-;6447:152;;;;;;;;6617:5;6609:42;;;;-1:-1:-1;;;6609:42:5;;12747:2:8;6609:42:5;;;12729:21:8;12786:2;12766:18;;;12759:30;12825:26;12805:18;;;12798:54;12869:18;;6609:42:5;12545:348:8;6609:42:5;6882:503;;;;;;;;6903:10;6882:503;;;;6979:10;6882:503;;;;7025:9;6882:503;;;;7131:11;7113:15;:29;;;;:::i;:::-;6882:503;;;;7200:14;6882:503;;;;7268:9;6882:503;;;6845:8;:21;6854:11;-1:-1:-1;;;;;6845:21:5;-1:-1:-1;;;;;6845:21:5;;;;;;;;;;;;:34;6867:11;6845:34;;;;;;;;;;;:540;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7395:34;7404:11;7417;7395:8;:34::i;:::-;5606:1830;;;;;;5450:1986;;;;;;:::o;14:173:8:-;82:20;;-1:-1:-1;;;;;131:31:8;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:254::-;260:6;268;321:2;309:9;300:7;296:23;292:32;289:52;;;337:1;334;327:12;289:52;373:9;360:23;350:33;;402:38;436:2;425:9;421:18;402:38;:::i;:::-;392:48;;192:254;;;;;:::o;633:385::-;719:6;727;735;743;796:3;784:9;775:7;771:23;767:33;764:53;;;813:1;810;803:12;764:53;-1:-1:-1;;836:23:8;;;906:2;891:18;;878:32;;-1:-1:-1;957:2:8;942:18;;929:32;;1008:2;993:18;980:32;;-1:-1:-1;633:385:8;-1:-1:-1;633:385:8:o;1429:180::-;1488:6;1541:2;1529:9;1520:7;1516:23;1512:32;1509:52;;;1557:1;1554;1547:12;1509:52;-1:-1:-1;1580:23:8;;1429:180;-1:-1:-1;1429:180:8:o;2252:254::-;2320:6;2328;2381:2;2369:9;2360:7;2356:23;2352:32;2349:52;;;2397:1;2394;2387:12;2349:52;2420:29;2439:9;2420:29;:::i;:::-;2410:39;2496:2;2481:18;;;;2468:32;;-1:-1:-1;;;2252:254:8:o;3243:598::-;3356:6;3364;3372;3380;3388;3396;3404;3457:3;3445:9;3436:7;3432:23;3428:33;3425:53;;;3474:1;3471;3464:12;3425:53;3510:9;3497:23;3487:33;;3567:2;3556:9;3552:18;3539:32;3529:42;;3618:2;3607:9;3603:18;3590:32;3580:42;;3669:2;3658:9;3654:18;3641:32;3631:42;;3720:3;3709:9;3705:19;3692:33;3682:43;;3744:39;3778:3;3767:9;3763:19;3744:39;:::i;:::-;3734:49;;3830:3;3819:9;3815:19;3802:33;3792:43;;3243:598;;;;;;;;;;:::o;3846:248::-;3914:6;3922;3975:2;3963:9;3954:7;3950:23;3946:32;3943:52;;;3991:1;3988;3981:12;3943:52;-1:-1:-1;;4014:23:8;;;4084:2;4069:18;;;4056:32;;-1:-1:-1;3846:248:8:o;4099:127::-;4160:10;4155:3;4151:20;4148:1;4141:31;4191:4;4188:1;4181:15;4215:4;4212:1;4205:15;4231:1464;4360:6;4368;4376;4384;4392;4400;4453:3;4441:9;4432:7;4428:23;4424:33;4421:53;;;4470:1;4467;4460:12;4421:53;4506:9;4493:23;4483:33;;4535:2;4556:38;4590:2;4579:9;4575:18;4556:38;:::i;:::-;4546:48;;4641:2;4630:9;4626:18;4613:32;4603:42;;4692:2;4681:9;4677:18;4664:32;4654:42;;4743:3;4732:9;4728:19;4715:33;4705:43;;4799:3;4788:9;4784:19;4771:33;4823:18;4864:2;4856:6;4853:14;4850:34;;;4880:1;4877;4870:12;4850:34;4918:6;4907:9;4903:22;4893:32;;4963:7;4956:4;4952:2;4948:13;4944:27;4934:55;;4985:1;4982;4975:12;4934:55;5021:2;5008:16;5043:2;5039;5036:10;5033:36;;;5049:18;;:::i;:::-;5095:2;5092:1;5088:10;5127:2;5121:9;5190:2;5186:7;5181:2;5177;5173:11;5169:25;5161:6;5157:38;5245:6;5233:10;5230:22;5225:2;5213:10;5210:18;5207:46;5204:72;;;5256:18;;:::i;:::-;5292:2;5285:22;5342:18;;;5376:15;;;;-1:-1:-1;5418:11:8;;;5414:20;;;5446:19;;;5443:39;;;5478:1;5475;5468:12;5443:39;5502:11;;;;5522:142;5538:6;5533:3;5530:15;5522:142;;;5604:17;;5592:30;;5555:12;;;;5642;;;;5522:142;;;5683:6;5673:16;;;;;;;;4231:1464;;;;;;;;:::o;6462:127::-;6523:10;6518:3;6514:20;6511:1;6504:31;6554:4;6551:1;6544:15;6578:4;6575:1;6568:15;6594:125;6634:4;6662:1;6659;6656:8;6653:34;;;6667:18;;:::i;:::-;-1:-1:-1;6704:9:8;;6594:125::o;6724:168::-;6764:7;6830:1;6826;6822:6;6818:14;6815:1;6812:21;6807:1;6800:9;6793:17;6789:45;6786:71;;;6837:18;;:::i;:::-;-1:-1:-1;6877:9:8;;6724:168::o;7176:277::-;7243:6;7296:2;7284:9;7275:7;7271:23;7267:32;7264:52;;;7312:1;7309;7302:12;7264:52;7344:9;7338:16;7397:5;7390:13;7383:21;7376:5;7373:32;7363:60;;7419:1;7416;7409:12;7363:60;7442:5;7176:277;-1:-1:-1;;;7176:277:8:o;8061:217::-;8101:1;8127;8117:132;;8171:10;8166:3;8162:20;8159:1;8152:31;8206:4;8203:1;8196:15;8234:4;8231:1;8224:15;8117:132;-1:-1:-1;8263:9:8;;8061:217::o;8283:128::-;8323:3;8354:1;8350:6;8347:1;8344:13;8341:39;;;8360:18;;:::i;:::-;-1:-1:-1;8396:9:8;;8283:128::o;9170:135::-;9209:3;-1:-1:-1;;9230:17:8;;9227:43;;;9250:18;;:::i;:::-;-1:-1:-1;9297:1:8;9286:13;;9170:135::o;11396:783::-;11602:4;11650:2;11639:9;11635:18;11680:6;11669:9;11662:25;11706:2;11744:6;11739:2;11728:9;11724:18;11717:34;11787:2;11782;11771:9;11767:18;11760:30;11810:6;11845;11839:13;11876:6;11868;11861:22;11914:3;11903:9;11899:19;11892:26;;11953:2;11945:6;11941:15;11927:29;;11974:1;11984:169;11998:6;11995:1;11992:13;11984:169;;;12059:13;;12047:26;;12128:15;;;;12093:12;;;;12020:1;12013:9;11984:169;;;-1:-1:-1;12170:3:8;;11396:783;-1:-1:-1;;;;;;;;11396:783:8:o", "language": "Solidity", "natspec": {"kind": "dev", "methods": {}, "version": 1}, "offset": [230, 13264], "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xAAF5EB68 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xAAF5EB68 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0xC26CB54F EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0xD71383ED EQ PUSH2 0x260 JUMPI DUP1 PUSH4 0xF16AD51E EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0xF287AD04 EQ PUSH2 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0xF714CE EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x390B7C66 EQ PUSH2 0xB7 JUMPI DUP1 PUSH4 0x6FB6EC41 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x85D88CB1 EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0x86BB8249 EQ PUSH2 0x19D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5 PUSH2 0xB0 CALLDATASIZE PUSH1 0x4 PUSH2 0xD5A JUMP JUMPDEST PUSH2 0x299 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC0 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH2 0xE1 CALLDATASIZE PUSH1 0x4 PUSH2 0xD86 JUMP JUMPDEST PUSH2 0x53C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 ISZERO ISZERO DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0x15F PUSH2 0x116 CALLDATASIZE PUSH1 0x4 PUSH2 0xDB8 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 SWAP1 SWAP6 ADD SLOAD SWAP4 SWAP6 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP8 DUP9 MSTORE PUSH1 0x20 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP5 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0x1CB PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0xDD1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0xC0 PUSH3 0xF4240 DUP2 JUMP JUMPDEST PUSH2 0x233 PUSH2 0x1F3 CALLDATASIZE PUSH1 0x4 PUSH2 0xDD1 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD SWAP4 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP5 SWAP2 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH2 0xCA JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x26E CALLDATASIZE PUSH1 0x4 PUSH2 0xDFB JUMP JUMPDEST PUSH2 0x6E3 JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x281 CALLDATASIZE PUSH1 0x4 PUSH2 0xE57 JUMP JUMPDEST PUSH2 0x8A7 JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x294 CALLDATASIZE PUSH1 0x4 PUSH2 0xE8F JUMP JUMPDEST PUSH2 0x9A4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x321 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F75206D75737420696E697469616C697A6520796F7572206163636F756E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x103334B939BA17 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x395 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F20636F696E73206C65667420746F20776974686472617700000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x3 ADD SLOAD TIMESTAMP LT PUSH2 0x3AD JUMPI POP PUSH1 0x1 DUP2 ADD SLOAD PUSH2 0x3CE JUMP JUMPDEST PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x5 DUP4 ADD SLOAD PUSH2 0x3C1 SWAP1 TIMESTAMP PUSH2 0xF9B JUMP JUMPDEST PUSH2 0x3CB SWAP2 SWAP1 PUSH2 0xFB2 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP5 ADD DUP1 SLOAD SWAP2 SWAP3 DUP5 SWAP3 PUSH2 0x3F1 SWAP1 DUP5 SWAP1 PUSH2 0xF9B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP TIMESTAMP PUSH1 0x5 DUP5 ADD SSTORE PUSH1 0x6 DUP2 ADD DUP1 SLOAD DUP4 SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x413 SWAP1 DUP5 SWAP1 PUSH2 0xF9B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x47C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A0 SWAP2 SWAP1 PUSH2 0xFD1 JUMP JUMPDEST PUSH2 0x4E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x151BDAD95B881D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST DUP5 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x5FFB4B63DEC15BA26308386F1D5CA61843B29BA365511062A887D95AA27532D3 DUP5 DUP7 PUSH1 0x1 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x52D SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 SLOAD DUP9 GT ISZERO PUSH2 0x55D JUMPI POP PUSH1 0x0 SWAP3 POP DUP3 SWAP2 POP DUP2 SWAP1 POP DUP1 PUSH2 0x6D8 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0xE0 DUP2 ADD DUP6 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x6 SWAP1 SWAP2 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE DUP9 GT DUP1 PUSH2 0x5D6 JUMPI POP DUP1 PUSH1 0x40 ADD MLOAD DUP9 LT JUMPDEST ISZERO PUSH2 0x5EF JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP POP PUSH2 0x6D8 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 ADD MLOAD DUP10 EQ ISZERO PUSH2 0x604 JUMPI POP DUP6 PUSH2 0x675 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0x61A SWAP2 SWAP1 PUSH2 0xF9B JUMP JUMPDEST PUSH3 0xF4240 PUSH2 0x628 DUP12 DUP12 PUSH2 0xF9B JUMP JUMPDEST PUSH2 0x632 SWAP2 SWAP1 PUSH2 0xFB2 JUMP JUMPDEST PUSH2 0x63C SWAP2 SWAP1 PUSH2 0xFFA JUMP JUMPDEST SWAP1 POP DUP9 PUSH3 0xF4240 DUP5 PUSH1 0x40 ADD MLOAD DUP13 PUSH2 0x653 SWAP2 SWAP1 PUSH2 0xF9B JUMP JUMPDEST PUSH2 0x65D SWAP1 DUP5 PUSH2 0xFB2 JUMP JUMPDEST PUSH2 0x667 SWAP2 SWAP1 PUSH2 0xFFA JUMP JUMPDEST PUSH2 0x671 SWAP2 SWAP1 PUSH2 0x101C JUMP JUMPDEST SWAP2 POP POP JUMPDEST PUSH1 0x0 PUSH2 0x682 DUP11 PUSH1 0x64 PUSH2 0xFB2 JUMP JUMPDEST PUSH1 0x80 DUP5 ADD MLOAD PUSH2 0x692 SWAP1 PUSH1 0x64 PUSH2 0xF9B JUMP JUMPDEST PUSH2 0x69C SWAP1 DUP5 PUSH2 0xFB2 JUMP JUMPDEST PUSH2 0x6A6 SWAP2 SWAP1 PUSH2 0xFFA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6B4 DUP3 DUP5 PUSH2 0xFFA JUMP JUMPDEST PUSH2 0x6BE DUP13 TIMESTAMP PUSH2 0x101C JUMP JUMPDEST PUSH2 0x6C8 SWAP2 SWAP1 PUSH2 0xF9B JUMP JUMPDEST PUSH1 0x1 SWAP9 POP SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP1 SWAP3 POP POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x727 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x706374557046726F6E74203E3D2031303 PUSH1 0x7C SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST DUP4 DUP6 LT PUSH2 0x786 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D696E456E6454696D65206D757374206265206C657373207468616E206D6178 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x456E6454696D65 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x7D5 SWAP1 PUSH2 0x1034 JUMP JUMPDEST SWAP2 DUP3 SWAP1 SSTORE POP DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 DUP2 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 DUP5 MLOAD DUP2 SSTORE SWAP3 DUP5 ADD MLOAD PUSH1 0x1 DUP5 ADD SSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x3 DUP4 ADD SSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x4 DUP4 ADD SSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0x5 DUP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD SSTORE SLOAD PUSH2 0x856 SWAP1 DUP3 PUSH2 0x8A7 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP3 SWAP2 PUSH32 0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x6 DUP2 ADD DUP1 SLOAD SWAP2 SWAP3 DUP5 SWAP3 PUSH2 0x8CA SWAP1 DUP5 SWAP1 PUSH2 0x101C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x923 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x937 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x95B SWAP2 SWAP1 PUSH2 0xFD1 JUMP JUMPDEST PUSH2 0x99F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x115490CC8C081D1C985B9CD9995C8819985A5B1959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND EQ PUSH2 0xA08 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x43616E206F6E6C7920696E697469616C697A6520796F7572206F776E20747261 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x6E636865 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP10 DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xA72 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x105B1C9958591E481A5B9A5D1A585B1A5E9959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x2 DUP1 DUP5 MSTORE SWAP1 DUP5 SWAP1 KECCAK256 PUSH1 0xE0 DUP7 ADD DUP6 MSTORE DUP1 SLOAD DUP1 DUP8 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP5 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 DUP2 ADD SLOAD DUP6 DUP6 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x4 DUP1 DUP3 ADD SLOAD PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0x5 DUP3 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0x6 SWAP1 SWAP2 ADD SLOAD PUSH1 0xC0 DUP7 ADD MSTORE SWAP3 MLOAD PUSH4 0x2769CD1F PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP5 POP PUSH20 0x0 SWAP3 PUSH4 0x9DA7347C SWAP3 PUSH2 0xB4B SWAP3 SWAP1 SWAP2 DUP8 SWAP2 DUP10 SWAP2 ADD PUSH2 0x104F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xB77 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB9B SWAP2 SWAP1 PUSH2 0xFD1 JUMP JUMPDEST PUSH2 0xBE7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652070726F6F6620636F756C64206E6F742062652076657269666965642E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP13 DUP6 MSTORE SWAP1 SWAP2 MSTORE DUP3 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 DUP1 DUP1 PUSH2 0xC24 DUP13 DUP12 DUP12 DUP12 PUSH2 0x53C JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP4 PUSH2 0xC79 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642076657374696E67207363686564756C650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x318 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD DUP12 TIMESTAMP PUSH2 0xCA2 SWAP2 SWAP1 PUSH2 0x101C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP PUSH1 0x3 PUSH1 0x0 DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP15 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x5 ADD SSTORE SWAP1 POP POP PUSH2 0xD30 DUP13 DUP13 PUSH2 0x299 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xD7D PUSH1 0x20 DUP5 ADD PUSH2 0xD3E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xD9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDED DUP4 PUSH2 0xD3E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xE16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH2 0xE42 PUSH1 0xA0 DUP10 ADD PUSH2 0xD3E JUMP JUMPDEST SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xEA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 PUSH2 0xEB9 DUP2 DUP10 ADD PUSH2 0xD3E JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xEEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP11 ADD SWAP2 POP DUP11 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xEFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xF11 JUMPI PUSH2 0xF11 PUSH2 0xE79 JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xF36 JUMPI PUSH2 0xF36 PUSH2 0xE79 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP14 DUP4 GT ISZERO PUSH2 0xF54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0xF72 JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0xF59 JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xFAD JUMPI PUSH2 0xFAD PUSH2 0xF85 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xFCC JUMPI PUSH2 0xFCC PUSH2 0xF85 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xFF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1017 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x102F JUMPI PUSH2 0x102F PUSH2 0xF85 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x1048 JUMPI PUSH2 0x1048 PUSH2 0xF85 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD DUP6 DUP4 MSTORE PUSH1 0x20 DUP6 DUP2 DUP6 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 POP DUP3 DUP8 ADD SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1096 JUMPI DUP5 MLOAD DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x107A JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 EQ BASEFEE LT 0xFC EXTCODESIZE 0xE6 0xD9 EXTCODEHASH RETURN 0xDF 0xCE RETURN STATICCALL PUSH25 0x2A7E5DBF7FF996ADE966260F44F6651FE564736F6C63430008 MULMOD STOP CALLER ", "pcMap": {"0": {"offset": [230, 13264], "op": "PUSH1", "path": "5", "value": "0x80"}, "2": {"fn": null, "offset": [230, 13264], "op": "PUSH1", "path": "5", "value": "0x40"}, "4": {"fn": null, "offset": [230, 13264], "op": "MSTORE", "path": "5"}, "5": {"fn": null, "offset": [230, 13264], "op": "CALLVALUE", "path": "5"}, "6": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "7": {"fn": null, "offset": [230, 13264], "op": "ISZERO", "path": "5"}, "8": {"fn": null, "offset": [230, 13264], "op": "PUSH2", "path": "5", "value": "0x10"}, "11": {"fn": null, "offset": [230, 13264], "op": "JUMPI", "path": "5"}, "12": {"fn": null, "offset": [230, 13264], "op": "PUSH1", "path": "5", "value": "0x0"}, "14": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "15": {"dev": "Cannot send ether to nonpayable function", "fn": null, "offset": [230, 13264], "op": "REVERT", "path": "5"}, "16": {"fn": null, "offset": [230, 13264], "op": "JUMPDEST", "path": "5"}, "17": {"fn": null, "offset": [230, 13264], "op": "POP", "path": "5"}, "18": {"fn": null, "offset": [230, 13264], "op": "PUSH1", "path": "5", "value": "0x4"}, "20": {"fn": null, "offset": [230, 13264], "op": "CALLDATASIZE", "path": "5"}, "21": {"fn": null, "offset": [230, 13264], "op": "LT", "path": "5"}, "22": {"fn": null, "offset": [230, 13264], "op": "PUSH2", "path": "5", "value": "0x9D"}, "25": {"fn": null, "offset": [230, 13264], "op": "JUMPI", "path": "5"}, "26": {"fn": null, "offset": [230, 13264], "op": "PUSH1", "path": "5", "value": "0x0"}, "28": {"fn": null, "offset": [230, 13264], "op": "CALLDATALOAD", "path": "5"}, "29": {"fn": null, "offset": [230, 13264], "op": "PUSH1", "path": "5", "value": "0xE0"}, "31": {"fn": null, "offset": [230, 13264], "op": "SHR", "path": "5"}, "32": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "33": {"fn": null, "offset": [230, 13264], "op": "PUSH4", "path": "5", "value": "0xAAF5EB68"}, "38": {"fn": null, "offset": [230, 13264], "op": "GT", "path": "5"}, "39": {"fn": null, "offset": [230, 13264], "op": "PUSH2", "path": "5", "value": "0x66"}, "42": {"fn": null, "offset": [230, 13264], "op": "JUMPI", "path": "5"}, "43": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "44": {"fn": null, "offset": [230, 13264], "op": "PUSH4", "path": "5", "value": "0xAAF5EB68"}, "49": {"fn": null, "offset": [230, 13264], "op": "EQ", "path": "5"}, "50": {"fn": null, "offset": [230, 13264], "op": "PUSH2", "path": "5", "value": "0x1DB"}, "53": {"fn": null, "offset": [230, 13264], "op": "JUMPI", "path": "5"}, "54": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "55": {"fn": null, "offset": [230, 13264], "op": "PUSH4", "path": "5", "value": "0xC26CB54F"}, "60": {"fn": null, "offset": [230, 13264], "op": "EQ", "path": "5"}, "61": {"fn": null, "offset": [230, 13264], "op": "PUSH2", "path": "5", "value": "0x1E5"}, "64": {"fn": null, "offset": [230, 13264], "op": "JUMPI", "path": "5"}, "65": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "66": {"fn": null, "offset": [230, 13264], "op": "PUSH4", "path": "5", "value": "0xD71383ED"}, "71": {"fn": null, "offset": [230, 13264], "op": "EQ", "path": "5"}, "72": {"fn": null, "offset": [230, 13264], "op": "PUSH2", "path": "5", "value": "0x260"}, "75": {"fn": null, "offset": [230, 13264], "op": "JUMPI", "path": "5"}, "76": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "77": {"fn": null, "offset": [230, 13264], "op": "PUSH4", "path": "5", "value": "0xF16AD51E"}, "82": {"fn": null, "offset": [230, 13264], "op": "EQ", "path": "5"}, "83": {"fn": null, "offset": [230, 13264], "op": "PUSH2", "path": "5", "value": "0x273"}, "86": {"fn": null, "offset": [230, 13264], "op": "JUMPI", "path": "5"}, "87": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "88": {"fn": null, "offset": [230, 13264], "op": "PUSH4", "path": "5", "value": "0xF287AD04"}, "93": {"fn": null, "offset": [230, 13264], "op": "EQ", "path": "5"}, "94": {"fn": null, "offset": [230, 13264], "op": "PUSH2", "path": "5", "value": "0x286"}, "97": {"fn": null, "offset": [230, 13264], "op": "JUMPI", "path": "5"}, "98": {"fn": null, "offset": [230, 13264], "op": "PUSH1", "path": "5", "value": "0x0"}, "100": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "101": {"fn": null, "offset": [230, 13264], "op": "REVERT", "path": "5"}, "102": {"fn": null, "offset": [230, 13264], "op": "JUMPDEST", "path": "5"}, "103": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "104": {"fn": null, "offset": [230, 13264], "op": "PUSH3", "path": "5", "value": "0xF714CE"}, "108": {"fn": null, "offset": [230, 13264], "op": "EQ", "path": "5"}, "109": {"fn": null, "offset": [230, 13264], "op": "PUSH2", "path": "5", "value": "0xA2"}, "112": {"fn": null, "offset": [230, 13264], "op": "JUMPI", "path": "5"}, "113": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "114": {"fn": null, "offset": [230, 13264], "op": "PUSH4", "path": "5", "value": "0x390B7C66"}, "119": {"fn": null, "offset": [230, 13264], "op": "EQ", "path": "5"}, "120": {"fn": null, "offset": [230, 13264], "op": "PUSH2", "path": "5", "value": "0xB7"}, "123": {"fn": null, "offset": [230, 13264], "op": "JUMPI", "path": "5"}, "124": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "125": {"fn": null, "offset": [230, 13264], "op": "PUSH4", "path": "5", "value": "0x6FB6EC41"}, "130": {"fn": null, "offset": [230, 13264], "op": "EQ", "path": "5"}, "131": {"fn": null, "offset": [230, 13264], "op": "PUSH2", "path": "5", "value": "0xD3"}, "134": {"fn": null, "offset": [230, 13264], "op": "JUMPI", "path": "5"}, "135": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "136": {"fn": null, "offset": [230, 13264], "op": "PUSH4", "path": "5", "value": "0x85D88CB1"}, "141": {"fn": null, "offset": [230, 13264], "op": "EQ", "path": "5"}, "142": {"fn": null, "offset": [230, 13264], "op": "PUSH2", "path": "5", "value": "0x108"}, "145": {"fn": null, "offset": [230, 13264], "op": "JUMPI", "path": "5"}, "146": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "147": {"fn": null, "offset": [230, 13264], "op": "PUSH4", "path": "5", "value": "0x86BB8249"}, "152": {"fn": null, "offset": [230, 13264], "op": "EQ", "path": "5"}, "153": {"fn": null, "offset": [230, 13264], "op": "PUSH2", "path": "5", "value": "0x19D"}, "156": {"fn": null, "offset": [230, 13264], "op": "JUMPI", "path": "5"}, "157": {"fn": null, "offset": [230, 13264], "op": "JUMPDEST", "path": "5"}, "158": {"fn": null, "offset": [230, 13264], "op": "PUSH1", "path": "5", "value": "0x0"}, "160": {"fn": null, "offset": [230, 13264], "op": "DUP1", "path": "5"}, "161": {"first_revert": true, "fn": null, "offset": [230, 13264], "op": "REVERT", "path": "5"}, "162": {"fn": "MerkleResistor.withdraw", "offset": [7663, 10249], "op": "JUMPDEST", "path": "5"}, "163": {"fn": "MerkleResistor.withdraw", "offset": [7663, 10249], "op": "PUSH2", "path": "5", "value": "0xB5"}, "166": {"fn": "MerkleResistor.withdraw", "offset": [7663, 10249], "op": "PUSH2", "path": "5", "value": "0xB0"}, "169": {"fn": "MerkleResistor.withdraw", "offset": [7663, 10249], "op": "CALLDATASIZE", "path": "5"}, "170": {"fn": "MerkleResistor.withdraw", "offset": [7663, 10249], "op": "PUSH1", "path": "5", "value": "0x4"}, "172": {"fn": "MerkleResistor.withdraw", "offset": [7663, 10249], "op": "PUSH2", "path": "5", "value": "0xD5A"}, "175": {"fn": "MerkleResistor.withdraw", "jump": "i", "offset": [7663, 10249], "op": "JUMP", "path": "5"}, "176": {"fn": "MerkleResistor.withdraw", "offset": [7663, 10249], "op": "JUMPDEST", "path": "5"}, "177": {"fn": "MerkleResistor.withdraw", "offset": [7663, 10249], "op": "PUSH2", "path": "5", "value": "0x299"}, "180": {"fn": "MerkleResistor.withdraw", "jump": "i", "offset": [7663, 10249], "op": "JUMP", "path": "5"}, "181": {"fn": "MerkleResistor.withdraw", "offset": [7663, 10249], "op": "JUMPDEST", "path": "5"}, "182": {"fn": "MerkleResistor.withdraw", "offset": [7663, 10249], "op": "STOP", "path": "5"}, "183": {"offset": [333, 357], "op": "JUMPDEST", "path": "5"}, "184": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "PUSH2", "path": "5", "value": "0xC0"}, "187": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "PUSH1", "path": "5", "value": "0x0"}, "189": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "SLOAD", "path": "5"}, "190": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "DUP2", "path": "5"}, "191": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "JUMP", "path": "5"}, "192": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "JUMPDEST", "path": "5"}, "193": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "PUSH1", "path": "5", "value": "0x40"}, "195": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "MLOAD", "path": "5"}, "196": {"op": "SWAP1"}, "197": {"op": "DUP2"}, "198": {"op": "MSTORE"}, "199": {"op": "PUSH1", "value": "0x20"}, "201": {"op": "ADD"}, "202": {"offset": [333, 357], "op": "JUMPDEST", "path": "5"}, "203": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "PUSH1", "path": "5", "value": "0x40"}, "205": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "MLOAD", "path": "5"}, "206": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "DUP1", "path": "5"}, "207": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "SWAP2", "path": "5"}, "208": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "SUB", "path": "5"}, "209": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "SWAP1", "path": "5"}, "210": {"fn": "MerkleResistor.withdraw", "offset": [333, 357], "op": "RETURN", "path": "5"}, "211": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "JUMPDEST", "path": "5"}, "212": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "PUSH2", "path": "5", "value": "0xE6"}, "215": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "PUSH2", "path": "5", "value": "0xE1"}, "218": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "CALLDATASIZE", "path": "5"}, "219": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "PUSH1", "path": "5", "value": "0x4"}, "221": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "PUSH2", "path": "5", "value": "0xD86"}, "224": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [10318, 13261], "op": "JUMP", "path": "5"}, "225": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "JUMPDEST", "path": "5"}, "226": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "PUSH2", "path": "5", "value": "0x53C"}, "229": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [10318, 13261], "op": "JUMP", "path": "5"}, "230": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "JUMPDEST", "path": "5"}, "231": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "PUSH1", "path": "5", "value": "0x40"}, "233": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "DUP1", "path": "5"}, "234": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "MLOAD", "path": "5"}, "235": {"op": "SWAP5"}, "236": {"op": "ISZERO"}, "237": {"op": "ISZERO"}, "238": {"op": "DUP6"}, "239": {"op": "MSTORE"}, "240": {"op": "PUSH1", "value": "0x20"}, "242": {"op": "DUP6"}, "243": {"op": "ADD"}, "244": {"op": "SWAP4"}, "245": {"op": "SWAP1"}, "246": {"op": "SWAP4"}, "247": {"op": "MSTORE"}, "248": {"op": "SWAP2"}, "249": {"op": "DUP4"}, "250": {"op": "ADD"}, "251": {"op": "MSTORE"}, "252": {"op": "PUSH1", "value": "0x60"}, "254": {"op": "DUP3"}, "255": {"op": "ADD"}, "256": {"op": "MSTORE"}, "257": {"op": "PUSH1", "value": "0x80"}, "259": {"op": "ADD"}, "260": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "PUSH2", "path": "5", "value": "0xCA"}, "263": {"op": "JUMP"}, "264": {"offset": [2333, 2380], "op": "JUMPDEST", "path": "5"}, "265": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH2", "path": "5", "value": "0x15F"}, "268": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH2", "path": "5", "value": "0x116"}, "271": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "CALLDATASIZE", "path": "5"}, "272": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "5", "value": "0x4"}, "274": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH2", "path": "5", "value": "0xDB8"}, "277": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [2333, 2380], "op": "JUMP", "path": "5"}, "278": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "JUMPDEST", "path": "5"}, "279": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "5", "value": "0x2"}, "281": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "5", "value": "0x20"}, "283": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP2", "path": "5"}, "284": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP1", "path": "5"}, "285": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "MSTORE", "path": "5"}, "286": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "5", "value": "0x0"}, "288": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP2", "path": "5"}, "289": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP3", "path": "5"}, "290": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "MSTORE", "path": "5"}, "291": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "5", "value": "0x40"}, "293": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP1", "path": "5"}, "294": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP2", "path": "5"}, "295": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "KECCAK256", "path": "5"}, "296": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP1", "path": "5"}, "297": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SLOAD", "path": "5"}, "298": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "5", "value": "0x1"}, "300": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP3", "path": "5"}, "301": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "ADD", "path": "5"}, "302": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SLOAD", "path": "5"}, "303": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP3", "path": "5"}, "304": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP3", "path": "5"}, "305": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "ADD", "path": "5"}, "306": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SLOAD", "path": "5"}, "307": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "5", "value": "0x3"}, "309": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP4", "path": "5"}, "310": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "ADD", "path": "5"}, "311": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SLOAD", "path": "5"}, "312": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "5", "value": "0x4"}, "314": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP5", "path": "5"}, "315": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "ADD", "path": "5"}, "316": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SLOAD", "path": "5"}, "317": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "5", "value": "0x5"}, "319": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP6", "path": "5"}, "320": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "ADD", "path": "5"}, "321": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SLOAD", "path": "5"}, "322": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "5", "value": "0x6"}, "324": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP1", "path": "5"}, "325": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP6", "path": "5"}, "326": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "ADD", "path": "5"}, "327": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SLOAD", "path": "5"}, "328": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP4", "path": "5"}, "329": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP6", "path": "5"}, "330": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP5", "path": "5"}, "331": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP3", "path": "5"}, "332": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP4", "path": "5"}, "333": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP2", "path": "5"}, "334": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP3", "path": "5"}, "335": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP1", "path": "5"}, "336": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP2", "path": "5"}, "337": {"op": "PUSH1", "value": "0x1"}, "339": {"op": "PUSH1", "value": "0x1"}, "341": {"op": "PUSH1", "value": "0xA0"}, "343": {"op": "SHL"}, "344": {"op": "SUB"}, "345": {"offset": [2333, 2380], "op": "SWAP1", "path": "5"}, "346": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP2", "path": "5"}, "347": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "AND", "path": "5"}, "348": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "SWAP1", "path": "5"}, "349": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP8", "path": "5"}, "350": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "JUMP", "path": "5"}, "351": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "JUMPDEST", "path": "5"}, "352": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "PUSH1", "path": "5", "value": "0x40"}, "354": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "DUP1", "path": "5"}, "355": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2333, 2380], "op": "MLOAD", "path": "5"}, "356": {"op": "SWAP8"}, "357": {"op": "DUP9"}, "358": {"op": "MSTORE"}, "359": {"op": "PUSH1", "value": "0x20"}, "361": {"op": "DUP9"}, "362": {"op": "ADD"}, "363": {"op": "SWAP7"}, "364": {"op": "SWAP1"}, "365": {"op": "SWAP7"}, "366": {"op": "MSTORE"}, "367": {"op": "SWAP5"}, "368": {"op": "DUP7"}, "369": {"op": "ADD"}, "370": {"op": "SWAP4"}, "371": {"op": "SWAP1"}, "372": {"op": "SWAP4"}, "373": {"op": "MSTORE"}, "374": {"op": "PUSH1", "value": "0x60"}, "376": {"op": "DUP6"}, "377": {"op": "ADD"}, "378": {"op": "SWAP2"}, "379": {"op": "SWAP1"}, "380": {"op": "SWAP2"}, "381": {"op": "MSTORE"}, "382": {"op": "PUSH1", "value": "0x80"}, "384": {"op": "DUP5"}, "385": {"op": "ADD"}, "386": {"op": "MSTORE"}, "387": {"op": "PUSH1", "value": "0x1"}, "389": {"op": "PUSH1", "value": "0x1"}, "391": {"op": "PUSH1", "value": "0xA0"}, "393": {"op": "SHL"}, "394": {"op": "SUB"}, "395": {"op": "AND"}, "396": {"op": "PUSH1", "value": "0xA0"}, "398": {"op": "DUP4"}, "399": {"op": "ADD"}, "400": {"op": "MSTORE"}, "401": {"op": "PUSH1", "value": "0xC0"}, "403": {"op": "DUP3"}, "404": {"op": "ADD"}, "405": {"op": "MSTORE"}, "406": {"op": "PUSH1", "value": "0xE0"}, "408": {"op": "ADD"}, "409": {"offset": [2333, 2380], "op": "PUSH2", "path": "5", "value": "0xCA"}, "412": {"op": "JUMP"}, "413": {"offset": [2173, 2235], "op": "JUMPDEST", "path": "5"}, "414": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH2", "path": "5", "value": "0x1CB"}, "417": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH2", "path": "5", "value": "0x1AB"}, "420": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "CALLDATASIZE", "path": "5"}, "421": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH1", "path": "5", "value": "0x4"}, "423": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH2", "path": "5", "value": "0xDD1"}, "426": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [2173, 2235], "op": "JUMP", "path": "5"}, "427": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "JUMPDEST", "path": "5"}, "428": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH1", "path": "5", "value": "0x1"}, "430": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH1", "path": "5", "value": "0x20"}, "432": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "SWAP1", "path": "5"}, "433": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "DUP2", "path": "5"}, "434": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "MSTORE", "path": "5"}, "435": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH1", "path": "5", "value": "0x0"}, "437": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "SWAP3", "path": "5"}, "438": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "DUP4", "path": "5"}, "439": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "MSTORE", "path": "5"}, "440": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH1", "path": "5", "value": "0x40"}, "442": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "DUP1", "path": "5"}, "443": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "DUP5", "path": "5"}, "444": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "KECCAK256", "path": "5"}, "445": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "SWAP1", "path": "5"}, "446": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "SWAP2", "path": "5"}, "447": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "MSTORE", "path": "5"}, "448": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "SWAP1", "path": "5"}, "449": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "DUP3", "path": "5"}, "450": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "MSTORE", "path": "5"}, "451": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "SWAP1", "path": "5"}, "452": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "KECCAK256", "path": "5"}, "453": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "SLOAD", "path": "5"}, "454": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH1", "path": "5", "value": "0xFF"}, "456": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "AND", "path": "5"}, "457": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "DUP2", "path": "5"}, "458": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "JUMP", "path": "5"}, "459": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "JUMPDEST", "path": "5"}, "460": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "PUSH1", "path": "5", "value": "0x40"}, "462": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2173, 2235], "op": "MLOAD", "path": "5"}, "463": {"op": "SWAP1"}, "464": {"op": "ISZERO"}, "465": {"op": "ISZERO"}, "466": {"op": "DUP2"}, "467": {"op": "MSTORE"}, "468": {"op": "PUSH1", "value": "0x20"}, "470": {"op": "ADD"}, "471": {"offset": [2173, 2235], "op": "PUSH2", "path": "5", "value": "0xCA"}, "474": {"op": "JUMP"}, "475": {"offset": [2584, 2624], "op": "JUMPDEST", "path": "5"}, "476": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2584, 2624], "op": "PUSH2", "path": "5", "value": "0xC0"}, "479": {"offset": [2617, 2624], "op": "PUSH3", "path": "5", "value": "0xF4240"}, "483": {"offset": [2584, 2624], "op": "DUP2", "path": "5"}, "484": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2584, 2624], "op": "JUMP", "path": "5"}, "485": {"offset": [2449, 2511], "op": "JUMPDEST", "path": "5"}, "486": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH2", "path": "5", "value": "0x233"}, "489": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH2", "path": "5", "value": "0x1F3"}, "492": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "CALLDATASIZE", "path": "5"}, "493": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "5", "value": "0x4"}, "495": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH2", "path": "5", "value": "0xDD1"}, "498": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [2449, 2511], "op": "JUMP", "path": "5"}, "499": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "JUMPDEST", "path": "5"}, "500": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "5", "value": "0x3"}, "502": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "5", "value": "0x20"}, "504": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP2", "path": "5"}, "505": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP2", "path": "5"}, "506": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "MSTORE", "path": "5"}, "507": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "5", "value": "0x0"}, "509": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP4", "path": "5"}, "510": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP5", "path": "5"}, "511": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "MSTORE", "path": "5"}, "512": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "5", "value": "0x40"}, "514": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP1", "path": "5"}, "515": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP6", "path": "5"}, "516": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "KECCAK256", "path": "5"}, "517": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP1", "path": "5"}, "518": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP2", "path": "5"}, "519": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "MSTORE", "path": "5"}, "520": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP2", "path": "5"}, "521": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP4", "path": "5"}, "522": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "MSTORE", "path": "5"}, "523": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP2", "path": "5"}, "524": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "KECCAK256", "path": "5"}, "525": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP1", "path": "5"}, "526": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SLOAD", "path": "5"}, "527": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "5", "value": "0x1"}, "529": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP3", "path": "5"}, "530": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "ADD", "path": "5"}, "531": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SLOAD", "path": "5"}, "532": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "5", "value": "0x2"}, "534": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP4", "path": "5"}, "535": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "ADD", "path": "5"}, "536": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SLOAD", "path": "5"}, "537": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP4", "path": "5"}, "538": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP4", "path": "5"}, "539": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "ADD", "path": "5"}, "540": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SLOAD", "path": "5"}, "541": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "5", "value": "0x4"}, "543": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP5", "path": "5"}, "544": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "ADD", "path": "5"}, "545": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SLOAD", "path": "5"}, "546": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "5", "value": "0x5"}, "548": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP1", "path": "5"}, "549": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP5", "path": "5"}, "550": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "ADD", "path": "5"}, "551": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SLOAD", "path": "5"}, "552": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP3", "path": "5"}, "553": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP5", "path": "5"}, "554": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP2", "path": "5"}, "555": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP4", "path": "5"}, "556": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP2", "path": "5"}, "557": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP3", "path": "5"}, "558": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP1", "path": "5"}, "559": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP2", "path": "5"}, "560": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "SWAP1", "path": "5"}, "561": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP7", "path": "5"}, "562": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "JUMP", "path": "5"}, "563": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "JUMPDEST", "path": "5"}, "564": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "PUSH1", "path": "5", "value": "0x40"}, "566": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "DUP1", "path": "5"}, "567": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [2449, 2511], "op": "MLOAD", "path": "5"}, "568": {"op": "SWAP7"}, "569": {"op": "DUP8"}, "570": {"op": "MSTORE"}, "571": {"op": "PUSH1", "value": "0x20"}, "573": {"op": "DUP8"}, "574": {"op": "ADD"}, "575": {"op": "SWAP6"}, "576": {"op": "SWAP1"}, "577": {"op": "SWAP6"}, "578": {"op": "MSTORE"}, "579": {"op": "SWAP4"}, "580": {"op": "DUP6"}, "581": {"op": "ADD"}, "582": {"op": "SWAP3"}, "583": {"op": "SWAP1"}, "584": {"op": "SWAP3"}, "585": {"op": "MSTORE"}, "586": {"op": "PUSH1", "value": "0x60"}, "588": {"op": "DUP5"}, "589": {"op": "ADD"}, "590": {"op": "MSTORE"}, "591": {"op": "PUSH1", "value": "0x80"}, "593": {"op": "DUP4"}, "594": {"op": "ADD"}, "595": {"op": "MSTORE"}, "596": {"op": "PUSH1", "value": "0xA0"}, "598": {"op": "DUP3"}, "599": {"op": "ADD"}, "600": {"op": "MSTORE"}, "601": {"op": "PUSH1", "value": "0xC0"}, "603": {"op": "ADD"}, "604": {"offset": [2449, 2511], "op": "PUSH2", "path": "5", "value": "0xCA"}, "607": {"op": "JUMP"}, "608": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "JUMPDEST", "path": "5"}, "609": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "PUSH2", "path": "5", "value": "0xB5"}, "612": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "PUSH2", "path": "5", "value": "0x26E"}, "615": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "CALLDATASIZE", "path": "5"}, "616": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "PUSH1", "path": "5", "value": "0x4"}, "618": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "PUSH2", "path": "5", "value": "0xDFB"}, "621": {"fn": "MerkleResistor.addMerkleTree", "jump": "i", "offset": [2963, 4038], "op": "JUMP", "path": "5"}, "622": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "JUMPDEST", "path": "5"}, "623": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "PUSH2", "path": "5", "value": "0x6E3"}, "626": {"fn": "MerkleResistor.addMerkleTree", "jump": "i", "offset": [2963, 4038], "op": "JUMP", "path": "5"}, "627": {"fn": "MerkleResistor.depositTokens", "offset": [4076, 5189], "op": "JUMPDEST", "path": "5"}, "628": {"fn": "MerkleResistor.depositTokens", "offset": [4076, 5189], "op": "PUSH2", "path": "5", "value": "0xB5"}, "631": {"fn": "MerkleResistor.depositTokens", "offset": [4076, 5189], "op": "PUSH2", "path": "5", "value": "0x281"}, "634": {"fn": "MerkleResistor.depositTokens", "offset": [4076, 5189], "op": "CALLDATASIZE", "path": "5"}, "635": {"fn": "MerkleResistor.depositTokens", "offset": [4076, 5189], "op": "PUSH1", "path": "5", "value": "0x4"}, "637": {"fn": "MerkleResistor.depositTokens", "offset": [4076, 5189], "op": "PUSH2", "path": "5", "value": "0xE57"}, "640": {"fn": "MerkleResistor.depositTokens", "jump": "i", "offset": [4076, 5189], "op": "JUMP", "path": "5"}, "641": {"fn": "MerkleResistor.depositTokens", "offset": [4076, 5189], "op": "JUMPDEST", "path": "5"}, "642": {"fn": "MerkleResistor.depositTokens", "offset": [4076, 5189], "op": "PUSH2", "path": "5", "value": "0x8A7"}, "645": {"fn": "MerkleResistor.depositTokens", "jump": "i", "offset": [4076, 5189], "op": "JUMP", "path": "5"}, "646": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "JUMPDEST", "path": "5"}, "647": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "PUSH2", "path": "5", "value": "0xB5"}, "650": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "PUSH2", "path": "5", "value": "0x294"}, "653": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "CALLDATASIZE", "path": "5"}, "654": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "PUSH1", "path": "5", "value": "0x4"}, "656": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "PUSH2", "path": "5", "value": "0xE8F"}, "659": {"fn": "MerkleResistor.initialize", "jump": "i", "offset": [5450, 7436], "op": "JUMP", "path": "5"}, "660": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "JUMPDEST", "path": "5"}, "661": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "PUSH2", "path": "5", "value": "0x9A4"}, "664": {"fn": "MerkleResistor.initialize", "jump": "i", "offset": [5450, 7436], "op": "JUMP", "path": "5"}, "665": {"fn": "MerkleResistor.withdraw", "offset": [7663, 10249], "op": "JUMPDEST", "path": "5"}, "666": {"op": "PUSH1", "value": "0x1"}, "668": {"op": "PUSH1", "value": "0x1"}, "670": {"op": "PUSH1", "value": "0xA0"}, "672": {"op": "SHL"}, "673": {"op": "SUB"}, "674": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7877], "op": "DUP2", "path": "5", "statement": 0}, "675": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7877], "op": "AND", "path": "5"}, "676": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7877], "op": "PUSH1", "path": "5", "value": "0x0"}, "678": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7877], "op": "SWAP1", "path": "5"}, "679": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7877], "op": "DUP2", "path": "5"}, "680": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7877], "op": "MSTORE", "path": "5"}, "681": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7864], "op": "PUSH1", "path": "5", "value": "0x1"}, "683": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7877], "op": "PUSH1", "path": "5", "value": "0x20"}, "685": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7877], "op": "SWAP1", "path": "5"}, "686": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7877], "op": "DUP2", "path": "5"}, "687": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7877], "op": "MSTORE", "path": "5"}, "688": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7877], "op": "PUSH1", "path": "5", "value": "0x40"}, "690": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7877], "op": "DUP1", "path": "5"}, "691": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7877], "op": "DUP4", "path": "5"}, "692": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7877], "op": "KECCAK256", "path": "5"}, "693": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7890], "op": "DUP6", "path": "5"}, "694": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7890], "op": "DUP5", "path": "5"}, "695": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7890], "op": "MSTORE", "path": "5"}, "696": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7890], "op": "SWAP1", "path": "5"}, "697": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7890], "op": "SWAP2", "path": "5"}, "698": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7890], "op": "MSTORE", "path": "5"}, "699": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7890], "op": "SWAP1", "path": "5"}, "700": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7890], "op": "KECCAK256", "path": "5"}, "701": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7890], "op": "SLOAD", "path": "5"}, "702": {"fn": "MerkleResistor.withdraw", "offset": [7853, 7890], "op": "PUSH1", "path": "5", "value": "0xFF"}, "704": {"branch": 28, "fn": "MerkleResistor.withdraw", "offset": [7853, 7890], "op": "AND", "path": "5"}, "705": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "PUSH2", "path": "5", "value": "0x321"}, "708": {"branch": 28, "fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "JUMPI", "path": "5"}, "709": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "PUSH1", "path": "5", "value": "0x40"}, "711": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "MLOAD", "path": "5"}, "712": {"op": "PUSH3", "value": "0x461BCD"}, "716": {"op": "PUSH1", "value": "0xE5"}, "718": {"op": "SHL"}, "719": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "DUP2", "path": "5"}, "720": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "MSTORE", "path": "5"}, "721": {"op": "PUSH1", "value": "0x20"}, "723": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "PUSH1", "path": "5", "value": "0x4"}, "725": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "DUP3", "path": "5"}, "726": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "ADD", "path": "5"}, "727": {"op": "MSTORE"}, "728": {"op": "PUSH1", "value": "0x27"}, "730": {"op": "PUSH1", "value": "0x24"}, "732": {"op": "DUP3"}, "733": {"op": "ADD"}, "734": {"op": "MSTORE"}, "735": {"op": "PUSH32", "value": "0x596F75206D75737420696E697469616C697A6520796F7572206163636F756E74"}, "768": {"op": "PUSH1", "value": "0x44"}, "770": {"op": "DUP3"}, "771": {"op": "ADD"}, "772": {"op": "MSTORE"}, "773": {"op": "PUSH7", "value": "0x103334B939BA17"}, "781": {"op": "PUSH1", "value": "0xC9"}, "783": {"op": "SHL"}, "784": {"op": "PUSH1", "value": "0x64"}, "786": {"op": "DUP3"}, "787": {"op": "ADD"}, "788": {"op": "MSTORE"}, "789": {"op": "PUSH1", "value": "0x84"}, "791": {"op": "ADD"}, "792": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "JUMPDEST", "path": "5"}, "793": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "PUSH1", "path": "5", "value": "0x40"}, "795": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "MLOAD", "path": "5"}, "796": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "DUP1", "path": "5"}, "797": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "SWAP2", "path": "5"}, "798": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "SUB", "path": "5"}, "799": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "SWAP1", "path": "5"}, "800": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "REVERT", "optimizer_revert": true, "path": "5"}, "801": {"fn": "MerkleResistor.withdraw", "offset": [7845, 7934], "op": "JUMPDEST", "path": "5"}, "802": {"op": "PUSH1", "value": "0x1"}, "804": {"op": "PUSH1", "value": "0x1"}, "806": {"op": "PUSH1", "value": "0xA0"}, "808": {"op": "SHL"}, "809": {"op": "SUB"}, "810": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8032], "op": "DUP2", "path": "5"}, "811": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8032], "op": "AND", "path": "5"}, "812": {"fn": "MerkleResistor.withdraw", "offset": [7985, 8008], "op": "PUSH1", "path": "5", "value": "0x0"}, "814": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8032], "op": "SWAP1", "path": "5"}, "815": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8032], "op": "DUP2", "path": "5"}, "816": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8032], "op": "MSTORE", "path": "5"}, "817": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8019], "op": "PUSH1", "path": "5", "value": "0x3"}, "819": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8032], "op": "PUSH1", "path": "5", "value": "0x20"}, "821": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8032], "op": "SWAP1", "path": "5"}, "822": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8032], "op": "DUP2", "path": "5"}, "823": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8032], "op": "MSTORE", "path": "5"}, "824": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8032], "op": "PUSH1", "path": "5", "value": "0x40"}, "826": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8032], "op": "DUP1", "path": "5"}, "827": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8032], "op": "DUP4", "path": "5"}, "828": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8032], "op": "KECCAK256", "path": "5"}, "829": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8045], "op": "DUP6", "path": "5"}, "830": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8045], "op": "DUP5", "path": "5"}, "831": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8045], "op": "MSTORE", "path": "5"}, "832": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8045], "op": "SWAP1", "path": "5"}, "833": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8045], "op": "SWAP2", "path": "5"}, "834": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8045], "op": "MSTORE", "path": "5"}, "835": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8045], "op": "SWAP1", "path": "5"}, "836": {"fn": "MerkleResistor.withdraw", "offset": [8011, 8045], "op": "KECCAK256", "path": "5"}, "837": {"fn": "MerkleResistor.withdraw", "offset": [8102, 8122], "op": "PUSH1", "path": "5", "statement": 1, "value": "0x1"}, "839": {"fn": "MerkleResistor.withdraw", "offset": [8102, 8122], "op": "DUP2", "path": "5"}, "840": {"fn": "MerkleResistor.withdraw", "offset": [8102, 8122], "op": "ADD", "path": "5"}, "841": {"fn": "MerkleResistor.withdraw", "offset": [8102, 8122], "op": "SLOAD", "path": "5"}, "842": {"fn": "MerkleResistor.withdraw", "offset": [8094, 8157], "op": "PUSH2", "path": "5", "value": "0x395"}, "845": {"fn": "MerkleResistor.withdraw", "offset": [8094, 8157], "op": "JUMPI", "path": "5"}, "846": {"fn": "MerkleResistor.withdraw", "offset": [8094, 8157], "op": "PUSH1", "path": "5", "value": "0x40"}, "848": {"fn": "MerkleResistor.withdraw", "offset": [8094, 8157], "op": "MLOAD", "path": "5"}, "849": {"op": "PUSH3", "value": "0x461BCD"}, "853": {"op": "PUSH1", "value": "0xE5"}, "855": {"op": "SHL"}, "856": {"fn": "MerkleResistor.withdraw", "offset": [8094, 8157], "op": "DUP2", "path": "5"}, "857": {"fn": "MerkleResistor.withdraw", "offset": [8094, 8157], "op": "MSTORE", "path": "5"}, "858": {"op": "PUSH1", "value": "0x20"}, "860": {"fn": "MerkleResistor.withdraw", "offset": [8094, 8157], "op": "PUSH1", "path": "5", "value": "0x4"}, "862": {"fn": "MerkleResistor.withdraw", "offset": [8094, 8157], "op": "DUP3", "path": "5"}, "863": {"fn": "MerkleResistor.withdraw", "offset": [8094, 8157], "op": "ADD", "path": "5"}, "864": {"op": "MSTORE"}, "865": {"op": "PUSH1", "value": "0x19"}, "867": {"op": "PUSH1", "value": "0x24"}, "869": {"op": "DUP3"}, "870": {"op": "ADD"}, "871": {"op": "MSTORE"}, "872": {"op": "PUSH32", "value": "0x4E6F20636F696E73206C65667420746F20776974686472617700000000000000"}, "905": {"op": "PUSH1", "value": "0x44"}, "907": {"op": "DUP3"}, "908": {"op": "ADD"}, "909": {"op": "MSTORE"}, "910": {"op": "PUSH1", "value": "0x64"}, "912": {"op": "ADD"}, "913": {"fn": "MerkleResistor.withdraw", "offset": [8094, 8157], "op": "PUSH2", "path": "5", "value": "0x318"}, "916": {"op": "JUMP"}, "917": {"fn": "MerkleResistor.withdraw", "offset": [8094, 8157], "op": "JUMPDEST", "path": "5"}, "918": {"fn": "MerkleResistor.withdraw", "offset": [8167, 8189], "op": "PUSH1", "path": "5", "value": "0x0"}, "920": {"fn": "MerkleResistor.withdraw", "offset": [8337, 8344], "op": "DUP2", "path": "5"}, "921": {"fn": "MerkleResistor.withdraw", "offset": [8337, 8352], "op": "PUSH1", "path": "5", "value": "0x3"}, "923": {"fn": "MerkleResistor.withdraw", "offset": [8337, 8352], "op": "ADD", "path": "5"}, "924": {"fn": "MerkleResistor.withdraw", "offset": [8337, 8352], "op": "SLOAD", "path": "5"}, "925": {"fn": "MerkleResistor.withdraw", "offset": [8318, 8333], "op": "TIMESTAMP", "path": "5"}, "926": {"branch": 29, "fn": "MerkleResistor.withdraw", "offset": [8318, 8352], "op": "LT", "path": "5"}, "927": {"fn": "MerkleResistor.withdraw", "offset": [8314, 8688], "op": "PUSH2", "path": "5", "value": "0x3AD"}, "930": {"branch": 29, "fn": "MerkleResistor.withdraw", "offset": [8314, 8688], "op": "JUMPI", "path": "5"}, "931": {"op": "POP"}, "932": {"fn": "MerkleResistor.withdraw", "offset": [8388, 8408], "op": "PUSH1", "path": "5", "statement": 2, "value": "0x1"}, "934": {"fn": "MerkleResistor.withdraw", "offset": [8388, 8408], "op": "DUP2", "path": "5"}, "935": {"fn": "MerkleResistor.withdraw", "offset": [8388, 8408], "op": "ADD", "path": "5"}, "936": {"fn": "MerkleResistor.withdraw", "offset": [8388, 8408], "op": "SLOAD", "path": "5"}, "937": {"fn": "MerkleResistor.withdraw", "offset": [8314, 8688], "op": "PUSH2", "path": "5", "value": "0x3CE"}, "940": {"fn": "MerkleResistor.withdraw", "offset": [8314, 8688], "op": "JUMP", "path": "5"}, "941": {"fn": "MerkleResistor.withdraw", "offset": [8314, 8688], "op": "JUMPDEST", "path": "5"}, "942": {"fn": "MerkleResistor.withdraw", "offset": [8655, 8677], "op": "PUSH1", "path": "5", "statement": 3, "value": "0x4"}, "944": {"fn": "MerkleResistor.withdraw", "offset": [8655, 8677], "op": "DUP3", "path": "5"}, "945": {"fn": "MerkleResistor.withdraw", "offset": [8655, 8677], "op": "ADD", "path": "5"}, "946": {"fn": "MerkleResistor.withdraw", "offset": [8655, 8677], "op": "SLOAD", "path": "5"}, "947": {"fn": "MerkleResistor.withdraw", "offset": [8625, 8651], "op": "PUSH1", "path": "5", "value": "0x5"}, "949": {"fn": "MerkleResistor.withdraw", "offset": [8625, 8651], "op": "DUP4", "path": "5"}, "950": {"fn": "MerkleResistor.withdraw", "offset": [8625, 8651], "op": "ADD", "path": "5"}, "951": {"fn": "MerkleResistor.withdraw", "offset": [8625, 8651], "op": "SLOAD", "path": "5"}, "952": {"fn": "MerkleResistor.withdraw", "offset": [8607, 8651], "op": "PUSH2", "path": "5", "value": "0x3C1"}, "955": {"fn": "MerkleResistor.withdraw", "offset": [8607, 8651], "op": "SWAP1", "path": "5"}, "956": {"fn": "MerkleResistor.withdraw", "offset": [8607, 8622], "op": "TIMESTAMP", "path": "5"}, "957": {"fn": "MerkleResistor.withdraw", "offset": [8607, 8651], "op": "PUSH2", "path": "5", "value": "0xF9B"}, "960": {"fn": "MerkleResistor.withdraw", "jump": "i", "offset": [8607, 8651], "op": "JUMP", "path": "5"}, "961": {"fn": "MerkleResistor.withdraw", "offset": [8607, 8651], "op": "JUMPDEST", "path": "5"}, "962": {"fn": "MerkleResistor.withdraw", "offset": [8606, 8677], "op": "PUSH2", "path": "5", "value": "0x3CB"}, "965": {"fn": "MerkleResistor.withdraw", "offset": [8606, 8677], "op": "SWAP2", "path": "5"}, "966": {"fn": "MerkleResistor.withdraw", "offset": [8606, 8677], "op": "SWAP1", "path": "5"}, "967": {"fn": "MerkleResistor.withdraw", "offset": [8606, 8677], "op": "PUSH2", "path": "5", "value": "0xFB2"}, "970": {"fn": "MerkleResistor.withdraw", "jump": "i", "offset": [8606, 8677], "op": "JUMP", "path": "5"}, "971": {"fn": "MerkleResistor.withdraw", "offset": [8606, 8677], "op": "JUMPDEST", "path": "5"}, "972": {"fn": "MerkleResistor.withdraw", "offset": [8586, 8677], "op": "SWAP1", "path": "5"}, "973": {"fn": "MerkleResistor.withdraw", "offset": [8586, 8677], "op": "POP", "path": "5"}, "974": {"fn": "MerkleResistor.withdraw", "offset": [8314, 8688], "op": "JUMPDEST", "path": "5"}, "975": {"fn": "MerkleResistor.withdraw", "offset": [8720, 8743], "op": "PUSH1", "path": "5", "value": "0x0"}, "977": {"fn": "MerkleResistor.withdraw", "offset": [8746, 8770], "op": "DUP5", "path": "5"}, "978": {"fn": "MerkleResistor.withdraw", "offset": [8746, 8770], "op": "DUP2", "path": "5"}, "979": {"fn": "MerkleResistor.withdraw", "offset": [8746, 8770], "op": "MSTORE", "path": "5"}, "980": {"fn": "MerkleResistor.withdraw", "offset": [8746, 8757], "op": "PUSH1", "path": "5", "value": "0x2"}, "982": {"fn": "MerkleResistor.withdraw", "offset": [8746, 8770], "op": "PUSH1", "path": "5", "value": "0x20"}, "984": {"fn": "MerkleResistor.withdraw", "offset": [8746, 8770], "op": "MSTORE", "path": "5"}, "985": {"fn": "MerkleResistor.withdraw", "offset": [8746, 8770], "op": "PUSH1", "path": "5", "value": "0x40"}, "987": {"fn": "MerkleResistor.withdraw", "offset": [8746, 8770], "op": "DUP2", "path": "5"}, "988": {"fn": "MerkleResistor.withdraw", "offset": [8746, 8770], "op": "KECCAK256", "path": "5"}, "989": {"fn": "MerkleResistor.withdraw", "offset": [8969, 8989], "op": "PUSH1", "path": "5", "statement": 4, "value": "0x1"}, "991": {"fn": "MerkleResistor.withdraw", "offset": [8969, 8989], "op": "DUP5", "path": "5"}, "992": {"fn": "MerkleResistor.withdraw", "offset": [8969, 8989], "op": "ADD", "path": "5"}, "993": {"fn": "MerkleResistor.withdraw", "offset": [8969, 9010], "op": "DUP1", "path": "5"}, "994": {"fn": "MerkleResistor.withdraw", "offset": [8969, 9010], "op": "SLOAD", "path": "5"}, "995": {"fn": "MerkleResistor.withdraw", "offset": [8746, 8770], "op": "SWAP2", "path": "5"}, "996": {"fn": "MerkleResistor.withdraw", "offset": [8746, 8770], "op": "SWAP3", "path": "5"}, "997": {"fn": "MerkleResistor.withdraw", "offset": [8993, 9010], "op": "DUP5", "path": "5"}, "998": {"fn": "MerkleResistor.withdraw", "offset": [8993, 9010], "op": "SWAP3", "path": "5"}, "999": {"fn": "MerkleResistor.withdraw", "offset": [8969, 9010], "op": "PUSH2", "path": "5", "value": "0x3F1"}, "1002": {"fn": "MerkleResistor.withdraw", "offset": [8969, 9010], "op": "SWAP1", "path": "5"}, "1003": {"fn": "MerkleResistor.withdraw", "offset": [8993, 9010], "op": "DUP5", "path": "5"}, "1004": {"fn": "MerkleResistor.withdraw", "offset": [8993, 9010], "op": "SWAP1", "path": "5"}, "1005": {"fn": "MerkleResistor.withdraw", "offset": [8969, 9010], "op": "PUSH2", "path": "5", "value": "0xF9B"}, "1008": {"fn": "MerkleResistor.withdraw", "jump": "i", "offset": [8969, 9010], "op": "JUMP", "path": "5"}, "1009": {"fn": "MerkleResistor.withdraw", "offset": [8969, 9010], "op": "JUMPDEST", "path": "5"}, "1010": {"fn": "MerkleResistor.withdraw", "offset": [8969, 9010], "op": "SWAP1", "path": "5"}, "1011": {"fn": "MerkleResistor.withdraw", "offset": [8969, 9010], "op": "SWAP2", "path": "5"}, "1012": {"fn": "MerkleResistor.withdraw", "offset": [8969, 9010], "op": "SSTORE", "path": "5"}, "1013": {"op": "POP"}, "1014": {"op": "POP"}, "1015": {"fn": "MerkleResistor.withdraw", "offset": [9231, 9246], "op": "TIMESTAMP", "path": "5", "statement": 5}, "1016": {"fn": "MerkleResistor.withdraw", "offset": [9202, 9228], "op": "PUSH1", "path": "5", "value": "0x5"}, "1018": {"fn": "MerkleResistor.withdraw", "offset": [9202, 9228], "op": "DUP5", "path": "5"}, "1019": {"fn": "MerkleResistor.withdraw", "offset": [9202, 9228], "op": "ADD", "path": "5"}, "1020": {"fn": "MerkleResistor.withdraw", "offset": [9202, 9246], "op": "SSTORE", "path": "5"}, "1021": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9398], "op": "PUSH1", "path": "5", "statement": 6, "value": "0x6"}, "1023": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9398], "op": "DUP2", "path": "5"}, "1024": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9398], "op": "ADD", "path": "5"}, "1025": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9419], "op": "DUP1", "path": "5"}, "1026": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9419], "op": "SLOAD", "path": "5"}, "1027": {"fn": "MerkleResistor.withdraw", "offset": [9402, 9419], "op": "DUP4", "path": "5"}, "1028": {"fn": "MerkleResistor.withdraw", "offset": [9402, 9419], "op": "SWAP2", "path": "5"}, "1029": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9398], "op": "SWAP1", "path": "5"}, "1030": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9398], "op": "PUSH1", "path": "5", "value": "0x0"}, "1032": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9398], "op": "SWAP1", "path": "5"}, "1033": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9419], "op": "PUSH2", "path": "5", "value": "0x413"}, "1036": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9419], "op": "SWAP1", "path": "5"}, "1037": {"fn": "MerkleResistor.withdraw", "offset": [9402, 9419], "op": "DUP5", "path": "5"}, "1038": {"fn": "MerkleResistor.withdraw", "offset": [9402, 9419], "op": "SWAP1", "path": "5"}, "1039": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9419], "op": "PUSH2", "path": "5", "value": "0xF9B"}, "1042": {"fn": "MerkleResistor.withdraw", "jump": "i", "offset": [9381, 9419], "op": "JUMP", "path": "5"}, "1043": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9419], "op": "JUMPDEST", "path": "5"}, "1044": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9419], "op": "SWAP1", "path": "5"}, "1045": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9419], "op": "SWAP2", "path": "5"}, "1046": {"fn": "MerkleResistor.withdraw", "offset": [9381, 9419], "op": "SSTORE", "path": "5"}, "1047": {"op": "POP"}, "1048": {"op": "POP"}, "1049": {"fn": "MerkleResistor.withdraw", "offset": [10057, 10074], "op": "PUSH1", "path": "5", "statement": 7, "value": "0x5"}, "1051": {"fn": "MerkleResistor.withdraw", "offset": [10057, 10074], "op": "DUP2", "path": "5"}, "1052": {"fn": "MerkleResistor.withdraw", "offset": [10057, 10074], "op": "ADD", "path": "5"}, "1053": {"fn": "MerkleResistor.withdraw", "offset": [10057, 10074], "op": "SLOAD", "path": "5"}, "1054": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH1", "path": "5", "value": "0x40"}, "1056": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "MLOAD", "path": "5"}, "1057": {"op": "PUSH4", "value": "0xA9059CBB"}, "1062": {"op": "PUSH1", "value": "0xE0"}, "1064": {"op": "SHL"}, "1065": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP2", "path": "5"}, "1066": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "MSTORE", "path": "5"}, "1067": {"op": "PUSH1", "value": "0x1"}, "1069": {"op": "PUSH1", "value": "0x1"}, "1071": {"op": "PUSH1", "value": "0xA0"}, "1073": {"op": "SHL"}, "1074": {"op": "SUB"}, "1075": {"op": "DUP7"}, "1076": {"op": "DUP2"}, "1077": {"op": "AND"}, "1078": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH1", "path": "5", "value": "0x4"}, "1080": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP4", "path": "5"}, "1081": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "ADD", "path": "5"}, "1082": {"op": "MSTORE"}, "1083": {"op": "PUSH1", "value": "0x24"}, "1085": {"op": "DUP3"}, "1086": {"op": "ADD"}, "1087": {"op": "DUP6"}, "1088": {"op": "SWAP1"}, "1089": {"op": "MSTORE"}, "1090": {"fn": "MerkleResistor.withdraw", "offset": [10057, 10074], "op": "SWAP1", "path": "5"}, "1091": {"fn": "MerkleResistor.withdraw", "offset": [10057, 10074], "op": "SWAP2", "path": "5"}, "1092": {"fn": "MerkleResistor.withdraw", "offset": [10057, 10074], "op": "AND", "path": "5"}, "1093": {"fn": "MerkleResistor.withdraw", "offset": [10057, 10074], "op": "SWAP1", "path": "5"}, "1094": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10084], "op": "PUSH4", "path": "5", "value": "0xA9059CBB"}, "1099": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10084], "op": "SWAP1", "path": "5"}, "1100": {"op": "PUSH1", "value": "0x44"}, "1102": {"op": "ADD"}, "1103": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH1", "path": "5", "value": "0x20"}, "1105": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH1", "path": "5", "value": "0x40"}, "1107": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "MLOAD", "path": "5"}, "1108": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP1", "path": "5"}, "1109": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP4", "path": "5"}, "1110": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "SUB", "path": "5"}, "1111": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP2", "path": "5"}, "1112": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH1", "path": "5", "value": "0x0"}, "1114": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP8", "path": "5"}, "1115": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP1", "path": "5"}, "1116": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "EXTCODESIZE", "path": "5"}, "1117": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "ISZERO", "path": "5"}, "1118": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP1", "path": "5"}, "1119": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "ISZERO", "path": "5"}, "1120": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH2", "path": "5", "value": "0x468"}, "1123": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "JUMPI", "path": "5"}, "1124": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH1", "path": "5", "value": "0x0"}, "1126": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP1", "path": "5"}, "1127": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "REVERT", "path": "5"}, "1128": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "JUMPDEST", "path": "5"}, "1129": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "POP", "path": "5"}, "1130": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "GAS", "path": "5"}, "1131": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "CALL", "path": "5"}, "1132": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "ISZERO", "path": "5"}, "1133": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP1", "path": "5"}, "1134": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "ISZERO", "path": "5"}, "1135": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH2", "path": "5", "value": "0x47C"}, "1138": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "JUMPI", "path": "5"}, "1139": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "RETURNDATASIZE", "path": "5"}, "1140": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH1", "path": "5", "value": "0x0"}, "1142": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP1", "path": "5"}, "1143": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "RETURNDATACOPY", "path": "5"}, "1144": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "RETURNDATASIZE", "path": "5"}, "1145": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH1", "path": "5", "value": "0x0"}, "1147": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "REVERT", "path": "5"}, "1148": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "JUMPDEST", "path": "5"}, "1149": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "POP", "path": "5"}, "1150": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "POP", "path": "5"}, "1151": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "POP", "path": "5"}, "1152": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "POP", "path": "5"}, "1153": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH1", "path": "5", "value": "0x40"}, "1155": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "MLOAD", "path": "5"}, "1156": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "RETURNDATASIZE", "path": "5"}, "1157": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH1", "path": "5", "value": "0x1F"}, "1159": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "NOT", "path": "5"}, "1160": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH1", "path": "5", "value": "0x1F"}, "1162": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP3", "path": "5"}, "1163": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "ADD", "path": "5"}, "1164": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "AND", "path": "5"}, "1165": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP3", "path": "5"}, "1166": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "ADD", "path": "5"}, "1167": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP1", "path": "5"}, "1168": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH1", "path": "5", "value": "0x40"}, "1170": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "MSTORE", "path": "5"}, "1171": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "POP", "path": "5"}, "1172": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "DUP2", "path": "5"}, "1173": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "ADD", "path": "5"}, "1174": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "SWAP1", "path": "5"}, "1175": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH2", "path": "5", "value": "0x4A0"}, "1178": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "SWAP2", "path": "5"}, "1179": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "SWAP1", "path": "5"}, "1180": {"fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "PUSH2", "path": "5", "value": "0xFD1"}, "1183": {"fn": "MerkleResistor.withdraw", "jump": "i", "offset": [10050, 10116], "op": "JUMP", "path": "5"}, "1184": {"branch": 30, "fn": "MerkleResistor.withdraw", "offset": [10050, 10116], "op": "JUMPDEST", "path": "5"}, "1185": {"fn": "MerkleResistor.withdraw", "offset": [10042, 10142], "op": "PUSH2", "path": "5", "value": "0x4E4"}, "1188": {"branch": 30, "fn": "MerkleResistor.withdraw", "offset": [10042, 10142], "op": "JUMPI", "path": "5"}, "1189": {"fn": "MerkleResistor.withdraw", "offset": [10042, 10142], "op": "PUSH1", "path": "5", "value": "0x40"}, "1191": {"fn": "MerkleResistor.withdraw", "offset": [10042, 10142], "op": "MLOAD", "path": "5"}, "1192": {"op": "PUSH3", "value": "0x461BCD"}, "1196": {"op": "PUSH1", "value": "0xE5"}, "1198": {"op": "SHL"}, "1199": {"fn": "MerkleResistor.withdraw", "offset": [10042, 10142], "op": "DUP2", "path": "5"}, "1200": {"fn": "MerkleResistor.withdraw", "offset": [10042, 10142], "op": "MSTORE", "path": "5"}, "1201": {"op": "PUSH1", "value": "0x20"}, "1203": {"fn": "MerkleResistor.withdraw", "offset": [10042, 10142], "op": "PUSH1", "path": "5", "value": "0x4"}, "1205": {"fn": "MerkleResistor.withdraw", "offset": [10042, 10142], "op": "DUP3", "path": "5"}, "1206": {"fn": "MerkleResistor.withdraw", "offset": [10042, 10142], "op": "ADD", "path": "5"}, "1207": {"op": "MSTORE"}, "1208": {"op": "PUSH1", "value": "0x15"}, "1210": {"op": "PUSH1", "value": "0x24"}, "1212": {"op": "DUP3"}, "1213": {"op": "ADD"}, "1214": {"op": "MSTORE"}, "1215": {"op": "PUSH21", "value": "0x151BDAD95B881D1C985B9CD9995C8819985A5B1959"}, "1237": {"op": "PUSH1", "value": "0x5A"}, "1239": {"op": "SHL"}, "1240": {"op": "PUSH1", "value": "0x44"}, "1242": {"op": "DUP3"}, "1243": {"op": "ADD"}, "1244": {"op": "MSTORE"}, "1245": {"op": "PUSH1", "value": "0x64"}, "1247": {"op": "ADD"}, "1248": {"fn": "MerkleResistor.withdraw", "offset": [10042, 10142], "op": "PUSH2", "path": "5", "value": "0x318"}, "1251": {"op": "JUMP"}, "1252": {"fn": "MerkleResistor.withdraw", "offset": [10042, 10142], "op": "JUMPDEST", "path": "5"}, "1253": {"fn": "MerkleResistor.withdraw", "offset": [10230, 10241], "op": "DUP5", "path": "5", "statement": 8}, "1254": {"fn": "MerkleResistor.withdraw", "offset": [10176, 10187], "op": "DUP5", "path": "5"}, "1255": {"op": "PUSH1", "value": "0x1"}, "1257": {"op": "PUSH1", "value": "0x1"}, "1259": {"op": "PUSH1", "value": "0xA0"}, "1261": {"op": "SHL"}, "1262": {"op": "SUB"}, "1263": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "AND", "path": "5"}, "1264": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "PUSH32", "path": "5", "value": "0x5FFB4B63DEC15BA26308386F1D5CA61843B29BA365511062A887D95AA27532D3"}, "1297": {"fn": "MerkleResistor.withdraw", "offset": [10189, 10206], "op": "DUP5", "path": "5"}, "1298": {"fn": "MerkleResistor.withdraw", "offset": [10208, 10215], "op": "DUP7", "path": "5"}, "1299": {"fn": "MerkleResistor.withdraw", "offset": [10208, 10228], "op": "PUSH1", "path": "5", "value": "0x1"}, "1301": {"fn": "MerkleResistor.withdraw", "offset": [10208, 10228], "op": "ADD", "path": "5"}, "1302": {"fn": "MerkleResistor.withdraw", "offset": [10208, 10228], "op": "SLOAD", "path": "5"}, "1303": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "PUSH1", "path": "5", "value": "0x40"}, "1305": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "MLOAD", "path": "5"}, "1306": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "PUSH2", "path": "5", "value": "0x52D"}, "1309": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "SWAP3", "path": "5"}, "1310": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "SWAP2", "path": "5"}, "1311": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "SWAP1", "path": "5"}, "1312": {"op": "SWAP2"}, "1313": {"op": "DUP3"}, "1314": {"op": "MSTORE"}, "1315": {"op": "PUSH1", "value": "0x20"}, "1317": {"op": "DUP3"}, "1318": {"op": "ADD"}, "1319": {"op": "MSTORE"}, "1320": {"op": "PUSH1", "value": "0x40"}, "1322": {"op": "ADD"}, "1323": {"op": "SWAP1"}, "1324": {"op": "JUMP"}, "1325": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "JUMPDEST", "path": "5"}, "1326": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "PUSH1", "path": "5", "value": "0x40"}, "1328": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "MLOAD", "path": "5"}, "1329": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "DUP1", "path": "5"}, "1330": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "SWAP2", "path": "5"}, "1331": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "SUB", "path": "5"}, "1332": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "SWAP1", "path": "5"}, "1333": {"fn": "MerkleResistor.withdraw", "offset": [10157, 10242], "op": "LOG3", "path": "5"}, "1334": {"fn": "MerkleResistor.withdraw", "offset": [7727, 10249], "op": "POP", "path": "5"}, "1335": {"fn": "MerkleResistor.withdraw", "offset": [7727, 10249], "op": "POP", "path": "5"}, "1336": {"fn": "MerkleResistor.withdraw", "offset": [7727, 10249], "op": "POP", "path": "5"}, "1337": {"fn": "MerkleResistor.withdraw", "offset": [7663, 10249], "op": "POP", "path": "5"}, "1338": {"fn": "MerkleResistor.withdraw", "offset": [7663, 10249], "op": "POP", "path": "5"}, "1339": {"fn": "MerkleResistor.withdraw", "jump": "o", "offset": [7663, 10249], "op": "JUMP", "path": "5"}, "1340": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "JUMPDEST", "path": "5"}, "1341": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10452, 10456], "op": "PUSH1", "path": "5", "value": "0x0"}, "1343": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10458, 10462], "op": "DUP1", "path": "5"}, "1344": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10464, 10468], "op": "PUSH1", "path": "5", "value": "0x0"}, "1346": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10470, 10474], "op": "DUP1", "path": "5"}, "1347": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10622, 10630], "op": "PUSH1", "path": "5", "value": "0x0"}, "1349": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10622, 10630], "op": "SLOAD", "path": "5"}, "1350": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10608, 10619], "op": "DUP9", "path": "5"}, "1351": {"branch": 31, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [10608, 10630], "op": "GT", "path": "5"}, "1352": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10604, 10680], "op": "ISZERO", "path": "5"}, "1353": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10604, 10680], "op": "PUSH2", "path": "5", "value": "0x55D"}, "1356": {"branch": 31, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [10604, 10680], "op": "JUMPI", "path": "5"}, "1357": {"op": "POP"}, "1358": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10654, 10659], "op": "PUSH1", "path": "5", "statement": 9, "value": "0x0"}, "1360": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10654, 10659], "op": "SWAP3", "path": "5"}, "1361": {"op": "POP"}, "1362": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10654, 10659], "op": "DUP3", "path": "5"}, "1363": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10654, 10659], "op": "SWAP2", "path": "5"}, "1364": {"op": "POP"}, "1365": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10654, 10659], "op": "DUP2", "path": "5"}, "1366": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10654, 10659], "op": "SWAP1", "path": "5"}, "1367": {"op": "POP"}, "1368": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10654, 10659], "op": "DUP1", "path": "5"}, "1369": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10646, 10669], "op": "PUSH2", "path": "5", "value": "0x6D8"}, "1372": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10646, 10669], "op": "JUMP", "path": "5"}, "1373": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10604, 10680], "op": "JUMPDEST", "path": "5"}, "1374": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10807], "op": "PUSH1", "path": "5", "value": "0x0"}, "1376": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10810, 10834], "op": "DUP9", "path": "5"}, "1377": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10810, 10834], "op": "DUP2", "path": "5"}, "1378": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10810, 10834], "op": "MSTORE", "path": "5"}, "1379": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10810, 10821], "op": "PUSH1", "path": "5", "value": "0x2"}, "1381": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10810, 10834], "op": "PUSH1", "path": "5", "value": "0x20"}, "1383": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10810, 10834], "op": "DUP2", "path": "5"}, "1384": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10810, 10834], "op": "DUP2", "path": "5"}, "1385": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10810, 10834], "op": "MSTORE", "path": "5"}, "1386": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10810, 10834], "op": "PUSH1", "path": "5", "value": "0x40"}, "1388": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10810, 10834], "op": "SWAP3", "path": "5"}, "1389": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10810, 10834], "op": "DUP4", "path": "5"}, "1390": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10810, 10834], "op": "SWAP1", "path": "5"}, "1391": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10810, 10834], "op": "KECCAK256", "path": "5"}, "1392": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP4", "path": "5"}, "1393": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "MLOAD", "path": "5"}, "1394": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "PUSH1", "path": "5", "value": "0xE0"}, "1396": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP2", "path": "5"}, "1397": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "ADD", "path": "5"}, "1398": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP6", "path": "5"}, "1399": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "MSTORE", "path": "5"}, "1400": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP2", "path": "5"}, "1401": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SLOAD", "path": "5"}, "1402": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP2", "path": "5"}, "1403": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "MSTORE", "path": "5"}, "1404": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "PUSH1", "path": "5", "value": "0x1"}, "1406": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP3", "path": "5"}, "1407": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "ADD", "path": "5"}, "1408": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SLOAD", "path": "5"}, "1409": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SWAP3", "path": "5"}, "1410": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP2", "path": "5"}, "1411": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "ADD", "path": "5"}, "1412": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SWAP3", "path": "5"}, "1413": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SWAP1", "path": "5"}, "1414": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SWAP3", "path": "5"}, "1415": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "MSTORE", "path": "5"}, "1416": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SWAP2", "path": "5"}, "1417": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP3", "path": "5"}, "1418": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "ADD", "path": "5"}, "1419": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SLOAD", "path": "5"}, "1420": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SWAP3", "path": "5"}, "1421": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP2", "path": "5"}, "1422": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "ADD", "path": "5"}, "1423": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SWAP3", "path": "5"}, "1424": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SWAP1", "path": "5"}, "1425": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SWAP3", "path": "5"}, "1426": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "MSTORE", "path": "5"}, "1427": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "PUSH1", "path": "5", "value": "0x3"}, "1429": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP2", "path": "5"}, "1430": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "ADD", "path": "5"}, "1431": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SLOAD", "path": "5"}, "1432": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "PUSH1", "path": "5", "value": "0x60"}, "1434": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP4", "path": "5"}, "1435": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "ADD", "path": "5"}, "1436": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP2", "path": "5"}, "1437": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SWAP1", "path": "5"}, "1438": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "MSTORE", "path": "5"}, "1439": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "PUSH1", "path": "5", "value": "0x4"}, "1441": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP3", "path": "5"}, "1442": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "ADD", "path": "5"}, "1443": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SLOAD", "path": "5"}, "1444": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "PUSH1", "path": "5", "value": "0x80"}, "1446": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP5", "path": "5"}, "1447": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "ADD", "path": "5"}, "1448": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "MSTORE", "path": "5"}, "1449": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "PUSH1", "path": "5", "value": "0x5"}, "1451": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP3", "path": "5"}, "1452": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "ADD", "path": "5"}, "1453": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SLOAD", "path": "5"}, "1454": {"op": "PUSH1", "value": "0x1"}, "1456": {"op": "PUSH1", "value": "0x1"}, "1458": {"op": "PUSH1", "value": "0xA0"}, "1460": {"op": "SHL"}, "1461": {"op": "SUB"}, "1462": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "AND", "path": "5"}, "1463": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "PUSH1", "path": "5", "value": "0xA0"}, "1465": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP5", "path": "5"}, "1466": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "ADD", "path": "5"}, "1467": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "MSTORE", "path": "5"}, "1468": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "PUSH1", "path": "5", "value": "0x6"}, "1470": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SWAP1", "path": "5"}, "1471": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SWAP2", "path": "5"}, "1472": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "ADD", "path": "5"}, "1473": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "SLOAD", "path": "5"}, "1474": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "PUSH1", "path": "5", "value": "0xC0"}, "1476": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "DUP4", "path": "5"}, "1477": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "ADD", "path": "5"}, "1478": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10785, 10834], "op": "MSTORE", "path": "5"}, "1479": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10937, 10966], "op": "DUP9", "path": "5"}, "1480": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10937, 10966], "op": "GT", "path": "5"}, "1481": {"branch": 32, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [10937, 10966], "op": "DUP1", "path": "5"}, "1482": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10937, 10999], "op": "PUSH2", "path": "5", "value": "0x5D6"}, "1485": {"branch": 32, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [10937, 10999], "op": "JUMPI", "path": "5"}, "1486": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10937, 10999], "op": "POP", "path": "5"}, "1487": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10984, 10988], "op": "DUP1", "path": "5"}, "1488": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10984, 10999], "op": "PUSH1", "path": "5", "value": "0x40"}, "1490": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10984, 10999], "op": "ADD", "path": "5"}, "1491": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10984, 10999], "op": "MLOAD", "path": "5"}, "1492": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10970, 10981], "op": "DUP9", "path": "5"}, "1493": {"branch": 33, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [10970, 10999], "op": "LT", "path": "5"}, "1494": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10937, 10999], "op": "JUMPDEST", "path": "5"}, "1495": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10933, 11049], "op": "ISZERO", "path": "5"}, "1496": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10933, 11049], "op": "PUSH2", "path": "5", "value": "0x5EF"}, "1499": {"branch": 33, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [10933, 11049], "op": "JUMPI", "path": "5"}, "1500": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11023, 11028], "op": "PUSH1", "path": "5", "statement": 10, "value": "0x0"}, "1502": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11030, 11031], "op": "DUP1", "path": "5"}, "1503": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11033, 11034], "op": "PUSH1", "path": "5", "value": "0x0"}, "1505": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11036, 11037], "op": "DUP1", "path": "5"}, "1506": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11015, 11038], "op": "SWAP5", "path": "5"}, "1507": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11015, 11038], "op": "POP", "path": "5"}, "1508": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11015, 11038], "op": "SWAP5", "path": "5"}, "1509": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11015, 11038], "op": "POP", "path": "5"}, "1510": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11015, 11038], "op": "SWAP5", "path": "5"}, "1511": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11015, 11038], "op": "POP", "path": "5"}, "1512": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11015, 11038], "op": "SWAP5", "path": "5"}, "1513": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11015, 11038], "op": "POP", "path": "5"}, "1514": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11015, 11038], "op": "POP", "path": "5"}, "1515": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11015, 11038], "op": "PUSH2", "path": "5", "value": "0x6D8"}, "1518": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11015, 11038], "op": "JUMP", "path": "5"}, "1519": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10933, 11049], "op": "JUMPDEST", "path": "5"}, "1520": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11059, 11074], "op": "PUSH1", "path": "5", "value": "0x0"}, "1522": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11103, 11107], "op": "DUP2", "path": "5"}, "1523": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11103, 11118], "op": "PUSH1", "path": "5", "value": "0x60"}, "1525": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11103, 11118], "op": "ADD", "path": "5"}, "1526": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11103, 11118], "op": "MLOAD", "path": "5"}, "1527": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11088, 11099], "op": "DUP10", "path": "5"}, "1528": {"branch": 34, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [11088, 11118], "op": "EQ", "path": "5"}, "1529": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11084, 12388], "op": "ISZERO", "path": "5"}, "1530": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11084, 12388], "op": "PUSH2", "path": "5", "value": "0x604"}, "1533": {"branch": 34, "fn": "MerkleResistor.verifyVestingSchedule", "offset": [11084, 12388], "op": "JUMPI", "path": "5"}, "1534": {"op": "POP"}, "1535": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11304, 11320], "op": "DUP6", "path": "5", "statement": 11}, "1536": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11084, 12388], "op": "PUSH2", "path": "5", "value": "0x675"}, "1539": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11084, 12388], "op": "JUMP", "path": "5"}, "1540": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11084, 12388], "op": "JUMPDEST", "path": "5"}, "1541": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11995, 12012], "op": "PUSH1", "path": "5", "value": "0x0"}, "1543": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12086, 12090], "op": "DUP3", "path": "5"}, "1544": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12086, 12101], "op": "PUSH1", "path": "5", "value": "0x40"}, "1546": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12086, 12101], "op": "ADD", "path": "5"}, "1547": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12086, 12101], "op": "MLOAD", "path": "5"}, "1548": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12068, 12072], "op": "DUP4", "path": "5"}, "1549": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12068, 12083], "op": "PUSH1", "path": "5", "value": "0x60"}, "1551": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12068, 12083], "op": "ADD", "path": "5"}, "1552": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12068, 12083], "op": "MLOAD", "path": "5"}, "1553": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12068, 12101], "op": "PUSH2", "path": "5", "value": "0x61A"}, "1556": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12068, 12101], "op": "SWAP2", "path": "5"}, "1557": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12068, 12101], "op": "SWAP1", "path": "5"}, "1558": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12068, 12101], "op": "PUSH2", "path": "5", "value": "0xF9B"}, "1561": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12068, 12101], "op": "JUMP", "path": "5"}, "1562": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12068, 12101], "op": "JUMPDEST", "path": "5"}, "1563": {"offset": [2617, 2624], "op": "PUSH3", "path": "5", "value": "0xF4240"}, "1567": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12016, 12051], "op": "PUSH2", "path": "5", "value": "0x628"}, "1570": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12035, 12051], "op": "DUP12", "path": "5"}, "1571": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12016, 12032], "op": "DUP12", "path": "5"}, "1572": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12016, 12051], "op": "PUSH2", "path": "5", "value": "0xF9B"}, "1575": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12016, 12051], "op": "JUMP", "path": "5"}, "1576": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12016, 12051], "op": "JUMPDEST", "path": "5"}, "1577": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12015, 12064], "op": "PUSH2", "path": "5", "value": "0x632"}, "1580": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12015, 12064], "op": "SWAP2", "path": "5"}, "1581": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12015, 12064], "op": "SWAP1", "path": "5"}, "1582": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12015, 12064], "op": "PUSH2", "path": "5", "value": "0xFB2"}, "1585": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12015, 12064], "op": "JUMP", "path": "5"}, "1586": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12015, 12064], "op": "JUMPDEST", "path": "5"}, "1587": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12015, 12102], "op": "PUSH2", "path": "5", "value": "0x63C"}, "1590": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12015, 12102], "op": "SWAP2", "path": "5"}, "1591": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12015, 12102], "op": "SWAP1", "path": "5"}, "1592": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12015, 12102], "op": "PUSH2", "path": "5", "value": "0xFFA"}, "1595": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12015, 12102], "op": "JUMP", "path": "5"}, "1596": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12015, 12102], "op": "JUMPDEST", "path": "5"}, "1597": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11995, 12102], "op": "SWAP1", "path": "5"}, "1598": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11995, 12102], "op": "POP", "path": "5"}, "1599": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12361, 12377], "op": "DUP9", "path": "5", "statement": 12}, "1600": {"offset": [2617, 2624], "op": "PUSH3", "path": "5", "value": "0xF4240"}, "1604": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12329, 12333], "op": "DUP5", "path": "5"}, "1605": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12329, 12344], "op": "PUSH1", "path": "5", "value": "0x40"}, "1607": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12329, 12344], "op": "ADD", "path": "5"}, "1608": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12329, 12344], "op": "MLOAD", "path": "5"}, "1609": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12315, 12326], "op": "DUP13", "path": "5"}, "1610": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12315, 12344], "op": "PUSH2", "path": "5", "value": "0x653"}, "1613": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12315, 12344], "op": "SWAP2", "path": "5"}, "1614": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12315, 12344], "op": "SWAP1", "path": "5"}, "1615": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12315, 12344], "op": "PUSH2", "path": "5", "value": "0xF9B"}, "1618": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12315, 12344], "op": "JUMP", "path": "5"}, "1619": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12315, 12344], "op": "JUMPDEST", "path": "5"}, "1620": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12299, 12345], "op": "PUSH2", "path": "5", "value": "0x65D"}, "1623": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12299, 12345], "op": "SWAP1", "path": "5"}, "1624": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12299, 12311], "op": "DUP5", "path": "5"}, "1625": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12299, 12345], "op": "PUSH2", "path": "5", "value": "0xFB2"}, "1628": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12299, 12345], "op": "JUMP", "path": "5"}, "1629": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12299, 12345], "op": "JUMPDEST", "path": "5"}, "1630": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12299, 12357], "op": "PUSH2", "path": "5", "value": "0x667"}, "1633": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12299, 12357], "op": "SWAP2", "path": "5"}, "1634": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12299, 12357], "op": "SWAP1", "path": "5"}, "1635": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12299, 12357], "op": "PUSH2", "path": "5", "value": "0xFFA"}, "1638": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12299, 12357], "op": "JUMP", "path": "5"}, "1639": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12299, 12357], "op": "JUMPDEST", "path": "5"}, "1640": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12298, 12377], "op": "PUSH2", "path": "5", "value": "0x671"}, "1643": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12298, 12377], "op": "SWAP2", "path": "5"}, "1644": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12298, 12377], "op": "SWAP1", "path": "5"}, "1645": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12298, 12377], "op": "PUSH2", "path": "5", "value": "0x101C"}, "1648": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12298, 12377], "op": "JUMP", "path": "5"}, "1649": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12298, 12377], "op": "JUMPDEST", "path": "5"}, "1650": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12285, 12377], "op": "SWAP2", "path": "5"}, "1651": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12285, 12377], "op": "POP", "path": "5"}, "1652": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11337, 12388], "op": "POP", "path": "5"}, "1653": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [11084, 12388], "op": "JUMPDEST", "path": "5"}, "1654": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12849, 12868], "op": "PUSH1", "path": "5", "value": "0x0"}, "1656": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12919, 12936], "op": "PUSH2", "path": "5", "value": "0x682"}, "1659": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12919, 12930], "op": "DUP11", "path": "5"}, "1660": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12933, 12936], "op": "PUSH1", "path": "5", "value": "0x64"}, "1662": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12919, 12936], "op": "PUSH2", "path": "5", "value": "0xFB2"}, "1665": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12919, 12936], "op": "JUMP", "path": "5"}, "1666": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12919, 12936], "op": "JUMPDEST", "path": "5"}, "1667": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12898, 12913], "op": "PUSH1", "path": "5", "value": "0x80"}, "1669": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12898, 12913], "op": "DUP5", "path": "5"}, "1670": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12898, 12913], "op": "ADD", "path": "5"}, "1671": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12898, 12913], "op": "MLOAD", "path": "5"}, "1672": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12886, 12913], "op": "PUSH2", "path": "5", "value": "0x692"}, "1675": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12886, 12913], "op": "SWAP1", "path": "5"}, "1676": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12891, 12894], "op": "PUSH1", "path": "5", "value": "0x64"}, "1678": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12886, 12913], "op": "PUSH2", "path": "5", "value": "0xF9B"}, "1681": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12886, 12913], "op": "JUMP", "path": "5"}, "1682": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12886, 12913], "op": "JUMPDEST", "path": "5"}, "1683": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12872, 12914], "op": "PUSH2", "path": "5", "value": "0x69C"}, "1686": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12872, 12914], "op": "SWAP1", "path": "5"}, "1687": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12872, 12882], "op": "DUP5", "path": "5"}, "1688": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12872, 12914], "op": "PUSH2", "path": "5", "value": "0xFB2"}, "1691": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12872, 12914], "op": "JUMP", "path": "5"}, "1692": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12872, 12914], "op": "JUMPDEST", "path": "5"}, "1693": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12871, 12937], "op": "PUSH2", "path": "5", "value": "0x6A6"}, "1696": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12871, 12937], "op": "SWAP2", "path": "5"}, "1697": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12871, 12937], "op": "SWAP1", "path": "5"}, "1698": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12871, 12937], "op": "PUSH2", "path": "5", "value": "0xFFA"}, "1701": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [12871, 12937], "op": "JUMP", "path": "5"}, "1702": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12871, 12937], "op": "JUMPDEST", "path": "5"}, "1703": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12849, 12937], "op": "SWAP1", "path": "5"}, "1704": {"op": "POP"}, "1705": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13113, 13127], "op": "PUSH1", "path": "5", "value": "0x0"}, "1707": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13163, 13190], "op": "PUSH2", "path": "5", "value": "0x6B4"}, "1710": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [12849, 12937], "op": "DUP3", "path": "5"}, "1711": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13163, 13173], "op": "DUP5", "path": "5"}, "1712": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13163, 13190], "op": "PUSH2", "path": "5", "value": "0xFFA"}, "1715": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [13163, 13190], "op": "JUMP", "path": "5"}, "1716": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13163, 13190], "op": "JUMPDEST", "path": "5"}, "1717": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13130, 13159], "op": "PUSH2", "path": "5", "value": "0x6BE"}, "1720": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13148, 13159], "op": "DUP13", "path": "5"}, "1721": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13130, 13145], "op": "TIMESTAMP", "path": "5"}, "1722": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13130, 13159], "op": "PUSH2", "path": "5", "value": "0x101C"}, "1725": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [13130, 13159], "op": "JUMP", "path": "5"}, "1726": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13130, 13159], "op": "JUMPDEST", "path": "5"}, "1727": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13130, 13191], "op": "PUSH2", "path": "5", "value": "0x6C8"}, "1730": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13130, 13191], "op": "SWAP2", "path": "5"}, "1731": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13130, 13191], "op": "SWAP1", "path": "5"}, "1732": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13130, 13191], "op": "PUSH2", "path": "5", "value": "0xF9B"}, "1735": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "i", "offset": [13130, 13191], "op": "JUMP", "path": "5"}, "1736": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13130, 13191], "op": "JUMPDEST", "path": "5"}, "1737": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13210, 13214], "op": "PUSH1", "path": "5", "statement": 13, "value": "0x1"}, "1739": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13210, 13214], "op": "SWAP9", "path": "5"}, "1740": {"op": "POP"}, "1741": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13216, 13226], "op": "SWAP3", "path": "5"}, "1742": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13216, 13226], "op": "SWAP7", "path": "5"}, "1743": {"op": "POP"}, "1744": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13228, 13242], "op": "SWAP1", "path": "5"}, "1745": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13228, 13242], "op": "SWAP5", "path": "5"}, "1746": {"op": "POP"}, "1747": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13113, 13191], "op": "SWAP1", "path": "5"}, "1748": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [13113, 13191], "op": "SWAP3", "path": "5"}, "1749": {"op": "POP"}, "1750": {"op": "POP"}, "1751": {"op": "POP"}, "1752": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "JUMPDEST", "path": "5"}, "1753": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "SWAP5", "path": "5"}, "1754": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "POP", "path": "5"}, "1755": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "SWAP5", "path": "5"}, "1756": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "POP", "path": "5"}, "1757": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "SWAP5", "path": "5"}, "1758": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "POP", "path": "5"}, "1759": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "SWAP5", "path": "5"}, "1760": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "SWAP1", "path": "5"}, "1761": {"fn": "MerkleResistor.verifyVestingSchedule", "offset": [10318, 13261], "op": "POP", "path": "5"}, "1762": {"fn": "MerkleResistor.verifyVestingSchedule", "jump": "o", "offset": [10318, 13261], "op": "JUMP", "path": "5"}, "1763": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "JUMPDEST", "path": "5"}, "1764": {"fn": "MerkleResistor.addMerkleTree", "offset": [3195, 3198], "op": "PUSH1", "path": "5", "statement": 14, "value": "0x64"}, "1766": {"fn": "MerkleResistor.addMerkleTree", "offset": [3182, 3192], "op": "DUP4", "path": "5"}, "1767": {"branch": 35, "fn": "MerkleResistor.addMerkleTree", "offset": [3182, 3198], "op": "LT", "path": "5"}, "1768": {"fn": "MerkleResistor.addMerkleTree", "offset": [3174, 3220], "op": "PUSH2", "path": "5", "value": "0x727"}, "1771": {"branch": 35, "fn": "MerkleResistor.addMerkleTree", "offset": [3174, 3220], "op": "JUMPI", "path": "5"}, "1772": {"fn": "MerkleResistor.addMerkleTree", "offset": [3174, 3220], "op": "PUSH1", "path": "5", "value": "0x40"}, "1774": {"fn": "MerkleResistor.addMerkleTree", "offset": [3174, 3220], "op": "MLOAD", "path": "5"}, "1775": {"op": "PUSH3", "value": "0x461BCD"}, "1779": {"op": "PUSH1", "value": "0xE5"}, "1781": {"op": "SHL"}, "1782": {"fn": "MerkleResistor.addMerkleTree", "offset": [3174, 3220], "op": "DUP2", "path": "5"}, "1783": {"fn": "MerkleResistor.addMerkleTree", "offset": [3174, 3220], "op": "MSTORE", "path": "5"}, "1784": {"op": "PUSH1", "value": "0x20"}, "1786": {"fn": "MerkleResistor.addMerkleTree", "offset": [3174, 3220], "op": "PUSH1", "path": "5", "value": "0x4"}, "1788": {"fn": "MerkleResistor.addMerkleTree", "offset": [3174, 3220], "op": "DUP3", "path": "5"}, "1789": {"fn": "MerkleResistor.addMerkleTree", "offset": [3174, 3220], "op": "ADD", "path": "5"}, "1790": {"op": "MSTORE"}, "1791": {"op": "PUSH1", "value": "0x11"}, "1793": {"op": "PUSH1", "value": "0x24"}, "1795": {"op": "DUP3"}, "1796": {"op": "ADD"}, "1797": {"op": "MSTORE"}, "1798": {"op": "PUSH17", "value": "0x706374557046726F6E74203E3D2031303"}, "1816": {"op": "PUSH1", "value": "0x7C"}, "1818": {"op": "SHL"}, "1819": {"op": "PUSH1", "value": "0x44"}, "1821": {"op": "DUP3"}, "1822": {"op": "ADD"}, "1823": {"op": "MSTORE"}, "1824": {"op": "PUSH1", "value": "0x64"}, "1826": {"op": "ADD"}, "1827": {"fn": "MerkleResistor.addMerkleTree", "offset": [3174, 3220], "op": "PUSH2", "path": "5", "value": "0x318"}, "1830": {"op": "JUMP"}, "1831": {"fn": "MerkleResistor.addMerkleTree", "offset": [3174, 3220], "op": "JUMPDEST", "path": "5"}, "1832": {"fn": "MerkleResistor.addMerkleTree", "offset": [3251, 3261], "op": "DUP4", "path": "5", "statement": 15}, "1833": {"fn": "MerkleResistor.addMerkleTree", "offset": [3238, 3248], "op": "DUP6", "path": "5"}, "1834": {"branch": 36, "fn": "MerkleResistor.addMerkleTree", "offset": [3238, 3261], "op": "LT", "path": "5"}, "1835": {"fn": "MerkleResistor.addMerkleTree", "offset": [3230, 3305], "op": "PUSH2", "path": "5", "value": "0x786"}, "1838": {"branch": 36, "fn": "MerkleResistor.addMerkleTree", "offset": [3230, 3305], "op": "JUMPI", "path": "5"}, "1839": {"fn": "MerkleResistor.addMerkleTree", "offset": [3230, 3305], "op": "PUSH1", "path": "5", "value": "0x40"}, "1841": {"fn": "MerkleResistor.addMerkleTree", "offset": [3230, 3305], "op": "MLOAD", "path": "5"}, "1842": {"op": "PUSH3", "value": "0x461BCD"}, "1846": {"op": "PUSH1", "value": "0xE5"}, "1848": {"op": "SHL"}, "1849": {"fn": "MerkleResistor.addMerkleTree", "offset": [3230, 3305], "op": "DUP2", "path": "5"}, "1850": {"fn": "MerkleResistor.addMerkleTree", "offset": [3230, 3305], "op": "MSTORE", "path": "5"}, "1851": {"op": "PUSH1", "value": "0x20"}, "1853": {"fn": "MerkleResistor.addMerkleTree", "offset": [3230, 3305], "op": "PUSH1", "path": "5", "value": "0x4"}, "1855": {"fn": "MerkleResistor.addMerkleTree", "offset": [3230, 3305], "op": "DUP3", "path": "5"}, "1856": {"fn": "MerkleResistor.addMerkleTree", "offset": [3230, 3305], "op": "ADD", "path": "5"}, "1857": {"op": "MSTORE"}, "1858": {"op": "PUSH1", "value": "0x27"}, "1860": {"op": "PUSH1", "value": "0x24"}, "1862": {"op": "DUP3"}, "1863": {"op": "ADD"}, "1864": {"op": "MSTORE"}, "1865": {"op": "PUSH32", "value": "0x6D696E456E6454696D65206D757374206265206C657373207468616E206D6178"}, "1898": {"op": "PUSH1", "value": "0x44"}, "1900": {"op": "DUP3"}, "1901": {"op": "ADD"}, "1902": {"op": "MSTORE"}, "1903": {"op": "PUSH7", "value": "0x456E6454696D65"}, "1911": {"op": "PUSH1", "value": "0xC8"}, "1913": {"op": "SHL"}, "1914": {"op": "PUSH1", "value": "0x64"}, "1916": {"op": "DUP3"}, "1917": {"op": "ADD"}, "1918": {"op": "MSTORE"}, "1919": {"op": "PUSH1", "value": "0x84"}, "1921": {"op": "ADD"}, "1922": {"fn": "MerkleResistor.addMerkleTree", "offset": [3230, 3305], "op": "PUSH2", "path": "5", "value": "0x318"}, "1925": {"op": "JUMP"}, "1926": {"fn": "MerkleResistor.addMerkleTree", "offset": [3230, 3305], "op": "JUMPDEST", "path": "5"}, "1927": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "PUSH1", "path": "5", "statement": 16, "value": "0x40"}, "1929": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "MLOAD", "path": "5"}, "1930": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "DUP1", "path": "5"}, "1931": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "PUSH1", "path": "5", "value": "0xE0"}, "1933": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "ADD", "path": "5"}, "1934": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "PUSH1", "path": "5", "value": "0x40"}, "1936": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "MSTORE", "path": "5"}, "1937": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "DUP1", "path": "5"}, "1938": {"fn": "MerkleResistor.addMerkleTree", "offset": [3422, 3429], "op": "DUP9", "path": "5"}, "1939": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "DUP2", "path": "5"}, "1940": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "MSTORE", "path": "5"}, "1941": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "PUSH1", "path": "5", "value": "0x20"}, "1943": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "ADD", "path": "5"}, "1944": {"fn": "MerkleResistor.addMerkleTree", "offset": [3443, 3451], "op": "DUP8", "path": "5"}, "1945": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "DUP2", "path": "5"}, "1946": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "MSTORE", "path": "5"}, "1947": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "PUSH1", "path": "5", "value": "0x20"}, "1949": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "ADD", "path": "5"}, "1950": {"fn": "MerkleResistor.addMerkleTree", "offset": [3465, 3475], "op": "DUP7", "path": "5"}, "1951": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "DUP2", "path": "5"}, "1952": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "MSTORE", "path": "5"}, "1953": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "PUSH1", "path": "5", "value": "0x20"}, "1955": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "ADD", "path": "5"}, "1956": {"fn": "MerkleResistor.addMerkleTree", "offset": [3489, 3499], "op": "DUP6", "path": "5"}, "1957": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "DUP2", "path": "5"}, "1958": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "MSTORE", "path": "5"}, "1959": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "PUSH1", "path": "5", "value": "0x20"}, "1961": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "ADD", "path": "5"}, "1962": {"fn": "MerkleResistor.addMerkleTree", "offset": [3513, 3523], "op": "DUP5", "path": "5"}, "1963": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "DUP2", "path": "5"}, "1964": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "MSTORE", "path": "5"}, "1965": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "PUSH1", "path": "5", "value": "0x20"}, "1967": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "ADD", "path": "5"}, "1968": {"fn": "MerkleResistor.addMerkleTree", "offset": [3537, 3549], "op": "DUP4", "path": "5"}, "1969": {"op": "PUSH1", "value": "0x1"}, "1971": {"op": "PUSH1", "value": "0x1"}, "1973": {"op": "PUSH1", "value": "0xA0"}, "1975": {"op": "SHL"}, "1976": {"op": "SUB"}, "1977": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "AND", "path": "5"}, "1978": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "DUP2", "path": "5"}, "1979": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "MSTORE", "path": "5"}, "1980": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "PUSH1", "path": "5", "value": "0x20"}, "1982": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "ADD", "path": "5"}, "1983": {"fn": "MerkleResistor.addMerkleTree", "offset": [3563, 3564], "op": "PUSH1", "path": "5", "value": "0x0"}, "1985": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "DUP2", "path": "5"}, "1986": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "MSTORE", "path": "5"}, "1987": {"fn": "MerkleResistor.addMerkleTree", "offset": [3398, 3645], "op": "POP", "path": "5"}, "1988": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3383], "op": "PUSH1", "path": "5", "value": "0x2"}, "1990": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "PUSH1", "path": "5", "value": "0x0"}, "1992": {"fn": "MerkleResistor.addMerkleTree", "offset": [3386, 3394], "op": "DUP1", "path": "5"}, "1993": {"fn": "MerkleResistor.addMerkleTree", "offset": [3386, 3394], "op": "PUSH1", "path": "5", "value": "0x0"}, "1995": {"fn": "MerkleResistor.addMerkleTree", "offset": [3384, 3394], "op": "DUP2", "path": "5"}, "1996": {"fn": "MerkleResistor.addMerkleTree", "offset": [3384, 3394], "op": "SLOAD", "path": "5"}, "1997": {"fn": "MerkleResistor.addMerkleTree", "offset": [3384, 3394], "op": "PUSH2", "path": "5", "value": "0x7D5"}, "2000": {"fn": "MerkleResistor.addMerkleTree", "offset": [3384, 3394], "op": "SWAP1", "path": "5"}, "2001": {"fn": "MerkleResistor.addMerkleTree", "offset": [3384, 3394], "op": "PUSH2", "path": "5", "value": "0x1034"}, "2004": {"fn": "MerkleResistor.addMerkleTree", "jump": "i", "offset": [3384, 3394], "op": "JUMP", "path": "5"}, "2005": {"fn": "MerkleResistor.addMerkleTree", "offset": [3384, 3394], "op": "JUMPDEST", "path": "5"}, "2006": {"fn": "MerkleResistor.addMerkleTree", "offset": [3384, 3394], "op": "SWAP2", "path": "5"}, "2007": {"fn": "MerkleResistor.addMerkleTree", "offset": [3384, 3394], "op": "DUP3", "path": "5"}, "2008": {"fn": "MerkleResistor.addMerkleTree", "offset": [3384, 3394], "op": "SWAP1", "path": "5"}, "2009": {"fn": "MerkleResistor.addMerkleTree", "offset": [3384, 3394], "op": "SSTORE", "path": "5"}, "2010": {"op": "POP"}, "2011": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "DUP2", "path": "5"}, "2012": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "MSTORE", "path": "5"}, "2013": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "PUSH1", "path": "5", "value": "0x20"}, "2015": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "DUP1", "path": "5"}, "2016": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "DUP3", "path": "5"}, "2017": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "ADD", "path": "5"}, "2018": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "SWAP3", "path": "5"}, "2019": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "SWAP1", "path": "5"}, "2020": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "SWAP3", "path": "5"}, "2021": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "MSTORE", "path": "5"}, "2022": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "PUSH1", "path": "5", "value": "0x40"}, "2024": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "SWAP1", "path": "5"}, "2025": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "DUP2", "path": "5"}, "2026": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "ADD", "path": "5"}, "2027": {"op": "PUSH1", "value": "0x0"}, "2029": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "SWAP1", "path": "5"}, "2030": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "DUP2", "path": "5"}, "2031": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3395], "op": "KECCAK256", "path": "5"}, "2032": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "DUP5", "path": "5"}, "2033": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "MLOAD", "path": "5"}, "2034": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "DUP2", "path": "5"}, "2035": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SSTORE", "path": "5"}, "2036": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SWAP3", "path": "5"}, "2037": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "DUP5", "path": "5"}, "2038": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "ADD", "path": "5"}, "2039": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "MLOAD", "path": "5"}, "2040": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "PUSH1", "path": "5", "value": "0x1"}, "2042": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "DUP5", "path": "5"}, "2043": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "ADD", "path": "5"}, "2044": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SSTORE", "path": "5"}, "2045": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SWAP1", "path": "5"}, "2046": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "DUP4", "path": "5"}, "2047": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "ADD", "path": "5"}, "2048": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "MLOAD", "path": "5"}, "2049": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "PUSH1", "path": "5", "value": "0x2"}, "2051": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "DUP4", "path": "5"}, "2052": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "ADD", "path": "5"}, "2053": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SSTORE", "path": "5"}, "2054": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "PUSH1", "path": "5", "value": "0x60"}, "2056": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "DUP4", "path": "5"}, "2057": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "ADD", "path": "5"}, "2058": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "MLOAD", "path": "5"}, "2059": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "PUSH1", "path": "5", "value": "0x3"}, "2061": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "DUP4", "path": "5"}, "2062": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "ADD", "path": "5"}, "2063": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SSTORE", "path": "5"}, "2064": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "PUSH1", "path": "5", "value": "0x80"}, "2066": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "DUP4", "path": "5"}, "2067": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "ADD", "path": "5"}, "2068": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "MLOAD", "path": "5"}, "2069": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "PUSH1", "path": "5", "value": "0x4"}, "2071": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "DUP4", "path": "5"}, "2072": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "ADD", "path": "5"}, "2073": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SSTORE", "path": "5"}, "2074": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "PUSH1", "path": "5", "value": "0xA0"}, "2076": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "DUP4", "path": "5"}, "2077": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "ADD", "path": "5"}, "2078": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "MLOAD", "path": "5"}, "2079": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "PUSH1", "path": "5", "value": "0x5"}, "2081": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "DUP4", "path": "5"}, "2082": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "ADD", "path": "5"}, "2083": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "DUP1", "path": "5"}, "2084": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SLOAD", "path": "5"}, "2085": {"op": "PUSH1", "value": "0x1"}, "2087": {"op": "PUSH1", "value": "0x1"}, "2089": {"op": "PUSH1", "value": "0xA0"}, "2091": {"op": "SHL"}, "2092": {"op": "SUB"}, "2093": {"op": "NOT"}, "2094": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "AND", "path": "5"}, "2095": {"op": "PUSH1", "value": "0x1"}, "2097": {"op": "PUSH1", "value": "0x1"}, "2099": {"op": "PUSH1", "value": "0xA0"}, "2101": {"op": "SHL"}, "2102": {"op": "SUB"}, "2103": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SWAP1", "path": "5"}, "2104": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SWAP3", "path": "5"}, "2105": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "AND", "path": "5"}, "2106": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SWAP2", "path": "5"}, "2107": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SWAP1", "path": "5"}, "2108": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SWAP2", "path": "5"}, "2109": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "OR", "path": "5"}, "2110": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SWAP1", "path": "5"}, "2111": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SSTORE", "path": "5"}, "2112": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "PUSH1", "path": "5", "value": "0xC0"}, "2114": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SWAP1", "path": "5"}, "2115": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SWAP3", "path": "5"}, "2116": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "ADD", "path": "5"}, "2117": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "MLOAD", "path": "5"}, "2118": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "PUSH1", "path": "5", "value": "0x6"}, "2120": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SWAP1", "path": "5"}, "2121": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SWAP2", "path": "5"}, "2122": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "ADD", "path": "5"}, "2123": {"fn": "MerkleResistor.addMerkleTree", "offset": [3372, 3645], "op": "SSTORE", "path": "5"}, "2124": {"fn": "MerkleResistor.addMerkleTree", "offset": [3935, 3943], "op": "SLOAD", "path": "5", "statement": 17}, "2125": {"fn": "MerkleResistor.addMerkleTree", "offset": [3921, 3958], "op": "PUSH2", "path": "5", "value": "0x856"}, "2128": {"fn": "MerkleResistor.addMerkleTree", "offset": [3921, 3958], "op": "SWAP1", "path": "5"}, "2129": {"fn": "MerkleResistor.addMerkleTree", "offset": [3945, 3957], "op": "DUP3", "path": "5"}, "2130": {"fn": "MerkleResistor.addMerkleTree", "offset": [3921, 3934], "op": "PUSH2", "path": "5", "value": "0x8A7"}, "2133": {"fn": "MerkleResistor.addMerkleTree", "jump": "i", "offset": [3921, 3958], "op": "JUMP", "path": "5"}, "2134": {"fn": "MerkleResistor.addMerkleTree", "offset": [3921, 3958], "op": "JUMPDEST", "path": "5"}, "2135": {"fn": "MerkleResistor.addMerkleTree", "offset": [3989, 3997], "op": "PUSH1", "path": "5", "statement": 18, "value": "0x0"}, "2137": {"fn": "MerkleResistor.addMerkleTree", "offset": [3989, 3997], "op": "SLOAD", "path": "5"}, "2138": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "PUSH1", "path": "5", "value": "0x40"}, "2140": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "DUP1", "path": "5"}, "2141": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "MLOAD", "path": "5"}, "2142": {"op": "DUP10"}, "2143": {"op": "DUP2"}, "2144": {"op": "MSTORE"}, "2145": {"op": "PUSH1", "value": "0x20"}, "2147": {"op": "DUP2"}, "2148": {"op": "ADD"}, "2149": {"op": "DUP10"}, "2150": {"op": "SWAP1"}, "2151": {"op": "MSTORE"}, "2152": {"op": "PUSH1", "value": "0x1"}, "2154": {"op": "PUSH1", "value": "0x1"}, "2156": {"op": "PUSH1", "value": "0xA0"}, "2158": {"op": "SHL"}, "2159": {"op": "SUB"}, "2160": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "DUP6", "path": "5"}, "2161": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "AND", "path": "5"}, "2162": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "SWAP3", "path": "5"}, "2163": {"fn": "MerkleResistor.addMerkleTree", "offset": [3989, 3997], "op": "SWAP2", "path": "5"}, "2164": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "PUSH32", "path": "5", "value": "0x7247D7268297FD9FE23A535B70F414660BBCBBCD73AC0D9CE3C103A356A61F45"}, "2197": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "SWAP2", "path": "5"}, "2198": {"op": "ADD"}, "2199": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "PUSH1", "path": "5", "value": "0x40"}, "2201": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "MLOAD", "path": "5"}, "2202": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "DUP1", "path": "5"}, "2203": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "SWAP2", "path": "5"}, "2204": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "SUB", "path": "5"}, "2205": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "SWAP1", "path": "5"}, "2206": {"fn": "MerkleResistor.addMerkleTree", "offset": [3973, 4031], "op": "LOG3", "path": "5"}, "2207": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "POP", "path": "5"}, "2208": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "POP", "path": "5"}, "2209": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "POP", "path": "5"}, "2210": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "POP", "path": "5"}, "2211": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "POP", "path": "5"}, "2212": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "POP", "path": "5"}, "2213": {"fn": "MerkleResistor.addMerkleTree", "offset": [2963, 4038], "op": "POP", "path": "5"}, "2214": {"fn": "MerkleResistor.addMerkleTree", "jump": "o", "offset": [2963, 4038], "op": "JUMP", "path": "5"}, "2215": {"fn": "MerkleResistor.depositTokens", "offset": [4076, 5189], "op": "JUMPDEST", "path": "5"}, "2216": {"fn": "MerkleResistor.depositTokens", "offset": [4179, 4208], "op": "PUSH1", "path": "5", "value": "0x0"}, "2218": {"fn": "MerkleResistor.depositTokens", "offset": [4211, 4233], "op": "DUP3", "path": "5"}, "2219": {"fn": "MerkleResistor.depositTokens", "offset": [4211, 4233], "op": "DUP2", "path": "5"}, "2220": {"fn": "MerkleResistor.depositTokens", "offset": [4211, 4233], "op": "MSTORE", "path": "5"}, "2221": {"fn": "MerkleResistor.depositTokens", "offset": [4211, 4222], "op": "PUSH1", "path": "5", "value": "0x2"}, "2223": {"fn": "MerkleResistor.depositTokens", "offset": [4211, 4233], "op": "PUSH1", "path": "5", "value": "0x20"}, "2225": {"fn": "MerkleResistor.depositTokens", "offset": [4211, 4233], "op": "MSTORE", "path": "5"}, "2226": {"fn": "MerkleResistor.depositTokens", "offset": [4211, 4233], "op": "PUSH1", "path": "5", "value": "0x40"}, "2228": {"fn": "MerkleResistor.depositTokens", "offset": [4211, 4233], "op": "DUP2", "path": "5"}, "2229": {"fn": "MerkleResistor.depositTokens", "offset": [4211, 4233], "op": "KECCAK256", "path": "5"}, "2230": {"fn": "MerkleResistor.depositTokens", "offset": [4306, 4329], "op": "PUSH1", "path": "5", "statement": 19, "value": "0x6"}, "2232": {"fn": "MerkleResistor.depositTokens", "offset": [4306, 4329], "op": "DUP2", "path": "5"}, "2233": {"fn": "MerkleResistor.depositTokens", "offset": [4306, 4329], "op": "ADD", "path": "5"}, "2234": {"fn": "MerkleResistor.depositTokens", "offset": [4306, 4338], "op": "DUP1", "path": "5"}, "2235": {"fn": "MerkleResistor.depositTokens", "offset": [4306, 4338], "op": "SLOAD", "path": "5"}, "2236": {"fn": "MerkleResistor.depositTokens", "offset": [4211, 4233], "op": "SWAP2", "path": "5"}, "2237": {"fn": "MerkleResistor.depositTokens", "offset": [4211, 4233], "op": "SWAP3", "path": "5"}, "2238": {"fn": "MerkleResistor.depositTokens", "offset": [4333, 4338], "op": "DUP5", "path": "5"}, "2239": {"fn": "MerkleResistor.depositTokens", "offset": [4333, 4338], "op": "SWAP3", "path": "5"}, "2240": {"fn": "MerkleResistor.depositTokens", "offset": [4306, 4338], "op": "PUSH2", "path": "5", "value": "0x8CA"}, "2243": {"fn": "MerkleResistor.depositTokens", "offset": [4306, 4338], "op": "SWAP1", "path": "5"}, "2244": {"fn": "MerkleResistor.depositTokens", "offset": [4333, 4338], "op": "DUP5", "path": "5"}, "2245": {"fn": "MerkleResistor.depositTokens", "offset": [4333, 4338], "op": "SWAP1", "path": "5"}, "2246": {"fn": "MerkleResistor.depositTokens", "offset": [4306, 4338], "op": "PUSH2", "path": "5", "value": "0x101C"}, "2249": {"fn": "MerkleResistor.depositTokens", "jump": "i", "offset": [4306, 4338], "op": "JUMP", "path": "5"}, "2250": {"fn": "MerkleResistor.depositTokens", "offset": [4306, 4338], "op": "JUMPDEST", "path": "5"}, "2251": {"fn": "MerkleResistor.depositTokens", "offset": [4306, 4338], "op": "SWAP1", "path": "5"}, "2252": {"fn": "MerkleResistor.depositTokens", "offset": [4306, 4338], "op": "SWAP2", "path": "5"}, "2253": {"fn": "MerkleResistor.depositTokens", "offset": [4306, 4338], "op": "SSTORE", "path": "5"}, "2254": {"op": "POP"}, "2255": {"op": "POP"}, "2256": {"fn": "MerkleResistor.depositTokens", "offset": [5085, 5108], "op": "PUSH1", "path": "5", "statement": 20, "value": "0x5"}, "2258": {"fn": "MerkleResistor.depositTokens", "offset": [5085, 5108], "op": "DUP2", "path": "5"}, "2259": {"fn": "MerkleResistor.depositTokens", "offset": [5085, 5108], "op": "ADD", "path": "5"}, "2260": {"fn": "MerkleResistor.depositTokens", "offset": [5085, 5108], "op": "SLOAD", "path": "5"}, "2261": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH1", "path": "5", "value": "0x40"}, "2263": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "MLOAD", "path": "5"}, "2264": {"op": "PUSH4", "value": "0x23B872DD"}, "2269": {"op": "PUSH1", "value": "0xE0"}, "2271": {"op": "SHL"}, "2272": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP2", "path": "5"}, "2273": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "MSTORE", "path": "5"}, "2274": {"fn": "MerkleResistor.depositTokens", "offset": [5123, 5133], "op": "CALLER", "path": "5"}, "2275": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH1", "path": "5", "value": "0x4"}, "2277": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP3", "path": "5"}, "2278": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "ADD", "path": "5"}, "2279": {"op": "MSTORE"}, "2280": {"fn": "MerkleResistor.depositTokens", "offset": [5143, 5147], "op": "ADDRESS", "path": "5"}, "2281": {"op": "PUSH1", "value": "0x24"}, "2283": {"op": "DUP3"}, "2284": {"op": "ADD"}, "2285": {"op": "MSTORE"}, "2286": {"op": "PUSH1", "value": "0x44"}, "2288": {"op": "DUP2"}, "2289": {"op": "ADD"}, "2290": {"op": "DUP5"}, "2291": {"op": "SWAP1"}, "2292": {"op": "MSTORE"}, "2293": {"op": "PUSH1", "value": "0x1"}, "2295": {"op": "PUSH1", "value": "0x1"}, "2297": {"op": "PUSH1", "value": "0xA0"}, "2299": {"op": "SHL"}, "2300": {"op": "SUB"}, "2301": {"fn": "MerkleResistor.depositTokens", "offset": [5085, 5108], "op": "SWAP1", "path": "5"}, "2302": {"fn": "MerkleResistor.depositTokens", "offset": [5085, 5108], "op": "SWAP2", "path": "5"}, "2303": {"fn": "MerkleResistor.depositTokens", "offset": [5085, 5108], "op": "AND", "path": "5"}, "2304": {"fn": "MerkleResistor.depositTokens", "offset": [5085, 5108], "op": "SWAP1", "path": "5"}, "2305": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5122], "op": "PUSH4", "path": "5", "value": "0x23B872DD"}, "2310": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5122], "op": "SWAP1", "path": "5"}, "2311": {"op": "PUSH1", "value": "0x64"}, "2313": {"op": "ADD"}, "2314": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH1", "path": "5", "value": "0x20"}, "2316": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH1", "path": "5", "value": "0x40"}, "2318": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "MLOAD", "path": "5"}, "2319": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP1", "path": "5"}, "2320": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP4", "path": "5"}, "2321": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "SUB", "path": "5"}, "2322": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP2", "path": "5"}, "2323": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH1", "path": "5", "value": "0x0"}, "2325": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP8", "path": "5"}, "2326": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP1", "path": "5"}, "2327": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "EXTCODESIZE", "path": "5"}, "2328": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "ISZERO", "path": "5"}, "2329": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP1", "path": "5"}, "2330": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "ISZERO", "path": "5"}, "2331": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH2", "path": "5", "value": "0x923"}, "2334": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "JUMPI", "path": "5"}, "2335": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH1", "path": "5", "value": "0x0"}, "2337": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP1", "path": "5"}, "2338": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "REVERT", "path": "5"}, "2339": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "JUMPDEST", "path": "5"}, "2340": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "POP", "path": "5"}, "2341": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "GAS", "path": "5"}, "2342": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "CALL", "path": "5"}, "2343": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "ISZERO", "path": "5"}, "2344": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP1", "path": "5"}, "2345": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "ISZERO", "path": "5"}, "2346": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH2", "path": "5", "value": "0x937"}, "2349": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "JUMPI", "path": "5"}, "2350": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "RETURNDATASIZE", "path": "5"}, "2351": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH1", "path": "5", "value": "0x0"}, "2353": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP1", "path": "5"}, "2354": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "RETURNDATACOPY", "path": "5"}, "2355": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "RETURNDATASIZE", "path": "5"}, "2356": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH1", "path": "5", "value": "0x0"}, "2358": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "REVERT", "path": "5"}, "2359": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "JUMPDEST", "path": "5"}, "2360": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "POP", "path": "5"}, "2361": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "POP", "path": "5"}, "2362": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "POP", "path": "5"}, "2363": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "POP", "path": "5"}, "2364": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH1", "path": "5", "value": "0x40"}, "2366": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "MLOAD", "path": "5"}, "2367": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "RETURNDATASIZE", "path": "5"}, "2368": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH1", "path": "5", "value": "0x1F"}, "2370": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "NOT", "path": "5"}, "2371": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH1", "path": "5", "value": "0x1F"}, "2373": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP3", "path": "5"}, "2374": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "ADD", "path": "5"}, "2375": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "AND", "path": "5"}, "2376": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP3", "path": "5"}, "2377": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "ADD", "path": "5"}, "2378": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP1", "path": "5"}, "2379": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH1", "path": "5", "value": "0x40"}, "2381": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "MSTORE", "path": "5"}, "2382": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "POP", "path": "5"}, "2383": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "DUP2", "path": "5"}, "2384": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "ADD", "path": "5"}, "2385": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "SWAP1", "path": "5"}, "2386": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH2", "path": "5", "value": "0x95B"}, "2389": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "SWAP2", "path": "5"}, "2390": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "SWAP1", "path": "5"}, "2391": {"fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "PUSH2", "path": "5", "value": "0xFD1"}, "2394": {"fn": "MerkleResistor.depositTokens", "jump": "i", "offset": [5078, 5156], "op": "JUMP", "path": "5"}, "2395": {"branch": 37, "fn": "MerkleResistor.depositTokens", "offset": [5078, 5156], "op": "JUMPDEST", "path": "5"}, "2396": {"fn": "MerkleResistor.depositTokens", "offset": [5070, 5182], "op": "PUSH2", "path": "5", "value": "0x99F"}, "2399": {"branch": 37, "fn": "MerkleResistor.depositTokens", "offset": [5070, 5182], "op": "JUMPI", "path": "5"}, "2400": {"fn": "MerkleResistor.depositTokens", "offset": [5070, 5182], "op": "PUSH1", "path": "5", "value": "0x40"}, "2402": {"fn": "MerkleResistor.depositTokens", "offset": [5070, 5182], "op": "MLOAD", "path": "5"}, "2403": {"op": "PUSH3", "value": "0x461BCD"}, "2407": {"op": "PUSH1", "value": "0xE5"}, "2409": {"op": "SHL"}, "2410": {"fn": "MerkleResistor.depositTokens", "offset": [5070, 5182], "op": "DUP2", "path": "5"}, "2411": {"fn": "MerkleResistor.depositTokens", "offset": [5070, 5182], "op": "MSTORE", "path": "5"}, "2412": {"op": "PUSH1", "value": "0x20"}, "2414": {"fn": "MerkleResistor.depositTokens", "offset": [5070, 5182], "op": "PUSH1", "path": "5", "value": "0x4"}, "2416": {"fn": "MerkleResistor.depositTokens", "offset": [5070, 5182], "op": "DUP3", "path": "5"}, "2417": {"fn": "MerkleResistor.depositTokens", "offset": [5070, 5182], "op": "ADD", "path": "5"}, "2418": {"op": "MSTORE"}, "2419": {"op": "PUSH1", "value": "0x15"}, "2421": {"op": "PUSH1", "value": "0x24"}, "2423": {"op": "DUP3"}, "2424": {"op": "ADD"}, "2425": {"op": "MSTORE"}, "2426": {"op": "PUSH21", "value": "0x115490CC8C081D1C985B9CD9995C8819985A5B1959"}, "2448": {"op": "PUSH1", "value": "0x5A"}, "2450": {"op": "SHL"}, "2451": {"op": "PUSH1", "value": "0x44"}, "2453": {"op": "DUP3"}, "2454": {"op": "ADD"}, "2455": {"op": "MSTORE"}, "2456": {"op": "PUSH1", "value": "0x64"}, "2458": {"op": "ADD"}, "2459": {"fn": "MerkleResistor.depositTokens", "offset": [5070, 5182], "op": "PUSH2", "path": "5", "value": "0x318"}, "2462": {"op": "JUMP"}, "2463": {"fn": "MerkleResistor.depositTokens", "offset": [5070, 5182], "op": "JUMPDEST", "path": "5"}, "2464": {"fn": "MerkleResistor.depositTokens", "offset": [4134, 5189], "op": "POP", "path": "5"}, "2465": {"fn": "MerkleResistor.depositTokens", "offset": [4076, 5189], "op": "POP", "path": "5"}, "2466": {"fn": "MerkleResistor.depositTokens", "offset": [4076, 5189], "op": "POP", "path": "5"}, "2467": {"fn": "MerkleResistor.depositTokens", "jump": "o", "offset": [4076, 5189], "op": "JUMP", "path": "5"}, "2468": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "JUMPDEST", "path": "5"}, "2469": {"fn": "MerkleResistor.initialize", "offset": [5681, 5691], "op": "CALLER", "path": "5", "statement": 21}, "2470": {"op": "PUSH1", "value": "0x1"}, "2472": {"op": "PUSH1", "value": "0x1"}, "2474": {"op": "PUSH1", "value": "0xA0"}, "2476": {"op": "SHL"}, "2477": {"op": "SUB"}, "2478": {"fn": "MerkleResistor.initialize", "offset": [5681, 5706], "op": "DUP7", "path": "5"}, "2479": {"fn": "MerkleResistor.initialize", "offset": [5681, 5706], "op": "AND", "path": "5"}, "2480": {"branch": 38, "fn": "MerkleResistor.initialize", "offset": [5681, 5706], "op": "EQ", "path": "5"}, "2481": {"fn": "MerkleResistor.initialize", "offset": [5673, 5747], "op": "PUSH2", "path": "5", "value": "0xA08"}, "2484": {"branch": 38, "fn": "MerkleResistor.initialize", "offset": [5673, 5747], "op": "JUMPI", "path": "5"}, "2485": {"fn": "MerkleResistor.initialize", "offset": [5673, 5747], "op": "PUSH1", "path": "5", "value": "0x40"}, "2487": {"fn": "MerkleResistor.initialize", "offset": [5673, 5747], "op": "MLOAD", "path": "5"}, "2488": {"op": "PUSH3", "value": "0x461BCD"}, "2492": {"op": "PUSH1", "value": "0xE5"}, "2494": {"op": "SHL"}, "2495": {"fn": "MerkleResistor.initialize", "offset": [5673, 5747], "op": "DUP2", "path": "5"}, "2496": {"fn": "MerkleResistor.initialize", "offset": [5673, 5747], "op": "MSTORE", "path": "5"}, "2497": {"op": "PUSH1", "value": "0x20"}, "2499": {"fn": "MerkleResistor.initialize", "offset": [5673, 5747], "op": "PUSH1", "path": "5", "value": "0x4"}, "2501": {"fn": "MerkleResistor.initialize", "offset": [5673, 5747], "op": "DUP3", "path": "5"}, "2502": {"fn": "MerkleResistor.initialize", "offset": [5673, 5747], "op": "ADD", "path": "5"}, "2503": {"op": "MSTORE"}, "2504": {"op": "PUSH1", "value": "0x24"}, "2506": {"op": "DUP1"}, "2507": {"op": "DUP3"}, "2508": {"op": "ADD"}, "2509": {"op": "MSTORE"}, "2510": {"op": "PUSH32", "value": "0x43616E206F6E6C7920696E697469616C697A6520796F7572206F776E20747261"}, "2543": {"op": "PUSH1", "value": "0x44"}, "2545": {"op": "DUP3"}, "2546": {"op": "ADD"}, "2547": {"op": "MSTORE"}, "2548": {"op": "PUSH4", "value": "0x6E636865"}, "2553": {"op": "PUSH1", "value": "0xE0"}, "2555": {"op": "SHL"}, "2556": {"op": "PUSH1", "value": "0x64"}, "2558": {"op": "DUP3"}, "2559": {"op": "ADD"}, "2560": {"op": "MSTORE"}, "2561": {"op": "PUSH1", "value": "0x84"}, "2563": {"op": "ADD"}, "2564": {"fn": "MerkleResistor.initialize", "offset": [5673, 5747], "op": "PUSH2", "path": "5", "value": "0x318"}, "2567": {"op": "JUMP"}, "2568": {"fn": "MerkleResistor.initialize", "offset": [5673, 5747], "op": "JUMPDEST", "path": "5"}, "2569": {"op": "PUSH1", "value": "0x1"}, "2571": {"op": "PUSH1", "value": "0x1"}, "2573": {"op": "PUSH1", "value": "0xA0"}, "2575": {"op": "SHL"}, "2576": {"op": "SUB"}, "2577": {"fn": "MerkleResistor.initialize", "offset": [5802, 5826], "op": "DUP6", "path": "5", "statement": 22}, "2578": {"fn": "MerkleResistor.initialize", "offset": [5802, 5826], "op": "AND", "path": "5"}, "2579": {"fn": "MerkleResistor.initialize", "offset": [5802, 5826], "op": "PUSH1", "path": "5", "value": "0x0"}, "2581": {"fn": "MerkleResistor.initialize", "offset": [5802, 5826], "op": "SWAP1", "path": "5"}, "2582": {"fn": "MerkleResistor.initialize", "offset": [5802, 5826], "op": "DUP2", "path": "5"}, "2583": {"fn": "MerkleResistor.initialize", "offset": [5802, 5826], "op": "MSTORE", "path": "5"}, "2584": {"fn": "MerkleResistor.initialize", "offset": [5802, 5813], "op": "PUSH1", "path": "5", "value": "0x1"}, "2586": {"fn": "MerkleResistor.initialize", "offset": [5802, 5826], "op": "PUSH1", "path": "5", "value": "0x20"}, "2588": {"fn": "MerkleResistor.initialize", "offset": [5802, 5826], "op": "SWAP1", "path": "5"}, "2589": {"fn": "MerkleResistor.initialize", "offset": [5802, 5826], "op": "DUP2", "path": "5"}, "2590": {"fn": "MerkleResistor.initialize", "offset": [5802, 5826], "op": "MSTORE", "path": "5"}, "2591": {"fn": "MerkleResistor.initialize", "offset": [5802, 5826], "op": "PUSH1", "path": "5", "value": "0x40"}, "2593": {"fn": "MerkleResistor.initialize", "offset": [5802, 5826], "op": "DUP1", "path": "5"}, "2594": {"fn": "MerkleResistor.initialize", "offset": [5802, 5826], "op": "DUP4", "path": "5"}, "2595": {"fn": "MerkleResistor.initialize", "offset": [5802, 5826], "op": "KECCAK256", "path": "5"}, "2596": {"fn": "MerkleResistor.initialize", "offset": [5802, 5839], "op": "DUP10", "path": "5"}, "2597": {"fn": "MerkleResistor.initialize", "offset": [5802, 5839], "op": "DUP5", "path": "5"}, "2598": {"fn": "MerkleResistor.initialize", "offset": [5802, 5839], "op": "MSTORE", "path": "5"}, "2599": {"fn": "MerkleResistor.initialize", "offset": [5802, 5839], "op": "SWAP1", "path": "5"}, "2600": {"fn": "MerkleResistor.initialize", "offset": [5802, 5839], "op": "SWAP2", "path": "5"}, "2601": {"fn": "MerkleResistor.initialize", "offset": [5802, 5839], "op": "MSTORE", "path": "5"}, "2602": {"fn": "MerkleResistor.initialize", "offset": [5802, 5839], "op": "SWAP1", "path": "5"}, "2603": {"fn": "MerkleResistor.initialize", "offset": [5802, 5839], "op": "KECCAK256", "path": "5"}, "2604": {"fn": "MerkleResistor.initialize", "offset": [5802, 5839], "op": "SLOAD", "path": "5"}, "2605": {"fn": "MerkleResistor.initialize", "offset": [5802, 5839], "op": "PUSH1", "path": "5", "value": "0xFF"}, "2607": {"fn": "MerkleResistor.initialize", "offset": [5802, 5839], "op": "AND", "path": "5"}, "2608": {"branch": 39, "fn": "MerkleResistor.initialize", "offset": [5801, 5839], "op": "ISZERO", "path": "5"}, "2609": {"fn": "MerkleResistor.initialize", "offset": [5793, 5863], "op": "PUSH2", "path": "5", "value": "0xA72"}, "2612": {"branch": 39, "fn": "MerkleResistor.initialize", "offset": [5793, 5863], "op": "JUMPI", "path": "5"}, "2613": {"fn": "MerkleResistor.initialize", "offset": [5793, 5863], "op": "PUSH1", "path": "5", "value": "0x40"}, "2615": {"fn": "MerkleResistor.initialize", "offset": [5793, 5863], "op": "MLOAD", "path": "5"}, "2616": {"op": "PUSH3", "value": "0x461BCD"}, "2620": {"op": "PUSH1", "value": "0xE5"}, "2622": {"op": "SHL"}, "2623": {"fn": "MerkleResistor.initialize", "offset": [5793, 5863], "op": "DUP2", "path": "5"}, "2624": {"fn": "MerkleResistor.initialize", "offset": [5793, 5863], "op": "MSTORE", "path": "5"}, "2625": {"op": "PUSH1", "value": "0x20"}, "2627": {"fn": "MerkleResistor.initialize", "offset": [5793, 5863], "op": "PUSH1", "path": "5", "value": "0x4"}, "2629": {"fn": "MerkleResistor.initialize", "offset": [5793, 5863], "op": "DUP3", "path": "5"}, "2630": {"fn": "MerkleResistor.initialize", "offset": [5793, 5863], "op": "ADD", "path": "5"}, "2631": {"op": "MSTORE"}, "2632": {"op": "PUSH1", "value": "0x13"}, "2634": {"op": "PUSH1", "value": "0x24"}, "2636": {"op": "DUP3"}, "2637": {"op": "ADD"}, "2638": {"op": "MSTORE"}, "2639": {"op": "PUSH19", "value": "0x105B1C9958591E481A5B9A5D1A585B1A5E9959"}, "2659": {"op": "PUSH1", "value": "0x6A"}, "2661": {"op": "SHL"}, "2662": {"op": "PUSH1", "value": "0x44"}, "2664": {"op": "DUP3"}, "2665": {"op": "ADD"}, "2666": {"op": "MSTORE"}, "2667": {"op": "PUSH1", "value": "0x64"}, "2669": {"op": "ADD"}, "2670": {"fn": "MerkleResistor.initialize", "offset": [5793, 5863], "op": "PUSH2", "path": "5", "value": "0x318"}, "2673": {"op": "JUMP"}, "2674": {"fn": "MerkleResistor.initialize", "offset": [5793, 5863], "op": "JUMPDEST", "path": "5"}, "2675": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "PUSH1", "path": "5", "value": "0x40"}, "2677": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "DUP1", "path": "5"}, "2678": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "MLOAD", "path": "5"}, "2679": {"op": "PUSH1", "value": "0x1"}, "2681": {"op": "PUSH1", "value": "0x1"}, "2683": {"op": "PUSH1", "value": "0xA0"}, "2685": {"op": "SHL"}, "2686": {"op": "SUB"}, "2687": {"op": "DUP8"}, "2688": {"op": "AND"}, "2689": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "PUSH1", "path": "5", "value": "0x20"}, "2691": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "DUP3", "path": "5"}, "2692": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "ADD", "path": "5"}, "2693": {"op": "MSTORE"}, "2694": {"op": "SWAP1"}, "2695": {"op": "DUP2"}, "2696": {"op": "ADD"}, "2697": {"op": "DUP5"}, "2698": {"op": "SWAP1"}, "2699": {"op": "MSTORE"}, "2700": {"op": "PUSH1", "value": "0x60"}, "2702": {"op": "DUP2"}, "2703": {"op": "ADD"}, "2704": {"op": "DUP4"}, "2705": {"op": "SWAP1"}, "2706": {"op": "MSTORE"}, "2707": {"fn": "MerkleResistor.initialize", "offset": [5936, 5948], "op": "PUSH1", "path": "5", "value": "0x0"}, "2709": {"fn": "MerkleResistor.initialize", "offset": [5936, 5948], "op": "SWAP1", "path": "5"}, "2710": {"op": "PUSH1", "value": "0x80"}, "2712": {"op": "ADD"}, "2713": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "PUSH1", "path": "5", "value": "0x40"}, "2715": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "DUP1", "path": "5"}, "2716": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "MLOAD", "path": "5"}, "2717": {"op": "PUSH1", "value": "0x1F"}, "2719": {"op": "NOT"}, "2720": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "DUP2", "path": "5"}, "2721": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "DUP5", "path": "5"}, "2722": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "SUB", "path": "5"}, "2723": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "ADD", "path": "5"}, "2724": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "DUP2", "path": "5"}, "2725": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "MSTORE", "path": "5"}, "2726": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "DUP3", "path": "5"}, "2727": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "DUP3", "path": "5"}, "2728": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "MSTORE", "path": "5"}, "2729": {"fn": "MerkleResistor.initialize", "offset": [5951, 6021], "op": "DUP1", "path": "5"}, "2730": {"fn": "MerkleResistor.initialize", "offset": [5951, 6021], "op": "MLOAD", "path": "5"}, "2731": {"fn": "MerkleResistor.initialize", "offset": [5961, 6020], "op": "PUSH1", "path": "5", "value": "0x20"}, "2733": {"fn": "MerkleResistor.initialize", "offset": [5951, 6021], "op": "SWAP2", "path": "5"}, "2734": {"fn": "MerkleResistor.initialize", "offset": [5951, 6021], "op": "DUP3", "path": "5"}, "2735": {"fn": "MerkleResistor.initialize", "offset": [5951, 6021], "op": "ADD", "path": "5"}, "2736": {"fn": "MerkleResistor.initialize", "offset": [5951, 6021], "op": "KECCAK256", "path": "5"}, "2737": {"fn": "MerkleResistor.initialize", "offset": [6072, 6094], "op": "PUSH1", "path": "5", "value": "0x0"}, "2739": {"fn": "MerkleResistor.initialize", "offset": [6097, 6121], "op": "DUP12", "path": "5"}, "2740": {"fn": "MerkleResistor.initialize", "offset": [6097, 6121], "op": "DUP2", "path": "5"}, "2741": {"fn": "MerkleResistor.initialize", "offset": [6097, 6121], "op": "MSTORE", "path": "5"}, "2742": {"fn": "MerkleResistor.initialize", "offset": [6097, 6108], "op": "PUSH1", "path": "5", "value": "0x2"}, "2744": {"fn": "MerkleResistor.initialize", "offset": [6097, 6121], "op": "DUP1", "path": "5"}, "2745": {"fn": "MerkleResistor.initialize", "offset": [6097, 6121], "op": "DUP5", "path": "5"}, "2746": {"fn": "MerkleResistor.initialize", "offset": [6097, 6121], "op": "MSTORE", "path": "5"}, "2747": {"fn": "MerkleResistor.initialize", "offset": [6097, 6121], "op": "SWAP1", "path": "5"}, "2748": {"fn": "MerkleResistor.initialize", "offset": [6097, 6121], "op": "DUP5", "path": "5"}, "2749": {"fn": "MerkleResistor.initialize", "offset": [6097, 6121], "op": "SWAP1", "path": "5"}, "2750": {"fn": "MerkleResistor.initialize", "offset": [6097, 6121], "op": "KECCAK256", "path": "5"}, "2751": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "PUSH1", "path": "5", "value": "0xE0"}, "2753": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP7", "path": "5"}, "2754": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "ADD", "path": "5"}, "2755": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP6", "path": "5"}, "2756": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "MSTORE", "path": "5"}, "2757": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP1", "path": "5"}, "2758": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SLOAD", "path": "5"}, "2759": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP1", "path": "5"}, "2760": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP8", "path": "5"}, "2761": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "MSTORE", "path": "5"}, "2762": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "PUSH1", "path": "5", "value": "0x1"}, "2764": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP3", "path": "5"}, "2765": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "ADD", "path": "5"}, "2766": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SLOAD", "path": "5"}, "2767": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SWAP5", "path": "5"}, "2768": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP8", "path": "5"}, "2769": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "ADD", "path": "5"}, "2770": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SWAP5", "path": "5"}, "2771": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SWAP1", "path": "5"}, "2772": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SWAP5", "path": "5"}, "2773": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "MSTORE", "path": "5"}, "2774": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SWAP1", "path": "5"}, "2775": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP2", "path": "5"}, "2776": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "ADD", "path": "5"}, "2777": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SLOAD", "path": "5"}, "2778": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP6", "path": "5"}, "2779": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP6", "path": "5"}, "2780": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "ADD", "path": "5"}, "2781": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "MSTORE", "path": "5"}, "2782": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "PUSH1", "path": "5", "value": "0x3"}, "2784": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP2", "path": "5"}, "2785": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "ADD", "path": "5"}, "2786": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SLOAD", "path": "5"}, "2787": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "PUSH1", "path": "5", "value": "0x60"}, "2789": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP7", "path": "5"}, "2790": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "ADD", "path": "5"}, "2791": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "MSTORE", "path": "5"}, "2792": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "PUSH1", "path": "5", "value": "0x4"}, "2794": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP1", "path": "5"}, "2795": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP3", "path": "5"}, "2796": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "ADD", "path": "5"}, "2797": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SLOAD", "path": "5"}, "2798": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "PUSH1", "path": "5", "value": "0x80"}, "2800": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP8", "path": "5"}, "2801": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "ADD", "path": "5"}, "2802": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "MSTORE", "path": "5"}, "2803": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "PUSH1", "path": "5", "value": "0x5"}, "2805": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP3", "path": "5"}, "2806": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "ADD", "path": "5"}, "2807": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SLOAD", "path": "5"}, "2808": {"op": "PUSH1", "value": "0x1"}, "2810": {"op": "PUSH1", "value": "0x1"}, "2812": {"op": "PUSH1", "value": "0xA0"}, "2814": {"op": "SHL"}, "2815": {"op": "SUB"}, "2816": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "AND", "path": "5"}, "2817": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "PUSH1", "path": "5", "value": "0xA0"}, "2819": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP8", "path": "5"}, "2820": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "ADD", "path": "5"}, "2821": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "MSTORE", "path": "5"}, "2822": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "PUSH1", "path": "5", "value": "0x6"}, "2824": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SWAP1", "path": "5"}, "2825": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SWAP2", "path": "5"}, "2826": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "ADD", "path": "5"}, "2827": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SLOAD", "path": "5"}, "2828": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "PUSH1", "path": "5", "value": "0xC0"}, "2830": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "DUP7", "path": "5"}, "2831": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "ADD", "path": "5"}, "2832": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "MSTORE", "path": "5"}, "2833": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "SWAP3", "path": "5", "statement": 23}, "2834": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "MLOAD", "path": "5"}, "2835": {"op": "PUSH4", "value": "0x2769CD1F"}, "2840": {"op": "PUSH1", "value": "0xE2"}, "2842": {"op": "SHL"}, "2843": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DUP2", "path": "5"}, "2844": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "MSTORE", "path": "5"}, "2845": {"fn": "MerkleResistor.initialize", "offset": [5951, 6021], "op": "SWAP1", "path": "5"}, "2846": {"fn": "MerkleResistor.initialize", "offset": [5951, 6021], "op": "SWAP5", "path": "5"}, "2847": {"op": "POP"}, "2848": {"fn": "MerkleResistor.initialize", "offset": [6217, 6244], "op": "PUSH20", "path": "5", "value": "0x0"}, "2869": {"fn": "MerkleResistor.initialize", "offset": [6217, 6244], "op": "SWAP3", "path": "5"}, "2870": {"fn": "MerkleResistor.initialize", "offset": [6217, 6244], "op": "PUSH4", "path": "5", "value": "0x9DA7347C"}, "2875": {"fn": "MerkleResistor.initialize", "offset": [6217, 6244], "op": "SWAP3", "path": "5"}, "2876": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH2", "path": "5", "value": "0xB4B"}, "2879": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "SWAP3", "path": "5"}, "2880": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SWAP1", "path": "5"}, "2881": {"fn": "MerkleResistor.initialize", "offset": [6072, 6121], "op": "SWAP2", "path": "5"}, "2882": {"fn": "MerkleResistor.initialize", "offset": [5951, 6021], "op": "DUP8", "path": "5"}, "2883": {"fn": "MerkleResistor.initialize", "offset": [5951, 6021], "op": "SWAP2", "path": "5"}, "2884": {"fn": "MerkleResistor.initialize", "offset": [6251, 6256], "op": "DUP10", "path": "5"}, "2885": {"fn": "MerkleResistor.initialize", "offset": [6251, 6256], "op": "SWAP2", "path": "5"}, "2886": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "ADD", "path": "5"}, "2887": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH2", "path": "5", "value": "0x104F"}, "2890": {"fn": "MerkleResistor.initialize", "jump": "i", "offset": [6217, 6257], "op": "JUMP", "path": "5"}, "2891": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "JUMPDEST", "path": "5"}, "2892": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH1", "path": "5", "value": "0x20"}, "2894": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH1", "path": "5", "value": "0x40"}, "2896": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "MLOAD", "path": "5"}, "2897": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DUP1", "path": "5"}, "2898": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DUP4", "path": "5"}, "2899": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "SUB", "path": "5"}, "2900": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DUP2", "path": "5"}, "2901": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DUP7", "path": "5"}, "2902": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DUP1", "path": "5"}, "2903": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "EXTCODESIZE", "path": "5"}, "2904": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "ISZERO", "path": "5"}, "2905": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DUP1", "path": "5"}, "2906": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "ISZERO", "path": "5"}, "2907": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH2", "path": "5", "value": "0xB63"}, "2910": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "JUMPI", "path": "5"}, "2911": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH1", "path": "5", "value": "0x0"}, "2913": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DUP1", "path": "5"}, "2914": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "REVERT", "path": "5"}, "2915": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "JUMPDEST", "path": "5"}, "2916": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "POP", "path": "5"}, "2917": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "GAS", "path": "5"}, "2918": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DELEGATECALL", "path": "5"}, "2919": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "ISZERO", "path": "5"}, "2920": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DUP1", "path": "5"}, "2921": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "ISZERO", "path": "5"}, "2922": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH2", "path": "5", "value": "0xB77"}, "2925": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "JUMPI", "path": "5"}, "2926": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "RETURNDATASIZE", "path": "5"}, "2927": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH1", "path": "5", "value": "0x0"}, "2929": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DUP1", "path": "5"}, "2930": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "RETURNDATACOPY", "path": "5"}, "2931": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "RETURNDATASIZE", "path": "5"}, "2932": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH1", "path": "5", "value": "0x0"}, "2934": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "REVERT", "path": "5"}, "2935": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "JUMPDEST", "path": "5"}, "2936": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "POP", "path": "5"}, "2937": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "POP", "path": "5"}, "2938": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "POP", "path": "5"}, "2939": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "POP", "path": "5"}, "2940": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH1", "path": "5", "value": "0x40"}, "2942": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "MLOAD", "path": "5"}, "2943": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "RETURNDATASIZE", "path": "5"}, "2944": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH1", "path": "5", "value": "0x1F"}, "2946": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "NOT", "path": "5"}, "2947": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH1", "path": "5", "value": "0x1F"}, "2949": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DUP3", "path": "5"}, "2950": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "ADD", "path": "5"}, "2951": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "AND", "path": "5"}, "2952": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DUP3", "path": "5"}, "2953": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "ADD", "path": "5"}, "2954": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DUP1", "path": "5"}, "2955": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH1", "path": "5", "value": "0x40"}, "2957": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "MSTORE", "path": "5"}, "2958": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "POP", "path": "5"}, "2959": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "DUP2", "path": "5"}, "2960": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "ADD", "path": "5"}, "2961": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "SWAP1", "path": "5"}, "2962": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH2", "path": "5", "value": "0xB9B"}, "2965": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "SWAP2", "path": "5"}, "2966": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "SWAP1", "path": "5"}, "2967": {"fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "PUSH2", "path": "5", "value": "0xFD1"}, "2970": {"fn": "MerkleResistor.initialize", "jump": "i", "offset": [6217, 6257], "op": "JUMP", "path": "5"}, "2971": {"branch": 40, "fn": "MerkleResistor.initialize", "offset": [6217, 6257], "op": "JUMPDEST", "path": "5"}, "2972": {"fn": "MerkleResistor.initialize", "offset": [6209, 6294], "op": "PUSH2", "path": "5", "value": "0xBE7"}, "2975": {"branch": 40, "fn": "MerkleResistor.initialize", "offset": [6209, 6294], "op": "JUMPI", "path": "5"}, "2976": {"fn": "MerkleResistor.initialize", "offset": [6209, 6294], "op": "PUSH1", "path": "5", "value": "0x40"}, "2978": {"fn": "MerkleResistor.initialize", "offset": [6209, 6294], "op": "MLOAD", "path": "5"}, "2979": {"op": "PUSH3", "value": "0x461BCD"}, "2983": {"op": "PUSH1", "value": "0xE5"}, "2985": {"op": "SHL"}, "2986": {"fn": "MerkleResistor.initialize", "offset": [6209, 6294], "op": "DUP2", "path": "5"}, "2987": {"fn": "MerkleResistor.initialize", "offset": [6209, 6294], "op": "MSTORE", "path": "5"}, "2988": {"op": "PUSH1", "value": "0x20"}, "2990": {"fn": "MerkleResistor.initialize", "offset": [6209, 6294], "op": "PUSH1", "path": "5", "value": "0x4"}, "2992": {"fn": "MerkleResistor.initialize", "offset": [6209, 6294], "op": "DUP3", "path": "5"}, "2993": {"fn": "MerkleResistor.initialize", "offset": [6209, 6294], "op": "ADD", "path": "5"}, "2994": {"op": "DUP2"}, "2995": {"op": "SWAP1"}, "2996": {"op": "MSTORE"}, "2997": {"op": "PUSH1", "value": "0x24"}, "2999": {"op": "DUP3"}, "3000": {"op": "ADD"}, "3001": {"op": "MSTORE"}, "3002": {"op": "PUSH32", "value": "0x5468652070726F6F6620636F756C64206E6F742062652076657269666965642E"}, "3035": {"op": "PUSH1", "value": "0x44"}, "3037": {"op": "DUP3"}, "3038": {"op": "ADD"}, "3039": {"op": "MSTORE"}, "3040": {"op": "PUSH1", "value": "0x64"}, "3042": {"op": "ADD"}, "3043": {"fn": "MerkleResistor.initialize", "offset": [6209, 6294], "op": "PUSH2", "path": "5", "value": "0x318"}, "3046": {"op": "JUMP"}, "3047": {"fn": "MerkleResistor.initialize", "offset": [6209, 6294], "op": "JUMPDEST", "path": "5"}, "3048": {"op": "PUSH1", "value": "0x1"}, "3050": {"op": "PUSH1", "value": "0x1"}, "3052": {"op": "PUSH1", "value": "0xA0"}, "3054": {"op": "SHL"}, "3055": {"op": "SUB"}, "3056": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "DUP8", "path": "5", "statement": 24}, "3057": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "AND", "path": "5"}, "3058": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "PUSH1", "path": "5", "value": "0x0"}, "3060": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "SWAP1", "path": "5"}, "3061": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "DUP2", "path": "5"}, "3062": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "MSTORE", "path": "5"}, "3063": {"fn": "MerkleResistor.initialize", "offset": [6432, 6436], "op": "PUSH1", "path": "5", "value": "0x1"}, "3065": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "PUSH1", "path": "5", "value": "0x20"}, "3067": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "DUP2", "path": "5"}, "3068": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "DUP2", "path": "5"}, "3069": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "MSTORE", "path": "5"}, "3070": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "PUSH1", "path": "5", "value": "0x40"}, "3072": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "DUP1", "path": "5"}, "3073": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "DUP5", "path": "5"}, "3074": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "KECCAK256", "path": "5"}, "3075": {"fn": "MerkleResistor.initialize", "offset": [6392, 6429], "op": "DUP13", "path": "5"}, "3076": {"fn": "MerkleResistor.initialize", "offset": [6392, 6429], "op": "DUP6", "path": "5"}, "3077": {"fn": "MerkleResistor.initialize", "offset": [6392, 6429], "op": "MSTORE", "path": "5"}, "3078": {"fn": "MerkleResistor.initialize", "offset": [6392, 6429], "op": "SWAP1", "path": "5"}, "3079": {"fn": "MerkleResistor.initialize", "offset": [6392, 6429], "op": "SWAP2", "path": "5"}, "3080": {"fn": "MerkleResistor.initialize", "offset": [6392, 6429], "op": "MSTORE", "path": "5"}, "3081": {"fn": "MerkleResistor.initialize", "offset": [6392, 6429], "op": "DUP3", "path": "5"}, "3082": {"fn": "MerkleResistor.initialize", "offset": [6392, 6429], "op": "KECCAK256", "path": "5"}, "3083": {"fn": "MerkleResistor.initialize", "offset": [6392, 6436], "op": "DUP1", "path": "5"}, "3084": {"fn": "MerkleResistor.initialize", "offset": [6392, 6436], "op": "SLOAD", "path": "5"}, "3085": {"op": "PUSH1", "value": "0xFF"}, "3087": {"op": "NOT"}, "3088": {"fn": "MerkleResistor.initialize", "offset": [6392, 6436], "op": "AND", "path": "5"}, "3089": {"fn": "MerkleResistor.initialize", "offset": [6392, 6436], "op": "SWAP1", "path": "5"}, "3090": {"fn": "MerkleResistor.initialize", "offset": [6392, 6436], "op": "SWAP2", "path": "5"}, "3091": {"fn": "MerkleResistor.initialize", "offset": [6392, 6436], "op": "OR", "path": "5"}, "3092": {"fn": "MerkleResistor.initialize", "offset": [6392, 6436], "op": "SWAP1", "path": "5"}, "3093": {"fn": "MerkleResistor.initialize", "offset": [6392, 6436], "op": "SSTORE", "path": "5"}, "3094": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "DUP1", "path": "5"}, "3095": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "DUP1", "path": "5"}, "3096": {"fn": "MerkleResistor.initialize", "offset": [6392, 6416], "op": "DUP1", "path": "5"}, "3097": {"fn": "MerkleResistor.initialize", "offset": [6516, 6599], "op": "PUSH2", "path": "5", "value": "0xC24"}, "3100": {"fn": "MerkleResistor.initialize", "offset": [6417, 6428], "op": "DUP13", "path": "5"}, "3101": {"fn": "MerkleResistor.initialize", "offset": [6551, 6562], "op": "DUP12", "path": "5"}, "3102": {"fn": "MerkleResistor.initialize", "offset": [6564, 6580], "op": "DUP12", "path": "5"}, "3103": {"fn": "MerkleResistor.initialize", "offset": [6582, 6598], "op": "DUP12", "path": "5"}, "3104": {"fn": "MerkleResistor.initialize", "offset": [6516, 6537], "op": "PUSH2", "path": "5", "value": "0x53C"}, "3107": {"fn": "MerkleResistor.initialize", "jump": "i", "offset": [6516, 6599], "op": "JUMP", "path": "5"}, "3108": {"fn": "MerkleResistor.initialize", "offset": [6516, 6599], "op": "JUMPDEST", "path": "5"}, "3109": {"fn": "MerkleResistor.initialize", "offset": [6447, 6599], "op": "SWAP4", "path": "5"}, "3110": {"fn": "MerkleResistor.initialize", "offset": [6447, 6599], "op": "POP", "path": "5"}, "3111": {"fn": "MerkleResistor.initialize", "offset": [6447, 6599], "op": "SWAP4", "path": "5"}, "3112": {"fn": "MerkleResistor.initialize", "offset": [6447, 6599], "op": "POP", "path": "5"}, "3113": {"fn": "MerkleResistor.initialize", "offset": [6447, 6599], "op": "SWAP4", "path": "5"}, "3114": {"fn": "MerkleResistor.initialize", "offset": [6447, 6599], "op": "POP", "path": "5"}, "3115": {"fn": "MerkleResistor.initialize", "offset": [6447, 6599], "op": "SWAP4", "path": "5"}, "3116": {"fn": "MerkleResistor.initialize", "offset": [6447, 6599], "op": "POP", "path": "5"}, "3117": {"branch": 41, "fn": "MerkleResistor.initialize", "offset": [6617, 6622], "op": "DUP4", "path": "5", "statement": 25}, "3118": {"fn": "MerkleResistor.initialize", "offset": [6609, 6651], "op": "PUSH2", "path": "5", "value": "0xC79"}, "3121": {"branch": 41, "fn": "MerkleResistor.initialize", "offset": [6609, 6651], "op": "JUMPI", "path": "5"}, "3122": {"fn": "MerkleResistor.initialize", "offset": [6609, 6651], "op": "PUSH1", "path": "5", "value": "0x40"}, "3124": {"fn": "MerkleResistor.initialize", "offset": [6609, 6651], "op": "MLOAD", "path": "5"}, "3125": {"op": "PUSH3", "value": "0x461BCD"}, "3129": {"op": "PUSH1", "value": "0xE5"}, "3131": {"op": "SHL"}, "3132": {"fn": "MerkleResistor.initialize", "offset": [6609, 6651], "op": "DUP2", "path": "5"}, "3133": {"fn": "MerkleResistor.initialize", "offset": [6609, 6651], "op": "MSTORE", "path": "5"}, "3134": {"op": "PUSH1", "value": "0x20"}, "3136": {"fn": "MerkleResistor.initialize", "offset": [6609, 6651], "op": "PUSH1", "path": "5", "value": "0x4"}, "3138": {"fn": "MerkleResistor.initialize", "offset": [6609, 6651], "op": "DUP3", "path": "5"}, "3139": {"fn": "MerkleResistor.initialize", "offset": [6609, 6651], "op": "ADD", "path": "5"}, "3140": {"op": "MSTORE"}, "3141": {"op": "PUSH1", "value": "0x18"}, "3143": {"op": "PUSH1", "value": "0x24"}, "3145": {"op": "DUP3"}, "3146": {"op": "ADD"}, "3147": {"op": "MSTORE"}, "3148": {"op": "PUSH32", "value": "0x496E76616C69642076657374696E67207363686564756C650000000000000000"}, "3181": {"op": "PUSH1", "value": "0x44"}, "3183": {"op": "DUP3"}, "3184": {"op": "ADD"}, "3185": {"op": "MSTORE"}, "3186": {"op": "PUSH1", "value": "0x64"}, "3188": {"op": "ADD"}, "3189": {"fn": "MerkleResistor.initialize", "offset": [6609, 6651], "op": "PUSH2", "path": "5", "value": "0x318"}, "3192": {"op": "JUMP"}, "3193": {"fn": "MerkleResistor.initialize", "offset": [6609, 6651], "op": "JUMPDEST", "path": "5"}, "3194": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "PUSH1", "path": "5", "statement": 26, "value": "0x40"}, "3196": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "MLOAD", "path": "5"}, "3197": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "DUP1", "path": "5"}, "3198": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "PUSH1", "path": "5", "value": "0xC0"}, "3200": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "ADD", "path": "5"}, "3201": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "PUSH1", "path": "5", "value": "0x40"}, "3203": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "MSTORE", "path": "5"}, "3204": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "DUP1", "path": "5"}, "3205": {"fn": "MerkleResistor.initialize", "offset": [6903, 6913], "op": "DUP5", "path": "5"}, "3206": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "DUP2", "path": "5"}, "3207": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "MSTORE", "path": "5"}, "3208": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "PUSH1", "path": "5", "value": "0x20"}, "3210": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "ADD", "path": "5"}, "3211": {"fn": "MerkleResistor.initialize", "offset": [6979, 6989], "op": "DUP5", "path": "5"}, "3212": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "DUP2", "path": "5"}, "3213": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "MSTORE", "path": "5"}, "3214": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "PUSH1", "path": "5", "value": "0x20"}, "3216": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "ADD", "path": "5"}, "3217": {"fn": "MerkleResistor.initialize", "offset": [7025, 7034], "op": "DUP3", "path": "5"}, "3218": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "DUP2", "path": "5"}, "3219": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "MSTORE", "path": "5"}, "3220": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "PUSH1", "path": "5", "value": "0x20"}, "3222": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "ADD", "path": "5"}, "3223": {"fn": "MerkleResistor.initialize", "offset": [7131, 7142], "op": "DUP12", "path": "5"}, "3224": {"fn": "MerkleResistor.initialize", "offset": [7113, 7128], "op": "TIMESTAMP", "path": "5"}, "3225": {"fn": "MerkleResistor.initialize", "offset": [7113, 7142], "op": "PUSH2", "path": "5", "value": "0xCA2"}, "3228": {"fn": "MerkleResistor.initialize", "offset": [7113, 7142], "op": "SWAP2", "path": "5"}, "3229": {"fn": "MerkleResistor.initialize", "offset": [7113, 7142], "op": "SWAP1", "path": "5"}, "3230": {"fn": "MerkleResistor.initialize", "offset": [7113, 7142], "op": "PUSH2", "path": "5", "value": "0x101C"}, "3233": {"fn": "MerkleResistor.initialize", "jump": "i", "offset": [7113, 7142], "op": "JUMP", "path": "5"}, "3234": {"fn": "MerkleResistor.initialize", "offset": [7113, 7142], "op": "JUMPDEST", "path": "5"}, "3235": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "DUP2", "path": "5"}, "3236": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "MSTORE", "path": "5"}, "3237": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "PUSH1", "path": "5", "value": "0x20"}, "3239": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "ADD", "path": "5"}, "3240": {"fn": "MerkleResistor.initialize", "offset": [7200, 7214], "op": "DUP4", "path": "5"}, "3241": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "DUP2", "path": "5"}, "3242": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "MSTORE", "path": "5"}, "3243": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "PUSH1", "path": "5", "value": "0x20"}, "3245": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "ADD", "path": "5"}, "3246": {"fn": "MerkleResistor.initialize", "offset": [7268, 7277], "op": "DUP3", "path": "5"}, "3247": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "DUP2", "path": "5"}, "3248": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "MSTORE", "path": "5"}, "3249": {"fn": "MerkleResistor.initialize", "offset": [6882, 7385], "op": "POP", "path": "5"}, "3250": {"fn": "MerkleResistor.initialize", "offset": [6845, 6853], "op": "PUSH1", "path": "5", "value": "0x3"}, "3252": {"fn": "MerkleResistor.initialize", "offset": [6845, 6866], "op": "PUSH1", "path": "5", "value": "0x0"}, "3254": {"fn": "MerkleResistor.initialize", "offset": [6854, 6865], "op": "DUP14", "path": "5"}, "3255": {"op": "PUSH1", "value": "0x1"}, "3257": {"op": "PUSH1", "value": "0x1"}, "3259": {"op": "PUSH1", "value": "0xA0"}, "3261": {"op": "SHL"}, "3262": {"op": "SUB"}, "3263": {"fn": "MerkleResistor.initialize", "offset": [6845, 6866], "op": "AND", "path": "5"}, "3264": {"op": "PUSH1", "value": "0x1"}, "3266": {"op": "PUSH1", "value": "0x1"}, "3268": {"op": "PUSH1", "value": "0xA0"}, "3270": {"op": "SHL"}, "3271": {"op": "SUB"}, "3272": {"fn": "MerkleResistor.initialize", "offset": [6845, 6866], "op": "AND", "path": "5"}, "3273": {"fn": "MerkleResistor.initialize", "offset": [6845, 6866], "op": "DUP2", "path": "5"}, "3274": {"fn": "MerkleResistor.initialize", "offset": [6845, 6866], "op": "MSTORE", "path": "5"}, "3275": {"fn": "MerkleResistor.initialize", "offset": [6845, 6866], "op": "PUSH1", "path": "5", "value": "0x20"}, "3277": {"fn": "MerkleResistor.initialize", "offset": [6845, 6866], "op": "ADD", "path": "5"}, "3278": {"fn": "MerkleResistor.initialize", "offset": [6845, 6866], "op": "SWAP1", "path": "5"}, "3279": {"fn": "MerkleResistor.initialize", "offset": [6845, 6866], "op": "DUP2", "path": "5"}, "3280": {"fn": "MerkleResistor.initialize", "offset": [6845, 6866], "op": "MSTORE", "path": "5"}, "3281": {"fn": "MerkleResistor.initialize", "offset": [6845, 6866], "op": "PUSH1", "path": "5", "value": "0x20"}, "3283": {"fn": "MerkleResistor.initialize", "offset": [6845, 6866], "op": "ADD", "path": "5"}, "3284": {"fn": "MerkleResistor.initialize", "offset": [6845, 6866], "op": "PUSH1", "path": "5", "value": "0x0"}, "3286": {"fn": "MerkleResistor.initialize", "offset": [6845, 6866], "op": "KECCAK256", "path": "5"}, "3287": {"fn": "MerkleResistor.initialize", "offset": [6845, 6879], "op": "PUSH1", "path": "5", "value": "0x0"}, "3289": {"fn": "MerkleResistor.initialize", "offset": [6867, 6878], "op": "DUP15", "path": "5"}, "3290": {"fn": "MerkleResistor.initialize", "offset": [6845, 6879], "op": "DUP2", "path": "5"}, "3291": {"fn": "MerkleResistor.initialize", "offset": [6845, 6879], "op": "MSTORE", "path": "5"}, "3292": {"fn": "MerkleResistor.initialize", "offset": [6845, 6879], "op": "PUSH1", "path": "5", "value": "0x20"}, "3294": {"fn": "MerkleResistor.initialize", "offset": [6845, 6879], "op": "ADD", "path": "5"}, "3295": {"fn": "MerkleResistor.initialize", "offset": [6845, 6879], "op": "SWAP1", "path": "5"}, "3296": {"fn": "MerkleResistor.initialize", "offset": [6845, 6879], "op": "DUP2", "path": "5"}, "3297": {"fn": "MerkleResistor.initialize", "offset": [6845, 6879], "op": "MSTORE", "path": "5"}, "3298": {"fn": "MerkleResistor.initialize", "offset": [6845, 6879], "op": "PUSH1", "path": "5", "value": "0x20"}, "3300": {"fn": "MerkleResistor.initialize", "offset": [6845, 6879], "op": "ADD", "path": "5"}, "3301": {"fn": "MerkleResistor.initialize", "offset": [6845, 6879], "op": "PUSH1", "path": "5", "value": "0x0"}, "3303": {"fn": "MerkleResistor.initialize", "offset": [6845, 6879], "op": "KECCAK256", "path": "5"}, "3304": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "PUSH1", "path": "5", "value": "0x0"}, "3306": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "DUP3", "path": "5"}, "3307": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "ADD", "path": "5"}, "3308": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "MLOAD", "path": "5"}, "3309": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "DUP2", "path": "5"}, "3310": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "PUSH1", "path": "5", "value": "0x0"}, "3312": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "ADD", "path": "5"}, "3313": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "SSTORE", "path": "5"}, "3314": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "PUSH1", "path": "5", "value": "0x20"}, "3316": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "DUP3", "path": "5"}, "3317": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "ADD", "path": "5"}, "3318": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "MLOAD", "path": "5"}, "3319": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "DUP2", "path": "5"}, "3320": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "PUSH1", "path": "5", "value": "0x1"}, "3322": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "ADD", "path": "5"}, "3323": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "SSTORE", "path": "5"}, "3324": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "PUSH1", "path": "5", "value": "0x40"}, "3326": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "DUP3", "path": "5"}, "3327": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "ADD", "path": "5"}, "3328": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "MLOAD", "path": "5"}, "3329": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "DUP2", "path": "5"}, "3330": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "PUSH1", "path": "5", "value": "0x2"}, "3332": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "ADD", "path": "5"}, "3333": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "SSTORE", "path": "5"}, "3334": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "PUSH1", "path": "5", "value": "0x60"}, "3336": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "DUP3", "path": "5"}, "3337": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "ADD", "path": "5"}, "3338": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "MLOAD", "path": "5"}, "3339": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "DUP2", "path": "5"}, "3340": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "PUSH1", "path": "5", "value": "0x3"}, "3342": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "ADD", "path": "5"}, "3343": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "SSTORE", "path": "5"}, "3344": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "PUSH1", "path": "5", "value": "0x80"}, "3346": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "DUP3", "path": "5"}, "3347": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "ADD", "path": "5"}, "3348": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "MLOAD", "path": "5"}, "3349": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "DUP2", "path": "5"}, "3350": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "PUSH1", "path": "5", "value": "0x4"}, "3352": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "ADD", "path": "5"}, "3353": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "SSTORE", "path": "5"}, "3354": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "PUSH1", "path": "5", "value": "0xA0"}, "3356": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "DUP3", "path": "5"}, "3357": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "ADD", "path": "5"}, "3358": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "MLOAD", "path": "5"}, "3359": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "DUP2", "path": "5"}, "3360": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "PUSH1", "path": "5", "value": "0x5"}, "3362": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "ADD", "path": "5"}, "3363": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "SSTORE", "path": "5"}, "3364": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "SWAP1", "path": "5"}, "3365": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "POP", "path": "5"}, "3366": {"fn": "MerkleResistor.initialize", "offset": [6845, 7385], "op": "POP", "path": "5"}, "3367": {"fn": "MerkleResistor.initialize", "offset": [7395, 7429], "op": "PUSH2", "path": "5", "statement": 27, "value": "0xD30"}, "3370": {"fn": "MerkleResistor.initialize", "offset": [7404, 7415], "op": "DUP13", "path": "5"}, "3371": {"fn": "MerkleResistor.initialize", "offset": [7417, 7428], "op": "DUP13", "path": "5"}, "3372": {"fn": "MerkleResistor.initialize", "offset": [7395, 7403], "op": "PUSH2", "path": "5", "value": "0x299"}, "3375": {"fn": "MerkleResistor.initialize", "jump": "i", "offset": [7395, 7429], "op": "JUMP", "path": "5"}, "3376": {"fn": "MerkleResistor.initialize", "offset": [7395, 7429], "op": "JUMPDEST", "path": "5"}, "3377": {"fn": "MerkleResistor.initialize", "offset": [5606, 7436], "op": "POP", "path": "5"}, "3378": {"fn": "MerkleResistor.initialize", "offset": [5606, 7436], "op": "POP", "path": "5"}, "3379": {"fn": "MerkleResistor.initialize", "offset": [5606, 7436], "op": "POP", "path": "5"}, "3380": {"fn": "MerkleResistor.initialize", "offset": [5606, 7436], "op": "POP", "path": "5"}, "3381": {"fn": "MerkleResistor.initialize", "offset": [5606, 7436], "op": "POP", "path": "5"}, "3382": {"fn": "MerkleResistor.initialize", "offset": [5606, 7436], "op": "POP", "path": "5"}, "3383": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "POP", "path": "5"}, "3384": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "POP", "path": "5"}, "3385": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "POP", "path": "5"}, "3386": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "POP", "path": "5"}, "3387": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "POP", "path": "5"}, "3388": {"fn": "MerkleResistor.initialize", "offset": [5450, 7436], "op": "POP", "path": "5"}, "3389": {"fn": "MerkleResistor.initialize", "jump": "o", "offset": [5450, 7436], "op": "JUMP", "path": "5"}, "3390": {"op": "JUMPDEST"}, "3391": {"op": "DUP1"}, "3392": {"op": "CALLDATALOAD"}, "3393": {"op": "PUSH1", "value": "0x1"}, "3395": {"op": "PUSH1", "value": "0x1"}, "3397": {"op": "PUSH1", "value": "0xA0"}, "3399": {"op": "SHL"}, "3400": {"op": "SUB"}, "3401": {"op": "DUP2"}, "3402": {"op": "AND"}, "3403": {"op": "DUP2"}, "3404": {"op": "EQ"}, "3405": {"op": "PUSH2", "value": "0xD55"}, "3408": {"op": "JUMPI"}, "3409": {"op": "PUSH1", "value": "0x0"}, "3411": {"op": "DUP1"}, "3412": {"op": "REVERT"}, "3413": {"op": "JUMPDEST"}, "3414": {"op": "SWAP2"}, "3415": {"op": "SWAP1"}, "3416": {"op": "POP"}, "3417": {"jump": "o", "op": "JUMP"}, "3418": {"op": "JUMPDEST"}, "3419": {"op": "PUSH1", "value": "0x0"}, "3421": {"op": "DUP1"}, "3422": {"op": "PUSH1", "value": "0x40"}, "3424": {"op": "DUP4"}, "3425": {"op": "DUP6"}, "3426": {"op": "SUB"}, "3427": {"op": "SLT"}, "3428": {"op": "ISZERO"}, "3429": {"op": "PUSH2", "value": "0xD6D"}, "3432": {"op": "JUMPI"}, "3433": {"op": "PUSH1", "value": "0x0"}, "3435": {"op": "DUP1"}, "3436": {"op": "REVERT"}, "3437": {"op": "JUMPDEST"}, "3438": {"op": "DUP3"}, "3439": {"op": "CALLDATALOAD"}, "3440": {"op": "SWAP2"}, "3441": {"op": "POP"}, "3442": {"op": "PUSH2", "value": "0xD7D"}, "3445": {"op": "PUSH1", "value": "0x20"}, "3447": {"op": "DUP5"}, "3448": {"op": "ADD"}, "3449": {"op": "PUSH2", "value": "0xD3E"}, "3452": {"jump": "i", "op": "JUMP"}, "3453": {"op": "JUMPDEST"}, "3454": {"op": "SWAP1"}, "3455": {"op": "POP"}, "3456": {"op": "SWAP3"}, "3457": {"op": "POP"}, "3458": {"op": "SWAP3"}, "3459": {"op": "SWAP1"}, "3460": {"op": "POP"}, "3461": {"jump": "o", "op": "JUMP"}, "3462": {"op": "JUMPDEST"}, "3463": {"op": "PUSH1", "value": "0x0"}, "3465": {"op": "DUP1"}, "3466": {"op": "PUSH1", "value": "0x0"}, "3468": {"op": "DUP1"}, "3469": {"op": "PUSH1", "value": "0x80"}, "3471": {"op": "DUP6"}, "3472": {"op": "DUP8"}, "3473": {"op": "SUB"}, "3474": {"op": "SLT"}, "3475": {"op": "ISZERO"}, "3476": {"op": "PUSH2", "value": "0xD9C"}, "3479": {"op": "JUMPI"}, "3480": {"op": "PUSH1", "value": "0x0"}, "3482": {"op": "DUP1"}, "3483": {"op": "REVERT"}, "3484": {"op": "JUMPDEST"}, "3485": {"op": "POP"}, "3486": {"op": "POP"}, "3487": {"op": "DUP3"}, "3488": {"op": "CALLDATALOAD"}, "3489": {"op": "SWAP5"}, "3490": {"op": "PUSH1", "value": "0x20"}, "3492": {"op": "DUP5"}, "3493": {"op": "ADD"}, "3494": {"op": "CALLDATALOAD"}, "3495": {"op": "SWAP5"}, "3496": {"op": "POP"}, "3497": {"op": "PUSH1", "value": "0x40"}, "3499": {"op": "DUP5"}, "3500": {"op": "ADD"}, "3501": {"op": "CALLDATALOAD"}, "3502": {"op": "SWAP4"}, "3503": {"op": "PUSH1", "value": "0x60"}, "3505": {"op": "ADD"}, "3506": {"op": "CALLDATALOAD"}, "3507": {"op": "SWAP3"}, "3508": {"op": "POP"}, "3509": {"op": "SWAP1"}, "3510": {"op": "POP"}, "3511": {"jump": "o", "op": "JUMP"}, "3512": {"op": "JUMPDEST"}, "3513": {"op": "PUSH1", "value": "0x0"}, "3515": {"op": "PUSH1", "value": "0x20"}, "3517": {"op": "DUP3"}, "3518": {"op": "DUP5"}, "3519": {"op": "SUB"}, "3520": {"op": "SLT"}, "3521": {"op": "ISZERO"}, "3522": {"op": "PUSH2", "value": "0xDCA"}, "3525": {"op": "JUMPI"}, "3526": {"op": "PUSH1", "value": "0x0"}, "3528": {"op": "DUP1"}, "3529": {"op": "REVERT"}, "3530": {"op": "JUMPDEST"}, "3531": {"op": "POP"}, "3532": {"op": "CALLDATALOAD"}, "3533": {"op": "SWAP2"}, "3534": {"op": "SWAP1"}, "3535": {"op": "POP"}, "3536": {"jump": "o", "op": "JUMP"}, "3537": {"op": "JUMPDEST"}, "3538": {"op": "PUSH1", "value": "0x0"}, "3540": {"op": "DUP1"}, "3541": {"op": "PUSH1", "value": "0x40"}, "3543": {"op": "DUP4"}, "3544": {"op": "DUP6"}, "3545": {"op": "SUB"}, "3546": {"op": "SLT"}, "3547": {"op": "ISZERO"}, "3548": {"op": "PUSH2", "value": "0xDE4"}, "3551": {"op": "JUMPI"}, "3552": {"op": "PUSH1", "value": "0x0"}, "3554": {"op": "DUP1"}, "3555": {"op": "REVERT"}, "3556": {"op": "JUMPDEST"}, "3557": {"op": "PUSH2", "value": "0xDED"}, "3560": {"op": "DUP4"}, "3561": {"op": "PUSH2", "value": "0xD3E"}, "3564": {"jump": "i", "op": "JUMP"}, "3565": {"op": "JUMPDEST"}, "3566": {"op": "SWAP5"}, "3567": {"op": "PUSH1", "value": "0x20"}, "3569": {"op": "SWAP4"}, "3570": {"op": "SWAP1"}, "3571": {"op": "SWAP4"}, "3572": {"op": "ADD"}, "3573": {"op": "CALLDATALOAD"}, "3574": {"op": "SWAP4"}, "3575": {"op": "POP"}, "3576": {"op": "POP"}, "3577": {"op": "POP"}, "3578": {"jump": "o", "op": "JUMP"}, "3579": {"op": "JUMPDEST"}, "3580": {"op": "PUSH1", "value": "0x0"}, "3582": {"op": "DUP1"}, "3583": {"op": "PUSH1", "value": "0x0"}, "3585": {"op": "DUP1"}, "3586": {"op": "PUSH1", "value": "0x0"}, "3588": {"op": "DUP1"}, "3589": {"op": "PUSH1", "value": "0x0"}, "3591": {"op": "PUSH1", "value": "0xE0"}, "3593": {"op": "DUP9"}, "3594": {"op": "DUP11"}, "3595": {"op": "SUB"}, "3596": {"op": "SLT"}, "3597": {"op": "ISZERO"}, "3598": {"op": "PUSH2", "value": "0xE16"}, "3601": {"op": "JUMPI"}, "3602": {"op": "PUSH1", "value": "0x0"}, "3604": {"op": "DUP1"}, "3605": {"op": "REVERT"}, "3606": {"op": "JUMPDEST"}, "3607": {"op": "DUP8"}, "3608": {"op": "CALLDATALOAD"}, "3609": {"op": "SWAP7"}, "3610": {"op": "POP"}, "3611": {"op": "PUSH1", "value": "0x20"}, "3613": {"op": "DUP9"}, "3614": {"op": "ADD"}, "3615": {"op": "CALLDATALOAD"}, "3616": {"op": "SWAP6"}, "3617": {"op": "POP"}, "3618": {"op": "PUSH1", "value": "0x40"}, "3620": {"op": "DUP9"}, "3621": {"op": "ADD"}, "3622": {"op": "CALLDATALOAD"}, "3623": {"op": "SWAP5"}, "3624": {"op": "POP"}, "3625": {"op": "PUSH1", "value": "0x60"}, "3627": {"op": "DUP9"}, "3628": {"op": "ADD"}, "3629": {"op": "CALLDATALOAD"}, "3630": {"op": "SWAP4"}, "3631": {"op": "POP"}, "3632": {"op": "PUSH1", "value": "0x80"}, "3634": {"op": "DUP9"}, "3635": {"op": "ADD"}, "3636": {"op": "CALLDATALOAD"}, "3637": {"op": "SWAP3"}, "3638": {"op": "POP"}, "3639": {"op": "PUSH2", "value": "0xE42"}, "3642": {"op": "PUSH1", "value": "0xA0"}, "3644": {"op": "DUP10"}, "3645": {"op": "ADD"}, "3646": {"op": "PUSH2", "value": "0xD3E"}, "3649": {"jump": "i", "op": "JUMP"}, "3650": {"op": "JUMPDEST"}, "3651": {"op": "SWAP2"}, "3652": {"op": "POP"}, "3653": {"op": "PUSH1", "value": "0xC0"}, "3655": {"op": "DUP9"}, "3656": {"op": "ADD"}, "3657": {"op": "CALLDATALOAD"}, "3658": {"op": "SWAP1"}, "3659": {"op": "POP"}, "3660": {"op": "SWAP3"}, "3661": {"op": "SWAP6"}, "3662": {"op": "SWAP9"}, "3663": {"op": "SWAP2"}, "3664": {"op": "SWAP5"}, "3665": {"op": "SWAP8"}, "3666": {"op": "POP"}, "3667": {"op": "SWAP3"}, "3668": {"op": "SWAP6"}, "3669": {"op": "POP"}, "3670": {"jump": "o", "op": "JUMP"}, "3671": {"op": "JUMPDEST"}, "3672": {"op": "PUSH1", "value": "0x0"}, "3674": {"op": "DUP1"}, "3675": {"op": "PUSH1", "value": "0x40"}, "3677": {"op": "DUP4"}, "3678": {"op": "DUP6"}, "3679": {"op": "SUB"}, "3680": {"op": "SLT"}, "3681": {"op": "ISZERO"}, "3682": {"op": "PUSH2", "value": "0xE6A"}, "3685": {"op": "JUMPI"}, "3686": {"op": "PUSH1", "value": "0x0"}, "3688": {"op": "DUP1"}, "3689": {"op": "REVERT"}, "3690": {"op": "JUMPDEST"}, "3691": {"op": "POP"}, "3692": {"op": "POP"}, "3693": {"op": "DUP1"}, "3694": {"op": "CALLDATALOAD"}, "3695": {"op": "SWAP3"}, "3696": {"op": "PUSH1", "value": "0x20"}, "3698": {"op": "SWAP1"}, "3699": {"op": "SWAP2"}, "3700": {"op": "ADD"}, "3701": {"op": "CALLDATALOAD"}, "3702": {"op": "SWAP2"}, "3703": {"op": "POP"}, "3704": {"jump": "o", "op": "JUMP"}, "3705": {"op": "JUMPDEST"}, "3706": {"op": "PUSH4", "value": "0x4E487B71"}, "3711": {"op": "PUSH1", "value": "0xE0"}, "3713": {"op": "SHL"}, "3714": {"op": "PUSH1", "value": "0x0"}, "3716": {"op": "MSTORE"}, "3717": {"op": "PUSH1", "value": "0x41"}, "3719": {"op": "PUSH1", "value": "0x4"}, "3721": {"op": "MSTORE"}, "3722": {"op": "PUSH1", "value": "0x24"}, "3724": {"op": "PUSH1", "value": "0x0"}, "3726": {"op": "REVERT"}, "3727": {"op": "JUMPDEST"}, "3728": {"op": "PUSH1", "value": "0x0"}, "3730": {"op": "DUP1"}, "3731": {"op": "PUSH1", "value": "0x0"}, "3733": {"op": "DUP1"}, "3734": {"op": "PUSH1", "value": "0x0"}, "3736": {"op": "DUP1"}, "3737": {"op": "PUSH1", "value": "0xC0"}, "3739": {"op": "DUP8"}, "3740": {"op": "DUP10"}, "3741": {"op": "SUB"}, "3742": {"op": "SLT"}, "3743": {"op": "ISZERO"}, "3744": {"op": "PUSH2", "value": "0xEA8"}, "3747": {"op": "JUMPI"}, "3748": {"op": "PUSH1", "value": "0x0"}, "3750": {"op": "DUP1"}, "3751": {"op": "REVERT"}, "3752": {"op": "JUMPDEST"}, "3753": {"op": "DUP7"}, "3754": {"op": "CALLDATALOAD"}, "3755": {"op": "SWAP6"}, "3756": {"op": "POP"}, "3757": {"op": "PUSH1", "value": "0x20"}, "3759": {"op": "PUSH2", "value": "0xEB9"}, "3762": {"op": "DUP2"}, "3763": {"op": "DUP10"}, "3764": {"op": "ADD"}, "3765": {"op": "PUSH2", "value": "0xD3E"}, "3768": {"jump": "i", "op": "JUMP"}, "3769": {"op": "JUMPDEST"}, "3770": {"op": "SWAP6"}, "3771": {"op": "POP"}, "3772": {"op": "PUSH1", "value": "0x40"}, "3774": {"op": "DUP9"}, "3775": {"op": "ADD"}, "3776": {"op": "CALLDATALOAD"}, "3777": {"op": "SWAP5"}, "3778": {"op": "POP"}, "3779": {"op": "PUSH1", "value": "0x60"}, "3781": {"op": "DUP9"}, "3782": {"op": "ADD"}, "3783": {"op": "CALLDATALOAD"}, "3784": {"op": "SWAP4"}, "3785": {"op": "POP"}, "3786": {"op": "PUSH1", "value": "0x80"}, "3788": {"op": "DUP9"}, "3789": {"op": "ADD"}, "3790": {"op": "CALLDATALOAD"}, "3791": {"op": "SWAP3"}, "3792": {"op": "POP"}, "3793": {"op": "PUSH1", "value": "0xA0"}, "3795": {"op": "DUP9"}, "3796": {"op": "ADD"}, "3797": {"op": "CALLDATALOAD"}, "3798": {"op": "PUSH8", "value": "0xFFFFFFFFFFFFFFFF"}, "3807": {"op": "DUP1"}, "3808": {"op": "DUP3"}, "3809": {"op": "GT"}, "3810": {"op": "ISZERO"}, "3811": {"op": "PUSH2", "value": "0xEEB"}, "3814": {"op": "JUMPI"}, "3815": {"op": "PUSH1", "value": "0x0"}, "3817": {"op": "DUP1"}, "3818": {"op": "REVERT"}, "3819": {"op": "JUMPDEST"}, "3820": {"op": "DUP2"}, "3821": {"op": "DUP11"}, "3822": {"op": "ADD"}, "3823": {"op": "SWAP2"}, "3824": {"op": "POP"}, "3825": {"op": "DUP11"}, "3826": {"op": "PUSH1", "value": "0x1F"}, "3828": {"op": "DUP4"}, "3829": {"op": "ADD"}, "3830": {"op": "SLT"}, "3831": {"op": "PUSH2", "value": "0xEFF"}, "3834": {"op": "JUMPI"}, "3835": {"op": "PUSH1", "value": "0x0"}, "3837": {"op": "DUP1"}, "3838": {"op": "REVERT"}, "3839": {"op": "JUMPDEST"}, "3840": {"op": "DUP2"}, "3841": {"op": "CALLDATALOAD"}, "3842": {"op": "DUP2"}, "3843": {"op": "DUP2"}, "3844": {"op": "GT"}, "3845": {"op": "ISZERO"}, "3846": {"op": "PUSH2", "value": "0xF11"}, "3849": {"op": "JUMPI"}, "3850": {"op": "PUSH2", "value": "0xF11"}, "3853": {"op": "PUSH2", "value": "0xE79"}, "3856": {"jump": "i", "op": "JUMP"}, "3857": {"op": "JUMPDEST"}, "3858": {"op": "DUP1"}, "3859": {"op": "PUSH1", "value": "0x5"}, "3861": {"op": "SHL"}, "3862": {"op": "PUSH1", "value": "0x40"}, "3864": {"op": "MLOAD"}, "3865": {"op": "PUSH1", "value": "0x1F"}, "3867": {"op": "NOT"}, "3868": {"op": "PUSH1", "value": "0x3F"}, "3870": {"op": "DUP4"}, "3871": {"op": "ADD"}, "3872": {"op": "AND"}, "3873": {"op": "DUP2"}, "3874": {"op": "ADD"}, "3875": {"op": "DUP2"}, "3876": {"op": "DUP2"}, "3877": {"op": "LT"}, "3878": {"op": "DUP6"}, "3879": {"op": "DUP3"}, "3880": {"op": "GT"}, "3881": {"op": "OR"}, "3882": {"op": "ISZERO"}, "3883": {"op": "PUSH2", "value": "0xF36"}, "3886": {"op": "JUMPI"}, "3887": {"op": "PUSH2", "value": "0xF36"}, "3890": {"op": "PUSH2", "value": "0xE79"}, "3893": {"jump": "i", "op": "JUMP"}, "3894": {"op": "JUMPDEST"}, "3895": {"op": "PUSH1", "value": "0x40"}, "3897": {"op": "MSTORE"}, "3898": {"op": "SWAP2"}, "3899": {"op": "DUP3"}, "3900": {"op": "MSTORE"}, "3901": {"op": "DUP5"}, "3902": {"op": "DUP3"}, "3903": {"op": "ADD"}, "3904": {"op": "SWAP3"}, "3905": {"op": "POP"}, "3906": {"op": "DUP4"}, "3907": {"op": "DUP2"}, "3908": {"op": "ADD"}, "3909": {"op": "DUP6"}, "3910": {"op": "ADD"}, "3911": {"op": "SWAP2"}, "3912": {"op": "DUP14"}, "3913": {"op": "DUP4"}, "3914": {"op": "GT"}, "3915": {"op": "ISZERO"}, "3916": {"op": "PUSH2", "value": "0xF54"}, "3919": {"op": "JUMPI"}, "3920": {"op": "PUSH1", "value": "0x0"}, "3922": {"op": "DUP1"}, "3923": {"op": "REVERT"}, "3924": {"op": "JUMPDEST"}, "3925": {"op": "SWAP4"}, "3926": {"op": "DUP6"}, "3927": {"op": "ADD"}, "3928": {"op": "SWAP4"}, "3929": {"op": "JUMPDEST"}, "3930": {"op": "DUP3"}, "3931": {"op": "DUP6"}, "3932": {"op": "LT"}, "3933": {"op": "ISZERO"}, "3934": {"op": "PUSH2", "value": "0xF72"}, "3937": {"op": "JUMPI"}, "3938": {"op": "DUP5"}, "3939": {"op": "CALLDATALOAD"}, "3940": {"op": "DUP5"}, "3941": {"op": "MSTORE"}, "3942": {"op": "SWAP4"}, "3943": {"op": "DUP6"}, "3944": {"op": "ADD"}, "3945": {"op": "SWAP4"}, "3946": {"op": "SWAP3"}, "3947": {"op": "DUP6"}, "3948": {"op": "ADD"}, "3949": {"op": "SWAP3"}, "3950": {"op": "PUSH2", "value": "0xF59"}, "3953": {"op": "JUMP"}, "3954": {"op": "JUMPDEST"}, "3955": {"op": "DUP1"}, "3956": {"op": "SWAP7"}, "3957": {"op": "POP"}, "3958": {"op": "POP"}, "3959": {"op": "POP"}, "3960": {"op": "POP"}, "3961": {"op": "POP"}, "3962": {"op": "POP"}, "3963": {"op": "POP"}, "3964": {"op": "SWAP3"}, "3965": {"op": "SWAP6"}, "3966": {"op": "POP"}, "3967": {"op": "SWAP3"}, "3968": {"op": "SWAP6"}, "3969": {"op": "POP"}, "3970": {"op": "SWAP3"}, "3971": {"op": "SWAP6"}, "3972": {"jump": "o", "op": "JUMP"}, "3973": {"op": "JUMPDEST"}, "3974": {"op": "PUSH4", "value": "0x4E487B71"}, "3979": {"op": "PUSH1", "value": "0xE0"}, "3981": {"op": "SHL"}, "3982": {"op": "PUSH1", "value": "0x0"}, "3984": {"op": "MSTORE"}, "3985": {"op": "PUSH1", "value": "0x11"}, "3987": {"op": "PUSH1", "value": "0x4"}, "3989": {"op": "MSTORE"}, "3990": {"op": "PUSH1", "value": "0x24"}, "3992": {"op": "PUSH1", "value": "0x0"}, "3994": {"op": "REVERT"}, "3995": {"op": "JUMPDEST"}, "3996": {"op": "PUSH1", "value": "0x0"}, "3998": {"op": "DUP3"}, "3999": {"op": "DUP3"}, "4000": {"op": "LT"}, "4001": {"op": "ISZERO"}, "4002": {"op": "PUSH2", "value": "0xFAD"}, "4005": {"op": "JUMPI"}, "4006": {"op": "PUSH2", "value": "0xFAD"}, "4009": {"op": "PUSH2", "value": "0xF85"}, "4012": {"jump": "i", "op": "JUMP"}, "4013": {"op": "JUMPDEST"}, "4014": {"op": "POP"}, "4015": {"op": "SUB"}, "4016": {"op": "SWAP1"}, "4017": {"jump": "o", "op": "JUMP"}, "4018": {"op": "JUMPDEST"}, "4019": {"op": "PUSH1", "value": "0x0"}, "4021": {"op": "DUP2"}, "4022": {"op": "PUSH1", "value": "0x0"}, "4024": {"op": "NOT"}, "4025": {"op": "DIV"}, "4026": {"op": "DUP4"}, "4027": {"op": "GT"}, "4028": {"op": "DUP3"}, "4029": {"op": "ISZERO"}, "4030": {"op": "ISZERO"}, "4031": {"op": "AND"}, "4032": {"op": "ISZERO"}, "4033": {"op": "PUSH2", "value": "0xFCC"}, "4036": {"op": "JUMPI"}, "4037": {"op": "PUSH2", "value": "0xFCC"}, "4040": {"op": "PUSH2", "value": "0xF85"}, "4043": {"jump": "i", "op": "JUMP"}, "4044": {"op": "JUMPDEST"}, "4045": {"op": "POP"}, "4046": {"op": "MUL"}, "4047": {"op": "SWAP1"}, "4048": {"jump": "o", "op": "JUMP"}, "4049": {"op": "JUMPDEST"}, "4050": {"op": "PUSH1", "value": "0x0"}, "4052": {"op": "PUSH1", "value": "0x20"}, "4054": {"op": "DUP3"}, "4055": {"op": "DUP5"}, "4056": {"op": "SUB"}, "4057": {"op": "SLT"}, "4058": {"op": "ISZERO"}, "4059": {"op": "PUSH2", "value": "0xFE3"}, "4062": {"op": "JUMPI"}, "4063": {"op": "PUSH1", "value": "0x0"}, "4065": {"op": "DUP1"}, "4066": {"op": "REVERT"}, "4067": {"op": "JUMPDEST"}, "4068": {"op": "DUP2"}, "4069": {"op": "MLOAD"}, "4070": {"op": "DUP1"}, "4071": {"op": "ISZERO"}, "4072": {"op": "ISZERO"}, "4073": {"op": "DUP2"}, "4074": {"op": "EQ"}, "4075": {"op": "PUSH2", "value": "0xFF3"}, "4078": {"op": "JUMPI"}, "4079": {"op": "PUSH1", "value": "0x0"}, "4081": {"op": "DUP1"}, "4082": {"op": "REVERT"}, "4083": {"op": "JUMPDEST"}, "4084": {"op": "SWAP4"}, "4085": {"op": "SWAP3"}, "4086": {"op": "POP"}, "4087": {"op": "POP"}, "4088": {"op": "POP"}, "4089": {"jump": "o", "op": "JUMP"}, "4090": {"op": "JUMPDEST"}, "4091": {"op": "PUSH1", "value": "0x0"}, "4093": {"op": "DUP3"}, "4094": {"op": "PUSH2", "value": "0x1017"}, "4097": {"op": "JUMPI"}, "4098": {"op": "PUSH4", "value": "0x4E487B71"}, "4103": {"op": "PUSH1", "value": "0xE0"}, "4105": {"op": "SHL"}, "4106": {"op": "PUSH1", "value": "0x0"}, "4108": {"op": "MSTORE"}, "4109": {"op": "PUSH1", "value": "0x12"}, "4111": {"op": "PUSH1", "value": "0x4"}, "4113": {"op": "MSTORE"}, "4114": {"op": "PUSH1", "value": "0x24"}, "4116": {"op": "PUSH1", "value": "0x0"}, "4118": {"op": "REVERT"}, "4119": {"op": "JUMPDEST"}, "4120": {"op": "POP"}, "4121": {"op": "DIV"}, "4122": {"op": "SWAP1"}, "4123": {"jump": "o", "op": "JUMP"}, "4124": {"op": "JUMPDEST"}, "4125": {"op": "PUSH1", "value": "0x0"}, "4127": {"op": "DUP3"}, "4128": {"op": "NOT"}, "4129": {"op": "DUP3"}, "4130": {"op": "GT"}, "4131": {"op": "ISZERO"}, "4132": {"op": "PUSH2", "value": "0x102F"}, "4135": {"op": "JUMPI"}, "4136": {"op": "PUSH2", "value": "0x102F"}, "4139": {"op": "PUSH2", "value": "0xF85"}, "4142": {"jump": "i", "op": "JUMP"}, "4143": {"op": "JUMPDEST"}, "4144": {"op": "POP"}, "4145": {"op": "ADD"}, "4146": {"op": "SWAP1"}, "4147": {"jump": "o", "op": "JUMP"}, "4148": {"op": "JUMPDEST"}, "4149": {"op": "PUSH1", "value": "0x0"}, "4151": {"op": "PUSH1", "value": "0x0"}, "4153": {"op": "NOT"}, "4154": {"op": "DUP3"}, "4155": {"op": "EQ"}, "4156": {"op": "ISZERO"}, "4157": {"op": "PUSH2", "value": "0x1048"}, "4160": {"op": "JUMPI"}, "4161": {"op": "PUSH2", "value": "0x1048"}, "4164": {"op": "PUSH2", "value": "0xF85"}, "4167": {"jump": "i", "op": "JUMP"}, "4168": {"op": "JUMPDEST"}, "4169": {"op": "POP"}, "4170": {"op": "PUSH1", "value": "0x1"}, "4172": {"op": "ADD"}, "4173": {"op": "SWAP1"}, "4174": {"jump": "o", "op": "JUMP"}, "4175": {"op": "JUMPDEST"}, "4176": {"op": "PUSH1", "value": "0x0"}, "4178": {"op": "PUSH1", "value": "0x60"}, "4180": {"op": "DUP3"}, "4181": {"op": "ADD"}, "4182": {"op": "DUP6"}, "4183": {"op": "DUP4"}, "4184": {"op": "MSTORE"}, "4185": {"op": "PUSH1", "value": "0x20"}, "4187": {"op": "DUP6"}, "4188": {"op": "DUP2"}, "4189": {"op": "DUP6"}, "4190": {"op": "ADD"}, "4191": {"op": "MSTORE"}, "4192": {"op": "PUSH1", "value": "0x60"}, "4194": {"op": "PUSH1", "value": "0x40"}, "4196": {"op": "DUP6"}, "4197": {"op": "ADD"}, "4198": {"op": "MSTORE"}, "4199": {"op": "DUP2"}, "4200": {"op": "DUP6"}, "4201": {"op": "MLOAD"}, "4202": {"op": "DUP1"}, "4203": {"op": "DUP5"}, "4204": {"op": "MSTORE"}, "4205": {"op": "PUSH1", "value": "0x80"}, "4207": {"op": "DUP7"}, "4208": {"op": "ADD"}, "4209": {"op": "SWAP2"}, "4210": {"op": "POP"}, "4211": {"op": "DUP3"}, "4212": {"op": "DUP8"}, "4213": {"op": "ADD"}, "4214": {"op": "SWAP4"}, "4215": {"op": "POP"}, "4216": {"op": "PUSH1", "value": "0x0"}, "4218": {"op": "JUMPDEST"}, "4219": {"op": "DUP2"}, "4220": {"op": "DUP2"}, "4221": {"op": "LT"}, "4222": {"op": "ISZERO"}, "4223": {"op": "PUSH2", "value": "0x1096"}, "4226": {"op": "JUMPI"}, "4227": {"op": "DUP5"}, "4228": {"op": "MLOAD"}, "4229": {"op": "DUP4"}, "4230": {"op": "MSTORE"}, "4231": {"op": "SWAP4"}, "4232": {"op": "DUP4"}, "4233": {"op": "ADD"}, "4234": {"op": "SWAP4"}, "4235": {"op": "SWAP2"}, "4236": {"op": "DUP4"}, "4237": {"op": "ADD"}, "4238": {"op": "SWAP2"}, "4239": {"op": "PUSH1", "value": "0x1"}, "4241": {"op": "ADD"}, "4242": {"op": "PUSH2", "value": "0x107A"}, "4245": {"op": "JUMP"}, "4246": {"op": "JUMPDEST"}, "4247": {"op": "POP"}, "4248": {"op": "SWAP1"}, "4249": {"op": "SWAP9"}, "4250": {"op": "SWAP8"}, "4251": {"op": "POP"}, "4252": {"op": "POP"}, "4253": {"op": "POP"}, "4254": {"op": "POP"}, "4255": {"op": "POP"}, "4256": {"op": "POP"}, "4257": {"op": "POP"}, "4258": {"op": "POP"}, "4259": {"jump": "o", "op": "JUMP"}}, "sha1": "67ec935b89d5c114c46f82b5382f7f8bef265b90", "source": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./MerkleLib.sol\";\n\n// This contract is for user-chosen vesting schedules, within parameters selected by the tree creator\ncontract MerkleResistor {\n    using MerkleLib for bytes32;\n\n    // tree (vesting schedule) counter\n    uint public numTrees = 0;\n\n    // this represents a user chosen vesting schedule, post initiation\n    struct Tranche {\n        uint totalCoins; // total coins released after vesting complete\n        uint currentCoins; // unclaimed coins remaining in the contract, waiting to be vested\n        uint startTime; // start time of the vesting schedule\n        uint endTime;   // end time of the vesting schedule\n        uint coinsPerSecond;  // how many coins are emitted per second, this value is cached to avoid recomputing it\n        uint lastWithdrawalTime; // keep track of last time user claimed coins to compute coins owed for this withdrawal\n    }\n\n    // this represents an arbitrarily large set of token recipients with partially-initialized vesting schedules\n    struct MerkleTree {\n        bytes32 merkleRoot; // merkle root of tree whose leaves are ranges of vesting schedules for each recipient\n        bytes32 ipfsHash; // ipfs hash of the entire data set represented by the merkle root, in case our servers go down\n        uint minEndTime; // minimum length (offset, not absolute) of vesting schedule in seconds\n        uint maxEndTime; // maximum length (offset, not absolute) of vesting schedule in seconds\n        uint pctUpFront; // percent of vested coins that will be available and withdrawn upon initialization\n        address tokenAddress; // address of token to be distributed\n        uint tokenBalance; // amount of tokens allocated to this tree (this prevents trees from sharing tokens)\n    }\n\n    // initialized[recipient][treeIndex] = hasUserChosenVestingSchedule\n    // could have reused tranches (see below) for this but loading a bool is cheaper than loading an entire struct\n    // NOTE: if a user appears in the same tree multiple times, the first leaf initialized will prevent the others from initializing\n    mapping (address => mapping (uint => bool)) public initialized;\n\n    // basically an array of vesting schedules, but without annoying solidity array syntax\n    mapping (uint => MerkleTree) public merkleTrees;\n\n    // tranches[recipient][treeIndex] = chosenVestingSchedule\n    mapping (address => mapping (uint => Tranche)) public tranches;\n\n    // precision factory used to handle floating point arithmetic\n    uint constant public PRECISION = 1000000;\n\n    // every time a withdrawal occurs\n    event WithdrawalOccurred(address indexed destination, uint numTokens, uint tokensLeft, uint indexed merkleIndex);\n    // every time a tree is added\n    event MerkleTreeAdded(uint indexed index, address indexed tokenAddress, bytes32 newRoot, bytes32 ipfsHash);\n\n    // anyone can add a tree\n    function addMerkleTree(bytes32 newRoot, bytes32 ipfsHash, uint minEndTime, uint maxEndTime, uint pctUpFront, address depositToken, uint tokenBalance) public {\n        // check basic coherence of request\n        require(pctUpFront < 100, 'pctUpFront >= 100');\n        require(minEndTime < maxEndTime, 'minEndTime must be less than maxEndTime');\n\n        // prefix operator ++ increments then evaluates\n        merkleTrees[++numTrees] = MerkleTree(\n            newRoot,\n            ipfsHash,\n            minEndTime,\n            maxEndTime,\n            pctUpFront,\n            depositToken,\n            0    // tokenBalance is 0 at first because no tokens have been deposited\n        );\n\n        // pull tokens from user to fund the tree\n        // if tree is insufficiently funded, then some users may not be able to be paid out, this is the responsibility\n        // of the tree creator, if trees are not funded, then the UI will not display the tree\n        depositTokens(numTrees, tokenBalance);\n        emit MerkleTreeAdded(numTrees, depositToken, newRoot, ipfsHash);\n    }\n\n    // anyone can fund any tree\n    function depositTokens(uint treeIndex, uint value) public {\n        // storage because we edit\n        MerkleTree storage merkleTree = merkleTrees[treeIndex];\n\n        // bookkeeping to make sure trees do not share tokens\n        merkleTree.tokenBalance += value;\n\n        // do the transfer from the caller\n        // NOTE: it is possible for user to overfund the tree and there is no mechanism to reclaim excess tokens\n        // this is because there is no way for the contract to know when a tree has had all leaves claimed\n        // there is also no way for the contract to know the minimum or maximum liabilities represented by the leaves\n        // in short, there is no on-chain inspection of the leaves except at initialization time\n        // NOTE: a malicious token contract could cause merkleTree.tokenBalance to be out of sync with the token contract\n        // this is an unavoidable possibility, and it could render the tree unusable, while leaving other trees unharmed\n        require(IERC20(merkleTree.tokenAddress).transferFrom(msg.sender, address(this), value), \"ERC20 transfer failed\");\n    }\n\n    // user calls this to choose and start their vesting schedule\n    // merkle proof confirms they are passing data previously committed to by tree creator\n    // vestingTime is chosen by the user, min/max TotalPayments is committed to by the merkleRoot\n    function initialize(uint merkleIndex, address destination, uint vestingTime, uint minTotalPayments, uint maxTotalPayments, bytes32[] memory proof) external {\n        // user selects own vesting schedule, not others\n        require(msg.sender == destination, 'Can only initialize your own tranche');\n        // can only initialize once\n        require(!initialized[destination][merkleIndex], \"Already initialized\");\n        // compute merkle leaf, this is first element of proof\n        bytes32 leaf = keccak256(abi.encode(destination, minTotalPayments, maxTotalPayments));\n        // memory because we do not edit\n        MerkleTree memory tree = merkleTrees[merkleIndex];\n        // this calls into MerkleLib, super cheap ~1000 gas per proof element\n        require(tree.merkleRoot.verifyProof(leaf, proof), \"The proof could not be verified.\");\n        // mark tree as initialized, preventing re-entrance or multiple initializations\n        initialized[destination][merkleIndex] = true;\n\n        (bool valid, uint totalCoins, uint coinsPerSecond, uint startTime) = verifyVestingSchedule(merkleIndex, vestingTime, minTotalPayments, maxTotalPayments);\n        require(valid, 'Invalid vesting schedule');\n\n        // fill out the struct for the address' vesting schedule\n        // don't have to mark as storage here, it's implied (why isn't it always implied when written to? solc-devs?)\n        tranches[destination][merkleIndex] = Tranche(\n            totalCoins,    // this is just a cached number for UI, not used\n            totalCoins,    // starts out full\n            startTime,     // start time will usually be in the past, if pctUpFront > 0\n            block.timestamp + vestingTime,  // vesting starts from initialization time\n            coinsPerSecond,  // cached value to avoid recomputation\n            startTime      // this is lastWithdrawalTime, set to startTime to indicate no withdrawals have occurred yet\n        );\n        withdraw(merkleIndex, destination);\n    }\n\n    // user calls this to claim available (unclaimed, unlocked) tokens\n    // NOTE: anyone can withdraw tokens for anyone else, but they always go to intended destination\n    // msg.sender is not used in this function ;)\n    function withdraw(uint merkleIndex, address destination) public {\n        // initialize first, no operations on empty structs, I don't care if the values are \"probably zero\"\n        require(initialized[destination][merkleIndex], \"You must initialize your account first.\");\n        // storage, since we are editing\n        Tranche storage tranche = tranches[destination][merkleIndex];\n        // if it's empty, don't bother\n        require(tranche.currentCoins >  0, 'No coins left to withdraw');\n        uint currentWithdrawal = 0;\n\n        // if after vesting period ends, give them the remaining coins, also avoids dust from rounding errors\n        if (block.timestamp >= tranche.endTime) {\n            currentWithdrawal = tranche.currentCoins;\n        } else {\n            // compute allowed withdrawal\n            // secondsElapsedSinceLastWithdrawal * coinsPerSecond == coinsAccumulatedSinceLastWithdrawal\n            currentWithdrawal = (block.timestamp - tranche.lastWithdrawalTime) * tranche.coinsPerSecond;\n        }\n        // muto? servo\n        MerkleTree storage tree = merkleTrees[merkleIndex];\n\n        // update struct, modern solidity will catch underflow and prevent currentWithdrawal from exceeding currentCoins\n        // but it's computed internally anyway, not user generated\n        tranche.currentCoins -= currentWithdrawal;\n        // move the time counter up so users can't double-withdraw allocated coins\n        // this also works as a re-entrance gate, so currentWithdrawal would be 0 upon re-entrance\n        tranche.lastWithdrawalTime = block.timestamp;\n        // handle the bookkeeping so trees don't share tokens, do it before transferring to create one more re-entrance gate\n        tree.tokenBalance -= currentWithdrawal;\n\n        // transfer the tokens, brah\n        // NOTE: if this is a malicious token, what could happen?\n        // 1/ token doesn't transfer given amount to recipient, this is bad for user, but does not effect other trees\n        // 2/ token fails for some reason, again bad for user, but this does not effect other trees\n        // 3/ token re-enters this function (or other, but this is the only one that transfers tokens out)\n        // in which case, lastWithdrawalTime == block.timestamp, so currentWithdrawal == 0\n        // besides msg.sender is not used in this function, so who calls it is irrelevant...\n        require(IERC20(tree.tokenAddress).transfer(destination, currentWithdrawal), 'Token transfer failed');\n        emit WithdrawalOccurred(destination, currentWithdrawal, tranche.currentCoins, merkleIndex);\n    }\n\n    // used to determine whether the vesting schedule is legit\n    function verifyVestingSchedule(uint merkleIndex, uint vestingTime, uint minTotalPayments, uint maxTotalPayments) public view returns (bool, uint, uint, uint) {\n        // vesting schedules for non-existing trees are invalid, I don't care how much you like uninitialized structs\n        if (merkleIndex > numTrees) {\n            return (false, 0, 0, 0);\n        }\n\n        // memory not storage, since we do not edit the tree, and it's a view function anyways\n        MerkleTree memory tree = merkleTrees[merkleIndex];\n\n        // vesting time must sit within the closed interval of [minEndTime, maxEndTime]\n        if (vestingTime > tree.maxEndTime || vestingTime < tree.minEndTime) {\n            return (false, 0, 0, 0);\n        }\n\n        uint totalCoins;\n        if (vestingTime == tree.maxEndTime) {\n            // this is to prevent dust accumulation from rounding errors\n            // maxEndTime results in max payments, no further computation necessary\n            totalCoins = maxTotalPayments;\n        } else {\n            // remember grade school algebra? slope = \u0394y / \u0394x\n            // this is the slope of eligible vesting schedules. In general, 0 < m < 1,\n            // (longer vesting schedules should result in less coins per second, hence \"resistor\")\n            // so we multiply by a precision factor to reduce rounding errors\n            // y axis = total coins released after vesting completed\n            // x axis = length of vesting schedule\n            // this is the line of valid end-points for the chosen vesting schedule line, see below\n            // NOTE: this reverts if minTotalPayments > maxTotalPayments, which is a good thing\n            uint paymentSlope = (maxTotalPayments - minTotalPayments) * PRECISION / (tree.maxEndTime - tree.minEndTime);\n\n            // y = mx + b = paymentSlope * (x - x0) + y0\n            // divide by precision factor here since we have completed the rounding error sensitive operations\n            totalCoins = (paymentSlope * (vestingTime - tree.minEndTime) / PRECISION) + minTotalPayments;\n        }\n\n        // this is a different slope, the slope of their chosen vesting schedule\n        // y axis = cumulative coins emitted\n        // x axis = time elapsed\n        // NOTE: vestingTime starts from block.timestamp, so doesn't include coins already available from pctUpFront\n        // totalCoins / vestingTime is wrong, we have to multiple by the proportion of the coins that are indexed\n        // by vestingTime, which is (100 - pctUpFront) / 100\n        uint coinsPerSecond = (totalCoins * (uint(100) - tree.pctUpFront)) / (vestingTime * 100);\n\n        // vestingTime is relative to initialization point\n        // endTime = block.timestamp + vestingTime\n        // vestingLength = totalCoins / coinsPerSecond\n        uint startTime = block.timestamp + vestingTime - (totalCoins / coinsPerSecond);\n\n        return (true, totalCoins, coinsPerSecond, startTime);\n    }\n\n}\n", "sourceMap": "230:13034:5:-:0;;;356:1;333:24;;230:13034;;;;;;;;;;;;;;;;", "sourcePath": "contracts/MerkleResistor.sol", "type": "contract", "deployment": {"address": "0x980F46E10504FFd2FbC58b8B7D8606d36307351e", "chainid": "1", "blockHeight": 14660183}}